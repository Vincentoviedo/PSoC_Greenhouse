ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB79:
  26              		.file 1 "..\\..\\FreeRTOS\\tasks.c"
   1:..\..\FreeRTOS/tasks.c **** /*
   2:..\..\FreeRTOS/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:..\..\FreeRTOS/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS/tasks.c ****  *
   5:..\..\FreeRTOS/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS/tasks.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS/tasks.c ****  *
  12:..\..\FreeRTOS/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS/tasks.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS/tasks.c ****  *
  15:..\..\FreeRTOS/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS/tasks.c ****  *
  22:..\..\FreeRTOS/tasks.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS/tasks.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS/tasks.c ****  *
  25:..\..\FreeRTOS/tasks.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS/tasks.c ****  */
  27:..\..\FreeRTOS/tasks.c **** 
  28:..\..\FreeRTOS/tasks.c **** /* Standard includes. */
  29:..\..\FreeRTOS/tasks.c **** #include <stdlib.h>
  30:..\..\FreeRTOS/tasks.c **** #include <string.h>
  31:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 2


  32:..\..\FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:..\..\FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:..\..\FreeRTOS/tasks.c **** task.h is included from an application file. */
  35:..\..\FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:..\..\FreeRTOS/tasks.c **** 
  37:..\..\FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  38:..\..\FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  39:..\..\FreeRTOS/tasks.c **** #include "task.h"
  40:..\..\FreeRTOS/tasks.c **** #include "timers.h"
  41:..\..\FreeRTOS/tasks.c **** #include "stack_macros.h"
  42:..\..\FreeRTOS/tasks.c **** 
  43:..\..\FreeRTOS/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:..\..\FreeRTOS/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:..\..\FreeRTOS/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:..\..\FreeRTOS/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:..\..\FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:..\..\FreeRTOS/tasks.c **** 
  49:..\..\FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:..\..\FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  51:..\..\FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:..\..\FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:..\..\FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:..\..\FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\..\FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:..\..\FreeRTOS/tasks.c **** 	#include <stdio.h>
  57:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\..\FreeRTOS/tasks.c **** 
  59:..\..\FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:..\..\FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:..\..\FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:..\..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:..\..\FreeRTOS/tasks.c **** #else
  64:..\..\FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:..\..\FreeRTOS/tasks.c **** #endif
  66:..\..\FreeRTOS/tasks.c **** 
  67:..\..\FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:..\..\FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:..\..\FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:..\..\FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:..\..\FreeRTOS/tasks.c **** 
  72:..\..\FreeRTOS/tasks.c **** /*
  73:..\..\FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:..\..\FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:..\..\FreeRTOS/tasks.c ****  */
  76:..\..\FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:..\..\FreeRTOS/tasks.c **** 
  78:..\..\FreeRTOS/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:..\..\FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:..\..\FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:..\..\FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:..\..\FreeRTOS/tasks.c **** 
  83:..\..\FreeRTOS/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:..\..\FreeRTOS/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:..\..\FreeRTOS/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:..\..\FreeRTOS/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:..\..\FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:..\..\FreeRTOS/tasks.c **** #else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 3


  89:..\..\FreeRTOS/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:..\..\FreeRTOS/tasks.c **** #endif
  91:..\..\FreeRTOS/tasks.c **** 
  92:..\..\FreeRTOS/tasks.c **** /*
  93:..\..\FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:..\..\FreeRTOS/tasks.c ****  */
  95:..\..\FreeRTOS/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:..\..\FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:..\..\FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:..\..\FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:..\..\FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:..\..\FreeRTOS/tasks.c **** 
 101:..\..\FreeRTOS/tasks.c **** /*
 102:..\..\FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:..\..\FreeRTOS/tasks.c ****  * global, rather than file scope.
 104:..\..\FreeRTOS/tasks.c ****  */
 105:..\..\FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:..\..\FreeRTOS/tasks.c **** 	#define static
 107:..\..\FreeRTOS/tasks.c **** #endif
 108:..\..\FreeRTOS/tasks.c **** 
 109:..\..\FreeRTOS/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:..\..\FreeRTOS/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:..\..\FreeRTOS/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:..\..\FreeRTOS/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:..\..\FreeRTOS/tasks.c **** #endif
 114:..\..\FreeRTOS/tasks.c **** 
 115:..\..\FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:..\..\FreeRTOS/tasks.c **** 
 117:..\..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:..\..\FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:..\..\FreeRTOS/tasks.c **** 	microcontroller architecture. */
 120:..\..\FreeRTOS/tasks.c **** 
 121:..\..\FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:..\..\FreeRTOS/tasks.c **** 	state task. */
 123:..\..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:..\..\FreeRTOS/tasks.c **** 	{																									\
 125:..\..\FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:..\..\FreeRTOS/tasks.c **** 		{																								\
 127:..\..\FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:..\..\FreeRTOS/tasks.c **** 		}																								\
 129:..\..\FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:..\..\FreeRTOS/tasks.c **** 
 131:..\..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 132:..\..\FreeRTOS/tasks.c **** 
 133:..\..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:..\..\FreeRTOS/tasks.c **** 	{																									\
 135:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:..\..\FreeRTOS/tasks.c **** 																										\
 137:..\..\FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:..\..\FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:..\..\FreeRTOS/tasks.c **** 		{																								\
 140:..\..\FreeRTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:..\..\FreeRTOS/tasks.c **** 			--uxTopPriority;																			\
 142:..\..\FreeRTOS/tasks.c **** 		}																								\
 143:..\..\FreeRTOS/tasks.c **** 																										\
 144:..\..\FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:..\..\FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 4


 146:..\..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:..\..\FreeRTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:..\..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:..\..\FreeRTOS/tasks.c **** 
 150:..\..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 151:..\..\FreeRTOS/tasks.c **** 
 152:..\..\FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:..\..\FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:..\..\FreeRTOS/tasks.c **** 	being used. */
 155:..\..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:..\..\FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:..\..\FreeRTOS/tasks.c **** 
 158:..\..\FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:..\..\FreeRTOS/tasks.c **** 
 160:..\..\FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:..\..\FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:..\..\FreeRTOS/tasks.c **** 	architecture being used. */
 163:..\..\FreeRTOS/tasks.c **** 
 164:..\..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:..\..\FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:..\..\FreeRTOS/tasks.c **** 
 167:..\..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\..\FreeRTOS/tasks.c **** 
 169:..\..\FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:..\..\FreeRTOS/tasks.c **** 	{																								\
 171:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:..\..\FreeRTOS/tasks.c **** 																									\
 173:..\..\FreeRTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:..\..\FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:..\..\FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:..\..\FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:..\..\FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:..\..\FreeRTOS/tasks.c **** 
 179:..\..\FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 180:..\..\FreeRTOS/tasks.c **** 
 181:..\..\FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:..\..\FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:..\..\FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:..\..\FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:..\..\FreeRTOS/tasks.c **** 	{																									\
 186:..\..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:..\..\FreeRTOS/tasks.c **** 		{																								\
 188:..\..\FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:..\..\FreeRTOS/tasks.c **** 		}																								\
 190:..\..\FreeRTOS/tasks.c **** 	}
 191:..\..\FreeRTOS/tasks.c **** 
 192:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:..\..\FreeRTOS/tasks.c **** 
 194:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 195:..\..\FreeRTOS/tasks.c **** 
 196:..\..\FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:..\..\FreeRTOS/tasks.c **** count overflows. */
 198:..\..\FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:..\..\FreeRTOS/tasks.c **** {																									\
 200:..\..\FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 201:..\..\FreeRTOS/tasks.c **** 																									\
 202:..\..\FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 5


 203:..\..\FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:..\..\FreeRTOS/tasks.c **** 																									\
 205:..\..\FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:..\..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:..\..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:..\..\FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 209:..\..\FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:..\..\FreeRTOS/tasks.c **** }
 211:..\..\FreeRTOS/tasks.c **** 
 212:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 213:..\..\FreeRTOS/tasks.c **** 
 214:..\..\FreeRTOS/tasks.c **** /*
 215:..\..\FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:..\..\FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:..\..\FreeRTOS/tasks.c ****  */
 218:..\..\FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:..\..\FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:..\..\FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:..\..\FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:..\..\FreeRTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 224:..\..\FreeRTOS/tasks.c **** 
 225:..\..\FreeRTOS/tasks.c **** /*
 226:..\..\FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:..\..\FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:..\..\FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:..\..\FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:..\..\FreeRTOS/tasks.c ****  */
 231:..\..\FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:..\..\FreeRTOS/tasks.c **** 
 233:..\..\FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:..\..\FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:..\..\FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:..\..\FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:..\..\FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:..\..\FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:..\..\FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:..\..\FreeRTOS/tasks.c **** to its original value when it is released. */
 241:..\..\FreeRTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:..\..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:..\..\FreeRTOS/tasks.c **** #else
 244:..\..\FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:..\..\FreeRTOS/tasks.c **** #endif
 246:..\..\FreeRTOS/tasks.c **** 
 247:..\..\FreeRTOS/tasks.c **** /*
 248:..\..\FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:..\..\FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:..\..\FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 251:..\..\FreeRTOS/tasks.c ****  */
 252:..\..\FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:..\..\FreeRTOS/tasks.c **** {
 254:..\..\FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:..\..\FreeRTOS/tasks.c **** 
 256:..\..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:..\..\FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:..\..\FreeRTOS/tasks.c **** 	#endif
 259:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 6


 260:..\..\FreeRTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:..\..\FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:..\..\FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:..\..\FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:..\..\FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:..\..\FreeRTOS/tasks.c **** 
 266:..\..\FreeRTOS/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:..\..\FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:..\..\FreeRTOS/tasks.c **** 	#endif
 269:..\..\FreeRTOS/tasks.c **** 
 270:..\..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:..\..\FreeRTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:..\..\FreeRTOS/tasks.c **** 	#endif
 273:..\..\FreeRTOS/tasks.c **** 
 274:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:..\..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:..\..\FreeRTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:..\..\FreeRTOS/tasks.c **** 	#endif
 278:..\..\FreeRTOS/tasks.c **** 
 279:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:..\..\FreeRTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:..\..\FreeRTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:..\..\FreeRTOS/tasks.c **** 	#endif
 283:..\..\FreeRTOS/tasks.c **** 
 284:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:..\..\FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:..\..\FreeRTOS/tasks.c **** 	#endif
 287:..\..\FreeRTOS/tasks.c **** 
 288:..\..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:..\..\FreeRTOS/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:..\..\FreeRTOS/tasks.c **** 	#endif
 291:..\..\FreeRTOS/tasks.c **** 
 292:..\..\FreeRTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:..\..\FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:..\..\FreeRTOS/tasks.c **** 	#endif
 295:..\..\FreeRTOS/tasks.c **** 
 296:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:..\..\FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:..\..\FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:..\..\FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:..\..\FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:..\..\FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:..\..\FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:..\..\FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:..\..\FreeRTOS/tasks.c **** 
 305:..\..\FreeRTOS/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:..\..\FreeRTOS/tasks.c **** 		for additional information. */
 307:..\..\FreeRTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 308:..\..\FreeRTOS/tasks.c **** 	#endif
 309:..\..\FreeRTOS/tasks.c **** 
 310:..\..\FreeRTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:..\..\FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:..\..\FreeRTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:..\..\FreeRTOS/tasks.c **** 	#endif
 314:..\..\FreeRTOS/tasks.c **** 
 315:..\..\FreeRTOS/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:..\..\FreeRTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 7


 317:..\..\FreeRTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:..\..\FreeRTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:..\..\FreeRTOS/tasks.c **** 	#endif
 320:..\..\FreeRTOS/tasks.c **** 
 321:..\..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:..\..\FreeRTOS/tasks.c **** 		uint8_t ucDelayAborted;
 323:..\..\FreeRTOS/tasks.c **** 	#endif
 324:..\..\FreeRTOS/tasks.c **** 
 325:..\..\FreeRTOS/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:..\..\FreeRTOS/tasks.c **** 		int iTaskErrno;
 327:..\..\FreeRTOS/tasks.c **** 	#endif
 328:..\..\FreeRTOS/tasks.c **** 
 329:..\..\FreeRTOS/tasks.c **** } tskTCB;
 330:..\..\FreeRTOS/tasks.c **** 
 331:..\..\FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:..\..\FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:..\..\FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 334:..\..\FreeRTOS/tasks.c **** 
 335:..\..\FreeRTOS/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:..\..\FreeRTOS/tasks.c **** which static variables must be declared volatile. */
 337:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:..\..\FreeRTOS/tasks.c **** 
 339:..\..\FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:..\..\FreeRTOS/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:..\..\FreeRTOS/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:..\..\FreeRTOS/tasks.c **** the static qualifier. */
 343:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:..\..\FreeRTOS/tasks.c **** 
 350:..\..\FreeRTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:..\..\FreeRTOS/tasks.c **** 
 352:..\..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:..\..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:..\..\FreeRTOS/tasks.c **** 
 355:..\..\FreeRTOS/tasks.c **** #endif
 356:..\..\FreeRTOS/tasks.c **** 
 357:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:..\..\FreeRTOS/tasks.c **** 
 359:..\..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:..\..\FreeRTOS/tasks.c **** 
 361:..\..\FreeRTOS/tasks.c **** #endif
 362:..\..\FreeRTOS/tasks.c **** 
 363:..\..\FreeRTOS/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:..\..\FreeRTOS/tasks.c **** the errno of the currently running task. */
 365:..\..\FreeRTOS/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:..\..\FreeRTOS/tasks.c **** 	int FreeRTOS_errno = 0;
 367:..\..\FreeRTOS/tasks.c **** #endif
 368:..\..\FreeRTOS/tasks.c **** 
 369:..\..\FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 370:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 8


 374:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:..\..\FreeRTOS/tasks.c **** 
 381:..\..\FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:..\..\FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:..\..\FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:..\..\FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:..\..\FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:..\..\FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:..\..\FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:..\..\FreeRTOS/tasks.c **** accessed from a critical section. */
 389:..\..\FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:..\..\FreeRTOS/tasks.c **** 
 391:..\..\FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:..\..\FreeRTOS/tasks.c **** 
 393:..\..\FreeRTOS/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:..\..\FreeRTOS/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:..\..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:..\..\FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:..\..\FreeRTOS/tasks.c **** 
 398:..\..\FreeRTOS/tasks.c **** #endif
 399:..\..\FreeRTOS/tasks.c **** 
 400:..\..\FreeRTOS/tasks.c **** /*lint -restore */
 401:..\..\FreeRTOS/tasks.c **** 
 402:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 403:..\..\FreeRTOS/tasks.c **** 
 404:..\..\FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:..\..\FreeRTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:..\..\FreeRTOS/tasks.c **** 
 407:..\..\FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:..\..\FreeRTOS/tasks.c **** 
 409:..\..\FreeRTOS/tasks.c **** #endif
 410:..\..\FreeRTOS/tasks.c **** 
 411:..\..\FreeRTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:..\..\FreeRTOS/tasks.c **** 
 413:..\..\FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:..\..\FreeRTOS/tasks.c **** 
 415:..\..\FreeRTOS/tasks.c **** #endif
 416:..\..\FreeRTOS/tasks.c **** 
 417:..\..\FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:..\..\FreeRTOS/tasks.c **** 
 419:..\..\FreeRTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:..\..\FreeRTOS/tasks.c **** 
 421:..\..\FreeRTOS/tasks.c **** #endif
 422:..\..\FreeRTOS/tasks.c **** 
 423:..\..\FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 424:..\..\FreeRTOS/tasks.c **** 
 425:..\..\FreeRTOS/tasks.c **** /**
 426:..\..\FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:..\..\FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:..\..\FreeRTOS/tasks.c ****  * is in any other state.
 429:..\..\FreeRTOS/tasks.c ****  */
 430:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 9


 431:..\..\FreeRTOS/tasks.c **** 
 432:..\..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:..\..\FreeRTOS/tasks.c **** 
 434:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:..\..\FreeRTOS/tasks.c **** 
 436:..\..\FreeRTOS/tasks.c **** /*
 437:..\..\FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:..\..\FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 439:..\..\FreeRTOS/tasks.c ****  */
 440:..\..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:..\..\FreeRTOS/tasks.c **** 
 442:..\..\FreeRTOS/tasks.c **** /*
 443:..\..\FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:..\..\FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:..\..\FreeRTOS/tasks.c ****  * creation of the first user task.
 446:..\..\FreeRTOS/tasks.c ****  *
 447:..\..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:..\..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:..\..\FreeRTOS/tasks.c ****  *
 450:..\..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:..\..\FreeRTOS/tasks.c ****  *
 452:..\..\FreeRTOS/tasks.c ****  */
 453:..\..\FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:..\..\FreeRTOS/tasks.c **** 
 455:..\..\FreeRTOS/tasks.c **** /*
 456:..\..\FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:..\..\FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 458:..\..\FreeRTOS/tasks.c ****  *
 459:..\..\FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:..\..\FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:..\..\FreeRTOS/tasks.c ****  */
 462:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:..\..\FreeRTOS/tasks.c **** 
 464:..\..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:..\..\FreeRTOS/tasks.c **** 
 466:..\..\FreeRTOS/tasks.c **** #endif
 467:..\..\FreeRTOS/tasks.c **** 
 468:..\..\FreeRTOS/tasks.c **** /*
 469:..\..\FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:..\..\FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:..\..\FreeRTOS/tasks.c ****  * and its TCB deleted.
 472:..\..\FreeRTOS/tasks.c ****  */
 473:..\..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:..\..\FreeRTOS/tasks.c **** 
 475:..\..\FreeRTOS/tasks.c **** /*
 476:..\..\FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:..\..\FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 478:..\..\FreeRTOS/tasks.c ****  */
 479:..\..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:..\..\FreeRTOS/tasks.c **** 
 481:..\..\FreeRTOS/tasks.c **** /*
 482:..\..\FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:..\..\FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:..\..\FreeRTOS/tasks.c ****  * a suspended list, etc.).
 485:..\..\FreeRTOS/tasks.c ****  *
 486:..\..\FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:..\..\FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 10


 488:..\..\FreeRTOS/tasks.c ****  */
 489:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:..\..\FreeRTOS/tasks.c **** 
 491:..\..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:..\..\FreeRTOS/tasks.c **** 
 493:..\..\FreeRTOS/tasks.c **** #endif
 494:..\..\FreeRTOS/tasks.c **** 
 495:..\..\FreeRTOS/tasks.c **** /*
 496:..\..\FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:..\..\FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:..\..\FreeRTOS/tasks.c ****  */
 499:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:..\..\FreeRTOS/tasks.c **** 
 501:..\..\FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:..\..\FreeRTOS/tasks.c **** 
 503:..\..\FreeRTOS/tasks.c **** #endif
 504:..\..\FreeRTOS/tasks.c **** 
 505:..\..\FreeRTOS/tasks.c **** /*
 506:..\..\FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:..\..\FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:..\..\FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:..\..\FreeRTOS/tasks.c ****  */
 510:..\..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:..\..\FreeRTOS/tasks.c **** 
 512:..\..\FreeRTOS/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:..\..\FreeRTOS/tasks.c **** 
 514:..\..\FreeRTOS/tasks.c **** #endif
 515:..\..\FreeRTOS/tasks.c **** 
 516:..\..\FreeRTOS/tasks.c **** /*
 517:..\..\FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:..\..\FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:..\..\FreeRTOS/tasks.c ****  *
 520:..\..\FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:..\..\FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:..\..\FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:..\..\FreeRTOS/tasks.c ****  * set to a value other than 1.
 524:..\..\FreeRTOS/tasks.c ****  */
 525:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:..\..\FreeRTOS/tasks.c **** 
 527:..\..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:..\..\FreeRTOS/tasks.c **** 
 529:..\..\FreeRTOS/tasks.c **** #endif
 530:..\..\FreeRTOS/tasks.c **** 
 531:..\..\FreeRTOS/tasks.c **** /*
 532:..\..\FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:..\..\FreeRTOS/tasks.c ****  * will exit the Blocked state.
 534:..\..\FreeRTOS/tasks.c ****  */
 535:..\..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:..\..\FreeRTOS/tasks.c **** 
 537:..\..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:..\..\FreeRTOS/tasks.c **** 
 539:..\..\FreeRTOS/tasks.c **** 	/*
 540:..\..\FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:..\..\FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 542:..\..\FreeRTOS/tasks.c **** 	 */
 543:..\..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 11


 545:..\..\FreeRTOS/tasks.c **** #endif
 546:..\..\FreeRTOS/tasks.c **** 
 547:..\..\FreeRTOS/tasks.c **** /*
 548:..\..\FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:..\..\FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 550:..\..\FreeRTOS/tasks.c ****  */
 551:..\..\FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:..\..\FreeRTOS/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:..\..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 554:..\..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 555:..\..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 556:..\..\FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:..\..\FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 558:..\..\FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:..\..\FreeRTOS/tasks.c **** 
 560:..\..\FreeRTOS/tasks.c **** /*
 561:..\..\FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:..\..\FreeRTOS/tasks.c ****  * under the control of the scheduler.
 563:..\..\FreeRTOS/tasks.c ****  */
 564:..\..\FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:..\..\FreeRTOS/tasks.c **** 
 566:..\..\FreeRTOS/tasks.c **** /*
 567:..\..\FreeRTOS/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:..\..\FreeRTOS/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:..\..\FreeRTOS/tasks.c ****  * called by the function.
 570:..\..\FreeRTOS/tasks.c ****  */
 571:..\..\FreeRTOS/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:..\..\FreeRTOS/tasks.c **** 
 573:..\..\FreeRTOS/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:..\..\FreeRTOS/tasks.c **** 
 575:..\..\FreeRTOS/tasks.c **** #endif
 576:..\..\FreeRTOS/tasks.c **** 
 577:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 578:..\..\FreeRTOS/tasks.c **** 
 579:..\..\FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:..\..\FreeRTOS/tasks.c **** 
 581:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:..\..\FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:..\..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 584:..\..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 585:..\..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 586:..\..\FreeRTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:..\..\FreeRTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:..\..\FreeRTOS/tasks.c **** 	{
 589:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 590:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 591:..\..\FreeRTOS/tasks.c **** 
 592:..\..\FreeRTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:..\..\FreeRTOS/tasks.c **** 
 595:..\..\FreeRTOS/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:..\..\FreeRTOS/tasks.c **** 		{
 597:..\..\FreeRTOS/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:..\..\FreeRTOS/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:..\..\FreeRTOS/tasks.c **** 			structure. */
 600:..\..\FreeRTOS/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:..\..\FreeRTOS/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 12


 602:..\..\FreeRTOS/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 603:..\..\FreeRTOS/tasks.c **** 		}
 604:..\..\FreeRTOS/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:..\..\FreeRTOS/tasks.c **** 
 606:..\..\FreeRTOS/tasks.c **** 
 607:..\..\FreeRTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:..\..\FreeRTOS/tasks.c **** 		{
 609:..\..\FreeRTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:..\..\FreeRTOS/tasks.c **** 			function - use them. */
 611:..\..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:..\..\FreeRTOS/tasks.c **** 
 614:..\..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:..\..\FreeRTOS/tasks.c **** 			{
 616:..\..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:..\..\FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:..\..\FreeRTOS/tasks.c **** 			}
 620:..\..\FreeRTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:..\..\FreeRTOS/tasks.c **** 
 622:..\..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:..\..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:..\..\FreeRTOS/tasks.c **** 		}
 625:..\..\FreeRTOS/tasks.c **** 		else
 626:..\..\FreeRTOS/tasks.c **** 		{
 627:..\..\FreeRTOS/tasks.c **** 			xReturn = NULL;
 628:..\..\FreeRTOS/tasks.c **** 		}
 629:..\..\FreeRTOS/tasks.c **** 
 630:..\..\FreeRTOS/tasks.c **** 		return xReturn;
 631:..\..\FreeRTOS/tasks.c **** 	}
 632:..\..\FreeRTOS/tasks.c **** 
 633:..\..\FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 635:..\..\FreeRTOS/tasks.c **** 
 636:..\..\FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:..\..\FreeRTOS/tasks.c **** 
 638:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:..\..\FreeRTOS/tasks.c **** 	{
 640:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 641:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:..\..\FreeRTOS/tasks.c **** 
 643:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:..\..\FreeRTOS/tasks.c **** 
 646:..\..\FreeRTOS/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:..\..\FreeRTOS/tasks.c **** 		{
 648:..\..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:..\..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:..\..\FreeRTOS/tasks.c **** 			not static allocation is being used. */
 651:..\..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:..\..\FreeRTOS/tasks.c **** 
 653:..\..\FreeRTOS/tasks.c **** 			/* Store the stack location in the TCB. */
 654:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:..\..\FreeRTOS/tasks.c **** 
 656:..\..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:..\..\FreeRTOS/tasks.c **** 			{
 658:..\..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 13


 659:..\..\FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:..\..\FreeRTOS/tasks.c **** 			}
 662:..\..\FreeRTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:..\..\FreeRTOS/tasks.c **** 
 664:..\..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:..\..\FreeRTOS/tasks.c **** 									pxTaskDefinition->pcName,
 666:..\..\FreeRTOS/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:..\..\FreeRTOS/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:..\..\FreeRTOS/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:..\..\FreeRTOS/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:..\..\FreeRTOS/tasks.c **** 									pxTaskDefinition->xRegions );
 671:..\..\FreeRTOS/tasks.c **** 
 672:..\..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:..\..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 674:..\..\FreeRTOS/tasks.c **** 		}
 675:..\..\FreeRTOS/tasks.c **** 
 676:..\..\FreeRTOS/tasks.c **** 		return xReturn;
 677:..\..\FreeRTOS/tasks.c **** 	}
 678:..\..\FreeRTOS/tasks.c **** 
 679:..\..\FreeRTOS/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 681:..\..\FreeRTOS/tasks.c **** 
 682:..\..\FreeRTOS/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:..\..\FreeRTOS/tasks.c **** 
 684:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:..\..\FreeRTOS/tasks.c **** 	{
 686:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 687:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:..\..\FreeRTOS/tasks.c **** 
 689:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:..\..\FreeRTOS/tasks.c **** 
 691:..\..\FreeRTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:..\..\FreeRTOS/tasks.c **** 		{
 693:..\..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:..\..\FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:..\..\FreeRTOS/tasks.c **** 			not static allocation is being used. */
 696:..\..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:..\..\FreeRTOS/tasks.c **** 
 698:..\..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 699:..\..\FreeRTOS/tasks.c **** 			{
 700:..\..\FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 701:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:..\..\FreeRTOS/tasks.c **** 
 703:..\..\FreeRTOS/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:..\..\FreeRTOS/tasks.c **** 				{
 705:..\..\FreeRTOS/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:..\..\FreeRTOS/tasks.c **** 					this task had a statically allocated stack in case it is
 707:..\..\FreeRTOS/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:..\..\FreeRTOS/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:..\..\FreeRTOS/tasks.c **** 				}
 710:..\..\FreeRTOS/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:..\..\FreeRTOS/tasks.c **** 
 712:..\..\FreeRTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:..\..\FreeRTOS/tasks.c **** 										pxTaskDefinition->pcName,
 714:..\..\FreeRTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:..\..\FreeRTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 14


 716:..\..\FreeRTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:..\..\FreeRTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:..\..\FreeRTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 719:..\..\FreeRTOS/tasks.c **** 
 720:..\..\FreeRTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:..\..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 722:..\..\FreeRTOS/tasks.c **** 			}
 723:..\..\FreeRTOS/tasks.c **** 		}
 724:..\..\FreeRTOS/tasks.c **** 
 725:..\..\FreeRTOS/tasks.c **** 		return xReturn;
 726:..\..\FreeRTOS/tasks.c **** 	}
 727:..\..\FreeRTOS/tasks.c **** 
 728:..\..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 730:..\..\FreeRTOS/tasks.c **** 
 731:..\..\FreeRTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:..\..\FreeRTOS/tasks.c **** 
 733:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:..\..\FreeRTOS/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:..\..\FreeRTOS/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:..\..\FreeRTOS/tasks.c **** 							void * const pvParameters,
 737:..\..\FreeRTOS/tasks.c **** 							UBaseType_t uxPriority,
 738:..\..\FreeRTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:..\..\FreeRTOS/tasks.c **** 	{
 740:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 741:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 742:..\..\FreeRTOS/tasks.c **** 
 743:..\..\FreeRTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:..\..\FreeRTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:..\..\FreeRTOS/tasks.c **** 		the TCB then the stack. */
 746:..\..\FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:..\..\FreeRTOS/tasks.c **** 		{
 748:..\..\FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:..\..\FreeRTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:..\..\FreeRTOS/tasks.c **** 			allocation is being used. */
 751:..\..\FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:..\..\FreeRTOS/tasks.c **** 
 753:..\..\FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 754:..\..\FreeRTOS/tasks.c **** 			{
 755:..\..\FreeRTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:..\..\FreeRTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:..\..\FreeRTOS/tasks.c **** 				be deleted later if required. */
 758:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:..\..\FreeRTOS/tasks.c **** 
 760:..\..\FreeRTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:..\..\FreeRTOS/tasks.c **** 				{
 762:..\..\FreeRTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:..\..\FreeRTOS/tasks.c **** 					vPortFree( pxNewTCB );
 764:..\..\FreeRTOS/tasks.c **** 					pxNewTCB = NULL;
 765:..\..\FreeRTOS/tasks.c **** 				}
 766:..\..\FreeRTOS/tasks.c **** 			}
 767:..\..\FreeRTOS/tasks.c **** 		}
 768:..\..\FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:..\..\FreeRTOS/tasks.c **** 		{
 770:..\..\FreeRTOS/tasks.c **** 		StackType_t *pxStack;
 771:..\..\FreeRTOS/tasks.c **** 
 772:..\..\FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 15


 773:..\..\FreeRTOS/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 774:..\..\FreeRTOS/tasks.c **** 
 775:..\..\FreeRTOS/tasks.c **** 			if( pxStack != NULL )
 776:..\..\FreeRTOS/tasks.c **** 			{
 777:..\..\FreeRTOS/tasks.c **** 				/* Allocate space for the TCB. */
 778:..\..\FreeRTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:..\..\FreeRTOS/tasks.c **** 
 780:..\..\FreeRTOS/tasks.c **** 				if( pxNewTCB != NULL )
 781:..\..\FreeRTOS/tasks.c **** 				{
 782:..\..\FreeRTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 783:..\..\FreeRTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:..\..\FreeRTOS/tasks.c **** 				}
 785:..\..\FreeRTOS/tasks.c **** 				else
 786:..\..\FreeRTOS/tasks.c **** 				{
 787:..\..\FreeRTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:..\..\FreeRTOS/tasks.c **** 					it again. */
 789:..\..\FreeRTOS/tasks.c **** 					vPortFree( pxStack );
 790:..\..\FreeRTOS/tasks.c **** 				}
 791:..\..\FreeRTOS/tasks.c **** 			}
 792:..\..\FreeRTOS/tasks.c **** 			else
 793:..\..\FreeRTOS/tasks.c **** 			{
 794:..\..\FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
 795:..\..\FreeRTOS/tasks.c **** 			}
 796:..\..\FreeRTOS/tasks.c **** 		}
 797:..\..\FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:..\..\FreeRTOS/tasks.c **** 
 799:..\..\FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
 800:..\..\FreeRTOS/tasks.c **** 		{
 801:..\..\FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:..\..\FreeRTOS/tasks.c **** 			{
 803:..\..\FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:..\..\FreeRTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:..\..\FreeRTOS/tasks.c **** 			}
 807:..\..\FreeRTOS/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:..\..\FreeRTOS/tasks.c **** 
 809:..\..\FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:..\..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:..\..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 812:..\..\FreeRTOS/tasks.c **** 		}
 813:..\..\FreeRTOS/tasks.c **** 		else
 814:..\..\FreeRTOS/tasks.c **** 		{
 815:..\..\FreeRTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:..\..\FreeRTOS/tasks.c **** 		}
 817:..\..\FreeRTOS/tasks.c **** 
 818:..\..\FreeRTOS/tasks.c **** 		return xReturn;
 819:..\..\FreeRTOS/tasks.c **** 	}
 820:..\..\FreeRTOS/tasks.c **** 
 821:..\..\FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 823:..\..\FreeRTOS/tasks.c **** 
 824:..\..\FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:..\..\FreeRTOS/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:..\..\FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 827:..\..\FreeRTOS/tasks.c **** 									void * const pvParameters,
 828:..\..\FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 829:..\..\FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 16


 830:..\..\FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 831:..\..\FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:..\..\FreeRTOS/tasks.c **** {
 833:..\..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 834:..\..\FreeRTOS/tasks.c **** UBaseType_t x;
 835:..\..\FreeRTOS/tasks.c **** 
 836:..\..\FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:..\..\FreeRTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:..\..\FreeRTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 839:..\..\FreeRTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:..\..\FreeRTOS/tasks.c **** 		{
 841:..\..\FreeRTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:..\..\FreeRTOS/tasks.c **** 		}
 843:..\..\FreeRTOS/tasks.c **** 		else
 844:..\..\FreeRTOS/tasks.c **** 		{
 845:..\..\FreeRTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:..\..\FreeRTOS/tasks.c **** 		}
 847:..\..\FreeRTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:..\..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:..\..\FreeRTOS/tasks.c **** 
 850:..\..\FreeRTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:..\..\FreeRTOS/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:..\..\FreeRTOS/tasks.c **** 	{
 853:..\..\FreeRTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:..\..\FreeRTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:..\..\FreeRTOS/tasks.c **** 	}
 856:..\..\FreeRTOS/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:..\..\FreeRTOS/tasks.c **** 
 858:..\..\FreeRTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:..\..\FreeRTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:..\..\FreeRTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:..\..\FreeRTOS/tasks.c **** 	by the port. */
 862:..\..\FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:..\..\FreeRTOS/tasks.c **** 	{
 864:..\..\FreeRTOS/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:..\..\FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:..\..\FreeRTOS/tasks.c **** 
 867:..\..\FreeRTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:..\..\FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:..\..\FreeRTOS/tasks.c **** 
 870:..\..\FreeRTOS/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:..\..\FreeRTOS/tasks.c **** 		{
 872:..\..\FreeRTOS/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:..\..\FreeRTOS/tasks.c **** 			debugging. */
 874:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:..\..\FreeRTOS/tasks.c **** 		}
 876:..\..\FreeRTOS/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:..\..\FreeRTOS/tasks.c **** 	}
 878:..\..\FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:..\..\FreeRTOS/tasks.c **** 	{
 880:..\..\FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:..\..\FreeRTOS/tasks.c **** 
 882:..\..\FreeRTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:..\..\FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:..\..\FreeRTOS/tasks.c **** 
 885:..\..\FreeRTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:..\..\FreeRTOS/tasks.c **** 		performed. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 17


 887:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:..\..\FreeRTOS/tasks.c **** 	}
 889:..\..\FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:..\..\FreeRTOS/tasks.c **** 
 891:..\..\FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
 892:..\..\FreeRTOS/tasks.c **** 	if( pcName != NULL )
 893:..\..\FreeRTOS/tasks.c **** 	{
 894:..\..\FreeRTOS/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:..\..\FreeRTOS/tasks.c **** 		{
 896:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:..\..\FreeRTOS/tasks.c **** 
 898:..\..\FreeRTOS/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:..\..\FreeRTOS/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:..\..\FreeRTOS/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:..\..\FreeRTOS/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:..\..\FreeRTOS/tasks.c **** 			{
 903:..\..\FreeRTOS/tasks.c **** 				break;
 904:..\..\FreeRTOS/tasks.c **** 			}
 905:..\..\FreeRTOS/tasks.c **** 			else
 906:..\..\FreeRTOS/tasks.c **** 			{
 907:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:..\..\FreeRTOS/tasks.c **** 			}
 909:..\..\FreeRTOS/tasks.c **** 		}
 910:..\..\FreeRTOS/tasks.c **** 
 911:..\..\FreeRTOS/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:..\..\FreeRTOS/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:..\..\FreeRTOS/tasks.c **** 	}
 915:..\..\FreeRTOS/tasks.c **** 	else
 916:..\..\FreeRTOS/tasks.c **** 	{
 917:..\..\FreeRTOS/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:..\..\FreeRTOS/tasks.c **** 		terminator when it is read out. */
 919:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:..\..\FreeRTOS/tasks.c **** 	}
 921:..\..\FreeRTOS/tasks.c **** 
 922:..\..\FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:..\..\FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
 924:..\..\FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:..\..\FreeRTOS/tasks.c **** 	{
 926:..\..\FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:..\..\FreeRTOS/tasks.c **** 	}
 928:..\..\FreeRTOS/tasks.c **** 	else
 929:..\..\FreeRTOS/tasks.c **** 	{
 930:..\..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:..\..\FreeRTOS/tasks.c **** 	}
 932:..\..\FreeRTOS/tasks.c **** 
 933:..\..\FreeRTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:..\..\FreeRTOS/tasks.c **** 	{
 936:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:..\..\FreeRTOS/tasks.c **** 	}
 939:..\..\FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:..\..\FreeRTOS/tasks.c **** 
 941:..\..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:..\..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 18


 944:..\..\FreeRTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:..\..\FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:..\..\FreeRTOS/tasks.c **** 
 948:..\..\FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
 949:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:..\..\FreeRTOS/tasks.c **** 
 952:..\..\FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:..\..\FreeRTOS/tasks.c **** 	{
 954:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:..\..\FreeRTOS/tasks.c **** 	}
 956:..\..\FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:..\..\FreeRTOS/tasks.c **** 
 958:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:..\..\FreeRTOS/tasks.c **** 	{
 960:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:..\..\FreeRTOS/tasks.c **** 	}
 962:..\..\FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:..\..\FreeRTOS/tasks.c **** 
 964:..\..\FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:..\..\FreeRTOS/tasks.c **** 	{
 966:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:..\..\FreeRTOS/tasks.c **** 	}
 968:..\..\FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:..\..\FreeRTOS/tasks.c **** 
 970:..\..\FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:..\..\FreeRTOS/tasks.c **** 	{
 972:..\..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:..\..\FreeRTOS/tasks.c **** 	}
 974:..\..\FreeRTOS/tasks.c **** 	#else
 975:..\..\FreeRTOS/tasks.c **** 	{
 976:..\..\FreeRTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:..\..\FreeRTOS/tasks.c **** 		( void ) xRegions;
 978:..\..\FreeRTOS/tasks.c **** 	}
 979:..\..\FreeRTOS/tasks.c **** 	#endif
 980:..\..\FreeRTOS/tasks.c **** 
 981:..\..\FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:..\..\FreeRTOS/tasks.c **** 	{
 983:..\..\FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:..\..\FreeRTOS/tasks.c **** 		{
 985:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:..\..\FreeRTOS/tasks.c **** 		}
 987:..\..\FreeRTOS/tasks.c **** 	}
 988:..\..\FreeRTOS/tasks.c **** 	#endif
 989:..\..\FreeRTOS/tasks.c **** 
 990:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:..\..\FreeRTOS/tasks.c **** 	{
 992:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:..\..\FreeRTOS/tasks.c **** 	}
 995:..\..\FreeRTOS/tasks.c **** 	#endif
 996:..\..\FreeRTOS/tasks.c **** 
 997:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:..\..\FreeRTOS/tasks.c **** 	{
 999:..\..\FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:..\..\FreeRTOS/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 19


1001:..\..\FreeRTOS/tasks.c **** 		for additional information. */
1002:..\..\FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:..\..\FreeRTOS/tasks.c **** 	}
1004:..\..\FreeRTOS/tasks.c **** 	#endif
1005:..\..\FreeRTOS/tasks.c **** 
1006:..\..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:..\..\FreeRTOS/tasks.c **** 	{
1008:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:..\..\FreeRTOS/tasks.c **** 	}
1010:..\..\FreeRTOS/tasks.c **** 	#endif
1011:..\..\FreeRTOS/tasks.c **** 
1012:..\..\FreeRTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:..\..\FreeRTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:..\..\FreeRTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:..\..\FreeRTOS/tasks.c **** 	the top of stack variable is updated. */
1016:..\..\FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:..\..\FreeRTOS/tasks.c **** 	{
1018:..\..\FreeRTOS/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:..\..\FreeRTOS/tasks.c **** 		pass the stack end address to the stack initialization
1020:..\..\FreeRTOS/tasks.c **** 		function as well. */
1021:..\..\FreeRTOS/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:..\..\FreeRTOS/tasks.c **** 		{
1023:..\..\FreeRTOS/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:..\..\FreeRTOS/tasks.c **** 			{
1025:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:..\..\FreeRTOS/tasks.c **** 			}
1027:..\..\FreeRTOS/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:..\..\FreeRTOS/tasks.c **** 			{
1029:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:..\..\FreeRTOS/tasks.c **** 			}
1031:..\..\FreeRTOS/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:..\..\FreeRTOS/tasks.c **** 		}
1033:..\..\FreeRTOS/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:..\..\FreeRTOS/tasks.c **** 		{
1035:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:..\..\FreeRTOS/tasks.c **** 		}
1037:..\..\FreeRTOS/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:..\..\FreeRTOS/tasks.c **** 	}
1039:..\..\FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:..\..\FreeRTOS/tasks.c **** 	{
1041:..\..\FreeRTOS/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:..\..\FreeRTOS/tasks.c **** 		pass the stack end address to the stack initialization
1043:..\..\FreeRTOS/tasks.c **** 		function as well. */
1044:..\..\FreeRTOS/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:..\..\FreeRTOS/tasks.c **** 		{
1046:..\..\FreeRTOS/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:..\..\FreeRTOS/tasks.c **** 			{
1048:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:..\..\FreeRTOS/tasks.c **** 			}
1050:..\..\FreeRTOS/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:..\..\FreeRTOS/tasks.c **** 			{
1052:..\..\FreeRTOS/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:..\..\FreeRTOS/tasks.c **** 			}
1054:..\..\FreeRTOS/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:..\..\FreeRTOS/tasks.c **** 		}
1056:..\..\FreeRTOS/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:..\..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 20


1058:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1059:..\..\FreeRTOS/tasks.c **** 		}
1060:..\..\FreeRTOS/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:..\..\FreeRTOS/tasks.c **** 	}
1062:..\..\FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:..\..\FreeRTOS/tasks.c **** 
1064:..\..\FreeRTOS/tasks.c **** 	if( pxCreatedTask != NULL )
1065:..\..\FreeRTOS/tasks.c **** 	{
1066:..\..\FreeRTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:..\..\FreeRTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:..\..\FreeRTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:..\..\FreeRTOS/tasks.c **** 	}
1070:..\..\FreeRTOS/tasks.c **** 	else
1071:..\..\FreeRTOS/tasks.c **** 	{
1072:..\..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:..\..\FreeRTOS/tasks.c **** 	}
1074:..\..\FreeRTOS/tasks.c **** }
1075:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1076:..\..\FreeRTOS/tasks.c **** 
1077:..\..\FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:..\..\FreeRTOS/tasks.c **** {
1079:..\..\FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:..\..\FreeRTOS/tasks.c **** 	updated. */
1081:..\..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
1082:..\..\FreeRTOS/tasks.c **** 	{
1083:..\..\FreeRTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:..\..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:..\..\FreeRTOS/tasks.c **** 		{
1086:..\..\FreeRTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:..\..\FreeRTOS/tasks.c **** 			the suspended state - make this the current task. */
1088:..\..\FreeRTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:..\..\FreeRTOS/tasks.c **** 
1090:..\..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:..\..\FreeRTOS/tasks.c **** 			{
1092:..\..\FreeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:..\..\FreeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
1094:..\..\FreeRTOS/tasks.c **** 				fails, but we will report the failure. */
1095:..\..\FreeRTOS/tasks.c **** 				prvInitialiseTaskLists();
1096:..\..\FreeRTOS/tasks.c **** 			}
1097:..\..\FreeRTOS/tasks.c **** 			else
1098:..\..\FreeRTOS/tasks.c **** 			{
1099:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:..\..\FreeRTOS/tasks.c **** 			}
1101:..\..\FreeRTOS/tasks.c **** 		}
1102:..\..\FreeRTOS/tasks.c **** 		else
1103:..\..\FreeRTOS/tasks.c **** 		{
1104:..\..\FreeRTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:..\..\FreeRTOS/tasks.c **** 			current task if it is the highest priority task to be created
1106:..\..\FreeRTOS/tasks.c **** 			so far. */
1107:..\..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:..\..\FreeRTOS/tasks.c **** 			{
1109:..\..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:..\..\FreeRTOS/tasks.c **** 				{
1111:..\..\FreeRTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:..\..\FreeRTOS/tasks.c **** 				}
1113:..\..\FreeRTOS/tasks.c **** 				else
1114:..\..\FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 21


1115:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:..\..\FreeRTOS/tasks.c **** 				}
1117:..\..\FreeRTOS/tasks.c **** 			}
1118:..\..\FreeRTOS/tasks.c **** 			else
1119:..\..\FreeRTOS/tasks.c **** 			{
1120:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:..\..\FreeRTOS/tasks.c **** 			}
1122:..\..\FreeRTOS/tasks.c **** 		}
1123:..\..\FreeRTOS/tasks.c **** 
1124:..\..\FreeRTOS/tasks.c **** 		uxTaskNumber++;
1125:..\..\FreeRTOS/tasks.c **** 
1126:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:..\..\FreeRTOS/tasks.c **** 		{
1128:..\..\FreeRTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:..\..\FreeRTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:..\..\FreeRTOS/tasks.c **** 		}
1131:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:..\..\FreeRTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:..\..\FreeRTOS/tasks.c **** 
1134:..\..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:..\..\FreeRTOS/tasks.c **** 
1136:..\..\FreeRTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:..\..\FreeRTOS/tasks.c **** 	}
1138:..\..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1139:..\..\FreeRTOS/tasks.c **** 
1140:..\..\FreeRTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:..\..\FreeRTOS/tasks.c **** 	{
1142:..\..\FreeRTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:..\..\FreeRTOS/tasks.c **** 		then it should run now. */
1144:..\..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:..\..\FreeRTOS/tasks.c **** 		{
1146:..\..\FreeRTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:..\..\FreeRTOS/tasks.c **** 		}
1148:..\..\FreeRTOS/tasks.c **** 		else
1149:..\..\FreeRTOS/tasks.c **** 		{
1150:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:..\..\FreeRTOS/tasks.c **** 		}
1152:..\..\FreeRTOS/tasks.c **** 	}
1153:..\..\FreeRTOS/tasks.c **** 	else
1154:..\..\FreeRTOS/tasks.c **** 	{
1155:..\..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:..\..\FreeRTOS/tasks.c **** 	}
1157:..\..\FreeRTOS/tasks.c **** }
1158:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1159:..\..\FreeRTOS/tasks.c **** 
1160:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:..\..\FreeRTOS/tasks.c **** 
1162:..\..\FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:..\..\FreeRTOS/tasks.c **** 	{
1164:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1165:..\..\FreeRTOS/tasks.c **** 
1166:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1167:..\..\FreeRTOS/tasks.c **** 		{
1168:..\..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:..\..\FreeRTOS/tasks.c **** 			being deleted. */
1170:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 22


1172:..\..\FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:..\..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:..\..\FreeRTOS/tasks.c **** 			{
1175:..\..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:..\..\FreeRTOS/tasks.c **** 			}
1177:..\..\FreeRTOS/tasks.c **** 			else
1178:..\..\FreeRTOS/tasks.c **** 			{
1179:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:..\..\FreeRTOS/tasks.c **** 			}
1181:..\..\FreeRTOS/tasks.c **** 
1182:..\..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1183:..\..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:..\..\FreeRTOS/tasks.c **** 			{
1185:..\..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:..\..\FreeRTOS/tasks.c **** 			}
1187:..\..\FreeRTOS/tasks.c **** 			else
1188:..\..\FreeRTOS/tasks.c **** 			{
1189:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:..\..\FreeRTOS/tasks.c **** 			}
1191:..\..\FreeRTOS/tasks.c **** 
1192:..\..\FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:..\..\FreeRTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:..\..\FreeRTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:..\..\FreeRTOS/tasks.c **** 			not return. */
1196:..\..\FreeRTOS/tasks.c **** 			uxTaskNumber++;
1197:..\..\FreeRTOS/tasks.c **** 
1198:..\..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:..\..\FreeRTOS/tasks.c **** 			{
1200:..\..\FreeRTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:..\..\FreeRTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1202:..\..\FreeRTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:..\..\FreeRTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1204:..\..\FreeRTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:..\..\FreeRTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:..\..\FreeRTOS/tasks.c **** 
1207:..\..\FreeRTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:..\..\FreeRTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:..\..\FreeRTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:..\..\FreeRTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:..\..\FreeRTOS/tasks.c **** 
1212:..\..\FreeRTOS/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:..\..\FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:..\..\FreeRTOS/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:..\..\FreeRTOS/tasks.c **** 
1216:..\..\FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:..\..\FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:..\..\FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1219:..\..\FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:..\..\FreeRTOS/tasks.c **** 				required. */
1221:..\..\FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:..\..\FreeRTOS/tasks.c **** 			}
1223:..\..\FreeRTOS/tasks.c **** 			else
1224:..\..\FreeRTOS/tasks.c **** 			{
1225:..\..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:..\..\FreeRTOS/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:..\..\FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 23


1229:..\..\FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:..\..\FreeRTOS/tasks.c **** 				the task that has just been deleted. */
1231:..\..\FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:..\..\FreeRTOS/tasks.c **** 			}
1233:..\..\FreeRTOS/tasks.c **** 		}
1234:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1235:..\..\FreeRTOS/tasks.c **** 
1236:..\..\FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:..\..\FreeRTOS/tasks.c **** 		been deleted. */
1238:..\..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:..\..\FreeRTOS/tasks.c **** 		{
1240:..\..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:..\..\FreeRTOS/tasks.c **** 			{
1242:..\..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:..\..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1244:..\..\FreeRTOS/tasks.c **** 			}
1245:..\..\FreeRTOS/tasks.c **** 			else
1246:..\..\FreeRTOS/tasks.c **** 			{
1247:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:..\..\FreeRTOS/tasks.c **** 			}
1249:..\..\FreeRTOS/tasks.c **** 		}
1250:..\..\FreeRTOS/tasks.c **** 	}
1251:..\..\FreeRTOS/tasks.c **** 
1252:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1254:..\..\FreeRTOS/tasks.c **** 
1255:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:..\..\FreeRTOS/tasks.c **** 
1257:..\..\FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:..\..\FreeRTOS/tasks.c **** 	{
1259:..\..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
1260:..\..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:..\..\FreeRTOS/tasks.c **** 
1262:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:..\..\FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:..\..\FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:..\..\FreeRTOS/tasks.c **** 
1266:..\..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1267:..\..\FreeRTOS/tasks.c **** 		{
1268:..\..\FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:..\..\FreeRTOS/tasks.c **** 			block. */
1270:..\..\FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:..\..\FreeRTOS/tasks.c **** 
1272:..\..\FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:..\..\FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:..\..\FreeRTOS/tasks.c **** 
1275:..\..\FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:..\..\FreeRTOS/tasks.c **** 			{
1277:..\..\FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1278:..\..\FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:..\..\FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:..\..\FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:..\..\FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:..\..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:..\..\FreeRTOS/tasks.c **** 				{
1284:..\..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1285:..\..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 24


1286:..\..\FreeRTOS/tasks.c **** 				else
1287:..\..\FreeRTOS/tasks.c **** 				{
1288:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:..\..\FreeRTOS/tasks.c **** 				}
1290:..\..\FreeRTOS/tasks.c **** 			}
1291:..\..\FreeRTOS/tasks.c **** 			else
1292:..\..\FreeRTOS/tasks.c **** 			{
1293:..\..\FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:..\..\FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:..\..\FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
1296:..\..\FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:..\..\FreeRTOS/tasks.c **** 				{
1298:..\..\FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1299:..\..\FreeRTOS/tasks.c **** 				}
1300:..\..\FreeRTOS/tasks.c **** 				else
1301:..\..\FreeRTOS/tasks.c **** 				{
1302:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:..\..\FreeRTOS/tasks.c **** 				}
1304:..\..\FreeRTOS/tasks.c **** 			}
1305:..\..\FreeRTOS/tasks.c **** 
1306:..\..\FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:..\..\FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:..\..\FreeRTOS/tasks.c **** 
1309:..\..\FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:..\..\FreeRTOS/tasks.c **** 			{
1311:..\..\FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:..\..\FreeRTOS/tasks.c **** 
1313:..\..\FreeRTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:..\..\FreeRTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:..\..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:..\..\FreeRTOS/tasks.c **** 			}
1317:..\..\FreeRTOS/tasks.c **** 			else
1318:..\..\FreeRTOS/tasks.c **** 			{
1319:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:..\..\FreeRTOS/tasks.c **** 			}
1321:..\..\FreeRTOS/tasks.c **** 		}
1322:..\..\FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:..\..\FreeRTOS/tasks.c **** 
1324:..\..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:..\..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1326:..\..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:..\..\FreeRTOS/tasks.c **** 		{
1328:..\..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1329:..\..\FreeRTOS/tasks.c **** 		}
1330:..\..\FreeRTOS/tasks.c **** 		else
1331:..\..\FreeRTOS/tasks.c **** 		{
1332:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:..\..\FreeRTOS/tasks.c **** 		}
1334:..\..\FreeRTOS/tasks.c **** 	}
1335:..\..\FreeRTOS/tasks.c **** 
1336:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1338:..\..\FreeRTOS/tasks.c **** 
1339:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:..\..\FreeRTOS/tasks.c **** 
1341:..\..\FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:..\..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 25


1343:..\..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1344:..\..\FreeRTOS/tasks.c **** 
1345:..\..\FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:..\..\FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:..\..\FreeRTOS/tasks.c **** 		{
1348:..\..\FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:..\..\FreeRTOS/tasks.c **** 			vTaskSuspendAll();
1350:..\..\FreeRTOS/tasks.c **** 			{
1351:..\..\FreeRTOS/tasks.c **** 				traceTASK_DELAY();
1352:..\..\FreeRTOS/tasks.c **** 
1353:..\..\FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
1354:..\..\FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:..\..\FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:..\..\FreeRTOS/tasks.c **** 				is resumed.
1357:..\..\FreeRTOS/tasks.c **** 
1358:..\..\FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:..\..\FreeRTOS/tasks.c **** 				executing task. */
1360:..\..\FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:..\..\FreeRTOS/tasks.c **** 			}
1362:..\..\FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:..\..\FreeRTOS/tasks.c **** 		}
1364:..\..\FreeRTOS/tasks.c **** 		else
1365:..\..\FreeRTOS/tasks.c **** 		{
1366:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:..\..\FreeRTOS/tasks.c **** 		}
1368:..\..\FreeRTOS/tasks.c **** 
1369:..\..\FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:..\..\FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1371:..\..\FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:..\..\FreeRTOS/tasks.c **** 		{
1373:..\..\FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1374:..\..\FreeRTOS/tasks.c **** 		}
1375:..\..\FreeRTOS/tasks.c **** 		else
1376:..\..\FreeRTOS/tasks.c **** 		{
1377:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:..\..\FreeRTOS/tasks.c **** 		}
1379:..\..\FreeRTOS/tasks.c **** 	}
1380:..\..\FreeRTOS/tasks.c **** 
1381:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1383:..\..\FreeRTOS/tasks.c **** 
1384:..\..\FreeRTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:..\..\FreeRTOS/tasks.c **** 
1386:..\..\FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:..\..\FreeRTOS/tasks.c **** 	{
1388:..\..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
1389:..\..\FreeRTOS/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:..\..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:..\..\FreeRTOS/tasks.c **** 
1392:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1393:..\..\FreeRTOS/tasks.c **** 
1394:..\..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:..\..\FreeRTOS/tasks.c **** 		{
1396:..\..\FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:..\..\FreeRTOS/tasks.c **** 			eReturn = eRunning;
1398:..\..\FreeRTOS/tasks.c **** 		}
1399:..\..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 26


1400:..\..\FreeRTOS/tasks.c **** 		{
1401:..\..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1402:..\..\FreeRTOS/tasks.c **** 			{
1403:..\..\FreeRTOS/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:..\..\FreeRTOS/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:..\..\FreeRTOS/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:..\..\FreeRTOS/tasks.c **** 			}
1407:..\..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1408:..\..\FreeRTOS/tasks.c **** 
1409:..\..\FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:..\..\FreeRTOS/tasks.c **** 			{
1411:..\..\FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:..\..\FreeRTOS/tasks.c **** 				lists. */
1413:..\..\FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1414:..\..\FreeRTOS/tasks.c **** 			}
1415:..\..\FreeRTOS/tasks.c **** 
1416:..\..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:..\..\FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:..\..\FreeRTOS/tasks.c **** 				{
1419:..\..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:..\..\FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:..\..\FreeRTOS/tasks.c **** 					indefinitely? */
1422:..\..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:..\..\FreeRTOS/tasks.c **** 					{
1424:..\..\FreeRTOS/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:..\..\FreeRTOS/tasks.c **** 						{
1426:..\..\FreeRTOS/tasks.c **** 							/* The task does not appear on the event list item of
1427:..\..\FreeRTOS/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:..\..\FreeRTOS/tasks.c **** 							blocked state if it is waiting on its notification
1429:..\..\FreeRTOS/tasks.c **** 							rather than waiting on an object. */
1430:..\..\FreeRTOS/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:..\..\FreeRTOS/tasks.c **** 							{
1432:..\..\FreeRTOS/tasks.c **** 								eReturn = eBlocked;
1433:..\..\FreeRTOS/tasks.c **** 							}
1434:..\..\FreeRTOS/tasks.c **** 							else
1435:..\..\FreeRTOS/tasks.c **** 							{
1436:..\..\FreeRTOS/tasks.c **** 								eReturn = eSuspended;
1437:..\..\FreeRTOS/tasks.c **** 							}
1438:..\..\FreeRTOS/tasks.c **** 						}
1439:..\..\FreeRTOS/tasks.c **** 						#else
1440:..\..\FreeRTOS/tasks.c **** 						{
1441:..\..\FreeRTOS/tasks.c **** 							eReturn = eSuspended;
1442:..\..\FreeRTOS/tasks.c **** 						}
1443:..\..\FreeRTOS/tasks.c **** 						#endif
1444:..\..\FreeRTOS/tasks.c **** 					}
1445:..\..\FreeRTOS/tasks.c **** 					else
1446:..\..\FreeRTOS/tasks.c **** 					{
1447:..\..\FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1448:..\..\FreeRTOS/tasks.c **** 					}
1449:..\..\FreeRTOS/tasks.c **** 				}
1450:..\..\FreeRTOS/tasks.c **** 			#endif
1451:..\..\FreeRTOS/tasks.c **** 
1452:..\..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:..\..\FreeRTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:..\..\FreeRTOS/tasks.c **** 				{
1455:..\..\FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:..\..\FreeRTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 27


1457:..\..\FreeRTOS/tasks.c **** 					all. */
1458:..\..\FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1459:..\..\FreeRTOS/tasks.c **** 				}
1460:..\..\FreeRTOS/tasks.c **** 			#endif
1461:..\..\FreeRTOS/tasks.c **** 
1462:..\..\FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:..\..\FreeRTOS/tasks.c **** 			{
1464:..\..\FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:..\..\FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1466:..\..\FreeRTOS/tasks.c **** 				eReturn = eReady;
1467:..\..\FreeRTOS/tasks.c **** 			}
1468:..\..\FreeRTOS/tasks.c **** 		}
1469:..\..\FreeRTOS/tasks.c **** 
1470:..\..\FreeRTOS/tasks.c **** 		return eReturn;
1471:..\..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:..\..\FreeRTOS/tasks.c **** 
1473:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1475:..\..\FreeRTOS/tasks.c **** 
1476:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:..\..\FreeRTOS/tasks.c **** 
1478:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:..\..\FreeRTOS/tasks.c **** 	{
1480:..\..\FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
1481:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
1482:..\..\FreeRTOS/tasks.c **** 
1483:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1484:..\..\FreeRTOS/tasks.c **** 		{
1485:..\..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:..\..\FreeRTOS/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:..\..\FreeRTOS/tasks.c **** 		}
1490:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1491:..\..\FreeRTOS/tasks.c **** 
1492:..\..\FreeRTOS/tasks.c **** 		return uxReturn;
1493:..\..\FreeRTOS/tasks.c **** 	}
1494:..\..\FreeRTOS/tasks.c **** 
1495:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1497:..\..\FreeRTOS/tasks.c **** 
1498:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:..\..\FreeRTOS/tasks.c **** 
1500:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:..\..\FreeRTOS/tasks.c **** 	{
1502:..\..\FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
1503:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:..\..\FreeRTOS/tasks.c **** 
1505:..\..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:..\..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:..\..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:..\..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:..\..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:..\..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:..\..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:..\..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 28


1514:..\..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:..\..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:..\..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:..\..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:..\..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:..\..\FreeRTOS/tasks.c **** 		provided on the following link:
1520:..\..\FreeRTOS/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:..\..\FreeRTOS/tasks.c **** 
1523:..\..\FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:..\..\FreeRTOS/tasks.c **** 		{
1525:..\..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:..\..\FreeRTOS/tasks.c **** 			task that is being queried. */
1527:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:..\..\FreeRTOS/tasks.c **** 		}
1530:..\..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:..\..\FreeRTOS/tasks.c **** 
1532:..\..\FreeRTOS/tasks.c **** 		return uxReturn;
1533:..\..\FreeRTOS/tasks.c **** 	}
1534:..\..\FreeRTOS/tasks.c **** 
1535:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1537:..\..\FreeRTOS/tasks.c **** 
1538:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:..\..\FreeRTOS/tasks.c **** 
1540:..\..\FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:..\..\FreeRTOS/tasks.c **** 	{
1542:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1543:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:..\..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:..\..\FreeRTOS/tasks.c **** 
1546:..\..\FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:..\..\FreeRTOS/tasks.c **** 
1548:..\..\FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1549:..\..\FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:..\..\FreeRTOS/tasks.c **** 		{
1551:..\..\FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:..\..\FreeRTOS/tasks.c **** 		}
1553:..\..\FreeRTOS/tasks.c **** 		else
1554:..\..\FreeRTOS/tasks.c **** 		{
1555:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:..\..\FreeRTOS/tasks.c **** 		}
1557:..\..\FreeRTOS/tasks.c **** 
1558:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1559:..\..\FreeRTOS/tasks.c **** 		{
1560:..\..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:..\..\FreeRTOS/tasks.c **** 			task that is being changed. */
1562:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:..\..\FreeRTOS/tasks.c **** 
1564:..\..\FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:..\..\FreeRTOS/tasks.c **** 
1566:..\..\FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:..\..\FreeRTOS/tasks.c **** 			{
1568:..\..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:..\..\FreeRTOS/tasks.c **** 			}
1570:..\..\FreeRTOS/tasks.c **** 			#else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 29


1571:..\..\FreeRTOS/tasks.c **** 			{
1572:..\..\FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:..\..\FreeRTOS/tasks.c **** 			}
1574:..\..\FreeRTOS/tasks.c **** 			#endif
1575:..\..\FreeRTOS/tasks.c **** 
1576:..\..\FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:..\..\FreeRTOS/tasks.c **** 			{
1578:..\..\FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1579:..\..\FreeRTOS/tasks.c **** 				priority than the calling task. */
1580:..\..\FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:..\..\FreeRTOS/tasks.c **** 				{
1582:..\..\FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:..\..\FreeRTOS/tasks.c **** 					{
1584:..\..\FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1585:..\..\FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1586:..\..\FreeRTOS/tasks.c **** 						raised above that of the running task? */
1587:..\..\FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:..\..\FreeRTOS/tasks.c **** 						{
1589:..\..\FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1590:..\..\FreeRTOS/tasks.c **** 						}
1591:..\..\FreeRTOS/tasks.c **** 						else
1592:..\..\FreeRTOS/tasks.c **** 						{
1593:..\..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:..\..\FreeRTOS/tasks.c **** 						}
1595:..\..\FreeRTOS/tasks.c **** 					}
1596:..\..\FreeRTOS/tasks.c **** 					else
1597:..\..\FreeRTOS/tasks.c **** 					{
1598:..\..\FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1599:..\..\FreeRTOS/tasks.c **** 						but the running task must already be the highest
1600:..\..\FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1601:..\..\FreeRTOS/tasks.c **** 					}
1602:..\..\FreeRTOS/tasks.c **** 				}
1603:..\..\FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:..\..\FreeRTOS/tasks.c **** 				{
1605:..\..\FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1606:..\..\FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1607:..\..\FreeRTOS/tasks.c **** 					is ready to execute. */
1608:..\..\FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1609:..\..\FreeRTOS/tasks.c **** 				}
1610:..\..\FreeRTOS/tasks.c **** 				else
1611:..\..\FreeRTOS/tasks.c **** 				{
1612:..\..\FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1613:..\..\FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1614:..\..\FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1615:..\..\FreeRTOS/tasks.c **** 				}
1616:..\..\FreeRTOS/tasks.c **** 
1617:..\..\FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:..\..\FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1619:..\..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:..\..\FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:..\..\FreeRTOS/tasks.c **** 
1622:..\..\FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:..\..\FreeRTOS/tasks.c **** 				{
1624:..\..\FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1625:..\..\FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1626:..\..\FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:..\..\FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 30


1628:..\..\FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1629:..\..\FreeRTOS/tasks.c **** 					}
1630:..\..\FreeRTOS/tasks.c **** 					else
1631:..\..\FreeRTOS/tasks.c **** 					{
1632:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:..\..\FreeRTOS/tasks.c **** 					}
1634:..\..\FreeRTOS/tasks.c **** 
1635:..\..\FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1636:..\..\FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:..\..\FreeRTOS/tasks.c **** 				}
1638:..\..\FreeRTOS/tasks.c **** 				#else
1639:..\..\FreeRTOS/tasks.c **** 				{
1640:..\..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:..\..\FreeRTOS/tasks.c **** 				}
1642:..\..\FreeRTOS/tasks.c **** 				#endif
1643:..\..\FreeRTOS/tasks.c **** 
1644:..\..\FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:..\..\FreeRTOS/tasks.c **** 				being used for anything else. */
1646:..\..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:..\..\FreeRTOS/tasks.c **** 				{
1648:..\..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:..\..\FreeRTOS/tasks.c **** 				}
1650:..\..\FreeRTOS/tasks.c **** 				else
1651:..\..\FreeRTOS/tasks.c **** 				{
1652:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:..\..\FreeRTOS/tasks.c **** 				}
1654:..\..\FreeRTOS/tasks.c **** 
1655:..\..\FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:..\..\FreeRTOS/tasks.c **** 				nothing more than change its priority variable. However, if
1657:..\..\FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:..\..\FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1659:..\..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:..\..\FreeRTOS/tasks.c **** 				{
1661:..\..\FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:..\..\FreeRTOS/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:..\..\FreeRTOS/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:..\..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:..\..\FreeRTOS/tasks.c **** 					{
1666:..\..\FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1667:..\..\FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1668:..\..\FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1669:..\..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:..\..\FreeRTOS/tasks.c **** 					}
1671:..\..\FreeRTOS/tasks.c **** 					else
1672:..\..\FreeRTOS/tasks.c **** 					{
1673:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:..\..\FreeRTOS/tasks.c **** 					}
1675:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:..\..\FreeRTOS/tasks.c **** 				}
1677:..\..\FreeRTOS/tasks.c **** 				else
1678:..\..\FreeRTOS/tasks.c **** 				{
1679:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:..\..\FreeRTOS/tasks.c **** 				}
1681:..\..\FreeRTOS/tasks.c **** 
1682:..\..\FreeRTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:..\..\FreeRTOS/tasks.c **** 				{
1684:..\..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 31


1685:..\..\FreeRTOS/tasks.c **** 				}
1686:..\..\FreeRTOS/tasks.c **** 				else
1687:..\..\FreeRTOS/tasks.c **** 				{
1688:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:..\..\FreeRTOS/tasks.c **** 				}
1690:..\..\FreeRTOS/tasks.c **** 
1691:..\..\FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:..\..\FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1693:..\..\FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:..\..\FreeRTOS/tasks.c **** 			}
1695:..\..\FreeRTOS/tasks.c **** 		}
1696:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1697:..\..\FreeRTOS/tasks.c **** 	}
1698:..\..\FreeRTOS/tasks.c **** 
1699:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1701:..\..\FreeRTOS/tasks.c **** 
1702:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:..\..\FreeRTOS/tasks.c **** 
1704:..\..\FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:..\..\FreeRTOS/tasks.c **** 	{
1706:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1707:..\..\FreeRTOS/tasks.c **** 
1708:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1709:..\..\FreeRTOS/tasks.c **** 		{
1710:..\..\FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:..\..\FreeRTOS/tasks.c **** 			being suspended. */
1712:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:..\..\FreeRTOS/tasks.c **** 
1714:..\..\FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:..\..\FreeRTOS/tasks.c **** 
1716:..\..\FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:..\..\FreeRTOS/tasks.c **** 			suspended list. */
1718:..\..\FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:..\..\FreeRTOS/tasks.c **** 			{
1720:..\..\FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:..\..\FreeRTOS/tasks.c **** 			}
1722:..\..\FreeRTOS/tasks.c **** 			else
1723:..\..\FreeRTOS/tasks.c **** 			{
1724:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:..\..\FreeRTOS/tasks.c **** 			}
1726:..\..\FreeRTOS/tasks.c **** 
1727:..\..\FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1728:..\..\FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:..\..\FreeRTOS/tasks.c **** 			{
1730:..\..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:..\..\FreeRTOS/tasks.c **** 			}
1732:..\..\FreeRTOS/tasks.c **** 			else
1733:..\..\FreeRTOS/tasks.c **** 			{
1734:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:..\..\FreeRTOS/tasks.c **** 			}
1736:..\..\FreeRTOS/tasks.c **** 
1737:..\..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:..\..\FreeRTOS/tasks.c **** 
1739:..\..\FreeRTOS/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:..\..\FreeRTOS/tasks.c **** 			{
1741:..\..\FreeRTOS/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 32


1742:..\..\FreeRTOS/tasks.c **** 				{
1743:..\..\FreeRTOS/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:..\..\FreeRTOS/tasks.c **** 					now suspended, so no notification was received. */
1745:..\..\FreeRTOS/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:..\..\FreeRTOS/tasks.c **** 				}
1747:..\..\FreeRTOS/tasks.c **** 			}
1748:..\..\FreeRTOS/tasks.c **** 			#endif
1749:..\..\FreeRTOS/tasks.c **** 		}
1750:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1751:..\..\FreeRTOS/tasks.c **** 
1752:..\..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:..\..\FreeRTOS/tasks.c **** 		{
1754:..\..\FreeRTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:..\..\FreeRTOS/tasks.c **** 			task that is now in the Suspended state. */
1756:..\..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1757:..\..\FreeRTOS/tasks.c **** 			{
1758:..\..\FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:..\..\FreeRTOS/tasks.c **** 			}
1760:..\..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1761:..\..\FreeRTOS/tasks.c **** 		}
1762:..\..\FreeRTOS/tasks.c **** 		else
1763:..\..\FreeRTOS/tasks.c **** 		{
1764:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:..\..\FreeRTOS/tasks.c **** 		}
1766:..\..\FreeRTOS/tasks.c **** 
1767:..\..\FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:..\..\FreeRTOS/tasks.c **** 		{
1769:..\..\FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:..\..\FreeRTOS/tasks.c **** 			{
1771:..\..\FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1772:..\..\FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:..\..\FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1774:..\..\FreeRTOS/tasks.c **** 			}
1775:..\..\FreeRTOS/tasks.c **** 			else
1776:..\..\FreeRTOS/tasks.c **** 			{
1777:..\..\FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:..\..\FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:..\..\FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1780:..\..\FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:..\..\FreeRTOS/tasks.c **** 				{
1782:..\..\FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:..\..\FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:..\..\FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1785:..\..\FreeRTOS/tasks.c **** 					is. */
1786:..\..\FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1787:..\..\FreeRTOS/tasks.c **** 				}
1788:..\..\FreeRTOS/tasks.c **** 				else
1789:..\..\FreeRTOS/tasks.c **** 				{
1790:..\..\FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1791:..\..\FreeRTOS/tasks.c **** 				}
1792:..\..\FreeRTOS/tasks.c **** 			}
1793:..\..\FreeRTOS/tasks.c **** 		}
1794:..\..\FreeRTOS/tasks.c **** 		else
1795:..\..\FreeRTOS/tasks.c **** 		{
1796:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:..\..\FreeRTOS/tasks.c **** 		}
1798:..\..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 33


1799:..\..\FreeRTOS/tasks.c **** 
1800:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1802:..\..\FreeRTOS/tasks.c **** 
1803:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:..\..\FreeRTOS/tasks.c **** 
1805:..\..\FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:..\..\FreeRTOS/tasks.c **** 	{
  27              		.loc 1 1806 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1807:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:..\..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:..\..\FreeRTOS/tasks.c **** 
1810:..\..\FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:..\..\FreeRTOS/tasks.c **** 		section. */
1812:..\..\FreeRTOS/tasks.c **** 
1813:..\..\FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:..\..\FreeRTOS/tasks.c **** 		configASSERT( xTask );
1815:..\..\FreeRTOS/tasks.c **** 
1816:..\..\FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:..\..\FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1817 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 084B     		ldr	r3, .L6
  36 0004 9A42     		cmp	r2, r3
  37 0006 06D1     		bne	.L3
1818:..\..\FreeRTOS/tasks.c **** 		{
1819:..\..\FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:..\..\FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  38              		.loc 1 1820 0
  39 0008 836A     		ldr	r3, [r0, #40]
  40 000a 074A     		ldr	r2, .L6+4
  41 000c 9342     		cmp	r3, r2
  42 000e 04D0     		beq	.L4
1821:..\..\FreeRTOS/tasks.c **** 			{
1822:..\..\FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:..\..\FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:..\..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  43              		.loc 1 1824 0
  44 0010 2BB1     		cbz	r3, .L5
1807:..\..\FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1807 0
  46 0012 0020     		movs	r0, #0
  47              	.LVL1:
  48 0014 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  51 0016 0020     		movs	r0, #0
  52              	.LVL3:
  53 0018 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
  56 001a 0020     		movs	r0, #0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 34


  57              	.LVL5:
  58 001c 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
1825:..\..\FreeRTOS/tasks.c **** 				{
1826:..\..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
  61              		.loc 1 1826 0
  62 001e 0120     		movs	r0, #1
  63              	.LVL7:
1827:..\..\FreeRTOS/tasks.c **** 				}
1828:..\..\FreeRTOS/tasks.c **** 				else
1829:..\..\FreeRTOS/tasks.c **** 				{
1830:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:..\..\FreeRTOS/tasks.c **** 				}
1832:..\..\FreeRTOS/tasks.c **** 			}
1833:..\..\FreeRTOS/tasks.c **** 			else
1834:..\..\FreeRTOS/tasks.c **** 			{
1835:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:..\..\FreeRTOS/tasks.c **** 			}
1837:..\..\FreeRTOS/tasks.c **** 		}
1838:..\..\FreeRTOS/tasks.c **** 		else
1839:..\..\FreeRTOS/tasks.c **** 		{
1840:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:..\..\FreeRTOS/tasks.c **** 		}
1842:..\..\FreeRTOS/tasks.c **** 
1843:..\..\FreeRTOS/tasks.c **** 		return xReturn;
1844:..\..\FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  64              		.loc 1 1844 0
  65 0020 7047     		bx	lr
  66              	.L7:
  67 0022 00BF     		.align	2
  68              	.L6:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 14000000 		.word	.LANCHOR0+20
  71              		.cfi_endproc
  72              	.LFE79:
  73              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  74              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  78              		.type	prvTaskCheckFreeStackSpace, %function
  79              	prvTaskCheckFreeStackSpace:
  80              	.LFB104:
1845:..\..\FreeRTOS/tasks.c **** 
1846:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1848:..\..\FreeRTOS/tasks.c **** 
1849:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:..\..\FreeRTOS/tasks.c **** 
1851:..\..\FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:..\..\FreeRTOS/tasks.c **** 	{
1853:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:..\..\FreeRTOS/tasks.c **** 
1855:..\..\FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:..\..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1857:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 35


1858:..\..\FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:..\..\FreeRTOS/tasks.c **** 		currently executing task. */
1860:..\..\FreeRTOS/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:..\..\FreeRTOS/tasks.c **** 		{
1862:..\..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1863:..\..\FreeRTOS/tasks.c **** 			{
1864:..\..\FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:..\..\FreeRTOS/tasks.c **** 				{
1866:..\..\FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:..\..\FreeRTOS/tasks.c **** 
1868:..\..\FreeRTOS/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:..\..\FreeRTOS/tasks.c **** 					suspended because this is inside a critical section. */
1870:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:..\..\FreeRTOS/tasks.c **** 
1873:..\..\FreeRTOS/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:..\..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:..\..\FreeRTOS/tasks.c **** 					{
1876:..\..\FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:..\..\FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1878:..\..\FreeRTOS/tasks.c **** 						next yield. */
1879:..\..\FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:..\..\FreeRTOS/tasks.c **** 					}
1881:..\..\FreeRTOS/tasks.c **** 					else
1882:..\..\FreeRTOS/tasks.c **** 					{
1883:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:..\..\FreeRTOS/tasks.c **** 					}
1885:..\..\FreeRTOS/tasks.c **** 				}
1886:..\..\FreeRTOS/tasks.c **** 				else
1887:..\..\FreeRTOS/tasks.c **** 				{
1888:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:..\..\FreeRTOS/tasks.c **** 				}
1890:..\..\FreeRTOS/tasks.c **** 			}
1891:..\..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1892:..\..\FreeRTOS/tasks.c **** 		}
1893:..\..\FreeRTOS/tasks.c **** 		else
1894:..\..\FreeRTOS/tasks.c **** 		{
1895:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:..\..\FreeRTOS/tasks.c **** 		}
1897:..\..\FreeRTOS/tasks.c **** 	}
1898:..\..\FreeRTOS/tasks.c **** 
1899:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:..\..\FreeRTOS/tasks.c **** 
1901:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1902:..\..\FreeRTOS/tasks.c **** 
1903:..\..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:..\..\FreeRTOS/tasks.c **** 
1905:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:..\..\FreeRTOS/tasks.c **** 	{
1907:..\..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:..\..\FreeRTOS/tasks.c **** 
1911:..\..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1912:..\..\FreeRTOS/tasks.c **** 
1913:..\..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:..\..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 36


1915:..\..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:..\..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:..\..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:..\..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:..\..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:..\..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:..\..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:..\..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:..\..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:..\..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:..\..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:..\..\FreeRTOS/tasks.c **** 		provided on the following link:
1928:..\..\FreeRTOS/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:..\..\FreeRTOS/tasks.c **** 
1931:..\..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:..\..\FreeRTOS/tasks.c **** 		{
1933:..\..\FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:..\..\FreeRTOS/tasks.c **** 			{
1935:..\..\FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:..\..\FreeRTOS/tasks.c **** 
1937:..\..\FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:..\..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:..\..\FreeRTOS/tasks.c **** 				{
1940:..\..\FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:..\..\FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1942:..\..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:..\..\FreeRTOS/tasks.c **** 					{
1944:..\..\FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1945:..\..\FreeRTOS/tasks.c **** 					}
1946:..\..\FreeRTOS/tasks.c **** 					else
1947:..\..\FreeRTOS/tasks.c **** 					{
1948:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:..\..\FreeRTOS/tasks.c **** 					}
1950:..\..\FreeRTOS/tasks.c **** 
1951:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:..\..\FreeRTOS/tasks.c **** 				}
1954:..\..\FreeRTOS/tasks.c **** 				else
1955:..\..\FreeRTOS/tasks.c **** 				{
1956:..\..\FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:..\..\FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:..\..\FreeRTOS/tasks.c **** 					unsuspended. */
1959:..\..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:..\..\FreeRTOS/tasks.c **** 				}
1961:..\..\FreeRTOS/tasks.c **** 			}
1962:..\..\FreeRTOS/tasks.c **** 			else
1963:..\..\FreeRTOS/tasks.c **** 			{
1964:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:..\..\FreeRTOS/tasks.c **** 			}
1966:..\..\FreeRTOS/tasks.c **** 		}
1967:..\..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:..\..\FreeRTOS/tasks.c **** 
1969:..\..\FreeRTOS/tasks.c **** 		return xYieldRequired;
1970:..\..\FreeRTOS/tasks.c **** 	}
1971:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 37


1972:..\..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1974:..\..\FreeRTOS/tasks.c **** 
1975:..\..\FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1976:..\..\FreeRTOS/tasks.c **** {
1977:..\..\FreeRTOS/tasks.c **** BaseType_t xReturn;
1978:..\..\FreeRTOS/tasks.c **** 
1979:..\..\FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:..\..\FreeRTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:..\..\FreeRTOS/tasks.c **** 	{
1982:..\..\FreeRTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:..\..\FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:..\..\FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:..\..\FreeRTOS/tasks.c **** 
1986:..\..\FreeRTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:..\..\FreeRTOS/tasks.c **** 		address of the RAM then create the idle task. */
1988:..\..\FreeRTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:..\..\FreeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:..\..\FreeRTOS/tasks.c **** 												configIDLE_TASK_NAME,
1991:..\..\FreeRTOS/tasks.c **** 												ulIdleTaskStackSize,
1992:..\..\FreeRTOS/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:..\..\FreeRTOS/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:..\..\FreeRTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1995:..\..\FreeRTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:..\..\FreeRTOS/tasks.c **** 
1997:..\..\FreeRTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:..\..\FreeRTOS/tasks.c **** 		{
1999:..\..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
2000:..\..\FreeRTOS/tasks.c **** 		}
2001:..\..\FreeRTOS/tasks.c **** 		else
2002:..\..\FreeRTOS/tasks.c **** 		{
2003:..\..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2004:..\..\FreeRTOS/tasks.c **** 		}
2005:..\..\FreeRTOS/tasks.c **** 	}
2006:..\..\FreeRTOS/tasks.c **** 	#else
2007:..\..\FreeRTOS/tasks.c **** 	{
2008:..\..\FreeRTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:..\..\FreeRTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:..\..\FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
2011:..\..\FreeRTOS/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:..\..\FreeRTOS/tasks.c **** 								( void * ) NULL,
2013:..\..\FreeRTOS/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:..\..\FreeRTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:..\..\FreeRTOS/tasks.c **** 	}
2016:..\..\FreeRTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:..\..\FreeRTOS/tasks.c **** 
2018:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:..\..\FreeRTOS/tasks.c **** 	{
2020:..\..\FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
2021:..\..\FreeRTOS/tasks.c **** 		{
2022:..\..\FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:..\..\FreeRTOS/tasks.c **** 		}
2024:..\..\FreeRTOS/tasks.c **** 		else
2025:..\..\FreeRTOS/tasks.c **** 		{
2026:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:..\..\FreeRTOS/tasks.c **** 		}
2028:..\..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 38


2029:..\..\FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:..\..\FreeRTOS/tasks.c **** 
2031:..\..\FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
2032:..\..\FreeRTOS/tasks.c **** 	{
2033:..\..\FreeRTOS/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:..\..\FreeRTOS/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:..\..\FreeRTOS/tasks.c **** 		the only macro called by the function. */
2036:..\..\FreeRTOS/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:..\..\FreeRTOS/tasks.c **** 		{
2038:..\..\FreeRTOS/tasks.c **** 			freertos_tasks_c_additions_init();
2039:..\..\FreeRTOS/tasks.c **** 		}
2040:..\..\FreeRTOS/tasks.c **** 		#endif
2041:..\..\FreeRTOS/tasks.c **** 
2042:..\..\FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:..\..\FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:..\..\FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:..\..\FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:..\..\FreeRTOS/tasks.c **** 		starts to run. */
2047:..\..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:..\..\FreeRTOS/tasks.c **** 
2049:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:..\..\FreeRTOS/tasks.c **** 		{
2051:..\..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:..\..\FreeRTOS/tasks.c **** 			structure specific to the task that will run first.
2053:..\..\FreeRTOS/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:..\..\FreeRTOS/tasks.c **** 			for additional information. */
2055:..\..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:..\..\FreeRTOS/tasks.c **** 		}
2057:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:..\..\FreeRTOS/tasks.c **** 
2059:..\..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:..\..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:..\..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:..\..\FreeRTOS/tasks.c **** 
2063:..\..\FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:..\..\FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:..\..\FreeRTOS/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:..\..\FreeRTOS/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:..\..\FreeRTOS/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:..\..\FreeRTOS/tasks.c **** 		FreeRTOSConfig.h file. */
2069:..\..\FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:..\..\FreeRTOS/tasks.c **** 
2071:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:..\..\FreeRTOS/tasks.c **** 
2073:..\..\FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:..\..\FreeRTOS/tasks.c **** 		portable interface. */
2075:..\..\FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:..\..\FreeRTOS/tasks.c **** 		{
2077:..\..\FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:..\..\FreeRTOS/tasks.c **** 			function will not return. */
2079:..\..\FreeRTOS/tasks.c **** 		}
2080:..\..\FreeRTOS/tasks.c **** 		else
2081:..\..\FreeRTOS/tasks.c **** 		{
2082:..\..\FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:..\..\FreeRTOS/tasks.c **** 		}
2084:..\..\FreeRTOS/tasks.c **** 	}
2085:..\..\FreeRTOS/tasks.c **** 	else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 39


2086:..\..\FreeRTOS/tasks.c **** 	{
2087:..\..\FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:..\..\FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:..\..\FreeRTOS/tasks.c **** 		or the timer task. */
2090:..\..\FreeRTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:..\..\FreeRTOS/tasks.c **** 	}
2092:..\..\FreeRTOS/tasks.c **** 
2093:..\..\FreeRTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:..\..\FreeRTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:..\..\FreeRTOS/tasks.c **** 	( void ) xIdleTaskHandle;
2096:..\..\FreeRTOS/tasks.c **** }
2097:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2098:..\..\FreeRTOS/tasks.c **** 
2099:..\..\FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
2100:..\..\FreeRTOS/tasks.c **** {
2101:..\..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:..\..\FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:..\..\FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:..\..\FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:..\..\FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:..\..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
2107:..\..\FreeRTOS/tasks.c **** }
2108:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2109:..\..\FreeRTOS/tasks.c **** 
2110:..\..\FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
2111:..\..\FreeRTOS/tasks.c **** {
2112:..\..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:..\..\FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:..\..\FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:..\..\FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
2116:..\..\FreeRTOS/tasks.c **** 
2117:..\..\FreeRTOS/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:..\..\FreeRTOS/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:..\..\FreeRTOS/tasks.c **** 	portSOFTWARE_BARRIER();
2120:..\..\FreeRTOS/tasks.c **** 
2121:..\..\FreeRTOS/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:..\..\FreeRTOS/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:..\..\FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
2124:..\..\FreeRTOS/tasks.c **** 
2125:..\..\FreeRTOS/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:..\..\FreeRTOS/tasks.c **** 	the above increment elsewhere. */
2127:..\..\FreeRTOS/tasks.c **** 	portMEMORY_BARRIER();
2128:..\..\FreeRTOS/tasks.c **** }
2129:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2130:..\..\FreeRTOS/tasks.c **** 
2131:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:..\..\FreeRTOS/tasks.c **** 
2133:..\..\FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:..\..\FreeRTOS/tasks.c **** 	{
2135:..\..\FreeRTOS/tasks.c **** 	TickType_t xReturn;
2136:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:..\..\FreeRTOS/tasks.c **** 
2138:..\..\FreeRTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:..\..\FreeRTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:..\..\FreeRTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:..\..\FreeRTOS/tasks.c **** 		running. */
2142:..\..\FreeRTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 40


2143:..\..\FreeRTOS/tasks.c **** 		{
2144:..\..\FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:..\..\FreeRTOS/tasks.c **** 			{
2146:..\..\FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:..\..\FreeRTOS/tasks.c **** 			}
2148:..\..\FreeRTOS/tasks.c **** 		}
2149:..\..\FreeRTOS/tasks.c **** 		#else
2150:..\..\FreeRTOS/tasks.c **** 		{
2151:..\..\FreeRTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:..\..\FreeRTOS/tasks.c **** 
2153:..\..\FreeRTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:..\..\FreeRTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:..\..\FreeRTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:..\..\FreeRTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:..\..\FreeRTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:..\..\FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:..\..\FreeRTOS/tasks.c **** 			{
2160:..\..\FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:..\..\FreeRTOS/tasks.c **** 			}
2162:..\..\FreeRTOS/tasks.c **** 		}
2163:..\..\FreeRTOS/tasks.c **** 		#endif
2164:..\..\FreeRTOS/tasks.c **** 
2165:..\..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:..\..\FreeRTOS/tasks.c **** 		{
2167:..\..\FreeRTOS/tasks.c **** 			xReturn = 0;
2168:..\..\FreeRTOS/tasks.c **** 		}
2169:..\..\FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:..\..\FreeRTOS/tasks.c **** 		{
2171:..\..\FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:..\..\FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:..\..\FreeRTOS/tasks.c **** 			processed. */
2174:..\..\FreeRTOS/tasks.c **** 			xReturn = 0;
2175:..\..\FreeRTOS/tasks.c **** 		}
2176:..\..\FreeRTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:..\..\FreeRTOS/tasks.c **** 		{
2178:..\..\FreeRTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:..\..\FreeRTOS/tasks.c **** 			idle priority.  This path can only be reached if
2180:..\..\FreeRTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:..\..\FreeRTOS/tasks.c **** 			xReturn = 0;
2182:..\..\FreeRTOS/tasks.c **** 		}
2183:..\..\FreeRTOS/tasks.c **** 		else
2184:..\..\FreeRTOS/tasks.c **** 		{
2185:..\..\FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:..\..\FreeRTOS/tasks.c **** 		}
2187:..\..\FreeRTOS/tasks.c **** 
2188:..\..\FreeRTOS/tasks.c **** 		return xReturn;
2189:..\..\FreeRTOS/tasks.c **** 	}
2190:..\..\FreeRTOS/tasks.c **** 
2191:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2193:..\..\FreeRTOS/tasks.c **** 
2194:..\..\FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:..\..\FreeRTOS/tasks.c **** {
2196:..\..\FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
2197:..\..\FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:..\..\FreeRTOS/tasks.c **** 
2199:..\..\FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 41


2200:..\..\FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:..\..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:..\..\FreeRTOS/tasks.c **** 
2203:..\..\FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:..\..\FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:..\..\FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:..\..\FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:..\..\FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:..\..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2209:..\..\FreeRTOS/tasks.c **** 	{
2210:..\..\FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
2211:..\..\FreeRTOS/tasks.c **** 
2212:..\..\FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:..\..\FreeRTOS/tasks.c **** 		{
2214:..\..\FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:..\..\FreeRTOS/tasks.c **** 			{
2216:..\..\FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:..\..\FreeRTOS/tasks.c **** 				appropriate ready list. */
2218:..\..\FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:..\..\FreeRTOS/tasks.c **** 				{
2220:..\..\FreeRTOS/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:..\..\FreeRTOS/tasks.c **** 
2225:..\..\FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:..\..\FreeRTOS/tasks.c **** 					task then a yield must be performed. */
2227:..\..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:..\..\FreeRTOS/tasks.c **** 					{
2229:..\..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2230:..\..\FreeRTOS/tasks.c **** 					}
2231:..\..\FreeRTOS/tasks.c **** 					else
2232:..\..\FreeRTOS/tasks.c **** 					{
2233:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:..\..\FreeRTOS/tasks.c **** 					}
2235:..\..\FreeRTOS/tasks.c **** 				}
2236:..\..\FreeRTOS/tasks.c **** 
2237:..\..\FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2238:..\..\FreeRTOS/tasks.c **** 				{
2239:..\..\FreeRTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:..\..\FreeRTOS/tasks.c **** 					which may have prevented the next unblock time from being
2241:..\..\FreeRTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:..\..\FreeRTOS/tasks.c **** 					important for low power tickless implementations, where
2243:..\..\FreeRTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:..\..\FreeRTOS/tasks.c **** 					state. */
2245:..\..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:..\..\FreeRTOS/tasks.c **** 				}
2247:..\..\FreeRTOS/tasks.c **** 
2248:..\..\FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:..\..\FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:..\..\FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:..\..\FreeRTOS/tasks.c **** 				time. */
2252:..\..\FreeRTOS/tasks.c **** 				{
2253:..\..\FreeRTOS/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:..\..\FreeRTOS/tasks.c **** 
2255:..\..\FreeRTOS/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:..\..\FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 42


2257:..\..\FreeRTOS/tasks.c **** 						do
2258:..\..\FreeRTOS/tasks.c **** 						{
2259:..\..\FreeRTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:..\..\FreeRTOS/tasks.c **** 							{
2261:..\..\FreeRTOS/tasks.c **** 								xYieldPending = pdTRUE;
2262:..\..\FreeRTOS/tasks.c **** 							}
2263:..\..\FreeRTOS/tasks.c **** 							else
2264:..\..\FreeRTOS/tasks.c **** 							{
2265:..\..\FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:..\..\FreeRTOS/tasks.c **** 							}
2267:..\..\FreeRTOS/tasks.c **** 							--xPendedCounts;
2268:..\..\FreeRTOS/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:..\..\FreeRTOS/tasks.c **** 
2270:..\..\FreeRTOS/tasks.c **** 						xPendedTicks = 0;
2271:..\..\FreeRTOS/tasks.c **** 					}
2272:..\..\FreeRTOS/tasks.c **** 					else
2273:..\..\FreeRTOS/tasks.c **** 					{
2274:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:..\..\FreeRTOS/tasks.c **** 					}
2276:..\..\FreeRTOS/tasks.c **** 				}
2277:..\..\FreeRTOS/tasks.c **** 
2278:..\..\FreeRTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:..\..\FreeRTOS/tasks.c **** 				{
2280:..\..\FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:..\..\FreeRTOS/tasks.c **** 					{
2282:..\..\FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:..\..\FreeRTOS/tasks.c **** 					}
2284:..\..\FreeRTOS/tasks.c **** 					#endif
2285:..\..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:..\..\FreeRTOS/tasks.c **** 				}
2287:..\..\FreeRTOS/tasks.c **** 				else
2288:..\..\FreeRTOS/tasks.c **** 				{
2289:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:..\..\FreeRTOS/tasks.c **** 				}
2291:..\..\FreeRTOS/tasks.c **** 			}
2292:..\..\FreeRTOS/tasks.c **** 		}
2293:..\..\FreeRTOS/tasks.c **** 		else
2294:..\..\FreeRTOS/tasks.c **** 		{
2295:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:..\..\FreeRTOS/tasks.c **** 		}
2297:..\..\FreeRTOS/tasks.c **** 	}
2298:..\..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2299:..\..\FreeRTOS/tasks.c **** 
2300:..\..\FreeRTOS/tasks.c **** 	return xAlreadyYielded;
2301:..\..\FreeRTOS/tasks.c **** }
2302:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2303:..\..\FreeRTOS/tasks.c **** 
2304:..\..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:..\..\FreeRTOS/tasks.c **** {
2306:..\..\FreeRTOS/tasks.c **** TickType_t xTicks;
2307:..\..\FreeRTOS/tasks.c **** 
2308:..\..\FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:..\..\FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:..\..\FreeRTOS/tasks.c **** 	{
2311:..\..\FreeRTOS/tasks.c **** 		xTicks = xTickCount;
2312:..\..\FreeRTOS/tasks.c **** 	}
2313:..\..\FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 43


2314:..\..\FreeRTOS/tasks.c **** 
2315:..\..\FreeRTOS/tasks.c **** 	return xTicks;
2316:..\..\FreeRTOS/tasks.c **** }
2317:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2318:..\..\FreeRTOS/tasks.c **** 
2319:..\..\FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:..\..\FreeRTOS/tasks.c **** {
2321:..\..\FreeRTOS/tasks.c **** TickType_t xReturn;
2322:..\..\FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:..\..\FreeRTOS/tasks.c **** 
2324:..\..\FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:..\..\FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:..\..\FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:..\..\FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:..\..\FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:..\..\FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:..\..\FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:..\..\FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:..\..\FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:..\..\FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:..\..\FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:..\..\FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:..\..\FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:..\..\FreeRTOS/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:..\..\FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:..\..\FreeRTOS/tasks.c **** 
2340:..\..\FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:..\..\FreeRTOS/tasks.c **** 	{
2342:..\..\FreeRTOS/tasks.c **** 		xReturn = xTickCount;
2343:..\..\FreeRTOS/tasks.c **** 	}
2344:..\..\FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:..\..\FreeRTOS/tasks.c **** 
2346:..\..\FreeRTOS/tasks.c **** 	return xReturn;
2347:..\..\FreeRTOS/tasks.c **** }
2348:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2349:..\..\FreeRTOS/tasks.c **** 
2350:..\..\FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:..\..\FreeRTOS/tasks.c **** {
2352:..\..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:..\..\FreeRTOS/tasks.c **** 	BaseType_t. */
2354:..\..\FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:..\..\FreeRTOS/tasks.c **** }
2356:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2357:..\..\FreeRTOS/tasks.c **** 
2358:..\..\FreeRTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:..\..\FreeRTOS/tasks.c **** {
2360:..\..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
2361:..\..\FreeRTOS/tasks.c **** 
2362:..\..\FreeRTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:..\..\FreeRTOS/tasks.c **** 	queried. */
2364:..\..\FreeRTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
2366:..\..\FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:..\..\FreeRTOS/tasks.c **** }
2368:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2369:..\..\FreeRTOS/tasks.c **** 
2370:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 44


2371:..\..\FreeRTOS/tasks.c **** 
2372:..\..\FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:..\..\FreeRTOS/tasks.c **** 	{
2374:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:..\..\FreeRTOS/tasks.c **** 	UBaseType_t x;
2376:..\..\FreeRTOS/tasks.c **** 	char cNextChar;
2377:..\..\FreeRTOS/tasks.c **** 	BaseType_t xBreakLoop;
2378:..\..\FreeRTOS/tasks.c **** 
2379:..\..\FreeRTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:..\..\FreeRTOS/tasks.c **** 
2381:..\..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:..\..\FreeRTOS/tasks.c **** 		{
2383:..\..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:..\..\FreeRTOS/tasks.c **** 
2385:..\..\FreeRTOS/tasks.c **** 			do
2386:..\..\FreeRTOS/tasks.c **** 			{
2387:..\..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:..\..\FreeRTOS/tasks.c **** 
2389:..\..\FreeRTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2390:..\..\FreeRTOS/tasks.c **** 				mismatch. */
2391:..\..\FreeRTOS/tasks.c **** 				xBreakLoop = pdFALSE;
2392:..\..\FreeRTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:..\..\FreeRTOS/tasks.c **** 				{
2394:..\..\FreeRTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:..\..\FreeRTOS/tasks.c **** 
2396:..\..\FreeRTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:..\..\FreeRTOS/tasks.c **** 					{
2398:..\..\FreeRTOS/tasks.c **** 						/* Characters didn't match. */
2399:..\..\FreeRTOS/tasks.c **** 						xBreakLoop = pdTRUE;
2400:..\..\FreeRTOS/tasks.c **** 					}
2401:..\..\FreeRTOS/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:..\..\FreeRTOS/tasks.c **** 					{
2403:..\..\FreeRTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2404:..\..\FreeRTOS/tasks.c **** 						found. */
2405:..\..\FreeRTOS/tasks.c **** 						pxReturn = pxNextTCB;
2406:..\..\FreeRTOS/tasks.c **** 						xBreakLoop = pdTRUE;
2407:..\..\FreeRTOS/tasks.c **** 					}
2408:..\..\FreeRTOS/tasks.c **** 					else
2409:..\..\FreeRTOS/tasks.c **** 					{
2410:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:..\..\FreeRTOS/tasks.c **** 					}
2412:..\..\FreeRTOS/tasks.c **** 
2413:..\..\FreeRTOS/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:..\..\FreeRTOS/tasks.c **** 					{
2415:..\..\FreeRTOS/tasks.c **** 						break;
2416:..\..\FreeRTOS/tasks.c **** 					}
2417:..\..\FreeRTOS/tasks.c **** 				}
2418:..\..\FreeRTOS/tasks.c **** 
2419:..\..\FreeRTOS/tasks.c **** 				if( pxReturn != NULL )
2420:..\..\FreeRTOS/tasks.c **** 				{
2421:..\..\FreeRTOS/tasks.c **** 					/* The handle has been found. */
2422:..\..\FreeRTOS/tasks.c **** 					break;
2423:..\..\FreeRTOS/tasks.c **** 				}
2424:..\..\FreeRTOS/tasks.c **** 
2425:..\..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:..\..\FreeRTOS/tasks.c **** 		}
2427:..\..\FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 45


2428:..\..\FreeRTOS/tasks.c **** 		{
2429:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:..\..\FreeRTOS/tasks.c **** 		}
2431:..\..\FreeRTOS/tasks.c **** 
2432:..\..\FreeRTOS/tasks.c **** 		return pxReturn;
2433:..\..\FreeRTOS/tasks.c **** 	}
2434:..\..\FreeRTOS/tasks.c **** 
2435:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2437:..\..\FreeRTOS/tasks.c **** 
2438:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:..\..\FreeRTOS/tasks.c **** 
2440:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:..\..\FreeRTOS/tasks.c **** 	{
2442:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:..\..\FreeRTOS/tasks.c **** 	TCB_t* pxTCB;
2444:..\..\FreeRTOS/tasks.c **** 
2445:..\..\FreeRTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:..\..\FreeRTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:..\..\FreeRTOS/tasks.c **** 
2448:..\..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2449:..\..\FreeRTOS/tasks.c **** 		{
2450:..\..\FreeRTOS/tasks.c **** 			/* Search the ready lists. */
2451:..\..\FreeRTOS/tasks.c **** 			do
2452:..\..\FreeRTOS/tasks.c **** 			{
2453:..\..\FreeRTOS/tasks.c **** 				uxQueue--;
2454:..\..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:..\..\FreeRTOS/tasks.c **** 
2456:..\..\FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2457:..\..\FreeRTOS/tasks.c **** 				{
2458:..\..\FreeRTOS/tasks.c **** 					/* Found the handle. */
2459:..\..\FreeRTOS/tasks.c **** 					break;
2460:..\..\FreeRTOS/tasks.c **** 				}
2461:..\..\FreeRTOS/tasks.c **** 
2462:..\..\FreeRTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:..\..\FreeRTOS/tasks.c **** 
2464:..\..\FreeRTOS/tasks.c **** 			/* Search the delayed lists. */
2465:..\..\FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2466:..\..\FreeRTOS/tasks.c **** 			{
2467:..\..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:..\..\FreeRTOS/tasks.c **** 			}
2469:..\..\FreeRTOS/tasks.c **** 
2470:..\..\FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2471:..\..\FreeRTOS/tasks.c **** 			{
2472:..\..\FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:..\..\FreeRTOS/tasks.c **** 			}
2474:..\..\FreeRTOS/tasks.c **** 
2475:..\..\FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:..\..\FreeRTOS/tasks.c **** 			{
2477:..\..\FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2478:..\..\FreeRTOS/tasks.c **** 				{
2479:..\..\FreeRTOS/tasks.c **** 					/* Search the suspended list. */
2480:..\..\FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:..\..\FreeRTOS/tasks.c **** 				}
2482:..\..\FreeRTOS/tasks.c **** 			}
2483:..\..\FreeRTOS/tasks.c **** 			#endif
2484:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 46


2485:..\..\FreeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:..\..\FreeRTOS/tasks.c **** 			{
2487:..\..\FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2488:..\..\FreeRTOS/tasks.c **** 				{
2489:..\..\FreeRTOS/tasks.c **** 					/* Search the deleted list. */
2490:..\..\FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:..\..\FreeRTOS/tasks.c **** 				}
2492:..\..\FreeRTOS/tasks.c **** 			}
2493:..\..\FreeRTOS/tasks.c **** 			#endif
2494:..\..\FreeRTOS/tasks.c **** 		}
2495:..\..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2496:..\..\FreeRTOS/tasks.c **** 
2497:..\..\FreeRTOS/tasks.c **** 		return pxTCB;
2498:..\..\FreeRTOS/tasks.c **** 	}
2499:..\..\FreeRTOS/tasks.c **** 
2500:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2502:..\..\FreeRTOS/tasks.c **** 
2503:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:..\..\FreeRTOS/tasks.c **** 
2505:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:..\..\FreeRTOS/tasks.c **** 	{
2507:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:..\..\FreeRTOS/tasks.c **** 
2509:..\..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2510:..\..\FreeRTOS/tasks.c **** 		{
2511:..\..\FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:..\..\FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:..\..\FreeRTOS/tasks.c **** 			{
2514:..\..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:..\..\FreeRTOS/tasks.c **** 				task in the Ready state. */
2516:..\..\FreeRTOS/tasks.c **** 				do
2517:..\..\FreeRTOS/tasks.c **** 				{
2518:..\..\FreeRTOS/tasks.c **** 					uxQueue--;
2519:..\..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:..\..\FreeRTOS/tasks.c **** 
2521:..\..\FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:..\..\FreeRTOS/tasks.c **** 
2523:..\..\FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:..\..\FreeRTOS/tasks.c **** 				task in the Blocked state. */
2525:..\..\FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:..\..\FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:..\..\FreeRTOS/tasks.c **** 
2528:..\..\FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:..\..\FreeRTOS/tasks.c **** 				{
2530:..\..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:..\..\FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:..\..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:..\..\FreeRTOS/tasks.c **** 				}
2534:..\..\FreeRTOS/tasks.c **** 				#endif
2535:..\..\FreeRTOS/tasks.c **** 
2536:..\..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:..\..\FreeRTOS/tasks.c **** 				{
2538:..\..\FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:..\..\FreeRTOS/tasks.c **** 					each task in the Suspended state. */
2540:..\..\FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:..\..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 47


2542:..\..\FreeRTOS/tasks.c **** 				#endif
2543:..\..\FreeRTOS/tasks.c **** 
2544:..\..\FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:..\..\FreeRTOS/tasks.c **** 				{
2546:..\..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:..\..\FreeRTOS/tasks.c **** 					{
2548:..\..\FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:..\..\FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:..\..\FreeRTOS/tasks.c **** 						#else
2551:..\..\FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:..\..\FreeRTOS/tasks.c **** 						#endif
2553:..\..\FreeRTOS/tasks.c **** 					}
2554:..\..\FreeRTOS/tasks.c **** 				}
2555:..\..\FreeRTOS/tasks.c **** 				#else
2556:..\..\FreeRTOS/tasks.c **** 				{
2557:..\..\FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:..\..\FreeRTOS/tasks.c **** 					{
2559:..\..\FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
2560:..\..\FreeRTOS/tasks.c **** 					}
2561:..\..\FreeRTOS/tasks.c **** 				}
2562:..\..\FreeRTOS/tasks.c **** 				#endif
2563:..\..\FreeRTOS/tasks.c **** 			}
2564:..\..\FreeRTOS/tasks.c **** 			else
2565:..\..\FreeRTOS/tasks.c **** 			{
2566:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:..\..\FreeRTOS/tasks.c **** 			}
2568:..\..\FreeRTOS/tasks.c **** 		}
2569:..\..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2570:..\..\FreeRTOS/tasks.c **** 
2571:..\..\FreeRTOS/tasks.c **** 		return uxTask;
2572:..\..\FreeRTOS/tasks.c **** 	}
2573:..\..\FreeRTOS/tasks.c **** 
2574:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2576:..\..\FreeRTOS/tasks.c **** 
2577:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:..\..\FreeRTOS/tasks.c **** 
2579:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:..\..\FreeRTOS/tasks.c **** 	{
2581:..\..\FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:..\..\FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:..\..\FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:..\..\FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
2585:..\..\FreeRTOS/tasks.c **** 	}
2586:..\..\FreeRTOS/tasks.c **** 
2587:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2589:..\..\FreeRTOS/tasks.c **** 
2590:..\..\FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:..\..\FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:..\..\FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:..\..\FreeRTOS/tasks.c **** 1. */
2594:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:..\..\FreeRTOS/tasks.c **** 
2596:..\..\FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:..\..\FreeRTOS/tasks.c **** 	{
2598:..\..\FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 48


2599:..\..\FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:..\..\FreeRTOS/tasks.c **** 		each stepped tick. */
2601:..\..\FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:..\..\FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
2603:..\..\FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:..\..\FreeRTOS/tasks.c **** 	}
2605:..\..\FreeRTOS/tasks.c **** 
2606:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2608:..\..\FreeRTOS/tasks.c **** 
2609:..\..\FreeRTOS/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:..\..\FreeRTOS/tasks.c **** {
2611:..\..\FreeRTOS/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:..\..\FreeRTOS/tasks.c **** 
2613:..\..\FreeRTOS/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:..\..\FreeRTOS/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:..\..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:..\..\FreeRTOS/tasks.c **** 
2617:..\..\FreeRTOS/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:..\..\FreeRTOS/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:..\..\FreeRTOS/tasks.c **** 	vTaskSuspendAll();
2620:..\..\FreeRTOS/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:..\..\FreeRTOS/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:..\..\FreeRTOS/tasks.c **** 
2623:..\..\FreeRTOS/tasks.c **** 	return xYieldRequired;
2624:..\..\FreeRTOS/tasks.c **** }
2625:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2626:..\..\FreeRTOS/tasks.c **** 
2627:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:..\..\FreeRTOS/tasks.c **** 
2629:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:..\..\FreeRTOS/tasks.c **** 	{
2631:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2633:..\..\FreeRTOS/tasks.c **** 
2634:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
2635:..\..\FreeRTOS/tasks.c **** 
2636:..\..\FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2637:..\..\FreeRTOS/tasks.c **** 		{
2638:..\..\FreeRTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:..\..\FreeRTOS/tasks.c **** 			it is actually in the Blocked state. */
2640:..\..\FreeRTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:..\..\FreeRTOS/tasks.c **** 			{
2642:..\..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
2643:..\..\FreeRTOS/tasks.c **** 
2644:..\..\FreeRTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:..\..\FreeRTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:..\..\FreeRTOS/tasks.c **** 				scheduler is suspended. */
2647:..\..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:..\..\FreeRTOS/tasks.c **** 
2649:..\..\FreeRTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:..\..\FreeRTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:..\..\FreeRTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:..\..\FreeRTOS/tasks.c **** 				is used. */
2653:..\..\FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
2654:..\..\FreeRTOS/tasks.c **** 				{
2655:..\..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 49


2656:..\..\FreeRTOS/tasks.c **** 					{
2657:..\..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:..\..\FreeRTOS/tasks.c **** 
2659:..\..\FreeRTOS/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:..\..\FreeRTOS/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:..\..\FreeRTOS/tasks.c **** 						then block again. */
2662:..\..\FreeRTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:..\..\FreeRTOS/tasks.c **** 					}
2664:..\..\FreeRTOS/tasks.c **** 					else
2665:..\..\FreeRTOS/tasks.c **** 					{
2666:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:..\..\FreeRTOS/tasks.c **** 					}
2668:..\..\FreeRTOS/tasks.c **** 				}
2669:..\..\FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
2670:..\..\FreeRTOS/tasks.c **** 
2671:..\..\FreeRTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:..\..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:..\..\FreeRTOS/tasks.c **** 
2674:..\..\FreeRTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:..\..\FreeRTOS/tasks.c **** 				switch if preemption is turned off. */
2676:..\..\FreeRTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:..\..\FreeRTOS/tasks.c **** 				{
2678:..\..\FreeRTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:..\..\FreeRTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2680:..\..\FreeRTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2681:..\..\FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:..\..\FreeRTOS/tasks.c **** 					{
2683:..\..\FreeRTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:..\..\FreeRTOS/tasks.c **** 						is unsuspended. */
2685:..\..\FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2686:..\..\FreeRTOS/tasks.c **** 					}
2687:..\..\FreeRTOS/tasks.c **** 					else
2688:..\..\FreeRTOS/tasks.c **** 					{
2689:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:..\..\FreeRTOS/tasks.c **** 					}
2691:..\..\FreeRTOS/tasks.c **** 				}
2692:..\..\FreeRTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:..\..\FreeRTOS/tasks.c **** 			}
2694:..\..\FreeRTOS/tasks.c **** 			else
2695:..\..\FreeRTOS/tasks.c **** 			{
2696:..\..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
2697:..\..\FreeRTOS/tasks.c **** 			}
2698:..\..\FreeRTOS/tasks.c **** 		}
2699:..\..\FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2700:..\..\FreeRTOS/tasks.c **** 
2701:..\..\FreeRTOS/tasks.c **** 		return xReturn;
2702:..\..\FreeRTOS/tasks.c **** 	}
2703:..\..\FreeRTOS/tasks.c **** 
2704:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2706:..\..\FreeRTOS/tasks.c **** 
2707:..\..\FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:..\..\FreeRTOS/tasks.c **** {
2709:..\..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
2710:..\..\FreeRTOS/tasks.c **** TickType_t xItemValue;
2711:..\..\FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 50


2713:..\..\FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:..\..\FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:..\..\FreeRTOS/tasks.c **** 	tasks to be unblocked. */
2716:..\..\FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:..\..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:..\..\FreeRTOS/tasks.c **** 	{
2719:..\..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:..\..\FreeRTOS/tasks.c **** 		block. */
2721:..\..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:..\..\FreeRTOS/tasks.c **** 
2723:..\..\FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:..\..\FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2725:..\..\FreeRTOS/tasks.c **** 		xTickCount = xConstTickCount;
2726:..\..\FreeRTOS/tasks.c **** 
2727:..\..\FreeRTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:..\..\FreeRTOS/tasks.c **** 		{
2729:..\..\FreeRTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:..\..\FreeRTOS/tasks.c **** 		}
2731:..\..\FreeRTOS/tasks.c **** 		else
2732:..\..\FreeRTOS/tasks.c **** 		{
2733:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:..\..\FreeRTOS/tasks.c **** 		}
2735:..\..\FreeRTOS/tasks.c **** 
2736:..\..\FreeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:..\..\FreeRTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:..\..\FreeRTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:..\..\FreeRTOS/tasks.c **** 		look any further down the list. */
2740:..\..\FreeRTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:..\..\FreeRTOS/tasks.c **** 		{
2742:..\..\FreeRTOS/tasks.c **** 			for( ;; )
2743:..\..\FreeRTOS/tasks.c **** 			{
2744:..\..\FreeRTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:..\..\FreeRTOS/tasks.c **** 				{
2746:..\..\FreeRTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:..\..\FreeRTOS/tasks.c **** 					to the maximum possible value so it is extremely
2748:..\..\FreeRTOS/tasks.c **** 					unlikely that the
2749:..\..\FreeRTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:..\..\FreeRTOS/tasks.c **** 					next time through. */
2751:..\..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:..\..\FreeRTOS/tasks.c **** 					break;
2753:..\..\FreeRTOS/tasks.c **** 				}
2754:..\..\FreeRTOS/tasks.c **** 				else
2755:..\..\FreeRTOS/tasks.c **** 				{
2756:..\..\FreeRTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:..\..\FreeRTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:..\..\FreeRTOS/tasks.c **** 					at which the task at the head of the delayed list must
2759:..\..\FreeRTOS/tasks.c **** 					be removed from the Blocked state. */
2760:..\..\FreeRTOS/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:..\..\FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:..\..\FreeRTOS/tasks.c **** 
2763:..\..\FreeRTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:..\..\FreeRTOS/tasks.c **** 					{
2765:..\..\FreeRTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:..\..\FreeRTOS/tasks.c **** 						item value is the time at which the task at the head
2767:..\..\FreeRTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:..\..\FreeRTOS/tasks.c **** 						state -	so record the item value in
2769:..\..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 51


2770:..\..\FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:..\..\FreeRTOS/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:..\..\FreeRTOS/tasks.c **** 					}
2773:..\..\FreeRTOS/tasks.c **** 					else
2774:..\..\FreeRTOS/tasks.c **** 					{
2775:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:..\..\FreeRTOS/tasks.c **** 					}
2777:..\..\FreeRTOS/tasks.c **** 
2778:..\..\FreeRTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2780:..\..\FreeRTOS/tasks.c **** 
2781:..\..\FreeRTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:..\..\FreeRTOS/tasks.c **** 					it from the event list. */
2783:..\..\FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:..\..\FreeRTOS/tasks.c **** 					{
2785:..\..\FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:..\..\FreeRTOS/tasks.c **** 					}
2787:..\..\FreeRTOS/tasks.c **** 					else
2788:..\..\FreeRTOS/tasks.c **** 					{
2789:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:..\..\FreeRTOS/tasks.c **** 					}
2791:..\..\FreeRTOS/tasks.c **** 
2792:..\..\FreeRTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:..\..\FreeRTOS/tasks.c **** 					list. */
2794:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:..\..\FreeRTOS/tasks.c **** 
2796:..\..\FreeRTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:..\..\FreeRTOS/tasks.c **** 					context switch if preemption is turned off. */
2798:..\..\FreeRTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:..\..\FreeRTOS/tasks.c **** 					{
2800:..\..\FreeRTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2801:..\..\FreeRTOS/tasks.c **** 						only be performed if the unblocked task has a
2802:..\..\FreeRTOS/tasks.c **** 						priority that is equal to or higher than the
2803:..\..\FreeRTOS/tasks.c **** 						currently executing task. */
2804:..\..\FreeRTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:..\..\FreeRTOS/tasks.c **** 						{
2806:..\..\FreeRTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:..\..\FreeRTOS/tasks.c **** 						}
2808:..\..\FreeRTOS/tasks.c **** 						else
2809:..\..\FreeRTOS/tasks.c **** 						{
2810:..\..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:..\..\FreeRTOS/tasks.c **** 						}
2812:..\..\FreeRTOS/tasks.c **** 					}
2813:..\..\FreeRTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:..\..\FreeRTOS/tasks.c **** 				}
2815:..\..\FreeRTOS/tasks.c **** 			}
2816:..\..\FreeRTOS/tasks.c **** 		}
2817:..\..\FreeRTOS/tasks.c **** 
2818:..\..\FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:..\..\FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:..\..\FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:..\..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:..\..\FreeRTOS/tasks.c **** 		{
2823:..\..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:..\..\FreeRTOS/tasks.c **** 			{
2825:..\..\FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:..\..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 52


2827:..\..\FreeRTOS/tasks.c **** 			else
2828:..\..\FreeRTOS/tasks.c **** 			{
2829:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:..\..\FreeRTOS/tasks.c **** 			}
2831:..\..\FreeRTOS/tasks.c **** 		}
2832:..\..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:..\..\FreeRTOS/tasks.c **** 
2834:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:..\..\FreeRTOS/tasks.c **** 		{
2836:..\..\FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:..\..\FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:..\..\FreeRTOS/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:..\..\FreeRTOS/tasks.c **** 			{
2840:..\..\FreeRTOS/tasks.c **** 				vApplicationTickHook();
2841:..\..\FreeRTOS/tasks.c **** 			}
2842:..\..\FreeRTOS/tasks.c **** 			else
2843:..\..\FreeRTOS/tasks.c **** 			{
2844:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:..\..\FreeRTOS/tasks.c **** 			}
2846:..\..\FreeRTOS/tasks.c **** 		}
2847:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:..\..\FreeRTOS/tasks.c **** 
2849:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:..\..\FreeRTOS/tasks.c **** 		{
2851:..\..\FreeRTOS/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:..\..\FreeRTOS/tasks.c **** 			{
2853:..\..\FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:..\..\FreeRTOS/tasks.c **** 			}
2855:..\..\FreeRTOS/tasks.c **** 			else
2856:..\..\FreeRTOS/tasks.c **** 			{
2857:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:..\..\FreeRTOS/tasks.c **** 			}
2859:..\..\FreeRTOS/tasks.c **** 		}
2860:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:..\..\FreeRTOS/tasks.c **** 	}
2862:..\..\FreeRTOS/tasks.c **** 	else
2863:..\..\FreeRTOS/tasks.c **** 	{
2864:..\..\FreeRTOS/tasks.c **** 		++xPendedTicks;
2865:..\..\FreeRTOS/tasks.c **** 
2866:..\..\FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:..\..\FreeRTOS/tasks.c **** 		scheduler is locked. */
2868:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:..\..\FreeRTOS/tasks.c **** 		{
2870:..\..\FreeRTOS/tasks.c **** 			vApplicationTickHook();
2871:..\..\FreeRTOS/tasks.c **** 		}
2872:..\..\FreeRTOS/tasks.c **** 		#endif
2873:..\..\FreeRTOS/tasks.c **** 	}
2874:..\..\FreeRTOS/tasks.c **** 
2875:..\..\FreeRTOS/tasks.c **** 	return xSwitchRequired;
2876:..\..\FreeRTOS/tasks.c **** }
2877:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2878:..\..\FreeRTOS/tasks.c **** 
2879:..\..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:..\..\FreeRTOS/tasks.c **** 
2881:..\..\FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:..\..\FreeRTOS/tasks.c **** 	{
2883:..\..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 53


2884:..\..\FreeRTOS/tasks.c **** 
2885:..\..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:..\..\FreeRTOS/tasks.c **** 		getting set. */
2887:..\..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2888:..\..\FreeRTOS/tasks.c **** 		{
2889:..\..\FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:..\..\FreeRTOS/tasks.c **** 		}
2891:..\..\FreeRTOS/tasks.c **** 		else
2892:..\..\FreeRTOS/tasks.c **** 		{
2893:..\..\FreeRTOS/tasks.c **** 			xTCB = xTask;
2894:..\..\FreeRTOS/tasks.c **** 		}
2895:..\..\FreeRTOS/tasks.c **** 
2896:..\..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:..\..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2898:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2899:..\..\FreeRTOS/tasks.c **** 		{
2900:..\..\FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:..\..\FreeRTOS/tasks.c **** 		}
2902:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2903:..\..\FreeRTOS/tasks.c **** 	}
2904:..\..\FreeRTOS/tasks.c **** 
2905:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2907:..\..\FreeRTOS/tasks.c **** 
2908:..\..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:..\..\FreeRTOS/tasks.c **** 
2910:..\..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:..\..\FreeRTOS/tasks.c **** 	{
2912:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2913:..\..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2914:..\..\FreeRTOS/tasks.c **** 
2915:..\..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:..\..\FreeRTOS/tasks.c **** 
2918:..\..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:..\..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2920:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2921:..\..\FreeRTOS/tasks.c **** 		{
2922:..\..\FreeRTOS/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:..\..\FreeRTOS/tasks.c **** 		}
2924:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2925:..\..\FreeRTOS/tasks.c **** 
2926:..\..\FreeRTOS/tasks.c **** 		return xReturn;
2927:..\..\FreeRTOS/tasks.c **** 	}
2928:..\..\FreeRTOS/tasks.c **** 
2929:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2931:..\..\FreeRTOS/tasks.c **** 
2932:..\..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:..\..\FreeRTOS/tasks.c **** 
2934:..\..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:..\..\FreeRTOS/tasks.c **** 	{
2936:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2937:..\..\FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2938:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:..\..\FreeRTOS/tasks.c **** 
2940:..\..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 54


2941:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:..\..\FreeRTOS/tasks.c **** 
2943:..\..\FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:..\..\FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2945:..\..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:..\..\FreeRTOS/tasks.c **** 		{
2947:..\..\FreeRTOS/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:..\..\FreeRTOS/tasks.c **** 		}
2949:..\..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:..\..\FreeRTOS/tasks.c **** 
2951:..\..\FreeRTOS/tasks.c **** 		return xReturn;
2952:..\..\FreeRTOS/tasks.c **** 	}
2953:..\..\FreeRTOS/tasks.c **** 
2954:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2956:..\..\FreeRTOS/tasks.c **** 
2957:..\..\FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:..\..\FreeRTOS/tasks.c **** 
2959:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:..\..\FreeRTOS/tasks.c **** 	{
2961:..\..\FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2962:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2963:..\..\FreeRTOS/tasks.c **** 
2964:..\..\FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:..\..\FreeRTOS/tasks.c **** 		if( xTask == NULL )
2966:..\..\FreeRTOS/tasks.c **** 		{
2967:..\..\FreeRTOS/tasks.c **** 			xTCB = pxCurrentTCB;
2968:..\..\FreeRTOS/tasks.c **** 		}
2969:..\..\FreeRTOS/tasks.c **** 		else
2970:..\..\FreeRTOS/tasks.c **** 		{
2971:..\..\FreeRTOS/tasks.c **** 			xTCB = xTask;
2972:..\..\FreeRTOS/tasks.c **** 		}
2973:..\..\FreeRTOS/tasks.c **** 
2974:..\..\FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:..\..\FreeRTOS/tasks.c **** 		{
2976:..\..\FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:..\..\FreeRTOS/tasks.c **** 		}
2978:..\..\FreeRTOS/tasks.c **** 		else
2979:..\..\FreeRTOS/tasks.c **** 		{
2980:..\..\FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2981:..\..\FreeRTOS/tasks.c **** 		}
2982:..\..\FreeRTOS/tasks.c **** 
2983:..\..\FreeRTOS/tasks.c **** 		return xReturn;
2984:..\..\FreeRTOS/tasks.c **** 	}
2985:..\..\FreeRTOS/tasks.c **** 
2986:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2988:..\..\FreeRTOS/tasks.c **** 
2989:..\..\FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2990:..\..\FreeRTOS/tasks.c **** {
2991:..\..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:..\..\FreeRTOS/tasks.c **** 	{
2993:..\..\FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:..\..\FreeRTOS/tasks.c **** 		switch. */
2995:..\..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2996:..\..\FreeRTOS/tasks.c **** 	}
2997:..\..\FreeRTOS/tasks.c **** 	else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 55


2998:..\..\FreeRTOS/tasks.c **** 	{
2999:..\..\FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
3000:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:..\..\FreeRTOS/tasks.c **** 
3002:..\..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:..\..\FreeRTOS/tasks.c **** 		{
3004:..\..\FreeRTOS/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:..\..\FreeRTOS/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:..\..\FreeRTOS/tasks.c **** 			#else
3007:..\..\FreeRTOS/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:..\..\FreeRTOS/tasks.c **** 			#endif
3009:..\..\FreeRTOS/tasks.c **** 
3010:..\..\FreeRTOS/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:..\..\FreeRTOS/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:..\..\FreeRTOS/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:..\..\FreeRTOS/tasks.c **** 			protection here so count values are only valid until the timer
3014:..\..\FreeRTOS/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:..\..\FreeRTOS/tasks.c **** 			against suspect run time stat counter implementations - which
3016:..\..\FreeRTOS/tasks.c **** 			are provided by the application, not the kernel. */
3017:..\..\FreeRTOS/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:..\..\FreeRTOS/tasks.c **** 			{
3019:..\..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:..\..\FreeRTOS/tasks.c **** 			}
3021:..\..\FreeRTOS/tasks.c **** 			else
3022:..\..\FreeRTOS/tasks.c **** 			{
3023:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:..\..\FreeRTOS/tasks.c **** 			}
3025:..\..\FreeRTOS/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:..\..\FreeRTOS/tasks.c **** 		}
3027:..\..\FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:..\..\FreeRTOS/tasks.c **** 
3029:..\..\FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:..\..\FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:..\..\FreeRTOS/tasks.c **** 
3032:..\..\FreeRTOS/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:..\..\FreeRTOS/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:..\..\FreeRTOS/tasks.c **** 		{
3035:..\..\FreeRTOS/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:..\..\FreeRTOS/tasks.c **** 		}
3037:..\..\FreeRTOS/tasks.c **** 		#endif
3038:..\..\FreeRTOS/tasks.c **** 
3039:..\..\FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:..\..\FreeRTOS/tasks.c **** 		optimised asm code. */
3041:..\..\FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:..\..\FreeRTOS/tasks.c **** 
3044:..\..\FreeRTOS/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:..\..\FreeRTOS/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:..\..\FreeRTOS/tasks.c **** 		{
3047:..\..\FreeRTOS/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:..\..\FreeRTOS/tasks.c **** 		}
3049:..\..\FreeRTOS/tasks.c **** 		#endif
3050:..\..\FreeRTOS/tasks.c **** 
3051:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:..\..\FreeRTOS/tasks.c **** 		{
3053:..\..\FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:..\..\FreeRTOS/tasks.c **** 			structure specific to this task.
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 56


3055:..\..\FreeRTOS/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:..\..\FreeRTOS/tasks.c **** 			for additional information. */
3057:..\..\FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:..\..\FreeRTOS/tasks.c **** 		}
3059:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:..\..\FreeRTOS/tasks.c **** 	}
3061:..\..\FreeRTOS/tasks.c **** }
3062:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3063:..\..\FreeRTOS/tasks.c **** 
3064:..\..\FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:..\..\FreeRTOS/tasks.c **** {
3066:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
3067:..\..\FreeRTOS/tasks.c **** 
3068:..\..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:..\..\FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:..\..\FreeRTOS/tasks.c **** 
3071:..\..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:..\..\FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:..\..\FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:..\..\FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:..\..\FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:..\..\FreeRTOS/tasks.c **** 
3077:..\..\FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:..\..\FreeRTOS/tasks.c **** }
3079:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3080:..\..\FreeRTOS/tasks.c **** 
3081:..\..\FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:..\..\FreeRTOS/tasks.c **** {
3083:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
3084:..\..\FreeRTOS/tasks.c **** 
3085:..\..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:..\..\FreeRTOS/tasks.c **** 	the event groups implementation. */
3087:..\..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:..\..\FreeRTOS/tasks.c **** 
3089:..\..\FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:..\..\FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:..\..\FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
3092:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:..\..\FreeRTOS/tasks.c **** 
3094:..\..\FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:..\..\FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:..\..\FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:..\..\FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:..\..\FreeRTOS/tasks.c **** 	the task level). */
3099:..\..\FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:..\..\FreeRTOS/tasks.c **** 
3101:..\..\FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:..\..\FreeRTOS/tasks.c **** }
3103:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3104:..\..\FreeRTOS/tasks.c **** 
3105:..\..\FreeRTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:..\..\FreeRTOS/tasks.c **** 
3107:..\..\FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:..\..\FreeRTOS/tasks.c **** 	{
3109:..\..\FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
3110:..\..\FreeRTOS/tasks.c **** 
3111:..\..\FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 57


3112:..\..\FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:..\..\FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:..\..\FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
3115:..\..\FreeRTOS/tasks.c **** 
3116:..\..\FreeRTOS/tasks.c **** 
3117:..\..\FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:..\..\FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:..\..\FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:..\..\FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
3121:..\..\FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3122:..\..\FreeRTOS/tasks.c **** 
3123:..\..\FreeRTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:..\..\FreeRTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:..\..\FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:..\..\FreeRTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:..\..\FreeRTOS/tasks.c **** 		{
3128:..\..\FreeRTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:..\..\FreeRTOS/tasks.c **** 		}
3130:..\..\FreeRTOS/tasks.c **** 
3131:..\..\FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:..\..\FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:..\..\FreeRTOS/tasks.c **** 	}
3134:..\..\FreeRTOS/tasks.c **** 
3135:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
3136:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3137:..\..\FreeRTOS/tasks.c **** 
3138:..\..\FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:..\..\FreeRTOS/tasks.c **** {
3140:..\..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3141:..\..\FreeRTOS/tasks.c **** BaseType_t xReturn;
3142:..\..\FreeRTOS/tasks.c **** 
3143:..\..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:..\..\FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
3145:..\..\FreeRTOS/tasks.c **** 
3146:..\..\FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:..\..\FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:..\..\FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
3149:..\..\FreeRTOS/tasks.c **** 
3150:..\..\FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:..\..\FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:..\..\FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:..\..\FreeRTOS/tasks.c **** 
3154:..\..\FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:..\..\FreeRTOS/tasks.c **** 	pxEventList is not empty. */
3156:..\..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:..\..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:..\..\FreeRTOS/tasks.c **** 
3160:..\..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:..\..\FreeRTOS/tasks.c **** 	{
3162:..\..\FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:..\..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:..\..\FreeRTOS/tasks.c **** 
3165:..\..\FreeRTOS/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:..\..\FreeRTOS/tasks.c **** 		{
3167:..\..\FreeRTOS/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:..\..\FreeRTOS/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 58


3169:..\..\FreeRTOS/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:..\..\FreeRTOS/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:..\..\FreeRTOS/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:..\..\FreeRTOS/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:..\..\FreeRTOS/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:..\..\FreeRTOS/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:..\..\FreeRTOS/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:..\..\FreeRTOS/tasks.c **** 		}
3177:..\..\FreeRTOS/tasks.c **** 		#endif
3178:..\..\FreeRTOS/tasks.c **** 	}
3179:..\..\FreeRTOS/tasks.c **** 	else
3180:..\..\FreeRTOS/tasks.c **** 	{
3181:..\..\FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:..\..\FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
3183:..\..\FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:..\..\FreeRTOS/tasks.c **** 	}
3185:..\..\FreeRTOS/tasks.c **** 
3186:..\..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:..\..\FreeRTOS/tasks.c **** 	{
3188:..\..\FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:..\..\FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:..\..\FreeRTOS/tasks.c **** 		it should force a context switch now. */
3191:..\..\FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
3192:..\..\FreeRTOS/tasks.c **** 
3193:..\..\FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:..\..\FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:..\..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3196:..\..\FreeRTOS/tasks.c **** 	}
3197:..\..\FreeRTOS/tasks.c **** 	else
3198:..\..\FreeRTOS/tasks.c **** 	{
3199:..\..\FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
3200:..\..\FreeRTOS/tasks.c **** 	}
3201:..\..\FreeRTOS/tasks.c **** 
3202:..\..\FreeRTOS/tasks.c **** 	return xReturn;
3203:..\..\FreeRTOS/tasks.c **** }
3204:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3205:..\..\FreeRTOS/tasks.c **** 
3206:..\..\FreeRTOS/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:..\..\FreeRTOS/tasks.c **** {
3208:..\..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
3209:..\..\FreeRTOS/tasks.c **** 
3210:..\..\FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:..\..\FreeRTOS/tasks.c **** 	the event flags implementation. */
3212:..\..\FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:..\..\FreeRTOS/tasks.c **** 
3214:..\..\FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
3215:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:..\..\FreeRTOS/tasks.c **** 
3217:..\..\FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:..\..\FreeRTOS/tasks.c **** 	event flags. */
3219:..\..\FreeRTOS/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:..\..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:..\..\FreeRTOS/tasks.c **** 
3223:..\..\FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:..\..\FreeRTOS/tasks.c **** 	{
3225:..\..\FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 59


3226:..\..\FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:..\..\FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:..\..\FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:..\..\FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:..\..\FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:..\..\FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:..\..\FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:..\..\FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:..\..\FreeRTOS/tasks.c **** 	}
3235:..\..\FreeRTOS/tasks.c **** 	#endif
3236:..\..\FreeRTOS/tasks.c **** 
3237:..\..\FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:..\..\FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:..\..\FreeRTOS/tasks.c **** 	lists. */
3240:..\..\FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:..\..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:..\..\FreeRTOS/tasks.c **** 
3243:..\..\FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:..\..\FreeRTOS/tasks.c **** 	{
3245:..\..\FreeRTOS/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:..\..\FreeRTOS/tasks.c **** 		a context switch is required.  This function is called with the
3247:..\..\FreeRTOS/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:..\..\FreeRTOS/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:..\..\FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
3250:..\..\FreeRTOS/tasks.c **** 	}
3251:..\..\FreeRTOS/tasks.c **** }
3252:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3253:..\..\FreeRTOS/tasks.c **** 
3254:..\..\FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:..\..\FreeRTOS/tasks.c **** {
3256:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3257:..\..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3258:..\..\FreeRTOS/tasks.c **** 	{
3259:..\..\FreeRTOS/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:..\..\FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:..\..\FreeRTOS/tasks.c **** 	}
3262:..\..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3263:..\..\FreeRTOS/tasks.c **** }
3264:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3265:..\..\FreeRTOS/tasks.c **** 
3266:..\..\FreeRTOS/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:..\..\FreeRTOS/tasks.c **** {
3268:..\..\FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:..\..\FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:..\..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:..\..\FreeRTOS/tasks.c **** }
3272:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3273:..\..\FreeRTOS/tasks.c **** 
3274:..\..\FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:..\..\FreeRTOS/tasks.c **** {
3276:..\..\FreeRTOS/tasks.c **** BaseType_t xReturn;
3277:..\..\FreeRTOS/tasks.c **** 
3278:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3279:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3280:..\..\FreeRTOS/tasks.c **** 
3281:..\..\FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3282:..\..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 60


3283:..\..\FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:..\..\FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:..\..\FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:..\..\FreeRTOS/tasks.c **** 
3287:..\..\FreeRTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:..\..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:..\..\FreeRTOS/tasks.c **** 			{
3290:..\..\FreeRTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:..\..\FreeRTOS/tasks.c **** 				but has the same result. */
3292:..\..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:..\..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3294:..\..\FreeRTOS/tasks.c **** 			}
3295:..\..\FreeRTOS/tasks.c **** 			else
3296:..\..\FreeRTOS/tasks.c **** 		#endif
3297:..\..\FreeRTOS/tasks.c **** 
3298:..\..\FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:..\..\FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:..\..\FreeRTOS/tasks.c **** 			{
3301:..\..\FreeRTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:..\..\FreeRTOS/tasks.c **** 				specified is the maximum block time then the task should block
3303:..\..\FreeRTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3304:..\..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
3305:..\..\FreeRTOS/tasks.c **** 			}
3306:..\..\FreeRTOS/tasks.c **** 			else
3307:..\..\FreeRTOS/tasks.c **** 		#endif
3308:..\..\FreeRTOS/tasks.c **** 
3309:..\..\FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:..\..\FreeRTOS/tasks.c **** 		{
3311:..\..\FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which
3312:..\..\FreeRTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:..\..\FreeRTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:..\..\FreeRTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:..\..\FreeRTOS/tasks.c **** 			was called. */
3316:..\..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3317:..\..\FreeRTOS/tasks.c **** 		}
3318:..\..\FreeRTOS/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:..\..\FreeRTOS/tasks.c **** 		{
3320:..\..\FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:..\..\FreeRTOS/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:..\..\FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:..\..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
3324:..\..\FreeRTOS/tasks.c **** 		}
3325:..\..\FreeRTOS/tasks.c **** 		else
3326:..\..\FreeRTOS/tasks.c **** 		{
3327:..\..\FreeRTOS/tasks.c **** 			*pxTicksToWait = 0;
3328:..\..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3329:..\..\FreeRTOS/tasks.c **** 		}
3330:..\..\FreeRTOS/tasks.c **** 	}
3331:..\..\FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3332:..\..\FreeRTOS/tasks.c **** 
3333:..\..\FreeRTOS/tasks.c **** 	return xReturn;
3334:..\..\FreeRTOS/tasks.c **** }
3335:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3336:..\..\FreeRTOS/tasks.c **** 
3337:..\..\FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3338:..\..\FreeRTOS/tasks.c **** {
3339:..\..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 61


3340:..\..\FreeRTOS/tasks.c **** }
3341:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3342:..\..\FreeRTOS/tasks.c **** 
3343:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:..\..\FreeRTOS/tasks.c **** 
3345:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:..\..\FreeRTOS/tasks.c **** 	{
3347:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3348:..\..\FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
3349:..\..\FreeRTOS/tasks.c **** 
3350:..\..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
3351:..\..\FreeRTOS/tasks.c **** 		{
3352:..\..\FreeRTOS/tasks.c **** 			pxTCB = xTask;
3353:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:..\..\FreeRTOS/tasks.c **** 		}
3355:..\..\FreeRTOS/tasks.c **** 		else
3356:..\..\FreeRTOS/tasks.c **** 		{
3357:..\..\FreeRTOS/tasks.c **** 			uxReturn = 0U;
3358:..\..\FreeRTOS/tasks.c **** 		}
3359:..\..\FreeRTOS/tasks.c **** 
3360:..\..\FreeRTOS/tasks.c **** 		return uxReturn;
3361:..\..\FreeRTOS/tasks.c **** 	}
3362:..\..\FreeRTOS/tasks.c **** 
3363:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3365:..\..\FreeRTOS/tasks.c **** 
3366:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:..\..\FreeRTOS/tasks.c **** 
3368:..\..\FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:..\..\FreeRTOS/tasks.c **** 	{
3370:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
3371:..\..\FreeRTOS/tasks.c **** 
3372:..\..\FreeRTOS/tasks.c **** 		if( xTask != NULL )
3373:..\..\FreeRTOS/tasks.c **** 		{
3374:..\..\FreeRTOS/tasks.c **** 			pxTCB = xTask;
3375:..\..\FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:..\..\FreeRTOS/tasks.c **** 		}
3377:..\..\FreeRTOS/tasks.c **** 	}
3378:..\..\FreeRTOS/tasks.c **** 
3379:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:..\..\FreeRTOS/tasks.c **** 
3381:..\..\FreeRTOS/tasks.c **** /*
3382:..\..\FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3383:..\..\FreeRTOS/tasks.c ****  * The Idle task.
3384:..\..\FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3385:..\..\FreeRTOS/tasks.c ****  *
3386:..\..\FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:..\..\FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:..\..\FreeRTOS/tasks.c ****  *
3389:..\..\FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:..\..\FreeRTOS/tasks.c ****  *
3391:..\..\FreeRTOS/tasks.c ****  */
3392:..\..\FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:..\..\FreeRTOS/tasks.c **** {
3394:..\..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
3395:..\..\FreeRTOS/tasks.c **** 	( void ) pvParameters;
3396:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 62


3397:..\..\FreeRTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:..\..\FreeRTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:..\..\FreeRTOS/tasks.c **** 
3400:..\..\FreeRTOS/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:..\..\FreeRTOS/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:..\..\FreeRTOS/tasks.c **** 	any. */
3403:..\..\FreeRTOS/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:..\..\FreeRTOS/tasks.c **** 
3405:..\..\FreeRTOS/tasks.c **** 	for( ;; )
3406:..\..\FreeRTOS/tasks.c **** 	{
3407:..\..\FreeRTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:..\..\FreeRTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:..\..\FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:..\..\FreeRTOS/tasks.c **** 
3411:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:..\..\FreeRTOS/tasks.c **** 		{
3413:..\..\FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:..\..\FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
3415:..\..\FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:..\..\FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
3417:..\..\FreeRTOS/tasks.c **** 			taskYIELD();
3418:..\..\FreeRTOS/tasks.c **** 		}
3419:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:..\..\FreeRTOS/tasks.c **** 
3421:..\..\FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:..\..\FreeRTOS/tasks.c **** 		{
3423:..\..\FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:..\..\FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:..\..\FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3426:..\..\FreeRTOS/tasks.c **** 			timeslice.
3427:..\..\FreeRTOS/tasks.c **** 
3428:..\..\FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3429:..\..\FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:..\..\FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:..\..\FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:..\..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:..\..\FreeRTOS/tasks.c **** 			{
3434:..\..\FreeRTOS/tasks.c **** 				taskYIELD();
3435:..\..\FreeRTOS/tasks.c **** 			}
3436:..\..\FreeRTOS/tasks.c **** 			else
3437:..\..\FreeRTOS/tasks.c **** 			{
3438:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:..\..\FreeRTOS/tasks.c **** 			}
3440:..\..\FreeRTOS/tasks.c **** 		}
3441:..\..\FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:..\..\FreeRTOS/tasks.c **** 
3443:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:..\..\FreeRTOS/tasks.c **** 		{
3445:..\..\FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:..\..\FreeRTOS/tasks.c **** 
3447:..\..\FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:..\..\FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
3449:..\..\FreeRTOS/tasks.c **** 			without the overhead of a separate task.
3450:..\..\FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:..\..\FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:..\..\FreeRTOS/tasks.c **** 			vApplicationIdleHook();
3453:..\..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 63


3454:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:..\..\FreeRTOS/tasks.c **** 
3456:..\..\FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:..\..\FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:..\..\FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
3459:..\..\FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:..\..\FreeRTOS/tasks.c **** 		{
3462:..\..\FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:..\..\FreeRTOS/tasks.c **** 
3464:..\..\FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:..\..\FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:..\..\FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
3467:..\..\FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:..\..\FreeRTOS/tasks.c **** 			valid. */
3469:..\..\FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:..\..\FreeRTOS/tasks.c **** 
3471:..\..\FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:..\..\FreeRTOS/tasks.c **** 			{
3473:..\..\FreeRTOS/tasks.c **** 				vTaskSuspendAll();
3474:..\..\FreeRTOS/tasks.c **** 				{
3475:..\..\FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:..\..\FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
3477:..\..\FreeRTOS/tasks.c **** 					be used. */
3478:..\..\FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:..\..\FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:..\..\FreeRTOS/tasks.c **** 
3481:..\..\FreeRTOS/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:..\..\FreeRTOS/tasks.c **** 					if the application does not want
3483:..\..\FreeRTOS/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:..\..\FreeRTOS/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:..\..\FreeRTOS/tasks.c **** 
3486:..\..\FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:..\..\FreeRTOS/tasks.c **** 					{
3488:..\..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:..\..\FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:..\..\FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:..\..\FreeRTOS/tasks.c **** 					}
3492:..\..\FreeRTOS/tasks.c **** 					else
3493:..\..\FreeRTOS/tasks.c **** 					{
3494:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:..\..\FreeRTOS/tasks.c **** 					}
3496:..\..\FreeRTOS/tasks.c **** 				}
3497:..\..\FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
3498:..\..\FreeRTOS/tasks.c **** 			}
3499:..\..\FreeRTOS/tasks.c **** 			else
3500:..\..\FreeRTOS/tasks.c **** 			{
3501:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:..\..\FreeRTOS/tasks.c **** 			}
3503:..\..\FreeRTOS/tasks.c **** 		}
3504:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:..\..\FreeRTOS/tasks.c **** 	}
3506:..\..\FreeRTOS/tasks.c **** }
3507:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3508:..\..\FreeRTOS/tasks.c **** 
3509:..\..\FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 64


3511:..\..\FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:..\..\FreeRTOS/tasks.c **** 	{
3513:..\..\FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:..\..\FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:..\..\FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:..\..\FreeRTOS/tasks.c **** 
3517:..\..\FreeRTOS/tasks.c **** 		/* This function must be called from a critical section. */
3518:..\..\FreeRTOS/tasks.c **** 
3519:..\..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:..\..\FreeRTOS/tasks.c **** 		{
3521:..\..\FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:..\..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3523:..\..\FreeRTOS/tasks.c **** 		}
3524:..\..\FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:..\..\FreeRTOS/tasks.c **** 		{
3526:..\..\FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:..\..\FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3528:..\..\FreeRTOS/tasks.c **** 		}
3529:..\..\FreeRTOS/tasks.c **** 		else
3530:..\..\FreeRTOS/tasks.c **** 		{
3531:..\..\FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:..\..\FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:..\..\FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:..\..\FreeRTOS/tasks.c **** 			interrupts. */
3535:..\..\FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:..\..\FreeRTOS/tasks.c **** 			{
3537:..\..\FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:..\..\FreeRTOS/tasks.c **** 			}
3539:..\..\FreeRTOS/tasks.c **** 			else
3540:..\..\FreeRTOS/tasks.c **** 			{
3541:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:..\..\FreeRTOS/tasks.c **** 			}
3543:..\..\FreeRTOS/tasks.c **** 		}
3544:..\..\FreeRTOS/tasks.c **** 
3545:..\..\FreeRTOS/tasks.c **** 		return eReturn;
3546:..\..\FreeRTOS/tasks.c **** 	}
3547:..\..\FreeRTOS/tasks.c **** 
3548:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3550:..\..\FreeRTOS/tasks.c **** 
3551:..\..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:..\..\FreeRTOS/tasks.c **** 
3553:..\..\FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:..\..\FreeRTOS/tasks.c **** 	{
3555:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3556:..\..\FreeRTOS/tasks.c **** 
3557:..\..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:..\..\FreeRTOS/tasks.c **** 		{
3559:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:..\..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:..\..\FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:..\..\FreeRTOS/tasks.c **** 		}
3563:..\..\FreeRTOS/tasks.c **** 	}
3564:..\..\FreeRTOS/tasks.c **** 
3565:..\..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3567:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 65


3568:..\..\FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:..\..\FreeRTOS/tasks.c **** 
3570:..\..\FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:..\..\FreeRTOS/tasks.c **** 	{
3572:..\..\FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
3573:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3574:..\..\FreeRTOS/tasks.c **** 
3575:..\..\FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:..\..\FreeRTOS/tasks.c **** 		{
3577:..\..\FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:..\..\FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:..\..\FreeRTOS/tasks.c **** 		}
3580:..\..\FreeRTOS/tasks.c **** 		else
3581:..\..\FreeRTOS/tasks.c **** 		{
3582:..\..\FreeRTOS/tasks.c **** 			pvReturn = NULL;
3583:..\..\FreeRTOS/tasks.c **** 		}
3584:..\..\FreeRTOS/tasks.c **** 
3585:..\..\FreeRTOS/tasks.c **** 		return pvReturn;
3586:..\..\FreeRTOS/tasks.c **** 	}
3587:..\..\FreeRTOS/tasks.c **** 
3588:..\..\FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3590:..\..\FreeRTOS/tasks.c **** 
3591:..\..\FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:..\..\FreeRTOS/tasks.c **** 
3593:..\..\FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:..\..\FreeRTOS/tasks.c **** 	{
3595:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3596:..\..\FreeRTOS/tasks.c **** 
3597:..\..\FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:..\..\FreeRTOS/tasks.c **** 		the calling task. */
3599:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:..\..\FreeRTOS/tasks.c **** 
3601:..\..\FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:..\..\FreeRTOS/tasks.c **** 	}
3603:..\..\FreeRTOS/tasks.c **** 
3604:..\..\FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3606:..\..\FreeRTOS/tasks.c **** 
3607:..\..\FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3608:..\..\FreeRTOS/tasks.c **** {
3609:..\..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3610:..\..\FreeRTOS/tasks.c **** 
3611:..\..\FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:..\..\FreeRTOS/tasks.c **** 	{
3613:..\..\FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:..\..\FreeRTOS/tasks.c **** 	}
3615:..\..\FreeRTOS/tasks.c **** 
3616:..\..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:..\..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:..\..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:..\..\FreeRTOS/tasks.c **** 
3620:..\..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:..\..\FreeRTOS/tasks.c **** 	{
3622:..\..\FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:..\..\FreeRTOS/tasks.c **** 	}
3624:..\..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 66


3625:..\..\FreeRTOS/tasks.c **** 
3626:..\..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:..\..\FreeRTOS/tasks.c **** 	{
3628:..\..\FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:..\..\FreeRTOS/tasks.c **** 	}
3630:..\..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:..\..\FreeRTOS/tasks.c **** 
3632:..\..\FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:..\..\FreeRTOS/tasks.c **** 	using list2. */
3634:..\..\FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3635:..\..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:..\..\FreeRTOS/tasks.c **** }
3637:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3638:..\..\FreeRTOS/tasks.c **** 
3639:..\..\FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:..\..\FreeRTOS/tasks.c **** {
3641:..\..\FreeRTOS/tasks.c **** 
3642:..\..\FreeRTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:..\..\FreeRTOS/tasks.c **** 
3644:..\..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:..\..\FreeRTOS/tasks.c **** 	{
3646:..\..\FreeRTOS/tasks.c **** 		TCB_t *pxTCB;
3647:..\..\FreeRTOS/tasks.c **** 
3648:..\..\FreeRTOS/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:..\..\FreeRTOS/tasks.c **** 		being called too often in the idle task. */
3650:..\..\FreeRTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:..\..\FreeRTOS/tasks.c **** 		{
3652:..\..\FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
3653:..\..\FreeRTOS/tasks.c **** 			{
3654:..\..\FreeRTOS/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:..\..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:..\..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:..\..\FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:..\..\FreeRTOS/tasks.c **** 			}
3659:..\..\FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
3660:..\..\FreeRTOS/tasks.c **** 
3661:..\..\FreeRTOS/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:..\..\FreeRTOS/tasks.c **** 		}
3663:..\..\FreeRTOS/tasks.c **** 	}
3664:..\..\FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:..\..\FreeRTOS/tasks.c **** }
3666:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3667:..\..\FreeRTOS/tasks.c **** 
3668:..\..\FreeRTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:..\..\FreeRTOS/tasks.c **** 
3670:..\..\FreeRTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:..\..\FreeRTOS/tasks.c **** 	{
3672:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3673:..\..\FreeRTOS/tasks.c **** 
3674:..\..\FreeRTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:..\..\FreeRTOS/tasks.c **** 
3677:..\..\FreeRTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:..\..\FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:..\..\FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:..\..\FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:..\..\FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 67


3682:..\..\FreeRTOS/tasks.c **** 
3683:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:..\..\FreeRTOS/tasks.c **** 		{
3685:..\..\FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:..\..\FreeRTOS/tasks.c **** 		}
3687:..\..\FreeRTOS/tasks.c **** 		#else
3688:..\..\FreeRTOS/tasks.c **** 		{
3689:..\..\FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:..\..\FreeRTOS/tasks.c **** 		}
3691:..\..\FreeRTOS/tasks.c **** 		#endif
3692:..\..\FreeRTOS/tasks.c **** 
3693:..\..\FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:..\..\FreeRTOS/tasks.c **** 		{
3695:..\..\FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:..\..\FreeRTOS/tasks.c **** 		}
3697:..\..\FreeRTOS/tasks.c **** 		#else
3698:..\..\FreeRTOS/tasks.c **** 		{
3699:..\..\FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:..\..\FreeRTOS/tasks.c **** 		}
3701:..\..\FreeRTOS/tasks.c **** 		#endif
3702:..\..\FreeRTOS/tasks.c **** 
3703:..\..\FreeRTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:..\..\FreeRTOS/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:..\..\FreeRTOS/tasks.c **** 		state is just set to whatever is passed in. */
3706:..\..\FreeRTOS/tasks.c **** 		if( eState != eInvalid )
3707:..\..\FreeRTOS/tasks.c **** 		{
3708:..\..\FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:..\..\FreeRTOS/tasks.c **** 			{
3710:..\..\FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:..\..\FreeRTOS/tasks.c **** 			}
3712:..\..\FreeRTOS/tasks.c **** 			else
3713:..\..\FreeRTOS/tasks.c **** 			{
3714:..\..\FreeRTOS/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:..\..\FreeRTOS/tasks.c **** 
3716:..\..\FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:..\..\FreeRTOS/tasks.c **** 				{
3718:..\..\FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:..\..\FreeRTOS/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:..\..\FreeRTOS/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:..\..\FreeRTOS/tasks.c **** 					if( eState == eSuspended )
3722:..\..\FreeRTOS/tasks.c **** 					{
3723:..\..\FreeRTOS/tasks.c **** 						vTaskSuspendAll();
3724:..\..\FreeRTOS/tasks.c **** 						{
3725:..\..\FreeRTOS/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:..\..\FreeRTOS/tasks.c **** 							{
3727:..\..\FreeRTOS/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:..\..\FreeRTOS/tasks.c **** 							}
3729:..\..\FreeRTOS/tasks.c **** 						}
3730:..\..\FreeRTOS/tasks.c **** 						( void ) xTaskResumeAll();
3731:..\..\FreeRTOS/tasks.c **** 					}
3732:..\..\FreeRTOS/tasks.c **** 				}
3733:..\..\FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:..\..\FreeRTOS/tasks.c **** 			}
3735:..\..\FreeRTOS/tasks.c **** 		}
3736:..\..\FreeRTOS/tasks.c **** 		else
3737:..\..\FreeRTOS/tasks.c **** 		{
3738:..\..\FreeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 68


3739:..\..\FreeRTOS/tasks.c **** 		}
3740:..\..\FreeRTOS/tasks.c **** 
3741:..\..\FreeRTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:..\..\FreeRTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:..\..\FreeRTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:..\..\FreeRTOS/tasks.c **** 		{
3745:..\..\FreeRTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:..\..\FreeRTOS/tasks.c **** 			{
3747:..\..\FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:..\..\FreeRTOS/tasks.c **** 			}
3749:..\..\FreeRTOS/tasks.c **** 			#else
3750:..\..\FreeRTOS/tasks.c **** 			{
3751:..\..\FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:..\..\FreeRTOS/tasks.c **** 			}
3753:..\..\FreeRTOS/tasks.c **** 			#endif
3754:..\..\FreeRTOS/tasks.c **** 		}
3755:..\..\FreeRTOS/tasks.c **** 		else
3756:..\..\FreeRTOS/tasks.c **** 		{
3757:..\..\FreeRTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:..\..\FreeRTOS/tasks.c **** 		}
3759:..\..\FreeRTOS/tasks.c **** 	}
3760:..\..\FreeRTOS/tasks.c **** 
3761:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3763:..\..\FreeRTOS/tasks.c **** 
3764:..\..\FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:..\..\FreeRTOS/tasks.c **** 
3766:..\..\FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:..\..\FreeRTOS/tasks.c **** 	{
3768:..\..\FreeRTOS/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3770:..\..\FreeRTOS/tasks.c **** 
3771:..\..\FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:..\..\FreeRTOS/tasks.c **** 		{
3773:..\..\FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:..\..\FreeRTOS/tasks.c **** 
3775:..\..\FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:..\..\FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:..\..\FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:..\..\FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:..\..\FreeRTOS/tasks.c **** 			do
3780:..\..\FreeRTOS/tasks.c **** 			{
3781:..\..\FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:..\..\FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:..\..\FreeRTOS/tasks.c **** 				uxTask++;
3784:..\..\FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:..\..\FreeRTOS/tasks.c **** 		}
3786:..\..\FreeRTOS/tasks.c **** 		else
3787:..\..\FreeRTOS/tasks.c **** 		{
3788:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:..\..\FreeRTOS/tasks.c **** 		}
3790:..\..\FreeRTOS/tasks.c **** 
3791:..\..\FreeRTOS/tasks.c **** 		return uxTask;
3792:..\..\FreeRTOS/tasks.c **** 	}
3793:..\..\FreeRTOS/tasks.c **** 
3794:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 69


3796:..\..\FreeRTOS/tasks.c **** 
3797:..\..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:..\..\FreeRTOS/tasks.c **** 
3799:..\..\FreeRTOS/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:..\..\FreeRTOS/tasks.c **** 	{
  81              		.loc 1 3800 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL8:
3801:..\..\FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
  87              		.loc 1 3801 0
  88 0000 0023     		movs	r3, #0
3802:..\..\FreeRTOS/tasks.c **** 
3803:..\..\FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  89              		.loc 1 3803 0
  90 0002 01E0     		b	.L9
  91              	.LVL9:
  92              	.L10:
3804:..\..\FreeRTOS/tasks.c **** 		{
3805:..\..\FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
  93              		.loc 1 3805 0
  94 0004 0130     		adds	r0, r0, #1
  95              	.LVL10:
3806:..\..\FreeRTOS/tasks.c **** 			ulCount++;
  96              		.loc 1 3806 0
  97 0006 0133     		adds	r3, r3, #1
  98              	.LVL11:
  99              	.L9:
3803:..\..\FreeRTOS/tasks.c **** 		{
 100              		.loc 1 3803 0
 101 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 102 000a A52A     		cmp	r2, #165
 103 000c FAD0     		beq	.L10
 104              	.LVL12:
3807:..\..\FreeRTOS/tasks.c **** 		}
3808:..\..\FreeRTOS/tasks.c **** 
3809:..\..\FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:..\..\FreeRTOS/tasks.c **** 
3811:..\..\FreeRTOS/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:..\..\FreeRTOS/tasks.c **** 	}
 105              		.loc 1 3812 0
 106 000e C3F38F00 		ubfx	r0, r3, #2, #16
 107              	.LVL13:
 108 0012 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE104:
 111              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 112              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 113              		.align	2
 114              		.thumb
 115              		.thumb_func
 116              		.type	prvResetNextTaskUnblockTime, %function
 117              	prvResetNextTaskUnblockTime:
 118              	.LFB107:
3813:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 70


3814:..\..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3816:..\..\FreeRTOS/tasks.c **** 
3817:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:..\..\FreeRTOS/tasks.c **** 
3819:..\..\FreeRTOS/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:..\..\FreeRTOS/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:..\..\FreeRTOS/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:..\..\FreeRTOS/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:..\..\FreeRTOS/tasks.c **** 	applications that expect an 8-bit return type. */
3824:..\..\FreeRTOS/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:..\..\FreeRTOS/tasks.c **** 	{
3826:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3827:..\..\FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3828:..\..\FreeRTOS/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:..\..\FreeRTOS/tasks.c **** 
3830:..\..\FreeRTOS/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:..\..\FreeRTOS/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:..\..\FreeRTOS/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:..\..\FreeRTOS/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:..\..\FreeRTOS/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:..\..\FreeRTOS/tasks.c **** 		type. */
3836:..\..\FreeRTOS/tasks.c **** 
3837:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:..\..\FreeRTOS/tasks.c **** 
3839:..\..\FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:..\..\FreeRTOS/tasks.c **** 		{
3841:..\..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:..\..\FreeRTOS/tasks.c **** 		}
3843:..\..\FreeRTOS/tasks.c **** 		#else
3844:..\..\FreeRTOS/tasks.c **** 		{
3845:..\..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:..\..\FreeRTOS/tasks.c **** 		}
3847:..\..\FreeRTOS/tasks.c **** 		#endif
3848:..\..\FreeRTOS/tasks.c **** 
3849:..\..\FreeRTOS/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:..\..\FreeRTOS/tasks.c **** 
3851:..\..\FreeRTOS/tasks.c **** 		return uxReturn;
3852:..\..\FreeRTOS/tasks.c **** 	}
3853:..\..\FreeRTOS/tasks.c **** 
3854:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3856:..\..\FreeRTOS/tasks.c **** 
3857:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:..\..\FreeRTOS/tasks.c **** 
3859:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:..\..\FreeRTOS/tasks.c **** 	{
3861:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3862:..\..\FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3863:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3864:..\..\FreeRTOS/tasks.c **** 
3865:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:..\..\FreeRTOS/tasks.c **** 
3867:..\..\FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:..\..\FreeRTOS/tasks.c **** 		{
3869:..\..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:..\..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 71


3871:..\..\FreeRTOS/tasks.c **** 		#else
3872:..\..\FreeRTOS/tasks.c **** 		{
3873:..\..\FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:..\..\FreeRTOS/tasks.c **** 		}
3875:..\..\FreeRTOS/tasks.c **** 		#endif
3876:..\..\FreeRTOS/tasks.c **** 
3877:..\..\FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:..\..\FreeRTOS/tasks.c **** 
3879:..\..\FreeRTOS/tasks.c **** 		return uxReturn;
3880:..\..\FreeRTOS/tasks.c **** 	}
3881:..\..\FreeRTOS/tasks.c **** 
3882:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3884:..\..\FreeRTOS/tasks.c **** 
3885:..\..\FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:..\..\FreeRTOS/tasks.c **** 
3887:..\..\FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:..\..\FreeRTOS/tasks.c **** 	{
3889:..\..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:..\..\FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:..\..\FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3892:..\..\FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:..\..\FreeRTOS/tasks.c **** 
3894:..\..\FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:..\..\FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:..\..\FreeRTOS/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:..\..\FreeRTOS/tasks.c **** 		for additional information. */
3898:..\..\FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:..\..\FreeRTOS/tasks.c **** 		{
3900:..\..\FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:..\..\FreeRTOS/tasks.c **** 		}
3902:..\..\FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:..\..\FreeRTOS/tasks.c **** 
3904:..\..\FreeRTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:..\..\FreeRTOS/tasks.c **** 		{
3906:..\..\FreeRTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:..\..\FreeRTOS/tasks.c **** 			the stack and TCB. */
3908:..\..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:..\..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
3910:..\..\FreeRTOS/tasks.c **** 		}
3911:..\..\FreeRTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:..\..\FreeRTOS/tasks.c **** 		{
3913:..\..\FreeRTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:..\..\FreeRTOS/tasks.c **** 			check what was statically allocated before trying to free the
3915:..\..\FreeRTOS/tasks.c **** 			memory. */
3916:..\..\FreeRTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:..\..\FreeRTOS/tasks.c **** 			{
3918:..\..\FreeRTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:..\..\FreeRTOS/tasks.c **** 				must be freed. */
3920:..\..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:..\..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3922:..\..\FreeRTOS/tasks.c **** 			}
3923:..\..\FreeRTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:..\..\FreeRTOS/tasks.c **** 			{
3925:..\..\FreeRTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:..\..\FreeRTOS/tasks.c **** 				only memory that must be freed. */
3927:..\..\FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 72


3928:..\..\FreeRTOS/tasks.c **** 			}
3929:..\..\FreeRTOS/tasks.c **** 			else
3930:..\..\FreeRTOS/tasks.c **** 			{
3931:..\..\FreeRTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:..\..\FreeRTOS/tasks.c **** 				nothing needs to be freed. */
3933:..\..\FreeRTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:..\..\FreeRTOS/tasks.c **** 			}
3936:..\..\FreeRTOS/tasks.c **** 		}
3937:..\..\FreeRTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:..\..\FreeRTOS/tasks.c **** 	}
3939:..\..\FreeRTOS/tasks.c **** 
3940:..\..\FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3942:..\..\FreeRTOS/tasks.c **** 
3943:..\..\FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:..\..\FreeRTOS/tasks.c **** {
 119              		.loc 1 3944 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
3945:..\..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
3946:..\..\FreeRTOS/tasks.c **** 
3947:..\..\FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 124              		.loc 1 3947 0
 125 0000 074B     		ldr	r3, .L14
 126 0002 9B6A     		ldr	r3, [r3, #40]
 127 0004 1B68     		ldr	r3, [r3]
 128 0006 23B9     		cbnz	r3, .L12
3948:..\..\FreeRTOS/tasks.c **** 	{
3949:..\..\FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:..\..\FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:..\..\FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:..\..\FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3953:..\..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 129              		.loc 1 3953 0
 130 0008 4FF0FF32 		mov	r2, #-1
 131 000c 044B     		ldr	r3, .L14
 132 000e DA62     		str	r2, [r3, #44]
 133 0010 7047     		bx	lr
 134              	.L12:
3954:..\..\FreeRTOS/tasks.c **** 	}
3955:..\..\FreeRTOS/tasks.c **** 	else
3956:..\..\FreeRTOS/tasks.c **** 	{
3957:..\..\FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:..\..\FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:..\..\FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:..\..\FreeRTOS/tasks.c **** 		from the Blocked state. */
3961:..\..\FreeRTOS/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 135              		.loc 1 3961 0
 136 0012 034B     		ldr	r3, .L14
 137 0014 9A6A     		ldr	r2, [r3, #40]
 138 0016 D268     		ldr	r2, [r2, #12]
 139 0018 D268     		ldr	r2, [r2, #12]
 140              	.LVL14:
3962:..\..\FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 73


 141              		.loc 1 3962 0
 142 001a 5268     		ldr	r2, [r2, #4]
 143              	.LVL15:
 144 001c DA62     		str	r2, [r3, #44]
 145 001e 7047     		bx	lr
 146              	.L15:
 147              		.align	2
 148              	.L14:
 149 0020 00000000 		.word	.LANCHOR0
 150              		.cfi_endproc
 151              	.LFE107:
 152              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 153              		.section	.text.prvDeleteTCB,"ax",%progbits
 154              		.align	2
 155              		.thumb
 156              		.thumb_func
 157              		.type	prvDeleteTCB, %function
 158              	prvDeleteTCB:
 159              	.LFB106:
3888:..\..\FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 160              		.loc 1 3888 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              	.LVL16:
 165 0000 10B5     		push	{r4, lr}
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169 0002 0446     		mov	r4, r0
3908:..\..\FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
 170              		.loc 1 3908 0
 171 0004 006B     		ldr	r0, [r0, #48]
 172              	.LVL17:
 173 0006 FFF7FEFF 		bl	vPortFree
 174              	.LVL18:
3909:..\..\FreeRTOS/tasks.c **** 		}
 175              		.loc 1 3909 0
 176 000a 2046     		mov	r0, r4
 177 000c FFF7FEFF 		bl	vPortFree
 178              	.LVL19:
 179 0010 10BD     		pop	{r4, pc}
 180              		.cfi_endproc
 181              	.LFE106:
 182              		.size	prvDeleteTCB, .-prvDeleteTCB
 183 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	2
 185              		.thumb
 186              		.thumb_func
 187              		.type	prvInitialiseNewTask, %function
 188              	prvInitialiseNewTask:
 189              	.LFB69:
 832:..\..\FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 190              		.loc 1 832 0
 191              		.cfi_startproc
 192              		@ args = 16, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 74


 194              	.LVL20:
 195 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 196              		.cfi_def_cfa_offset 32
 197              		.cfi_offset 4, -32
 198              		.cfi_offset 5, -28
 199              		.cfi_offset 6, -24
 200              		.cfi_offset 7, -20
 201              		.cfi_offset 8, -16
 202              		.cfi_offset 9, -12
 203              		.cfi_offset 10, -8
 204              		.cfi_offset 14, -4
 205 0004 8146     		mov	r9, r0
 206 0006 0D46     		mov	r5, r1
 207 0008 1746     		mov	r7, r2
 208 000a 9A46     		mov	r10, r3
 209 000c 089E     		ldr	r6, [sp, #32]
 210 000e DDF82480 		ldr	r8, [sp, #36]
 211 0012 0A9C     		ldr	r4, [sp, #40]
 854:..\..\FreeRTOS/tasks.c **** 	}
 212              		.loc 1 854 0
 213 0014 9200     		lsls	r2, r2, #2
 214              	.LVL21:
 215 0016 A521     		movs	r1, #165
 216              	.LVL22:
 217 0018 206B     		ldr	r0, [r4, #48]
 218              	.LVL23:
 219 001a FFF7FEFF 		bl	memset
 220              	.LVL24:
 864:..\..\FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 221              		.loc 1 864 0
 222 001e 236B     		ldr	r3, [r4, #48]
 223 0020 07F18042 		add	r2, r7, #1073741824
 224 0024 013A     		subs	r2, r2, #1
 225 0026 03EB8207 		add	r7, r3, r2, lsl #2
 226              	.LVL25:
 865:..\..\FreeRTOS/tasks.c **** 
 227              		.loc 1 865 0
 228 002a 27F00707 		bic	r7, r7, #7
 229              	.LVL26:
 892:..\..\FreeRTOS/tasks.c **** 	{
 230              		.loc 1 892 0
 231 002e 45B9     		cbnz	r5, .L26
 232 0030 0EE0     		b	.L28
 233              	.LVL27:
 234              	.L22:
 896:..\..\FreeRTOS/tasks.c **** 
 235              		.loc 1 896 0
 236 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 237 0034 E218     		adds	r2, r4, r3
 238 0036 82F83410 		strb	r1, [r2, #52]
 901:..\..\FreeRTOS/tasks.c **** 			{
 239              		.loc 1 901 0
 240 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 241 003c 22B1     		cbz	r2, .L21
 894:..\..\FreeRTOS/tasks.c **** 		{
 242              		.loc 1 894 0 discriminator 2
 243 003e 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 75


 244              	.LVL28:
 245 0040 00E0     		b	.L19
 246              	.LVL29:
 247              	.L26:
 248 0042 0023     		movs	r3, #0
 249              	.L19:
 250              	.LVL30:
 894:..\..\FreeRTOS/tasks.c **** 		{
 251              		.loc 1 894 0 is_stmt 0 discriminator 1
 252 0044 0B2B     		cmp	r3, #11
 253 0046 F4D9     		bls	.L22
 254              	.L21:
 913:..\..\FreeRTOS/tasks.c **** 	}
 255              		.loc 1 913 0 is_stmt 1
 256 0048 0023     		movs	r3, #0
 257              	.LVL31:
 258 004a 84F83F30 		strb	r3, [r4, #63]
 259 004e 02E0     		b	.L23
 260              	.L28:
 919:..\..\FreeRTOS/tasks.c **** 	}
 261              		.loc 1 919 0
 262 0050 0023     		movs	r3, #0
 263 0052 84F83430 		strb	r3, [r4, #52]
 264              	.L23:
 924:..\..\FreeRTOS/tasks.c **** 	{
 265              		.loc 1 924 0
 266 0056 042E     		cmp	r6, #4
 267 0058 00D9     		bls	.L24
 926:..\..\FreeRTOS/tasks.c **** 	}
 268              		.loc 1 926 0
 269 005a 0426     		movs	r6, #4
 270              	.L24:
 271              	.LVL32:
 933:..\..\FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 272              		.loc 1 933 0
 273 005c E662     		str	r6, [r4, #44]
 936:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 274              		.loc 1 936 0
 275 005e 2664     		str	r6, [r4, #64]
 937:..\..\FreeRTOS/tasks.c **** 	}
 276              		.loc 1 937 0
 277 0060 0025     		movs	r5, #0
 278              	.LVL33:
 279 0062 6564     		str	r5, [r4, #68]
 941:..\..\FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 280              		.loc 1 941 0
 281 0064 201D     		adds	r0, r4, #4
 282 0066 FFF7FEFF 		bl	vListInitialiseItem
 283              	.LVL34:
 942:..\..\FreeRTOS/tasks.c **** 
 284              		.loc 1 942 0
 285 006a 04F11800 		add	r0, r4, #24
 286 006e FFF7FEFF 		bl	vListInitialiseItem
 287              	.LVL35:
 946:..\..\FreeRTOS/tasks.c **** 
 288              		.loc 1 946 0
 289 0072 2461     		str	r4, [r4, #16]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 76


 949:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 290              		.loc 1 949 0
 291 0074 C6F10506 		rsb	r6, r6, #5
 292              	.LVL36:
 293 0078 A661     		str	r6, [r4, #24]
 950:..\..\FreeRTOS/tasks.c **** 
 294              		.loc 1 950 0
 295 007a 6462     		str	r4, [r4, #36]
 992:..\..\FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 296              		.loc 1 992 0
 297 007c A564     		str	r5, [r4, #72]
 993:..\..\FreeRTOS/tasks.c **** 	}
 298              		.loc 1 993 0
 299 007e 84F84C50 		strb	r5, [r4, #76]
1058:..\..\FreeRTOS/tasks.c **** 		}
 300              		.loc 1 1058 0
 301 0082 5246     		mov	r2, r10
 302 0084 4946     		mov	r1, r9
 303 0086 3846     		mov	r0, r7
 304 0088 FFF7FEFF 		bl	pxPortInitialiseStack
 305              	.LVL37:
 306 008c 2060     		str	r0, [r4]
1064:..\..\FreeRTOS/tasks.c **** 	{
 307              		.loc 1 1064 0
 308 008e B8F1000F 		cmp	r8, #0
 309 0092 01D0     		beq	.L18
1068:..\..\FreeRTOS/tasks.c **** 	}
 310              		.loc 1 1068 0
 311 0094 C8F80040 		str	r4, [r8]
 312              	.L18:
 313 0098 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 314              		.cfi_endproc
 315              	.LFE69:
 316              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 317              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 318              		.align	2
 319              		.thumb
 320              		.thumb_func
 321              		.type	prvInitialiseTaskLists, %function
 322              	prvInitialiseTaskLists:
 323              	.LFB102:
3608:..\..\FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 324              		.loc 1 3608 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 70B5     		push	{r4, r5, r6, lr}
 329              		.cfi_def_cfa_offset 16
 330              		.cfi_offset 4, -16
 331              		.cfi_offset 5, -12
 332              		.cfi_offset 6, -8
 333              		.cfi_offset 14, -4
 334              	.LVL38:
3611:..\..\FreeRTOS/tasks.c **** 	{
 335              		.loc 1 3611 0
 336 0002 0024     		movs	r4, #0
 337 0004 07E0     		b	.L31
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 77


 338              	.LVL39:
 339              	.L32:
3613:..\..\FreeRTOS/tasks.c **** 	}
 340              		.loc 1 3613 0 discriminator 3
 341 0006 04EB8402 		add	r2, r4, r4, lsl #2
 342 000a 9300     		lsls	r3, r2, #2
 343 000c 1048     		ldr	r0, .L34
 344 000e 1844     		add	r0, r0, r3
 345 0010 FFF7FEFF 		bl	vListInitialise
 346              	.LVL40:
3611:..\..\FreeRTOS/tasks.c **** 	{
 347              		.loc 1 3611 0 discriminator 3
 348 0014 0134     		adds	r4, r4, #1
 349              	.LVL41:
 350              	.L31:
3611:..\..\FreeRTOS/tasks.c **** 	{
 351              		.loc 1 3611 0 is_stmt 0 discriminator 1
 352 0016 042C     		cmp	r4, #4
 353 0018 F5D9     		bls	.L32
3616:..\..\FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 354              		.loc 1 3616 0 is_stmt 1
 355 001a 0E4C     		ldr	r4, .L34+4
 356              	.LVL42:
 357 001c 04F19406 		add	r6, r4, #148
 358 0020 3046     		mov	r0, r6
 359 0022 FFF7FEFF 		bl	vListInitialise
 360              	.LVL43:
3617:..\..\FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 361              		.loc 1 3617 0
 362 0026 04F1A805 		add	r5, r4, #168
 363 002a 2846     		mov	r0, r5
 364 002c FFF7FEFF 		bl	vListInitialise
 365              	.LVL44:
3618:..\..\FreeRTOS/tasks.c **** 
 366              		.loc 1 3618 0
 367 0030 04F11400 		add	r0, r4, #20
 368 0034 FFF7FEFF 		bl	vListInitialise
 369              	.LVL45:
3622:..\..\FreeRTOS/tasks.c **** 	}
 370              		.loc 1 3622 0
 371 0038 04F1BC00 		add	r0, r4, #188
 372 003c FFF7FEFF 		bl	vListInitialise
 373              	.LVL46:
3628:..\..\FreeRTOS/tasks.c **** 	}
 374              		.loc 1 3628 0
 375 0040 2046     		mov	r0, r4
 376 0042 FFF7FEFF 		bl	vListInitialise
 377              	.LVL47:
3634:..\..\FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 378              		.loc 1 3634 0
 379 0046 A662     		str	r6, [r4, #40]
3635:..\..\FreeRTOS/tasks.c **** }
 380              		.loc 1 3635 0
 381 0048 C4F8D050 		str	r5, [r4, #208]
 382 004c 70BD     		pop	{r4, r5, r6, pc}
 383              	.L35:
 384 004e 00BF     		.align	2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 78


 385              	.L34:
 386 0050 30000000 		.word	.LANCHOR0+48
 387 0054 00000000 		.word	.LANCHOR0
 388              		.cfi_endproc
 389              	.LFE102:
 390              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 391              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 392              		.align	2
 393              		.thumb
 394              		.thumb_func
 395              		.type	prvAddNewTaskToReadyList, %function
 396              	prvAddNewTaskToReadyList:
 397              	.LFB70:
1078:..\..\FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 398              		.loc 1 1078 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              	.LVL48:
 403 0000 38B5     		push	{r3, r4, r5, lr}
 404              		.cfi_def_cfa_offset 16
 405              		.cfi_offset 3, -16
 406              		.cfi_offset 4, -12
 407              		.cfi_offset 5, -8
 408              		.cfi_offset 14, -4
 409 0002 0546     		mov	r5, r0
1081:..\..\FreeRTOS/tasks.c **** 	{
 410              		.loc 1 1081 0
 411 0004 FFF7FEFF 		bl	vPortEnterCritical
 412              	.LVL49:
1083:..\..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 413              		.loc 1 1083 0
 414 0008 264B     		ldr	r3, .L41
 415 000a D3F8D420 		ldr	r2, [r3, #212]
 416 000e 0132     		adds	r2, r2, #1
 417 0010 C3F8D420 		str	r2, [r3, #212]
1084:..\..\FreeRTOS/tasks.c **** 		{
 418              		.loc 1 1084 0
 419 0014 D3F8D830 		ldr	r3, [r3, #216]
 420 0018 4BB9     		cbnz	r3, .L37
1088:..\..\FreeRTOS/tasks.c **** 
 421              		.loc 1 1088 0
 422 001a 224B     		ldr	r3, .L41
 423 001c C3F8D850 		str	r5, [r3, #216]
1090:..\..\FreeRTOS/tasks.c **** 			{
 424              		.loc 1 1090 0
 425 0020 D3F8D430 		ldr	r3, [r3, #212]
 426 0024 012B     		cmp	r3, #1
 427 0026 10D1     		bne	.L38
1095:..\..\FreeRTOS/tasks.c **** 			}
 428              		.loc 1 1095 0
 429 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 430              	.LVL50:
 431 002c 0DE0     		b	.L38
 432              	.L37:
1107:..\..\FreeRTOS/tasks.c **** 			{
 433              		.loc 1 1107 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 79


 434 002e 1D4B     		ldr	r3, .L41
 435 0030 D3F8DC30 		ldr	r3, [r3, #220]
 436 0034 4BB9     		cbnz	r3, .L38
1109:..\..\FreeRTOS/tasks.c **** 				{
 437              		.loc 1 1109 0
 438 0036 1B4B     		ldr	r3, .L41
 439 0038 D3F8D830 		ldr	r3, [r3, #216]
 440 003c DA6A     		ldr	r2, [r3, #44]
 441 003e EB6A     		ldr	r3, [r5, #44]
 442 0040 9A42     		cmp	r2, r3
 443 0042 02D8     		bhi	.L38
1111:..\..\FreeRTOS/tasks.c **** 				}
 444              		.loc 1 1111 0
 445 0044 174B     		ldr	r3, .L41
 446 0046 C3F8D850 		str	r5, [r3, #216]
 447              	.L38:
1124:..\..\FreeRTOS/tasks.c **** 
 448              		.loc 1 1124 0
 449 004a 164C     		ldr	r4, .L41
 450 004c D4F8E030 		ldr	r3, [r4, #224]
 451 0050 0133     		adds	r3, r3, #1
 452 0052 C4F8E030 		str	r3, [r4, #224]
1134:..\..\FreeRTOS/tasks.c **** 
 453              		.loc 1 1134 0
 454 0056 EB6A     		ldr	r3, [r5, #44]
 455 0058 0122     		movs	r2, #1
 456 005a 02FA03F1 		lsl	r1, r2, r3
 457 005e D4F8E420 		ldr	r2, [r4, #228]
 458 0062 0A43     		orrs	r2, r2, r1
 459 0064 C4F8E420 		str	r2, [r4, #228]
 460 0068 04F13000 		add	r0, r4, #48
 461 006c 03EB8303 		add	r3, r3, r3, lsl #2
 462 0070 9A00     		lsls	r2, r3, #2
 463 0072 291D     		adds	r1, r5, #4
 464 0074 1044     		add	r0, r0, r2
 465 0076 FFF7FEFF 		bl	vListInsertEnd
 466              	.LVL51:
1138:..\..\FreeRTOS/tasks.c **** 
 467              		.loc 1 1138 0
 468 007a FFF7FEFF 		bl	vPortExitCritical
 469              	.LVL52:
1140:..\..\FreeRTOS/tasks.c **** 	{
 470              		.loc 1 1140 0
 471 007e D4F8DC30 		ldr	r3, [r4, #220]
 472 0082 6BB1     		cbz	r3, .L36
1144:..\..\FreeRTOS/tasks.c **** 		{
 473              		.loc 1 1144 0
 474 0084 D4F8D830 		ldr	r3, [r4, #216]
 475 0088 DA6A     		ldr	r2, [r3, #44]
 476 008a EB6A     		ldr	r3, [r5, #44]
 477 008c 9A42     		cmp	r2, r3
 478 008e 07D2     		bcs	.L36
1146:..\..\FreeRTOS/tasks.c **** 		}
 479              		.loc 1 1146 0
 480 0090 4FF08052 		mov	r2, #268435456
 481 0094 044B     		ldr	r3, .L41+4
 482 0096 1A60     		str	r2, [r3]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 80


 483              		.syntax unified
 484              	@ 1146 "..\..\FreeRTOS\tasks.c" 1
 485 0098 BFF34F8F 		dsb
 486              	@ 0 "" 2
 487              	@ 1146 "..\..\FreeRTOS\tasks.c" 1
 488 009c BFF36F8F 		isb
 489              	@ 0 "" 2
 490              		.thumb
 491              		.syntax unified
 492              	.L36:
 493 00a0 38BD     		pop	{r3, r4, r5, pc}
 494              	.LVL53:
 495              	.L42:
 496 00a2 00BF     		.align	2
 497              	.L41:
 498 00a4 00000000 		.word	.LANCHOR0
 499 00a8 04ED00E0 		.word	-536810236
 500              		.cfi_endproc
 501              	.LFE70:
 502              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 503              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 504              		.align	2
 505              		.thumb
 506              		.thumb_func
 507              		.type	prvCheckTasksWaitingTermination, %function
 508              	prvCheckTasksWaitingTermination:
 509              	.LFB103:
3640:..\..\FreeRTOS/tasks.c **** 
 510              		.loc 1 3640 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514 0000 38B5     		push	{r3, r4, r5, lr}
 515              		.cfi_def_cfa_offset 16
 516              		.cfi_offset 3, -16
 517              		.cfi_offset 4, -12
 518              		.cfi_offset 5, -8
 519              		.cfi_offset 14, -4
 520              	.LBB26:
3650:..\..\FreeRTOS/tasks.c **** 		{
 521              		.loc 1 3650 0
 522 0002 17E0     		b	.L44
 523              	.L45:
3652:..\..\FreeRTOS/tasks.c **** 			{
 524              		.loc 1 3652 0
 525 0004 FFF7FEFF 		bl	vPortEnterCritical
 526              	.LVL54:
3654:..\..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 527              		.loc 1 3654 0
 528 0008 0D4C     		ldr	r4, .L47
 529 000a D4F8C830 		ldr	r3, [r4, #200]
 530 000e DD68     		ldr	r5, [r3, #12]
 531              	.LVL55:
3655:..\..\FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
 532              		.loc 1 3655 0
 533 0010 281D     		adds	r0, r5, #4
 534 0012 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 81


 535              	.LVL56:
3656:..\..\FreeRTOS/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 536              		.loc 1 3656 0
 537 0016 D4F8D430 		ldr	r3, [r4, #212]
 538 001a 013B     		subs	r3, r3, #1
 539 001c C4F8D430 		str	r3, [r4, #212]
3657:..\..\FreeRTOS/tasks.c **** 			}
 540              		.loc 1 3657 0
 541 0020 D4F8E830 		ldr	r3, [r4, #232]
 542 0024 013B     		subs	r3, r3, #1
 543 0026 C4F8E830 		str	r3, [r4, #232]
3659:..\..\FreeRTOS/tasks.c **** 
 544              		.loc 1 3659 0
 545 002a FFF7FEFF 		bl	vPortExitCritical
 546              	.LVL57:
3661:..\..\FreeRTOS/tasks.c **** 		}
 547              		.loc 1 3661 0
 548 002e 2846     		mov	r0, r5
 549 0030 FFF7FEFF 		bl	prvDeleteTCB
 550              	.LVL58:
 551              	.L44:
3650:..\..\FreeRTOS/tasks.c **** 		{
 552              		.loc 1 3650 0
 553 0034 024B     		ldr	r3, .L47
 554 0036 D3F8E830 		ldr	r3, [r3, #232]
 555 003a 002B     		cmp	r3, #0
 556 003c E2D1     		bne	.L45
 557              	.LBE26:
3665:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 558              		.loc 1 3665 0
 559 003e 38BD     		pop	{r3, r4, r5, pc}
 560              	.L48:
 561              		.align	2
 562              	.L47:
 563 0040 00000000 		.word	.LANCHOR0
 564              		.cfi_endproc
 565              	.LFE103:
 566              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 567              		.section	.text.prvIdleTask,"ax",%progbits
 568              		.align	2
 569              		.thumb
 570              		.thumb_func
 571              		.type	prvIdleTask, %function
 572              	prvIdleTask:
 573              	.LFB101:
3393:..\..\FreeRTOS/tasks.c **** 	/* Stop warnings. */
 574              		.loc 1 3393 0
 575              		.cfi_startproc
 576              		@ Volatile: function does not return.
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL59:
 580 0000 08B5     		push	{r3, lr}
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 3, -8
 583              		.cfi_offset 14, -4
 584              	.LVL60:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 82


 585              	.L50:
3409:..\..\FreeRTOS/tasks.c **** 
 586              		.loc 1 3409 0 discriminator 1
 587 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 588              	.LVL61:
 589 0006 FCE7     		b	.L50
 590              		.cfi_endproc
 591              	.LFE101:
 592              		.size	prvIdleTask, .-prvIdleTask
 593              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 594              		.align	2
 595              		.thumb
 596              		.thumb_func
 597              		.type	prvAddCurrentTaskToDelayedList, %function
 598              	prvAddCurrentTaskToDelayedList:
 599              	.LFB121:
3963:..\..\FreeRTOS/tasks.c **** 	}
3964:..\..\FreeRTOS/tasks.c **** }
3965:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3966:..\..\FreeRTOS/tasks.c **** 
3967:..\..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:..\..\FreeRTOS/tasks.c **** 
3969:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:..\..\FreeRTOS/tasks.c **** 	{
3971:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3972:..\..\FreeRTOS/tasks.c **** 
3973:..\..\FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3974:..\..\FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:..\..\FreeRTOS/tasks.c **** 		individual execution thread. */
3976:..\..\FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3977:..\..\FreeRTOS/tasks.c **** 
3978:..\..\FreeRTOS/tasks.c **** 		return xReturn;
3979:..\..\FreeRTOS/tasks.c **** 	}
3980:..\..\FreeRTOS/tasks.c **** 
3981:..\..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3983:..\..\FreeRTOS/tasks.c **** 
3984:..\..\FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:..\..\FreeRTOS/tasks.c **** 
3986:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:..\..\FreeRTOS/tasks.c **** 	{
3988:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3989:..\..\FreeRTOS/tasks.c **** 
3990:..\..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:..\..\FreeRTOS/tasks.c **** 		{
3992:..\..\FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:..\..\FreeRTOS/tasks.c **** 		}
3994:..\..\FreeRTOS/tasks.c **** 		else
3995:..\..\FreeRTOS/tasks.c **** 		{
3996:..\..\FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:..\..\FreeRTOS/tasks.c **** 			{
3998:..\..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:..\..\FreeRTOS/tasks.c **** 			}
4000:..\..\FreeRTOS/tasks.c **** 			else
4001:..\..\FreeRTOS/tasks.c **** 			{
4002:..\..\FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:..\..\FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 83


4004:..\..\FreeRTOS/tasks.c **** 		}
4005:..\..\FreeRTOS/tasks.c **** 
4006:..\..\FreeRTOS/tasks.c **** 		return xReturn;
4007:..\..\FreeRTOS/tasks.c **** 	}
4008:..\..\FreeRTOS/tasks.c **** 
4009:..\..\FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4011:..\..\FreeRTOS/tasks.c **** 
4012:..\..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:..\..\FreeRTOS/tasks.c **** 
4014:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:..\..\FreeRTOS/tasks.c **** 	{
4016:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:..\..\FreeRTOS/tasks.c **** 
4019:..\..\FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:..\..\FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:..\..\FreeRTOS/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:..\..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
4023:..\..\FreeRTOS/tasks.c **** 		{
4024:..\..\FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:..\..\FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:..\..\FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:..\..\FreeRTOS/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:..\..\FreeRTOS/tasks.c **** 			{
4029:..\..\FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:..\..\FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:..\..\FreeRTOS/tasks.c **** 				not being used for anything else. */
4032:..\..\FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:..\..\FreeRTOS/tasks.c **** 				{
4034:..\..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:..\..\FreeRTOS/tasks.c **** 				}
4036:..\..\FreeRTOS/tasks.c **** 				else
4037:..\..\FreeRTOS/tasks.c **** 				{
4038:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:..\..\FreeRTOS/tasks.c **** 				}
4040:..\..\FreeRTOS/tasks.c **** 
4041:..\..\FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:..\..\FreeRTOS/tasks.c **** 				to be moved into a new list. */
4043:..\..\FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:..\..\FreeRTOS/tasks.c **** 				{
4045:..\..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:..\..\FreeRTOS/tasks.c **** 					{
4047:..\..\FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
4048:..\..\FreeRTOS/tasks.c **** 						there is no need to check again and the port level
4049:..\..\FreeRTOS/tasks.c **** 						reset macro can be called directly. */
4050:..\..\FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:..\..\FreeRTOS/tasks.c **** 					}
4052:..\..\FreeRTOS/tasks.c **** 					else
4053:..\..\FreeRTOS/tasks.c **** 					{
4054:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:..\..\FreeRTOS/tasks.c **** 					}
4056:..\..\FreeRTOS/tasks.c **** 
4057:..\..\FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:..\..\FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:..\..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 84


4061:..\..\FreeRTOS/tasks.c **** 				else
4062:..\..\FreeRTOS/tasks.c **** 				{
4063:..\..\FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
4064:..\..\FreeRTOS/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:..\..\FreeRTOS/tasks.c **** 				}
4066:..\..\FreeRTOS/tasks.c **** 
4067:..\..\FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:..\..\FreeRTOS/tasks.c **** 
4069:..\..\FreeRTOS/tasks.c **** 				/* Inheritance occurred. */
4070:..\..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4071:..\..\FreeRTOS/tasks.c **** 			}
4072:..\..\FreeRTOS/tasks.c **** 			else
4073:..\..\FreeRTOS/tasks.c **** 			{
4074:..\..\FreeRTOS/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:..\..\FreeRTOS/tasks.c **** 				{
4076:..\..\FreeRTOS/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:..\..\FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:..\..\FreeRTOS/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:..\..\FreeRTOS/tasks.c **** 					priority of the task attempting to take the mutex.
4080:..\..\FreeRTOS/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:..\..\FreeRTOS/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:..\..\FreeRTOS/tasks.c **** 					not been the case. */
4083:..\..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
4084:..\..\FreeRTOS/tasks.c **** 				}
4085:..\..\FreeRTOS/tasks.c **** 				else
4086:..\..\FreeRTOS/tasks.c **** 				{
4087:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:..\..\FreeRTOS/tasks.c **** 				}
4089:..\..\FreeRTOS/tasks.c **** 			}
4090:..\..\FreeRTOS/tasks.c **** 		}
4091:..\..\FreeRTOS/tasks.c **** 		else
4092:..\..\FreeRTOS/tasks.c **** 		{
4093:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:..\..\FreeRTOS/tasks.c **** 		}
4095:..\..\FreeRTOS/tasks.c **** 
4096:..\..\FreeRTOS/tasks.c **** 		return xReturn;
4097:..\..\FreeRTOS/tasks.c **** 	}
4098:..\..\FreeRTOS/tasks.c **** 
4099:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4100:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4101:..\..\FreeRTOS/tasks.c **** 
4102:..\..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:..\..\FreeRTOS/tasks.c **** 
4104:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:..\..\FreeRTOS/tasks.c **** 	{
4106:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:..\..\FreeRTOS/tasks.c **** 
4109:..\..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
4110:..\..\FreeRTOS/tasks.c **** 		{
4111:..\..\FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:..\..\FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:..\..\FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:..\..\FreeRTOS/tasks.c **** 			be the running state task. */
4115:..\..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:..\..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:..\..\FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 85


4118:..\..\FreeRTOS/tasks.c **** 
4119:..\..\FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:..\..\FreeRTOS/tasks.c **** 			task? */
4121:..\..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:..\..\FreeRTOS/tasks.c **** 			{
4123:..\..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:..\..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:..\..\FreeRTOS/tasks.c **** 				{
4126:..\..\FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:..\..\FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:..\..\FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:..\..\FreeRTOS/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:..\..\FreeRTOS/tasks.c **** 					the holding task from the ready/delayed list. */
4131:..\..\FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:..\..\FreeRTOS/tasks.c **** 					{
4133:..\..\FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:..\..\FreeRTOS/tasks.c **** 					}
4135:..\..\FreeRTOS/tasks.c **** 					else
4136:..\..\FreeRTOS/tasks.c **** 					{
4137:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:..\..\FreeRTOS/tasks.c **** 					}
4139:..\..\FreeRTOS/tasks.c **** 
4140:..\..\FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:..\..\FreeRTOS/tasks.c **** 					new	ready list. */
4142:..\..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:..\..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:..\..\FreeRTOS/tasks.c **** 
4145:..\..\FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:..\..\FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
4147:..\..\FreeRTOS/tasks.c **** 					running to give back the mutex. */
4148:..\..\FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:..\..\FreeRTOS/tasks.c **** 
4151:..\..\FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:..\..\FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
4153:..\..\FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:..\..\FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
4155:..\..\FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:..\..\FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:..\..\FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:..\..\FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
4159:..\..\FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
4160:..\..\FreeRTOS/tasks.c **** 				}
4161:..\..\FreeRTOS/tasks.c **** 				else
4162:..\..\FreeRTOS/tasks.c **** 				{
4163:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:..\..\FreeRTOS/tasks.c **** 				}
4165:..\..\FreeRTOS/tasks.c **** 			}
4166:..\..\FreeRTOS/tasks.c **** 			else
4167:..\..\FreeRTOS/tasks.c **** 			{
4168:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:..\..\FreeRTOS/tasks.c **** 			}
4170:..\..\FreeRTOS/tasks.c **** 		}
4171:..\..\FreeRTOS/tasks.c **** 		else
4172:..\..\FreeRTOS/tasks.c **** 		{
4173:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:..\..\FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 86


4175:..\..\FreeRTOS/tasks.c **** 
4176:..\..\FreeRTOS/tasks.c **** 		return xReturn;
4177:..\..\FreeRTOS/tasks.c **** 	}
4178:..\..\FreeRTOS/tasks.c **** 
4179:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4180:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4181:..\..\FreeRTOS/tasks.c **** 
4182:..\..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:..\..\FreeRTOS/tasks.c **** 
4184:..\..\FreeRTOS/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:..\..\FreeRTOS/tasks.c **** 	{
4186:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:..\..\FreeRTOS/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:..\..\FreeRTOS/tasks.c **** 
4190:..\..\FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
4191:..\..\FreeRTOS/tasks.c **** 		{
4192:..\..\FreeRTOS/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:..\..\FreeRTOS/tasks.c **** 			one mutex. */
4194:..\..\FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:..\..\FreeRTOS/tasks.c **** 
4196:..\..\FreeRTOS/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:..\..\FreeRTOS/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:..\..\FreeRTOS/tasks.c **** 			holding task's base priority and the priority of the highest
4199:..\..\FreeRTOS/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:..\..\FreeRTOS/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:..\..\FreeRTOS/tasks.c **** 			{
4202:..\..\FreeRTOS/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:..\..\FreeRTOS/tasks.c **** 			}
4204:..\..\FreeRTOS/tasks.c **** 			else
4205:..\..\FreeRTOS/tasks.c **** 			{
4206:..\..\FreeRTOS/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:..\..\FreeRTOS/tasks.c **** 			}
4208:..\..\FreeRTOS/tasks.c **** 
4209:..\..\FreeRTOS/tasks.c **** 			/* Does the priority need to change? */
4210:..\..\FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:..\..\FreeRTOS/tasks.c **** 			{
4212:..\..\FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:..\..\FreeRTOS/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:..\..\FreeRTOS/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:..\..\FreeRTOS/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:..\..\FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:..\..\FreeRTOS/tasks.c **** 				{
4218:..\..\FreeRTOS/tasks.c **** 					/* If a task has timed out because it already holds the
4219:..\..\FreeRTOS/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:..\..\FreeRTOS/tasks.c **** 					its own priority. */
4221:..\..\FreeRTOS/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:..\..\FreeRTOS/tasks.c **** 
4223:..\..\FreeRTOS/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:..\..\FreeRTOS/tasks.c **** 					priority to facilitate determining the subject task's
4225:..\..\FreeRTOS/tasks.c **** 					state. */
4226:..\..\FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:..\..\FreeRTOS/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:..\..\FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:..\..\FreeRTOS/tasks.c **** 
4230:..\..\FreeRTOS/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:..\..\FreeRTOS/tasks.c **** 					being used for anything else. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 87


4232:..\..\FreeRTOS/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:..\..\FreeRTOS/tasks.c **** 					{
4234:..\..\FreeRTOS/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:..\..\FreeRTOS/tasks.c **** 					}
4236:..\..\FreeRTOS/tasks.c **** 					else
4237:..\..\FreeRTOS/tasks.c **** 					{
4238:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:..\..\FreeRTOS/tasks.c **** 					}
4240:..\..\FreeRTOS/tasks.c **** 
4241:..\..\FreeRTOS/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:..\..\FreeRTOS/tasks.c **** 					then the task that holds the mutex could be in either the
4243:..\..\FreeRTOS/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:..\..\FreeRTOS/tasks.c **** 					from its current state list if it is in the Ready state as
4245:..\..\FreeRTOS/tasks.c **** 					the task's priority is going to change and there is one
4246:..\..\FreeRTOS/tasks.c **** 					Ready list per priority. */
4247:..\..\FreeRTOS/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:..\..\FreeRTOS/tasks.c **** 					{
4249:..\..\FreeRTOS/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:..\..\FreeRTOS/tasks.c **** 						{
4251:..\..\FreeRTOS/tasks.c **** 							/* It is known that the task is in its ready list so
4252:..\..\FreeRTOS/tasks.c **** 							there is no need to check again and the port level
4253:..\..\FreeRTOS/tasks.c **** 							reset macro can be called directly. */
4254:..\..\FreeRTOS/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:..\..\FreeRTOS/tasks.c **** 						}
4256:..\..\FreeRTOS/tasks.c **** 						else
4257:..\..\FreeRTOS/tasks.c **** 						{
4258:..\..\FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:..\..\FreeRTOS/tasks.c **** 						}
4260:..\..\FreeRTOS/tasks.c **** 
4261:..\..\FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:..\..\FreeRTOS/tasks.c **** 					}
4263:..\..\FreeRTOS/tasks.c **** 					else
4264:..\..\FreeRTOS/tasks.c **** 					{
4265:..\..\FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:..\..\FreeRTOS/tasks.c **** 					}
4267:..\..\FreeRTOS/tasks.c **** 				}
4268:..\..\FreeRTOS/tasks.c **** 				else
4269:..\..\FreeRTOS/tasks.c **** 				{
4270:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:..\..\FreeRTOS/tasks.c **** 				}
4272:..\..\FreeRTOS/tasks.c **** 			}
4273:..\..\FreeRTOS/tasks.c **** 			else
4274:..\..\FreeRTOS/tasks.c **** 			{
4275:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:..\..\FreeRTOS/tasks.c **** 			}
4277:..\..\FreeRTOS/tasks.c **** 		}
4278:..\..\FreeRTOS/tasks.c **** 		else
4279:..\..\FreeRTOS/tasks.c **** 		{
4280:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:..\..\FreeRTOS/tasks.c **** 		}
4282:..\..\FreeRTOS/tasks.c **** 	}
4283:..\..\FreeRTOS/tasks.c **** 
4284:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4285:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4286:..\..\FreeRTOS/tasks.c **** 
4287:..\..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 88


4289:..\..\FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
4290:..\..\FreeRTOS/tasks.c **** 	{
4291:..\..\FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:..\..\FreeRTOS/tasks.c **** 
4293:..\..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:..\..\FreeRTOS/tasks.c **** 		{
4295:..\..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:..\..\FreeRTOS/tasks.c **** 
4297:..\..\FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:..\..\FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:..\..\FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:..\..\FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:..\..\FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:..\..\FreeRTOS/tasks.c **** 			critical section. */
4303:..\..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:..\..\FreeRTOS/tasks.c **** 			{
4305:..\..\FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:..\..\FreeRTOS/tasks.c **** 			}
4307:..\..\FreeRTOS/tasks.c **** 		}
4308:..\..\FreeRTOS/tasks.c **** 		else
4309:..\..\FreeRTOS/tasks.c **** 		{
4310:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:..\..\FreeRTOS/tasks.c **** 		}
4312:..\..\FreeRTOS/tasks.c **** 	}
4313:..\..\FreeRTOS/tasks.c **** 
4314:..\..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4316:..\..\FreeRTOS/tasks.c **** 
4317:..\..\FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:..\..\FreeRTOS/tasks.c **** 
4319:..\..\FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
4320:..\..\FreeRTOS/tasks.c **** 	{
4321:..\..\FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:..\..\FreeRTOS/tasks.c **** 		{
4323:..\..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:..\..\FreeRTOS/tasks.c **** 			{
4325:..\..\FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:..\..\FreeRTOS/tasks.c **** 
4327:..\..\FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:..\..\FreeRTOS/tasks.c **** 				{
4329:..\..\FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
4330:..\..\FreeRTOS/tasks.c **** 				}
4331:..\..\FreeRTOS/tasks.c **** 				else
4332:..\..\FreeRTOS/tasks.c **** 				{
4333:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:..\..\FreeRTOS/tasks.c **** 				}
4335:..\..\FreeRTOS/tasks.c **** 			}
4336:..\..\FreeRTOS/tasks.c **** 			else
4337:..\..\FreeRTOS/tasks.c **** 			{
4338:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:..\..\FreeRTOS/tasks.c **** 			}
4340:..\..\FreeRTOS/tasks.c **** 		}
4341:..\..\FreeRTOS/tasks.c **** 		else
4342:..\..\FreeRTOS/tasks.c **** 		{
4343:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:..\..\FreeRTOS/tasks.c **** 		}
4345:..\..\FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 89


4346:..\..\FreeRTOS/tasks.c **** 
4347:..\..\FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4349:..\..\FreeRTOS/tasks.c **** 
4350:..\..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:..\..\FreeRTOS/tasks.c **** 
4352:..\..\FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:..\..\FreeRTOS/tasks.c **** 	{
4354:..\..\FreeRTOS/tasks.c **** 	size_t x;
4355:..\..\FreeRTOS/tasks.c **** 
4356:..\..\FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
4357:..\..\FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:..\..\FreeRTOS/tasks.c **** 
4359:..\..\FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:..\..\FreeRTOS/tasks.c **** 		printed out. */
4361:..\..\FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:..\..\FreeRTOS/tasks.c **** 		{
4363:..\..\FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:..\..\FreeRTOS/tasks.c **** 		}
4365:..\..\FreeRTOS/tasks.c **** 
4366:..\..\FreeRTOS/tasks.c **** 		/* Terminate. */
4367:..\..\FreeRTOS/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:..\..\FreeRTOS/tasks.c **** 
4369:..\..\FreeRTOS/tasks.c **** 		/* Return the new end of string. */
4370:..\..\FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
4371:..\..\FreeRTOS/tasks.c **** 	}
4372:..\..\FreeRTOS/tasks.c **** 
4373:..\..\FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4375:..\..\FreeRTOS/tasks.c **** 
4376:..\..\FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:..\..\FreeRTOS/tasks.c **** 
4378:..\..\FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:..\..\FreeRTOS/tasks.c **** 	{
4380:..\..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:..\..\FreeRTOS/tasks.c **** 	char cStatus;
4383:..\..\FreeRTOS/tasks.c **** 
4384:..\..\FreeRTOS/tasks.c **** 		/*
4385:..\..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4386:..\..\FreeRTOS/tasks.c **** 		 *
4387:..\..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:..\..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:..\..\FreeRTOS/tasks.c **** 		 * scheduler.
4390:..\..\FreeRTOS/tasks.c **** 		 *
4391:..\..\FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:..\..\FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:..\..\FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
4394:..\..\FreeRTOS/tasks.c **** 		 *
4395:..\..\FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:..\..\FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:..\..\FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:..\..\FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:..\..\FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:..\..\FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:..\..\FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
4402:..\..\FreeRTOS/tasks.c **** 		 *
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 90


4403:..\..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:..\..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:..\..\FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
4406:..\..\FreeRTOS/tasks.c **** 		 */
4407:..\..\FreeRTOS/tasks.c **** 
4408:..\..\FreeRTOS/tasks.c **** 
4409:..\..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:..\..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:..\..\FreeRTOS/tasks.c **** 
4412:..\..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:..\..\FreeRTOS/tasks.c **** 		function is executing. */
4414:..\..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:..\..\FreeRTOS/tasks.c **** 
4416:..\..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:..\..\FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:..\..\FreeRTOS/tasks.c **** 		equate to NULL. */
4419:..\..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:..\..\FreeRTOS/tasks.c **** 
4421:..\..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:..\..\FreeRTOS/tasks.c **** 		{
4423:..\..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4424:..\..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:..\..\FreeRTOS/tasks.c **** 
4426:..\..\FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:..\..\FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:..\..\FreeRTOS/tasks.c **** 			{
4429:..\..\FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:..\..\FreeRTOS/tasks.c **** 				{
4431:..\..\FreeRTOS/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:..\..\FreeRTOS/tasks.c **** 										break;
4433:..\..\FreeRTOS/tasks.c **** 
4434:..\..\FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:..\..\FreeRTOS/tasks.c **** 										break;
4436:..\..\FreeRTOS/tasks.c **** 
4437:..\..\FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:..\..\FreeRTOS/tasks.c **** 										break;
4439:..\..\FreeRTOS/tasks.c **** 
4440:..\..\FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:..\..\FreeRTOS/tasks.c **** 										break;
4442:..\..\FreeRTOS/tasks.c **** 
4443:..\..\FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:..\..\FreeRTOS/tasks.c **** 										break;
4445:..\..\FreeRTOS/tasks.c **** 
4446:..\..\FreeRTOS/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:..\..\FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4448:..\..\FreeRTOS/tasks.c **** 										to prevent static checking errors. */
4449:..\..\FreeRTOS/tasks.c **** 										cStatus = ( char ) 0x00;
4450:..\..\FreeRTOS/tasks.c **** 										break;
4451:..\..\FreeRTOS/tasks.c **** 				}
4452:..\..\FreeRTOS/tasks.c **** 
4453:..\..\FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:..\..\FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
4455:..\..\FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:..\..\FreeRTOS/tasks.c **** 
4457:..\..\FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
4458:..\..\FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:..\..\FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 91


4460:..\..\FreeRTOS/tasks.c **** 			}
4461:..\..\FreeRTOS/tasks.c **** 
4462:..\..\FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:..\..\FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:..\..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:..\..\FreeRTOS/tasks.c **** 		}
4466:..\..\FreeRTOS/tasks.c **** 		else
4467:..\..\FreeRTOS/tasks.c **** 		{
4468:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:..\..\FreeRTOS/tasks.c **** 		}
4470:..\..\FreeRTOS/tasks.c **** 	}
4471:..\..\FreeRTOS/tasks.c **** 
4472:..\..\FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4474:..\..\FreeRTOS/tasks.c **** 
4475:..\..\FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:..\..\FreeRTOS/tasks.c **** 
4477:..\..\FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:..\..\FreeRTOS/tasks.c **** 	{
4479:..\..\FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:..\..\FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:..\..\FreeRTOS/tasks.c **** 
4483:..\..\FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:..\..\FreeRTOS/tasks.c **** 		{
4485:..\..\FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:..\..\FreeRTOS/tasks.c **** 		}
4487:..\..\FreeRTOS/tasks.c **** 		#endif
4488:..\..\FreeRTOS/tasks.c **** 
4489:..\..\FreeRTOS/tasks.c **** 		/*
4490:..\..\FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4491:..\..\FreeRTOS/tasks.c **** 		 *
4492:..\..\FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:..\..\FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:..\..\FreeRTOS/tasks.c **** 		 * scheduler.
4495:..\..\FreeRTOS/tasks.c **** 		 *
4496:..\..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:..\..\FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:..\..\FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:..\..\FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
4500:..\..\FreeRTOS/tasks.c **** 		 *
4501:..\..\FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:..\..\FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:..\..\FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:..\..\FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:..\..\FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:..\..\FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:..\..\FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
4508:..\..\FreeRTOS/tasks.c **** 		 *
4509:..\..\FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:..\..\FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:..\..\FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:..\..\FreeRTOS/tasks.c **** 		 */
4513:..\..\FreeRTOS/tasks.c **** 
4514:..\..\FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:..\..\FreeRTOS/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 92


4517:..\..\FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:..\..\FreeRTOS/tasks.c **** 		function is executing. */
4519:..\..\FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:..\..\FreeRTOS/tasks.c **** 
4521:..\..\FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:..\..\FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:..\..\FreeRTOS/tasks.c **** 		equate to NULL. */
4524:..\..\FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:..\..\FreeRTOS/tasks.c **** 
4526:..\..\FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:..\..\FreeRTOS/tasks.c **** 		{
4528:..\..\FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4529:..\..\FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:..\..\FreeRTOS/tasks.c **** 
4531:..\..\FreeRTOS/tasks.c **** 			/* For percentage calculations. */
4532:..\..\FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
4533:..\..\FreeRTOS/tasks.c **** 
4534:..\..\FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4535:..\..\FreeRTOS/tasks.c **** 			if( ulTotalTime > 0UL )
4536:..\..\FreeRTOS/tasks.c **** 			{
4537:..\..\FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:..\..\FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:..\..\FreeRTOS/tasks.c **** 				{
4540:..\..\FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:..\..\FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:..\..\FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:..\..\FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:..\..\FreeRTOS/tasks.c **** 
4545:..\..\FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
4546:..\..\FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4547:..\..\FreeRTOS/tasks.c **** 					easily. */
4548:..\..\FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:..\..\FreeRTOS/tasks.c **** 
4550:..\..\FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:..\..\FreeRTOS/tasks.c **** 					{
4552:..\..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:..\..\FreeRTOS/tasks.c **** 						{
4554:..\..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:..\..\FreeRTOS/tasks.c **** 						}
4556:..\..\FreeRTOS/tasks.c **** 						#else
4557:..\..\FreeRTOS/tasks.c **** 						{
4558:..\..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:..\..\FreeRTOS/tasks.c **** 							printf() library can be used. */
4560:..\..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:..\..\FreeRTOS/tasks.c **** 						}
4562:..\..\FreeRTOS/tasks.c **** 						#endif
4563:..\..\FreeRTOS/tasks.c **** 					}
4564:..\..\FreeRTOS/tasks.c **** 					else
4565:..\..\FreeRTOS/tasks.c **** 					{
4566:..\..\FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4567:..\..\FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4568:..\..\FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:..\..\FreeRTOS/tasks.c **** 						{
4570:..\..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:..\..\FreeRTOS/tasks.c **** 						}
4572:..\..\FreeRTOS/tasks.c **** 						#else
4573:..\..\FreeRTOS/tasks.c **** 						{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 93


4574:..\..\FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:..\..\FreeRTOS/tasks.c **** 							printf() library can be used. */
4576:..\..\FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:..\..\FreeRTOS/tasks.c **** 						}
4578:..\..\FreeRTOS/tasks.c **** 						#endif
4579:..\..\FreeRTOS/tasks.c **** 					}
4580:..\..\FreeRTOS/tasks.c **** 
4581:..\..\FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:..\..\FreeRTOS/tasks.c **** 				}
4583:..\..\FreeRTOS/tasks.c **** 			}
4584:..\..\FreeRTOS/tasks.c **** 			else
4585:..\..\FreeRTOS/tasks.c **** 			{
4586:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:..\..\FreeRTOS/tasks.c **** 			}
4588:..\..\FreeRTOS/tasks.c **** 
4589:..\..\FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:..\..\FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:..\..\FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:..\..\FreeRTOS/tasks.c **** 		}
4593:..\..\FreeRTOS/tasks.c **** 		else
4594:..\..\FreeRTOS/tasks.c **** 		{
4595:..\..\FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:..\..\FreeRTOS/tasks.c **** 		}
4597:..\..\FreeRTOS/tasks.c **** 	}
4598:..\..\FreeRTOS/tasks.c **** 
4599:..\..\FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4601:..\..\FreeRTOS/tasks.c **** 
4602:..\..\FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:..\..\FreeRTOS/tasks.c **** {
4604:..\..\FreeRTOS/tasks.c **** TickType_t uxReturn;
4605:..\..\FreeRTOS/tasks.c **** 
4606:..\..\FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:..\..\FreeRTOS/tasks.c **** 
4608:..\..\FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:..\..\FreeRTOS/tasks.c **** 	queues and semaphores. */
4610:..\..\FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:..\..\FreeRTOS/tasks.c **** 
4612:..\..\FreeRTOS/tasks.c **** 	return uxReturn;
4613:..\..\FreeRTOS/tasks.c **** }
4614:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4615:..\..\FreeRTOS/tasks.c **** 
4616:..\..\FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:..\..\FreeRTOS/tasks.c **** 
4618:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:..\..\FreeRTOS/tasks.c **** 	{
4620:..\..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:..\..\FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:..\..\FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:..\..\FreeRTOS/tasks.c **** 		{
4624:..\..\FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:..\..\FreeRTOS/tasks.c **** 		}
4626:..\..\FreeRTOS/tasks.c **** 
4627:..\..\FreeRTOS/tasks.c **** 		return pxCurrentTCB;
4628:..\..\FreeRTOS/tasks.c **** 	}
4629:..\..\FreeRTOS/tasks.c **** 
4630:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 94


4631:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4632:..\..\FreeRTOS/tasks.c **** 
4633:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:..\..\FreeRTOS/tasks.c **** 
4635:..\..\FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:..\..\FreeRTOS/tasks.c **** 	{
4637:..\..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
4638:..\..\FreeRTOS/tasks.c **** 
4639:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4640:..\..\FreeRTOS/tasks.c **** 		{
4641:..\..\FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:..\..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:..\..\FreeRTOS/tasks.c **** 			{
4644:..\..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:..\..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:..\..\FreeRTOS/tasks.c **** 
4647:..\..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:..\..\FreeRTOS/tasks.c **** 				{
4649:..\..\FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:..\..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:..\..\FreeRTOS/tasks.c **** 
4652:..\..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:..\..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4654:..\..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4655:..\..\FreeRTOS/tasks.c **** 					application code should ever do. */
4656:..\..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4657:..\..\FreeRTOS/tasks.c **** 				}
4658:..\..\FreeRTOS/tasks.c **** 				else
4659:..\..\FreeRTOS/tasks.c **** 				{
4660:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:..\..\FreeRTOS/tasks.c **** 				}
4662:..\..\FreeRTOS/tasks.c **** 			}
4663:..\..\FreeRTOS/tasks.c **** 			else
4664:..\..\FreeRTOS/tasks.c **** 			{
4665:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:..\..\FreeRTOS/tasks.c **** 			}
4667:..\..\FreeRTOS/tasks.c **** 		}
4668:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4669:..\..\FreeRTOS/tasks.c **** 
4670:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4671:..\..\FreeRTOS/tasks.c **** 		{
4672:..\..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:..\..\FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:..\..\FreeRTOS/tasks.c **** 
4675:..\..\FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
4676:..\..\FreeRTOS/tasks.c **** 			{
4677:..\..\FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:..\..\FreeRTOS/tasks.c **** 				{
4679:..\..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:..\..\FreeRTOS/tasks.c **** 				}
4681:..\..\FreeRTOS/tasks.c **** 				else
4682:..\..\FreeRTOS/tasks.c **** 				{
4683:..\..\FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:..\..\FreeRTOS/tasks.c **** 				}
4685:..\..\FreeRTOS/tasks.c **** 			}
4686:..\..\FreeRTOS/tasks.c **** 			else
4687:..\..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 95


4688:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:..\..\FreeRTOS/tasks.c **** 			}
4690:..\..\FreeRTOS/tasks.c **** 
4691:..\..\FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:..\..\FreeRTOS/tasks.c **** 		}
4693:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4694:..\..\FreeRTOS/tasks.c **** 
4695:..\..\FreeRTOS/tasks.c **** 		return ulReturn;
4696:..\..\FreeRTOS/tasks.c **** 	}
4697:..\..\FreeRTOS/tasks.c **** 
4698:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4700:..\..\FreeRTOS/tasks.c **** 
4701:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:..\..\FreeRTOS/tasks.c **** 
4703:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:..\..\FreeRTOS/tasks.c **** 	{
4705:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4706:..\..\FreeRTOS/tasks.c **** 
4707:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4708:..\..\FreeRTOS/tasks.c **** 		{
4709:..\..\FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:..\..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:..\..\FreeRTOS/tasks.c **** 			{
4712:..\..\FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:..\..\FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:..\..\FreeRTOS/tasks.c **** 				clear the value to zero. */
4715:..\..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:..\..\FreeRTOS/tasks.c **** 
4717:..\..\FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:..\..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:..\..\FreeRTOS/tasks.c **** 
4720:..\..\FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:..\..\FreeRTOS/tasks.c **** 				{
4722:..\..\FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:..\..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:..\..\FreeRTOS/tasks.c **** 
4725:..\..\FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:..\..\FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4727:..\..\FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4728:..\..\FreeRTOS/tasks.c **** 					application code should ever do. */
4729:..\..\FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4730:..\..\FreeRTOS/tasks.c **** 				}
4731:..\..\FreeRTOS/tasks.c **** 				else
4732:..\..\FreeRTOS/tasks.c **** 				{
4733:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:..\..\FreeRTOS/tasks.c **** 				}
4735:..\..\FreeRTOS/tasks.c **** 			}
4736:..\..\FreeRTOS/tasks.c **** 			else
4737:..\..\FreeRTOS/tasks.c **** 			{
4738:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:..\..\FreeRTOS/tasks.c **** 			}
4740:..\..\FreeRTOS/tasks.c **** 		}
4741:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4742:..\..\FreeRTOS/tasks.c **** 
4743:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4744:..\..\FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 96


4745:..\..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:..\..\FreeRTOS/tasks.c **** 
4747:..\..\FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4748:..\..\FreeRTOS/tasks.c **** 			{
4749:..\..\FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4750:..\..\FreeRTOS/tasks.c **** 				have changed. */
4751:..\..\FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:..\..\FreeRTOS/tasks.c **** 			}
4753:..\..\FreeRTOS/tasks.c **** 
4754:..\..\FreeRTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:..\..\FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:..\..\FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:..\..\FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4758:..\..\FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:..\..\FreeRTOS/tasks.c **** 			{
4760:..\..\FreeRTOS/tasks.c **** 				/* A notification was not received. */
4761:..\..\FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4762:..\..\FreeRTOS/tasks.c **** 			}
4763:..\..\FreeRTOS/tasks.c **** 			else
4764:..\..\FreeRTOS/tasks.c **** 			{
4765:..\..\FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4766:..\..\FreeRTOS/tasks.c **** 				received while the task was waiting. */
4767:..\..\FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:..\..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4769:..\..\FreeRTOS/tasks.c **** 			}
4770:..\..\FreeRTOS/tasks.c **** 
4771:..\..\FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:..\..\FreeRTOS/tasks.c **** 		}
4773:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4774:..\..\FreeRTOS/tasks.c **** 
4775:..\..\FreeRTOS/tasks.c **** 		return xReturn;
4776:..\..\FreeRTOS/tasks.c **** 	}
4777:..\..\FreeRTOS/tasks.c **** 
4778:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4780:..\..\FreeRTOS/tasks.c **** 
4781:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:..\..\FreeRTOS/tasks.c **** 
4783:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:..\..\FreeRTOS/tasks.c **** 	{
4785:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4786:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:..\..\FreeRTOS/tasks.c **** 
4789:..\..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4790:..\..\FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
4791:..\..\FreeRTOS/tasks.c **** 
4792:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4793:..\..\FreeRTOS/tasks.c **** 		{
4794:..\..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:..\..\FreeRTOS/tasks.c **** 			{
4796:..\..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:..\..\FreeRTOS/tasks.c **** 			}
4798:..\..\FreeRTOS/tasks.c **** 
4799:..\..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:..\..\FreeRTOS/tasks.c **** 
4801:..\..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 97


4802:..\..\FreeRTOS/tasks.c **** 
4803:..\..\FreeRTOS/tasks.c **** 			switch( eAction )
4804:..\..\FreeRTOS/tasks.c **** 			{
4805:..\..\FreeRTOS/tasks.c **** 				case eSetBits	:
4806:..\..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:..\..\FreeRTOS/tasks.c **** 					break;
4808:..\..\FreeRTOS/tasks.c **** 
4809:..\..\FreeRTOS/tasks.c **** 				case eIncrement	:
4810:..\..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:..\..\FreeRTOS/tasks.c **** 					break;
4812:..\..\FreeRTOS/tasks.c **** 
4813:..\..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4814:..\..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:..\..\FreeRTOS/tasks.c **** 					break;
4816:..\..\FreeRTOS/tasks.c **** 
4817:..\..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:..\..\FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:..\..\FreeRTOS/tasks.c **** 					{
4820:..\..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:..\..\FreeRTOS/tasks.c **** 					}
4822:..\..\FreeRTOS/tasks.c **** 					else
4823:..\..\FreeRTOS/tasks.c **** 					{
4824:..\..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4825:..\..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4826:..\..\FreeRTOS/tasks.c **** 					}
4827:..\..\FreeRTOS/tasks.c **** 					break;
4828:..\..\FreeRTOS/tasks.c **** 
4829:..\..\FreeRTOS/tasks.c **** 				case eNoAction:
4830:..\..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4831:..\..\FreeRTOS/tasks.c **** 					updated. */
4832:..\..\FreeRTOS/tasks.c **** 					break;
4833:..\..\FreeRTOS/tasks.c **** 
4834:..\..\FreeRTOS/tasks.c **** 				default:
4835:..\..\FreeRTOS/tasks.c **** 					/* Should not get here if all enums are handled.
4836:..\..\FreeRTOS/tasks.c **** 					Artificially force an assert by testing a value the
4837:..\..\FreeRTOS/tasks.c **** 					compiler can't assume is const. */
4838:..\..\FreeRTOS/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:..\..\FreeRTOS/tasks.c **** 
4840:..\..\FreeRTOS/tasks.c **** 					break;
4841:..\..\FreeRTOS/tasks.c **** 			}
4842:..\..\FreeRTOS/tasks.c **** 
4843:..\..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4844:..\..\FreeRTOS/tasks.c **** 
4845:..\..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:..\..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4847:..\..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:..\..\FreeRTOS/tasks.c **** 			{
4849:..\..\FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:..\..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:..\..\FreeRTOS/tasks.c **** 
4852:..\..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4853:..\..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:..\..\FreeRTOS/tasks.c **** 
4855:..\..\FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:..\..\FreeRTOS/tasks.c **** 				{
4857:..\..\FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:..\..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 98


4859:..\..\FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:..\..\FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:..\..\FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4862:..\..\FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:..\..\FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4864:..\..\FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:..\..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:..\..\FreeRTOS/tasks.c **** 					earliest possible time. */
4867:..\..\FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:..\..\FreeRTOS/tasks.c **** 				}
4869:..\..\FreeRTOS/tasks.c **** 				#endif
4870:..\..\FreeRTOS/tasks.c **** 
4871:..\..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:..\..\FreeRTOS/tasks.c **** 				{
4873:..\..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4874:..\..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4875:..\..\FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:..\..\FreeRTOS/tasks.c **** 				}
4877:..\..\FreeRTOS/tasks.c **** 				else
4878:..\..\FreeRTOS/tasks.c **** 				{
4879:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:..\..\FreeRTOS/tasks.c **** 				}
4881:..\..\FreeRTOS/tasks.c **** 			}
4882:..\..\FreeRTOS/tasks.c **** 			else
4883:..\..\FreeRTOS/tasks.c **** 			{
4884:..\..\FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:..\..\FreeRTOS/tasks.c **** 			}
4886:..\..\FreeRTOS/tasks.c **** 		}
4887:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4888:..\..\FreeRTOS/tasks.c **** 
4889:..\..\FreeRTOS/tasks.c **** 		return xReturn;
4890:..\..\FreeRTOS/tasks.c **** 	}
4891:..\..\FreeRTOS/tasks.c **** 
4892:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4894:..\..\FreeRTOS/tasks.c **** 
4895:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:..\..\FreeRTOS/tasks.c **** 
4897:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:..\..\FreeRTOS/tasks.c **** 	{
4899:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4900:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:..\..\FreeRTOS/tasks.c **** 
4904:..\..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4905:..\..\FreeRTOS/tasks.c **** 
4906:..\..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:..\..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:..\..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:..\..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:..\..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:..\..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:..\..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:..\..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:..\..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 99


4916:..\..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:..\..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:..\..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:..\..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:..\..\FreeRTOS/tasks.c **** 		provided on the following link:
4921:..\..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:..\..\FreeRTOS/tasks.c **** 
4924:..\..\FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
4925:..\..\FreeRTOS/tasks.c **** 
4926:..\..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:..\..\FreeRTOS/tasks.c **** 		{
4928:..\..\FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:..\..\FreeRTOS/tasks.c **** 			{
4930:..\..\FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:..\..\FreeRTOS/tasks.c **** 			}
4932:..\..\FreeRTOS/tasks.c **** 
4933:..\..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:..\..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:..\..\FreeRTOS/tasks.c **** 
4936:..\..\FreeRTOS/tasks.c **** 			switch( eAction )
4937:..\..\FreeRTOS/tasks.c **** 			{
4938:..\..\FreeRTOS/tasks.c **** 				case eSetBits	:
4939:..\..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:..\..\FreeRTOS/tasks.c **** 					break;
4941:..\..\FreeRTOS/tasks.c **** 
4942:..\..\FreeRTOS/tasks.c **** 				case eIncrement	:
4943:..\..\FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:..\..\FreeRTOS/tasks.c **** 					break;
4945:..\..\FreeRTOS/tasks.c **** 
4946:..\..\FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4947:..\..\FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:..\..\FreeRTOS/tasks.c **** 					break;
4949:..\..\FreeRTOS/tasks.c **** 
4950:..\..\FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:..\..\FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:..\..\FreeRTOS/tasks.c **** 					{
4953:..\..\FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:..\..\FreeRTOS/tasks.c **** 					}
4955:..\..\FreeRTOS/tasks.c **** 					else
4956:..\..\FreeRTOS/tasks.c **** 					{
4957:..\..\FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4958:..\..\FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4959:..\..\FreeRTOS/tasks.c **** 					}
4960:..\..\FreeRTOS/tasks.c **** 					break;
4961:..\..\FreeRTOS/tasks.c **** 
4962:..\..\FreeRTOS/tasks.c **** 				case eNoAction :
4963:..\..\FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4964:..\..\FreeRTOS/tasks.c **** 					updated. */
4965:..\..\FreeRTOS/tasks.c **** 					break;
4966:..\..\FreeRTOS/tasks.c **** 
4967:..\..\FreeRTOS/tasks.c **** 				default:
4968:..\..\FreeRTOS/tasks.c **** 					/* Should not get here if all enums are handled.
4969:..\..\FreeRTOS/tasks.c **** 					Artificially force an assert by testing a value the
4970:..\..\FreeRTOS/tasks.c **** 					compiler can't assume is const. */
4971:..\..\FreeRTOS/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:..\..\FreeRTOS/tasks.c **** 					break;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 100


4973:..\..\FreeRTOS/tasks.c **** 			}
4974:..\..\FreeRTOS/tasks.c **** 
4975:..\..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:..\..\FreeRTOS/tasks.c **** 
4977:..\..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:..\..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
4979:..\..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:..\..\FreeRTOS/tasks.c **** 			{
4981:..\..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4982:..\..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:..\..\FreeRTOS/tasks.c **** 
4984:..\..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:..\..\FreeRTOS/tasks.c **** 				{
4986:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:..\..\FreeRTOS/tasks.c **** 				}
4989:..\..\FreeRTOS/tasks.c **** 				else
4990:..\..\FreeRTOS/tasks.c **** 				{
4991:..\..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:..\..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:..\..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:..\..\FreeRTOS/tasks.c **** 				}
4995:..\..\FreeRTOS/tasks.c **** 
4996:..\..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:..\..\FreeRTOS/tasks.c **** 				{
4998:..\..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4999:..\..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
5000:..\..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:..\..\FreeRTOS/tasks.c **** 					{
5002:..\..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:..\..\FreeRTOS/tasks.c **** 					}
5004:..\..\FreeRTOS/tasks.c **** 
5005:..\..\FreeRTOS/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:..\..\FreeRTOS/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:..\..\FreeRTOS/tasks.c **** 					safe FreeRTOS function. */
5008:..\..\FreeRTOS/tasks.c **** 					xYieldPending = pdTRUE;
5009:..\..\FreeRTOS/tasks.c **** 				}
5010:..\..\FreeRTOS/tasks.c **** 				else
5011:..\..\FreeRTOS/tasks.c **** 				{
5012:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:..\..\FreeRTOS/tasks.c **** 				}
5014:..\..\FreeRTOS/tasks.c **** 			}
5015:..\..\FreeRTOS/tasks.c **** 		}
5016:..\..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:..\..\FreeRTOS/tasks.c **** 
5018:..\..\FreeRTOS/tasks.c **** 		return xReturn;
5019:..\..\FreeRTOS/tasks.c **** 	}
5020:..\..\FreeRTOS/tasks.c **** 
5021:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5023:..\..\FreeRTOS/tasks.c **** 
5024:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:..\..\FreeRTOS/tasks.c **** 
5026:..\..\FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:..\..\FreeRTOS/tasks.c **** 	{
5028:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
5029:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 101


5030:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:..\..\FreeRTOS/tasks.c **** 
5032:..\..\FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
5033:..\..\FreeRTOS/tasks.c **** 
5034:..\..\FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:..\..\FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:..\..\FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:..\..\FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:..\..\FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:..\..\FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:..\..\FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:..\..\FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:..\..\FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:..\..\FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:..\..\FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:..\..\FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:..\..\FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:..\..\FreeRTOS/tasks.c **** 		provided on the following link:
5049:..\..\FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:..\..\FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:..\..\FreeRTOS/tasks.c **** 
5052:..\..\FreeRTOS/tasks.c **** 		pxTCB = xTaskToNotify;
5053:..\..\FreeRTOS/tasks.c **** 
5054:..\..\FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:..\..\FreeRTOS/tasks.c **** 		{
5056:..\..\FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:..\..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:..\..\FreeRTOS/tasks.c **** 
5059:..\..\FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:..\..\FreeRTOS/tasks.c **** 			semaphore. */
5061:..\..\FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:..\..\FreeRTOS/tasks.c **** 
5063:..\..\FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:..\..\FreeRTOS/tasks.c **** 
5065:..\..\FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:..\..\FreeRTOS/tasks.c **** 			notification then unblock it now. */
5067:..\..\FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:..\..\FreeRTOS/tasks.c **** 			{
5069:..\..\FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
5070:..\..\FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:..\..\FreeRTOS/tasks.c **** 
5072:..\..\FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:..\..\FreeRTOS/tasks.c **** 				{
5074:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:..\..\FreeRTOS/tasks.c **** 				}
5077:..\..\FreeRTOS/tasks.c **** 				else
5078:..\..\FreeRTOS/tasks.c **** 				{
5079:..\..\FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:..\..\FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:..\..\FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:..\..\FreeRTOS/tasks.c **** 				}
5083:..\..\FreeRTOS/tasks.c **** 
5084:..\..\FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:..\..\FreeRTOS/tasks.c **** 				{
5086:..\..\FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 102


5087:..\..\FreeRTOS/tasks.c **** 					executing task so a yield is required. */
5088:..\..\FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:..\..\FreeRTOS/tasks.c **** 					{
5090:..\..\FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:..\..\FreeRTOS/tasks.c **** 					}
5092:..\..\FreeRTOS/tasks.c **** 
5093:..\..\FreeRTOS/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:..\..\FreeRTOS/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:..\..\FreeRTOS/tasks.c **** 					safe FreeRTOS function. */
5096:..\..\FreeRTOS/tasks.c **** 					xYieldPending = pdTRUE;
5097:..\..\FreeRTOS/tasks.c **** 				}
5098:..\..\FreeRTOS/tasks.c **** 				else
5099:..\..\FreeRTOS/tasks.c **** 				{
5100:..\..\FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:..\..\FreeRTOS/tasks.c **** 				}
5102:..\..\FreeRTOS/tasks.c **** 			}
5103:..\..\FreeRTOS/tasks.c **** 		}
5104:..\..\FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:..\..\FreeRTOS/tasks.c **** 	}
5106:..\..\FreeRTOS/tasks.c **** 
5107:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5109:..\..\FreeRTOS/tasks.c **** 
5110:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:..\..\FreeRTOS/tasks.c **** 
5112:..\..\FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:..\..\FreeRTOS/tasks.c **** 	{
5114:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
5115:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
5116:..\..\FreeRTOS/tasks.c **** 
5117:..\..\FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:..\..\FreeRTOS/tasks.c **** 		its notification state cleared. */
5119:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:..\..\FreeRTOS/tasks.c **** 
5121:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
5122:..\..\FreeRTOS/tasks.c **** 		{
5123:..\..\FreeRTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:..\..\FreeRTOS/tasks.c **** 			{
5125:..\..\FreeRTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:..\..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
5127:..\..\FreeRTOS/tasks.c **** 			}
5128:..\..\FreeRTOS/tasks.c **** 			else
5129:..\..\FreeRTOS/tasks.c **** 			{
5130:..\..\FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
5131:..\..\FreeRTOS/tasks.c **** 			}
5132:..\..\FreeRTOS/tasks.c **** 		}
5133:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
5134:..\..\FreeRTOS/tasks.c **** 
5135:..\..\FreeRTOS/tasks.c **** 		return xReturn;
5136:..\..\FreeRTOS/tasks.c **** 	}
5137:..\..\FreeRTOS/tasks.c **** 
5138:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5140:..\..\FreeRTOS/tasks.c **** 
5141:..\..\FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:..\..\FreeRTOS/tasks.c **** 
5143:..\..\FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 103


5144:..\..\FreeRTOS/tasks.c **** 	{
5145:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
5146:..\..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
5147:..\..\FreeRTOS/tasks.c **** 
5148:..\..\FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:..\..\FreeRTOS/tasks.c **** 		its notification state cleared. */
5150:..\..\FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:..\..\FreeRTOS/tasks.c **** 
5152:..\..\FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
5153:..\..\FreeRTOS/tasks.c **** 		{
5154:..\..\FreeRTOS/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:..\..\FreeRTOS/tasks.c **** 			then clear the bit mask. */
5156:..\..\FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:..\..\FreeRTOS/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:..\..\FreeRTOS/tasks.c **** 		}
5159:..\..\FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
5160:..\..\FreeRTOS/tasks.c **** 
5161:..\..\FreeRTOS/tasks.c **** 		return ulReturn;
5162:..\..\FreeRTOS/tasks.c **** 	}
5163:..\..\FreeRTOS/tasks.c **** 
5164:..\..\FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5166:..\..\FreeRTOS/tasks.c **** 
5167:..\..\FreeRTOS/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:..\..\FreeRTOS/tasks.c **** 
5169:..\..\FreeRTOS/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:..\..\FreeRTOS/tasks.c **** 	{
5171:..\..\FreeRTOS/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:..\..\FreeRTOS/tasks.c **** 	}
5173:..\..\FreeRTOS/tasks.c **** 
5174:..\..\FreeRTOS/tasks.c **** #endif
5175:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
5176:..\..\FreeRTOS/tasks.c **** 
5177:..\..\FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:..\..\FreeRTOS/tasks.c **** {
 600              		.loc 1 5178 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              	.LVL62:
 605 0000 70B5     		push	{r4, r5, r6, lr}
 606              		.cfi_def_cfa_offset 16
 607              		.cfi_offset 4, -16
 608              		.cfi_offset 5, -12
 609              		.cfi_offset 6, -8
 610              		.cfi_offset 14, -4
 611 0002 0446     		mov	r4, r0
 612 0004 0E46     		mov	r6, r1
5179:..\..\FreeRTOS/tasks.c **** TickType_t xTimeToWake;
5180:..\..\FreeRTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 613              		.loc 1 5180 0
 614 0006 1E4B     		ldr	r3, .L58
 615 0008 D3F8EC50 		ldr	r5, [r3, #236]
 616              	.LVL63:
5181:..\..\FreeRTOS/tasks.c **** 
5182:..\..\FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:..\..\FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 104


5184:..\..\FreeRTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:..\..\FreeRTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:..\..\FreeRTOS/tasks.c **** 		when the task leaves the Blocked state. */
5187:..\..\FreeRTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:..\..\FreeRTOS/tasks.c **** 	}
5189:..\..\FreeRTOS/tasks.c **** 	#endif
5190:..\..\FreeRTOS/tasks.c **** 
5191:..\..\FreeRTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:..\..\FreeRTOS/tasks.c **** 	as the same list item is used for both lists. */
5193:..\..\FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 617              		.loc 1 5193 0
 618 000c D3F8D800 		ldr	r0, [r3, #216]
 619              	.LVL64:
 620 0010 0430     		adds	r0, r0, #4
 621 0012 FFF7FEFF 		bl	uxListRemove
 622              	.LVL65:
 623 0016 60B9     		cbnz	r0, .L53
5194:..\..\FreeRTOS/tasks.c **** 	{
5195:..\..\FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:..\..\FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:..\..\FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 624              		.loc 1 5197 0
 625 0018 194B     		ldr	r3, .L58
 626 001a D3F8D820 		ldr	r2, [r3, #216]
 627 001e D16A     		ldr	r1, [r2, #44]
 628 0020 0122     		movs	r2, #1
 629 0022 02FA01F1 		lsl	r1, r2, r1
 630 0026 D3F8E420 		ldr	r2, [r3, #228]
 631 002a 22EA0102 		bic	r2, r2, r1
 632 002e C3F8E420 		str	r2, [r3, #228]
 633              	.L53:
5198:..\..\FreeRTOS/tasks.c **** 	}
5199:..\..\FreeRTOS/tasks.c **** 	else
5200:..\..\FreeRTOS/tasks.c **** 	{
5201:..\..\FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:..\..\FreeRTOS/tasks.c **** 	}
5203:..\..\FreeRTOS/tasks.c **** 
5204:..\..\FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:..\..\FreeRTOS/tasks.c **** 	{
5206:..\..\FreeRTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 634              		.loc 1 5206 0
 635 0032 B4F1FF3F 		cmp	r4, #-1
 636 0036 07D1     		bne	.L54
 637              		.loc 1 5206 0 is_stmt 0 discriminator 1
 638 0038 36B1     		cbz	r6, .L54
5207:..\..\FreeRTOS/tasks.c **** 		{
5208:..\..\FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:..\..\FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:..\..\FreeRTOS/tasks.c **** 			indefinitely. */
5211:..\..\FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 639              		.loc 1 5211 0 is_stmt 1
 640 003a 1148     		ldr	r0, .L58
 641 003c D0F8D810 		ldr	r1, [r0, #216]
 642 0040 0431     		adds	r1, r1, #4
 643 0042 FFF7FEFF 		bl	vListInsertEnd
 644              	.LVL66:
 645 0046 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 105


 646              	.LVL67:
 647              	.L54:
5212:..\..\FreeRTOS/tasks.c **** 		}
5213:..\..\FreeRTOS/tasks.c **** 		else
5214:..\..\FreeRTOS/tasks.c **** 		{
5215:..\..\FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:..\..\FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:..\..\FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
5218:..\..\FreeRTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 648              		.loc 1 5218 0
 649 0048 2C44     		add	r4, r4, r5
 650              	.LVL68:
5219:..\..\FreeRTOS/tasks.c **** 
5220:..\..\FreeRTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:..\..\FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 651              		.loc 1 5221 0
 652 004a 0D4B     		ldr	r3, .L58
 653 004c D3F8D830 		ldr	r3, [r3, #216]
 654 0050 5C60     		str	r4, [r3, #4]
5222:..\..\FreeRTOS/tasks.c **** 
5223:..\..\FreeRTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 655              		.loc 1 5223 0
 656 0052 A542     		cmp	r5, r4
 657 0054 08D9     		bls	.L56
5224:..\..\FreeRTOS/tasks.c **** 			{
5225:..\..\FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:..\..\FreeRTOS/tasks.c **** 				list. */
5227:..\..\FreeRTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 658              		.loc 1 5227 0
 659 0056 0A4B     		ldr	r3, .L58
 660 0058 D3F8D000 		ldr	r0, [r3, #208]
 661 005c D3F8D810 		ldr	r1, [r3, #216]
 662 0060 0431     		adds	r1, r1, #4
 663 0062 FFF7FEFF 		bl	vListInsert
 664              	.LVL69:
 665 0066 70BD     		pop	{r4, r5, r6, pc}
 666              	.LVL70:
 667              	.L56:
5228:..\..\FreeRTOS/tasks.c **** 			}
5229:..\..\FreeRTOS/tasks.c **** 			else
5230:..\..\FreeRTOS/tasks.c **** 			{
5231:..\..\FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:..\..\FreeRTOS/tasks.c **** 				is used. */
5233:..\..\FreeRTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 668              		.loc 1 5233 0
 669 0068 054D     		ldr	r5, .L58
 670              	.LVL71:
 671 006a A86A     		ldr	r0, [r5, #40]
 672 006c D5F8D810 		ldr	r1, [r5, #216]
 673 0070 0431     		adds	r1, r1, #4
 674 0072 FFF7FEFF 		bl	vListInsert
 675              	.LVL72:
5234:..\..\FreeRTOS/tasks.c **** 
5235:..\..\FreeRTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:..\..\FreeRTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:..\..\FreeRTOS/tasks.c **** 				needs to be updated too. */
5238:..\..\FreeRTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 106


 676              		.loc 1 5238 0
 677 0076 EB6A     		ldr	r3, [r5, #44]
 678 0078 9C42     		cmp	r4, r3
 679 007a 00D2     		bcs	.L52
5239:..\..\FreeRTOS/tasks.c **** 				{
5240:..\..\FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 680              		.loc 1 5240 0
 681 007c EC62     		str	r4, [r5, #44]
 682              	.L52:
 683 007e 70BD     		pop	{r4, r5, r6, pc}
 684              	.LVL73:
 685              	.L59:
 686              		.align	2
 687              	.L58:
 688 0080 00000000 		.word	.LANCHOR0
 689              		.cfi_endproc
 690              	.LFE121:
 691              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 692              		.section	.text.xTaskCreate,"ax",%progbits
 693              		.align	2
 694              		.global	xTaskCreate
 695              		.thumb
 696              		.thumb_func
 697              		.type	xTaskCreate, %function
 698              	xTaskCreate:
 699              	.LFB68:
 739:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 700              		.loc 1 739 0
 701              		.cfi_startproc
 702              		@ args = 8, pretend = 0, frame = 0
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704              	.LVL74:
 705 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 706              		.cfi_def_cfa_offset 28
 707              		.cfi_offset 4, -28
 708              		.cfi_offset 5, -24
 709              		.cfi_offset 6, -20
 710              		.cfi_offset 7, -16
 711              		.cfi_offset 8, -12
 712              		.cfi_offset 9, -8
 713              		.cfi_offset 14, -4
 714 0004 85B0     		sub	sp, sp, #20
 715              		.cfi_def_cfa_offset 48
 716 0006 0646     		mov	r6, r0
 717 0008 0F46     		mov	r7, r1
 718 000a 1546     		mov	r5, r2
 719 000c 9846     		mov	r8, r3
 720              	.LBB27:
 773:..\..\FreeRTOS/tasks.c **** 
 721              		.loc 1 773 0
 722 000e 9000     		lsls	r0, r2, #2
 723              	.LVL75:
 724 0010 FFF7FEFF 		bl	pvPortMalloc
 725              	.LVL76:
 775:..\..\FreeRTOS/tasks.c **** 			{
 726              		.loc 1 775 0
 727 0014 60B1     		cbz	r0, .L64
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 107


 728 0016 8146     		mov	r9, r0
 778:..\..\FreeRTOS/tasks.c **** 
 729              		.loc 1 778 0
 730 0018 5020     		movs	r0, #80
 731              	.LVL77:
 732 001a FFF7FEFF 		bl	pvPortMalloc
 733              	.LVL78:
 780:..\..\FreeRTOS/tasks.c **** 				{
 734              		.loc 1 780 0
 735 001e 0446     		mov	r4, r0
 736 0020 10B1     		cbz	r0, .L62
 783:..\..\FreeRTOS/tasks.c **** 				}
 737              		.loc 1 783 0
 738 0022 C0F83090 		str	r9, [r0, #48]
 739 0026 04E0     		b	.L61
 740              	.L62:
 789:..\..\FreeRTOS/tasks.c **** 				}
 741              		.loc 1 789 0
 742 0028 4846     		mov	r0, r9
 743              	.LVL79:
 744 002a FFF7FEFF 		bl	vPortFree
 745              	.LVL80:
 746 002e 00E0     		b	.L61
 747              	.LVL81:
 748              	.L64:
 794:..\..\FreeRTOS/tasks.c **** 			}
 749              		.loc 1 794 0
 750 0030 0024     		movs	r4, #0
 751              	.LVL82:
 752              	.L61:
 753              	.LBE27:
 799:..\..\FreeRTOS/tasks.c **** 		{
 754              		.loc 1 799 0
 755 0032 8CB1     		cbz	r4, .L65
 809:..\..\FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 756              		.loc 1 809 0
 757 0034 0023     		movs	r3, #0
 758 0036 0393     		str	r3, [sp, #12]
 759 0038 0294     		str	r4, [sp, #8]
 760 003a 0D9B     		ldr	r3, [sp, #52]
 761 003c 0193     		str	r3, [sp, #4]
 762 003e 0C9B     		ldr	r3, [sp, #48]
 763 0040 0093     		str	r3, [sp]
 764 0042 4346     		mov	r3, r8
 765 0044 2A46     		mov	r2, r5
 766 0046 3946     		mov	r1, r7
 767 0048 3046     		mov	r0, r6
 768 004a FFF7FEFF 		bl	prvInitialiseNewTask
 769              	.LVL83:
 810:..\..\FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 770              		.loc 1 810 0
 771 004e 2046     		mov	r0, r4
 772 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 773              	.LVL84:
 811:..\..\FreeRTOS/tasks.c **** 		}
 774              		.loc 1 811 0
 775 0054 0120     		movs	r0, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 108


 776 0056 01E0     		b	.L63
 777              	.LVL85:
 778              	.L65:
 815:..\..\FreeRTOS/tasks.c **** 		}
 779              		.loc 1 815 0
 780 0058 4FF0FF30 		mov	r0, #-1
 781              	.L63:
 782              	.LVL86:
 819:..\..\FreeRTOS/tasks.c **** 
 783              		.loc 1 819 0
 784 005c 05B0     		add	sp, sp, #20
 785              		.cfi_def_cfa_offset 28
 786              		@ sp needed
 787 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 788              		.cfi_endproc
 789              	.LFE68:
 790              		.size	xTaskCreate, .-xTaskCreate
 791 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 792              		.align	2
 793              		.global	vTaskDelete
 794              		.thumb
 795              		.thumb_func
 796              		.type	vTaskDelete, %function
 797              	vTaskDelete:
 798              	.LFB71:
1163:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 799              		.loc 1 1163 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL87:
 804 0000 70B5     		push	{r4, r5, r6, lr}
 805              		.cfi_def_cfa_offset 16
 806              		.cfi_offset 4, -16
 807              		.cfi_offset 5, -12
 808              		.cfi_offset 6, -8
 809              		.cfi_offset 14, -4
 810 0002 0446     		mov	r4, r0
1166:..\..\FreeRTOS/tasks.c **** 		{
 811              		.loc 1 1166 0
 812 0004 FFF7FEFF 		bl	vPortEnterCritical
 813              	.LVL88:
1170:..\..\FreeRTOS/tasks.c **** 
 814              		.loc 1 1170 0
 815 0008 14B9     		cbnz	r4, .L68
1170:..\..\FreeRTOS/tasks.c **** 
 816              		.loc 1 1170 0 is_stmt 0 discriminator 1
 817 000a 2A4B     		ldr	r3, .L75
 818 000c D3F8D840 		ldr	r4, [r3, #216]
 819              	.LVL89:
 820              	.L68:
1173:..\..\FreeRTOS/tasks.c **** 			{
 821              		.loc 1 1173 0 is_stmt 1 discriminator 4
 822 0010 251D     		adds	r5, r4, #4
 823 0012 2846     		mov	r0, r5
 824 0014 FFF7FEFF 		bl	uxListRemove
 825              	.LVL90:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 109


 826 0018 80B9     		cbnz	r0, .L69
1175:..\..\FreeRTOS/tasks.c **** 			}
 827              		.loc 1 1175 0
 828 001a E26A     		ldr	r2, [r4, #44]
 829 001c 02EB8201 		add	r1, r2, r2, lsl #2
 830 0020 8B00     		lsls	r3, r1, #2
 831 0022 2449     		ldr	r1, .L75
 832 0024 0B44     		add	r3, r3, r1
 833 0026 1B6B     		ldr	r3, [r3, #48]
 834 0028 43B9     		cbnz	r3, .L69
1175:..\..\FreeRTOS/tasks.c **** 			}
 835              		.loc 1 1175 0 is_stmt 0 discriminator 1
 836 002a 0123     		movs	r3, #1
 837 002c 03FA02F2 		lsl	r2, r3, r2
 838 0030 D1F8E430 		ldr	r3, [r1, #228]
 839 0034 23EA0202 		bic	r2, r3, r2
 840 0038 C1F8E420 		str	r2, [r1, #228]
 841              	.L69:
1183:..\..\FreeRTOS/tasks.c **** 			{
 842              		.loc 1 1183 0 is_stmt 1
 843 003c A36A     		ldr	r3, [r4, #40]
 844 003e 1BB1     		cbz	r3, .L70
1185:..\..\FreeRTOS/tasks.c **** 			}
 845              		.loc 1 1185 0
 846 0040 04F11800 		add	r0, r4, #24
 847 0044 FFF7FEFF 		bl	uxListRemove
 848              	.LVL91:
 849              	.L70:
1196:..\..\FreeRTOS/tasks.c **** 
 850              		.loc 1 1196 0
 851 0048 1A4B     		ldr	r3, .L75
 852 004a D3F8E020 		ldr	r2, [r3, #224]
 853 004e 0132     		adds	r2, r2, #1
 854 0050 C3F8E020 		str	r2, [r3, #224]
1198:..\..\FreeRTOS/tasks.c **** 			{
 855              		.loc 1 1198 0
 856 0054 D3F8D830 		ldr	r3, [r3, #216]
 857 0058 9C42     		cmp	r4, r3
 858 005a 0BD1     		bne	.L71
1205:..\..\FreeRTOS/tasks.c **** 
 859              		.loc 1 1205 0
 860 005c 154E     		ldr	r6, .L75
 861 005e 2946     		mov	r1, r5
 862 0060 06F1BC00 		add	r0, r6, #188
 863 0064 FFF7FEFF 		bl	vListInsertEnd
 864              	.LVL92:
1210:..\..\FreeRTOS/tasks.c **** 
 865              		.loc 1 1210 0
 866 0068 D6F8E830 		ldr	r3, [r6, #232]
 867 006c 0133     		adds	r3, r3, #1
 868 006e C6F8E830 		str	r3, [r6, #232]
 869 0072 0AE0     		b	.L72
 870              	.L71:
1225:..\..\FreeRTOS/tasks.c **** 				traceTASK_DELETE( pxTCB );
 871              		.loc 1 1225 0
 872 0074 0F4A     		ldr	r2, .L75
 873 0076 D2F8D430 		ldr	r3, [r2, #212]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 110


 874 007a 013B     		subs	r3, r3, #1
 875 007c C2F8D430 		str	r3, [r2, #212]
1227:..\..\FreeRTOS/tasks.c **** 
 876              		.loc 1 1227 0
 877 0080 2046     		mov	r0, r4
 878 0082 FFF7FEFF 		bl	prvDeleteTCB
 879              	.LVL93:
1231:..\..\FreeRTOS/tasks.c **** 			}
 880              		.loc 1 1231 0
 881 0086 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 882              	.LVL94:
 883              	.L72:
1234:..\..\FreeRTOS/tasks.c **** 
 884              		.loc 1 1234 0
 885 008a FFF7FEFF 		bl	vPortExitCritical
 886              	.LVL95:
1238:..\..\FreeRTOS/tasks.c **** 		{
 887              		.loc 1 1238 0
 888 008e 094B     		ldr	r3, .L75
 889 0090 D3F8DC30 		ldr	r3, [r3, #220]
 890 0094 63B1     		cbz	r3, .L67
1240:..\..\FreeRTOS/tasks.c **** 			{
 891              		.loc 1 1240 0
 892 0096 074B     		ldr	r3, .L75
 893 0098 D3F8D830 		ldr	r3, [r3, #216]
 894 009c 9C42     		cmp	r4, r3
 895 009e 07D1     		bne	.L67
1243:..\..\FreeRTOS/tasks.c **** 			}
 896              		.loc 1 1243 0
 897 00a0 4FF08052 		mov	r2, #268435456
 898 00a4 044B     		ldr	r3, .L75+4
 899 00a6 1A60     		str	r2, [r3]
 900              		.syntax unified
 901              	@ 1243 "..\..\FreeRTOS\tasks.c" 1
 902 00a8 BFF34F8F 		dsb
 903              	@ 0 "" 2
 904              	@ 1243 "..\..\FreeRTOS\tasks.c" 1
 905 00ac BFF36F8F 		isb
 906              	@ 0 "" 2
 907              		.thumb
 908              		.syntax unified
 909              	.L67:
 910 00b0 70BD     		pop	{r4, r5, r6, pc}
 911              	.LVL96:
 912              	.L76:
 913 00b2 00BF     		.align	2
 914              	.L75:
 915 00b4 00000000 		.word	.LANCHOR0
 916 00b8 04ED00E0 		.word	-536810236
 917              		.cfi_endproc
 918              	.LFE71:
 919              		.size	vTaskDelete, .-vTaskDelete
 920              		.section	.text.eTaskGetState,"ax",%progbits
 921              		.align	2
 922              		.global	eTaskGetState
 923              		.thumb
 924              		.thumb_func
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 111


 925              		.type	eTaskGetState, %function
 926              	eTaskGetState:
 927              	.LFB74:
1387:..\..\FreeRTOS/tasks.c **** 	eTaskState eReturn;
 928              		.loc 1 1387 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              	.LVL97:
 933 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 934              		.cfi_def_cfa_offset 24
 935              		.cfi_offset 3, -24
 936              		.cfi_offset 4, -20
 937              		.cfi_offset 5, -16
 938              		.cfi_offset 6, -12
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941              	.LVL98:
1394:..\..\FreeRTOS/tasks.c **** 		{
 942              		.loc 1 1394 0
 943 0002 194B     		ldr	r3, .L88
 944 0004 D3F8D830 		ldr	r3, [r3, #216]
 945 0008 9842     		cmp	r0, r3
 946 000a 1FD0     		beq	.L80
 947 000c 0446     		mov	r4, r0
1401:..\..\FreeRTOS/tasks.c **** 			{
 948              		.loc 1 1401 0
 949 000e FFF7FEFF 		bl	vPortEnterCritical
 950              	.LVL99:
1403:..\..\FreeRTOS/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 951              		.loc 1 1403 0
 952 0012 6569     		ldr	r5, [r4, #20]
 953              	.LVL100:
1404:..\..\FreeRTOS/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 954              		.loc 1 1404 0
 955 0014 144B     		ldr	r3, .L88
 956 0016 9E6A     		ldr	r6, [r3, #40]
 957              	.LVL101:
1405:..\..\FreeRTOS/tasks.c **** 			}
 958              		.loc 1 1405 0
 959 0018 D3F8D070 		ldr	r7, [r3, #208]
 960              	.LVL102:
1407:..\..\FreeRTOS/tasks.c **** 
 961              		.loc 1 1407 0
 962 001c FFF7FEFF 		bl	vPortExitCritical
 963              	.LVL103:
1409:..\..\FreeRTOS/tasks.c **** 			{
 964              		.loc 1 1409 0
 965 0020 B542     		cmp	r5, r6
 966 0022 15D0     		beq	.L81
1409:..\..\FreeRTOS/tasks.c **** 			{
 967              		.loc 1 1409 0 is_stmt 0 discriminator 1
 968 0024 BD42     		cmp	r5, r7
 969 0026 15D0     		beq	.L82
1417:..\..\FreeRTOS/tasks.c **** 				{
 970              		.loc 1 1417 0 is_stmt 1
 971 0028 0F4B     		ldr	r3, .L88
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 112


 972 002a 9D42     		cmp	r5, r3
 973 002c 08D1     		bne	.L79
1422:..\..\FreeRTOS/tasks.c **** 					{
 974              		.loc 1 1422 0
 975 002e A36A     		ldr	r3, [r4, #40]
 976 0030 93B9     		cbnz	r3, .L83
1430:..\..\FreeRTOS/tasks.c **** 							{
 977              		.loc 1 1430 0
 978 0032 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 979 0036 DBB2     		uxtb	r3, r3
 980 0038 012B     		cmp	r3, #1
 981 003a 0FD1     		bne	.L84
1432:..\..\FreeRTOS/tasks.c **** 							}
 982              		.loc 1 1432 0
 983 003c 0220     		movs	r0, #2
 984 003e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 985              	.LVL104:
 986              	.L79:
1453:..\..\FreeRTOS/tasks.c **** 				{
 987              		.loc 1 1453 0
 988 0040 0A4B     		ldr	r3, .L88+4
 989 0042 9D42     		cmp	r5, r3
 990 0044 0CD0     		beq	.L85
1453:..\..\FreeRTOS/tasks.c **** 				{
 991              		.loc 1 1453 0 is_stmt 0 discriminator 1
 992 0046 6DB9     		cbnz	r5, .L86
1458:..\..\FreeRTOS/tasks.c **** 				}
 993              		.loc 1 1458 0 is_stmt 1
 994 0048 0420     		movs	r0, #4
 995 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 996              	.LVL105:
 997              	.L80:
1397:..\..\FreeRTOS/tasks.c **** 		}
 998              		.loc 1 1397 0
 999 004c 0020     		movs	r0, #0
 1000              	.LVL106:
 1001 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1002              	.LVL107:
 1003              	.L81:
1413:..\..\FreeRTOS/tasks.c **** 			}
 1004              		.loc 1 1413 0
 1005 0050 0220     		movs	r0, #2
 1006 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1007              	.LVL108:
 1008              	.L82:
 1009 0054 0220     		movs	r0, #2
 1010 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1011              	.LVL109:
 1012              	.L83:
1447:..\..\FreeRTOS/tasks.c **** 					}
 1013              		.loc 1 1447 0
 1014 0058 0220     		movs	r0, #2
 1015 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1016              	.LVL110:
 1017              	.L84:
1436:..\..\FreeRTOS/tasks.c **** 							}
 1018              		.loc 1 1436 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 113


 1019 005c 0320     		movs	r0, #3
 1020 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1021              	.LVL111:
 1022              	.L85:
1458:..\..\FreeRTOS/tasks.c **** 				}
 1023              		.loc 1 1458 0
 1024 0060 0420     		movs	r0, #4
 1025 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1026              	.LVL112:
 1027              	.L86:
1466:..\..\FreeRTOS/tasks.c **** 			}
 1028              		.loc 1 1466 0
 1029 0064 0120     		movs	r0, #1
 1030              	.LVL113:
1471:..\..\FreeRTOS/tasks.c **** 
 1031              		.loc 1 1471 0
 1032 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1033              	.LVL114:
 1034              	.L89:
 1035              		.align	2
 1036              	.L88:
 1037 0068 00000000 		.word	.LANCHOR0
 1038 006c BC000000 		.word	.LANCHOR0+188
 1039              		.cfi_endproc
 1040              	.LFE74:
 1041              		.size	eTaskGetState, .-eTaskGetState
 1042              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1043              		.align	2
 1044              		.global	uxTaskPriorityGet
 1045              		.thumb
 1046              		.thumb_func
 1047              		.type	uxTaskPriorityGet, %function
 1048              	uxTaskPriorityGet:
 1049              	.LFB75:
1479:..\..\FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 1050              		.loc 1 1479 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              	.LVL115:
 1055 0000 10B5     		push	{r4, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 4, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0446     		mov	r4, r0
1483:..\..\FreeRTOS/tasks.c **** 		{
 1060              		.loc 1 1483 0
 1061 0004 FFF7FEFF 		bl	vPortEnterCritical
 1062              	.LVL116:
1487:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1063              		.loc 1 1487 0
 1064 0008 14B9     		cbnz	r4, .L91
1487:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1065              		.loc 1 1487 0 is_stmt 0 discriminator 1
 1066 000a 044B     		ldr	r3, .L94
 1067 000c D3F8D840 		ldr	r4, [r3, #216]
 1068              	.LVL117:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 114


 1069              	.L91:
1488:..\..\FreeRTOS/tasks.c **** 		}
 1070              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1071 0010 E46A     		ldr	r4, [r4, #44]
 1072              	.LVL118:
1490:..\..\FreeRTOS/tasks.c **** 
 1073              		.loc 1 1490 0 discriminator 4
 1074 0012 FFF7FEFF 		bl	vPortExitCritical
 1075              	.LVL119:
1493:..\..\FreeRTOS/tasks.c **** 
 1076              		.loc 1 1493 0 discriminator 4
 1077 0016 2046     		mov	r0, r4
 1078 0018 10BD     		pop	{r4, pc}
 1079              	.LVL120:
 1080              	.L95:
 1081 001a 00BF     		.align	2
 1082              	.L94:
 1083 001c 00000000 		.word	.LANCHOR0
 1084              		.cfi_endproc
 1085              	.LFE75:
 1086              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1087              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1088              		.align	2
 1089              		.global	uxTaskPriorityGetFromISR
 1090              		.thumb
 1091              		.thumb_func
 1092              		.type	uxTaskPriorityGetFromISR, %function
 1093              	uxTaskPriorityGetFromISR:
 1094              	.LFB76:
1501:..\..\FreeRTOS/tasks.c **** 	TCB_t const *pxTCB;
 1095              		.loc 1 1501 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 1100              	.LVL121:
 1101              	.LBB28:
 1102              	.LBB29:
 1103              		.file 2 "..\\..\\FreeRTOS\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 115


  19:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 116


  76:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 117


 133:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 173:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 179:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	else
 184:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 188:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 118


 190:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 193:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 195:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 198:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 206:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 209:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 211:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1104              		.loc 2 213 0
 1105              		.syntax unified
 1106              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1107 0000 EFF31183 			mrs r3, basepri											
 1108 0004 4FF0A002 		mov r2, #160												
 1109 0008 82F31188 		msr basepri, r2											
 1110 000c BFF36F8F 		isb														
 1111 0010 BFF34F8F 		dsb														
 1112              	
 1113              	@ 0 "" 2
 1114              		.thumb
 1115              		.syntax unified
 1116              	.LBE29:
 1117              	.LBE28:
1527:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1118              		.loc 1 1527 0
 1119 0014 10B9     		cbnz	r0, .L97
1527:..\..\FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1120              		.loc 1 1527 0 is_stmt 0 discriminator 1
 1121 0016 034A     		ldr	r2, .L99
 1122 0018 D2F8D800 		ldr	r0, [r2, #216]
 1123              	.LVL122:
 1124              	.L97:
1528:..\..\FreeRTOS/tasks.c **** 		}
 1125              		.loc 1 1528 0 is_stmt 1 discriminator 4
 1126 001c C06A     		ldr	r0, [r0, #44]
 1127              	.LVL123:
 1128              	.LBB30:
 1129              	.LBB31:
 214:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 119


 218:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 223:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 226:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 227:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 229:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 231:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1130              		.loc 2 231 0 discriminator 4
 1131              		.syntax unified
 1132              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1133 001e 83F31188 			msr basepri, r3	
 1134              	@ 0 "" 2
 1135              	.LVL124:
 1136              		.thumb
 1137              		.syntax unified
 1138              	.LBE31:
 1139              	.LBE30:
1533:..\..\FreeRTOS/tasks.c **** 
 1140              		.loc 1 1533 0 discriminator 4
 1141 0022 7047     		bx	lr
 1142              	.L100:
 1143              		.align	2
 1144              	.L99:
 1145 0024 00000000 		.word	.LANCHOR0
 1146              		.cfi_endproc
 1147              	.LFE76:
 1148              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1149              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1150              		.align	2
 1151              		.global	vTaskPrioritySet
 1152              		.thumb
 1153              		.thumb_func
 1154              		.type	vTaskPrioritySet, %function
 1155              	vTaskPrioritySet:
 1156              	.LFB77:
1541:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1157              		.loc 1 1541 0
 1158              		.cfi_startproc
 1159              		@ args = 0, pretend = 0, frame = 0
 1160              		@ frame_needed = 0, uses_anonymous_args = 0
 1161              	.LVL125:
 1162 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1163              		.cfi_def_cfa_offset 24
 1164              		.cfi_offset 3, -24
 1165              		.cfi_offset 4, -20
 1166              		.cfi_offset 5, -16
 1167              		.cfi_offset 6, -12
 1168              		.cfi_offset 7, -8
 1169              		.cfi_offset 14, -4
 1170 0002 0446     		mov	r4, r0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 120


 1171 0004 0D46     		mov	r5, r1
 1172              	.LVL126:
1549:..\..\FreeRTOS/tasks.c **** 		{
 1173              		.loc 1 1549 0
 1174 0006 0429     		cmp	r1, #4
 1175 0008 00D9     		bls	.L102
1551:..\..\FreeRTOS/tasks.c **** 		}
 1176              		.loc 1 1551 0
 1177 000a 0425     		movs	r5, #4
 1178              	.L102:
 1179              	.LVL127:
1558:..\..\FreeRTOS/tasks.c **** 		{
 1180              		.loc 1 1558 0
 1181 000c FFF7FEFF 		bl	vPortEnterCritical
 1182              	.LVL128:
1562:..\..\FreeRTOS/tasks.c **** 
 1183              		.loc 1 1562 0
 1184 0010 14B9     		cbnz	r4, .L103
1562:..\..\FreeRTOS/tasks.c **** 
 1185              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1186 0012 304B     		ldr	r3, .L116
 1187 0014 D3F8D840 		ldr	r4, [r3, #216]
 1188              	.LVL129:
 1189              	.L103:
1568:..\..\FreeRTOS/tasks.c **** 			}
 1190              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1191 0018 236C     		ldr	r3, [r4, #64]
 1192              	.LVL130:
1576:..\..\FreeRTOS/tasks.c **** 			{
 1193              		.loc 1 1576 0 discriminator 4
 1194 001a 9D42     		cmp	r5, r3
 1195 001c 56D0     		beq	.L104
1580:..\..\FreeRTOS/tasks.c **** 				{
 1196              		.loc 1 1580 0
 1197 001e 0CD9     		bls	.L105
1582:..\..\FreeRTOS/tasks.c **** 					{
 1198              		.loc 1 1582 0
 1199 0020 2C4A     		ldr	r2, .L116
 1200 0022 D2F8D820 		ldr	r2, [r2, #216]
 1201 0026 9442     		cmp	r4, r2
 1202 0028 0ED0     		beq	.L112
1587:..\..\FreeRTOS/tasks.c **** 						{
 1203              		.loc 1 1587 0
 1204 002a 2A4A     		ldr	r2, .L116
 1205 002c D2F8D820 		ldr	r2, [r2, #216]
 1206 0030 D26A     		ldr	r2, [r2, #44]
 1207 0032 9542     		cmp	r5, r2
 1208 0034 0AD2     		bcs	.L113
1544:..\..\FreeRTOS/tasks.c **** 
 1209              		.loc 1 1544 0
 1210 0036 0027     		movs	r7, #0
 1211 0038 0BE0     		b	.L106
 1212              	.L105:
1603:..\..\FreeRTOS/tasks.c **** 				{
 1213              		.loc 1 1603 0
 1214 003a 264A     		ldr	r2, .L116
 1215 003c D2F8D820 		ldr	r2, [r2, #216]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 121


 1216 0040 9442     		cmp	r4, r2
 1217 0042 05D0     		beq	.L114
1544:..\..\FreeRTOS/tasks.c **** 
 1218              		.loc 1 1544 0
 1219 0044 0027     		movs	r7, #0
 1220 0046 04E0     		b	.L106
 1221              	.L112:
 1222 0048 0027     		movs	r7, #0
 1223 004a 02E0     		b	.L106
 1224              	.L113:
1589:..\..\FreeRTOS/tasks.c **** 						}
 1225              		.loc 1 1589 0
 1226 004c 0127     		movs	r7, #1
 1227 004e 00E0     		b	.L106
 1228              	.L114:
1608:..\..\FreeRTOS/tasks.c **** 				}
 1229              		.loc 1 1608 0
 1230 0050 0127     		movs	r7, #1
 1231              	.L106:
 1232              	.LVL131:
1620:..\..\FreeRTOS/tasks.c **** 
 1233              		.loc 1 1620 0
 1234 0052 E66A     		ldr	r6, [r4, #44]
 1235              	.LVL132:
1626:..\..\FreeRTOS/tasks.c **** 					{
 1236              		.loc 1 1626 0
 1237 0054 B342     		cmp	r3, r6
 1238 0056 00D1     		bne	.L107
1628:..\..\FreeRTOS/tasks.c **** 					}
 1239              		.loc 1 1628 0
 1240 0058 E562     		str	r5, [r4, #44]
 1241              	.L107:
1636:..\..\FreeRTOS/tasks.c **** 				}
 1242              		.loc 1 1636 0
 1243 005a 2564     		str	r5, [r4, #64]
1646:..\..\FreeRTOS/tasks.c **** 				{
 1244              		.loc 1 1646 0
 1245 005c A369     		ldr	r3, [r4, #24]
 1246              	.LVL133:
 1247 005e 002B     		cmp	r3, #0
 1248 0060 02DB     		blt	.L108
1648:..\..\FreeRTOS/tasks.c **** 				}
 1249              		.loc 1 1648 0
 1250 0062 C5F10505 		rsb	r5, r5, #5
 1251              	.LVL134:
 1252 0066 A561     		str	r5, [r4, #24]
 1253              	.L108:
1659:..\..\FreeRTOS/tasks.c **** 				{
 1254              		.loc 1 1659 0
 1255 0068 6169     		ldr	r1, [r4, #20]
 1256 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1257 006e 9300     		lsls	r3, r2, #2
 1258 0070 194A     		ldr	r2, .L116+4
 1259 0072 1344     		add	r3, r3, r2
 1260 0074 9942     		cmp	r1, r3
 1261 0076 20D1     		bne	.L109
1664:..\..\FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 122


 1262              		.loc 1 1664 0
 1263 0078 251D     		adds	r5, r4, #4
 1264 007a 2846     		mov	r0, r5
 1265 007c FFF7FEFF 		bl	uxListRemove
 1266              	.LVL135:
 1267 0080 48B9     		cbnz	r0, .L110
1669:..\..\FreeRTOS/tasks.c **** 					}
 1268              		.loc 1 1669 0
 1269 0082 0123     		movs	r3, #1
 1270 0084 03FA06F6 		lsl	r6, r3, r6
 1271              	.LVL136:
 1272 0088 124A     		ldr	r2, .L116
 1273 008a D2F8E430 		ldr	r3, [r2, #228]
 1274 008e 23EA0606 		bic	r6, r3, r6
 1275 0092 C2F8E460 		str	r6, [r2, #228]
 1276              	.L110:
1675:..\..\FreeRTOS/tasks.c **** 				}
 1277              		.loc 1 1675 0
 1278 0096 E36A     		ldr	r3, [r4, #44]
 1279 0098 0122     		movs	r2, #1
 1280 009a 02FA03F1 		lsl	r1, r2, r3
 1281 009e 0D48     		ldr	r0, .L116
 1282 00a0 D0F8E420 		ldr	r2, [r0, #228]
 1283 00a4 0A43     		orrs	r2, r2, r1
 1284 00a6 C0F8E420 		str	r2, [r0, #228]
 1285 00aa 3030     		adds	r0, r0, #48
 1286 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 1287 00b0 9A00     		lsls	r2, r3, #2
 1288 00b2 2946     		mov	r1, r5
 1289 00b4 1044     		add	r0, r0, r2
 1290 00b6 FFF7FEFF 		bl	vListInsertEnd
 1291              	.LVL137:
 1292              	.L109:
1682:..\..\FreeRTOS/tasks.c **** 				{
 1293              		.loc 1 1682 0
 1294 00ba 3FB1     		cbz	r7, .L104
1684:..\..\FreeRTOS/tasks.c **** 				}
 1295              		.loc 1 1684 0
 1296 00bc 4FF08052 		mov	r2, #268435456
 1297 00c0 064B     		ldr	r3, .L116+8
 1298 00c2 1A60     		str	r2, [r3]
 1299              		.syntax unified
 1300              	@ 1684 "..\..\FreeRTOS\tasks.c" 1
 1301 00c4 BFF34F8F 		dsb
 1302              	@ 0 "" 2
 1303              	@ 1684 "..\..\FreeRTOS\tasks.c" 1
 1304 00c8 BFF36F8F 		isb
 1305              	@ 0 "" 2
 1306              	.LVL138:
 1307              		.thumb
 1308              		.syntax unified
 1309              	.L104:
1696:..\..\FreeRTOS/tasks.c **** 	}
 1310              		.loc 1 1696 0
 1311 00cc FFF7FEFF 		bl	vPortExitCritical
 1312              	.LVL139:
 1313 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 123


 1314              	.LVL140:
 1315              	.L117:
 1316 00d2 00BF     		.align	2
 1317              	.L116:
 1318 00d4 00000000 		.word	.LANCHOR0
 1319 00d8 30000000 		.word	.LANCHOR0+48
 1320 00dc 04ED00E0 		.word	-536810236
 1321              		.cfi_endproc
 1322              	.LFE77:
 1323              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1324              		.section	.text.vTaskResume,"ax",%progbits
 1325              		.align	2
 1326              		.global	vTaskResume
 1327              		.thumb
 1328              		.thumb_func
 1329              		.type	vTaskResume, %function
 1330              	vTaskResume:
 1331              	.LFB80:
1852:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1332              		.loc 1 1852 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              	.LVL141:
1860:..\..\FreeRTOS/tasks.c **** 		{
 1337              		.loc 1 1860 0
 1338 0000 1B4B     		ldr	r3, .L123
 1339 0002 D3F8D830 		ldr	r3, [r3, #216]
 1340 0006 9842     		cmp	r0, r3
 1341 0008 30D0     		beq	.L122
1860:..\..\FreeRTOS/tasks.c **** 		{
 1342              		.loc 1 1860 0 is_stmt 0 discriminator 1
 1343 000a 78B3     		cbz	r0, .L122
1852:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1344              		.loc 1 1852 0 is_stmt 1
 1345 000c 70B5     		push	{r4, r5, r6, lr}
 1346              		.cfi_def_cfa_offset 16
 1347              		.cfi_offset 4, -16
 1348              		.cfi_offset 5, -12
 1349              		.cfi_offset 6, -8
 1350              		.cfi_offset 14, -4
 1351 000e 0446     		mov	r4, r0
1862:..\..\FreeRTOS/tasks.c **** 			{
 1352              		.loc 1 1862 0
 1353 0010 FFF7FEFF 		bl	vPortEnterCritical
 1354              	.LVL142:
1864:..\..\FreeRTOS/tasks.c **** 				{
 1355              		.loc 1 1864 0
 1356 0014 2046     		mov	r0, r4
 1357 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1358              	.LVL143:
 1359 001a 20B3     		cbz	r0, .L120
1870:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1360              		.loc 1 1870 0
 1361 001c 261D     		adds	r6, r4, #4
 1362 001e 3046     		mov	r0, r6
 1363 0020 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 124


 1364              	.LVL144:
1871:..\..\FreeRTOS/tasks.c **** 
 1365              		.loc 1 1871 0
 1366 0024 E36A     		ldr	r3, [r4, #44]
 1367 0026 0122     		movs	r2, #1
 1368 0028 02FA03F1 		lsl	r1, r2, r3
 1369 002c 104D     		ldr	r5, .L123
 1370 002e D5F8E420 		ldr	r2, [r5, #228]
 1371 0032 0A43     		orrs	r2, r2, r1
 1372 0034 C5F8E420 		str	r2, [r5, #228]
 1373 0038 05F13000 		add	r0, r5, #48
 1374 003c 03EB8303 		add	r3, r3, r3, lsl #2
 1375 0040 9A00     		lsls	r2, r3, #2
 1376 0042 3146     		mov	r1, r6
 1377 0044 1044     		add	r0, r0, r2
 1378 0046 FFF7FEFF 		bl	vListInsertEnd
 1379              	.LVL145:
1874:..\..\FreeRTOS/tasks.c **** 					{
 1380              		.loc 1 1874 0
 1381 004a E26A     		ldr	r2, [r4, #44]
 1382 004c D5F8D830 		ldr	r3, [r5, #216]
 1383 0050 DB6A     		ldr	r3, [r3, #44]
 1384 0052 9A42     		cmp	r2, r3
 1385 0054 07D3     		bcc	.L120
1879:..\..\FreeRTOS/tasks.c **** 					}
 1386              		.loc 1 1879 0
 1387 0056 4FF08052 		mov	r2, #268435456
 1388 005a 064B     		ldr	r3, .L123+4
 1389 005c 1A60     		str	r2, [r3]
 1390              		.syntax unified
 1391              	@ 1879 "..\..\FreeRTOS\tasks.c" 1
 1392 005e BFF34F8F 		dsb
 1393              	@ 0 "" 2
 1394              	@ 1879 "..\..\FreeRTOS\tasks.c" 1
 1395 0062 BFF36F8F 		isb
 1396              	@ 0 "" 2
 1397              		.thumb
 1398              		.syntax unified
 1399              	.L120:
1891:..\..\FreeRTOS/tasks.c **** 		}
 1400              		.loc 1 1891 0
 1401 0066 FFF7FEFF 		bl	vPortExitCritical
 1402              	.LVL146:
 1403 006a 70BD     		pop	{r4, r5, r6, pc}
 1404              	.LVL147:
 1405              	.L122:
 1406              		.cfi_def_cfa_offset 0
 1407              		.cfi_restore 4
 1408              		.cfi_restore 5
 1409              		.cfi_restore 6
 1410              		.cfi_restore 14
 1411 006c 7047     		bx	lr
 1412              	.L124:
 1413 006e 00BF     		.align	2
 1414              	.L123:
 1415 0070 00000000 		.word	.LANCHOR0
 1416 0074 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 125


 1417              		.cfi_endproc
 1418              	.LFE80:
 1419              		.size	vTaskResume, .-vTaskResume
 1420              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1421              		.align	2
 1422              		.global	xTaskResumeFromISR
 1423              		.thumb
 1424              		.thumb_func
 1425              		.type	xTaskResumeFromISR, %function
 1426              	xTaskResumeFromISR:
 1427              	.LFB81:
1906:..\..\FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1428              		.loc 1 1906 0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              	.LVL148:
 1433 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1434              		.cfi_def_cfa_offset 24
 1435              		.cfi_offset 3, -24
 1436              		.cfi_offset 4, -20
 1437              		.cfi_offset 5, -16
 1438              		.cfi_offset 6, -12
 1439              		.cfi_offset 7, -8
 1440              		.cfi_offset 14, -4
 1441 0002 0446     		mov	r4, r0
 1442              	.LVL149:
 1443              	.LBB32:
 1444              	.LBB33:
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1445              		.loc 2 213 0
 1446              		.syntax unified
 1447              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1448 0004 EFF31185 			mrs r5, basepri											
 1449 0008 4FF0A003 		mov r3, #160												
 1450 000c 83F31188 		msr basepri, r3											
 1451 0010 BFF36F8F 		isb														
 1452 0014 BFF34F8F 		dsb														
 1453              	
 1454              	@ 0 "" 2
 1455              		.thumb
 1456              		.syntax unified
 1457              	.LBE33:
 1458              	.LBE32:
1933:..\..\FreeRTOS/tasks.c **** 			{
 1459              		.loc 1 1933 0
 1460 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1461              	.LVL150:
 1462 001c 58B3     		cbz	r0, .L129
1938:..\..\FreeRTOS/tasks.c **** 				{
 1463              		.loc 1 1938 0
 1464 001e 184B     		ldr	r3, .L132
 1465 0020 D3F8F030 		ldr	r3, [r3, #240]
 1466 0024 03BB     		cbnz	r3, .L127
1942:..\..\FreeRTOS/tasks.c **** 					{
 1467              		.loc 1 1942 0
 1468 0026 E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 126


 1469 0028 154B     		ldr	r3, .L132
 1470 002a D3F8D830 		ldr	r3, [r3, #216]
 1471 002e DB6A     		ldr	r3, [r3, #44]
 1472 0030 9A42     		cmp	r2, r3
 1473 0032 01D2     		bcs	.L130
1907:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1474              		.loc 1 1907 0
 1475 0034 0026     		movs	r6, #0
 1476 0036 00E0     		b	.L128
 1477              	.L130:
1944:..\..\FreeRTOS/tasks.c **** 					}
 1478              		.loc 1 1944 0
 1479 0038 0126     		movs	r6, #1
 1480              	.L128:
 1481              	.LVL151:
1951:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1482              		.loc 1 1951 0
 1483 003a 271D     		adds	r7, r4, #4
 1484 003c 3846     		mov	r0, r7
 1485 003e FFF7FEFF 		bl	uxListRemove
 1486              	.LVL152:
1952:..\..\FreeRTOS/tasks.c **** 				}
 1487              		.loc 1 1952 0
 1488 0042 E36A     		ldr	r3, [r4, #44]
 1489 0044 0122     		movs	r2, #1
 1490 0046 02FA03F1 		lsl	r1, r2, r3
 1491 004a 0D48     		ldr	r0, .L132
 1492 004c D0F8E420 		ldr	r2, [r0, #228]
 1493 0050 0A43     		orrs	r2, r2, r1
 1494 0052 C0F8E420 		str	r2, [r0, #228]
 1495 0056 3030     		adds	r0, r0, #48
 1496 0058 03EB8303 		add	r3, r3, r3, lsl #2
 1497 005c 9A00     		lsls	r2, r3, #2
 1498 005e 3946     		mov	r1, r7
 1499 0060 1044     		add	r0, r0, r2
 1500 0062 FFF7FEFF 		bl	vListInsertEnd
 1501              	.LVL153:
 1502 0066 07E0     		b	.L126
 1503              	.LVL154:
 1504              	.L127:
1959:..\..\FreeRTOS/tasks.c **** 				}
 1505              		.loc 1 1959 0
 1506 0068 04F11801 		add	r1, r4, #24
 1507 006c 0548     		ldr	r0, .L132+4
 1508 006e FFF7FEFF 		bl	vListInsertEnd
 1509              	.LVL155:
1907:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1510              		.loc 1 1907 0
 1511 0072 0026     		movs	r6, #0
 1512 0074 00E0     		b	.L126
 1513              	.L129:
 1514 0076 0026     		movs	r6, #0
 1515              	.LVL156:
 1516              	.L126:
 1517              	.LBB34:
 1518              	.LBB35:
 1519              		.loc 2 231 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 127


 1520              		.syntax unified
 1521              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1522 0078 85F31188 			msr basepri, r5	
 1523              	@ 0 "" 2
 1524              	.LVL157:
 1525              		.thumb
 1526              		.syntax unified
 1527              	.LBE35:
 1528              	.LBE34:
1970:..\..\FreeRTOS/tasks.c **** 
 1529              		.loc 1 1970 0
 1530 007c 3046     		mov	r0, r6
 1531 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1532              	.LVL158:
 1533              	.L133:
 1534              		.align	2
 1535              	.L132:
 1536 0080 00000000 		.word	.LANCHOR0
 1537 0084 14000000 		.word	.LANCHOR0+20
 1538              		.cfi_endproc
 1539              	.LFE81:
 1540              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1541              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1542              		.align	2
 1543              		.global	vTaskStartScheduler
 1544              		.thumb
 1545              		.thumb_func
 1546              		.type	vTaskStartScheduler, %function
 1547              	vTaskStartScheduler:
 1548              	.LFB82:
1976:..\..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 1549              		.loc 1 1976 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553 0000 00B5     		push	{lr}
 1554              		.cfi_def_cfa_offset 4
 1555              		.cfi_offset 14, -4
 1556 0002 83B0     		sub	sp, sp, #12
 1557              		.cfi_def_cfa_offset 16
2009:..\..\FreeRTOS/tasks.c **** 								configIDLE_TASK_NAME,
 1558              		.loc 1 2009 0
 1559 0004 104B     		ldr	r3, .L137
 1560 0006 0193     		str	r3, [sp, #4]
 1561 0008 0023     		movs	r3, #0
 1562 000a 0093     		str	r3, [sp]
 1563 000c C822     		movs	r2, #200
 1564 000e 0F49     		ldr	r1, .L137+4
 1565 0010 0F48     		ldr	r0, .L137+8
 1566 0012 FFF7FEFF 		bl	xTaskCreate
 1567              	.LVL159:
2031:..\..\FreeRTOS/tasks.c **** 	{
 1568              		.loc 1 2031 0
 1569 0016 0128     		cmp	r0, #1
 1570 0018 13D1     		bne	.L134
 1571              	.LBB36:
 1572              	.LBB37:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 128


 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1573              		.loc 2 197 0
 1574              		.syntax unified
 1575              	@ 197 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1576 001a 4FF0A003 			mov r3, #160												
 1577 001e 83F31188 		msr basepri, r3											
 1578 0022 BFF36F8F 		isb														
 1579 0026 BFF34F8F 		dsb														
 1580              	
 1581              	@ 0 "" 2
 1582              		.thumb
 1583              		.syntax unified
 1584              	.LBE37:
 1585              	.LBE36:
2059:..\..\FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1586              		.loc 1 2059 0
 1587 002a 0A4B     		ldr	r3, .L137+12
 1588 002c 4FF0FF32 		mov	r2, #-1
 1589 0030 DA62     		str	r2, [r3, #44]
2060:..\..\FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1590              		.loc 1 2060 0
 1591 0032 0122     		movs	r2, #1
 1592 0034 C3F8DC20 		str	r2, [r3, #220]
2061:..\..\FreeRTOS/tasks.c **** 
 1593              		.loc 1 2061 0
 1594 0038 0022     		movs	r2, #0
 1595 003a C3F8EC20 		str	r2, [r3, #236]
2075:..\..\FreeRTOS/tasks.c **** 		{
 1596              		.loc 1 2075 0
 1597 003e FFF7FEFF 		bl	xPortStartScheduler
 1598              	.LVL160:
 1599              	.L134:
2096:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1600              		.loc 1 2096 0
 1601 0042 03B0     		add	sp, sp, #12
 1602              		.cfi_def_cfa_offset 4
 1603              		@ sp needed
 1604 0044 5DF804FB 		ldr	pc, [sp], #4
 1605              	.L138:
 1606              		.align	2
 1607              	.L137:
 1608 0048 F4000000 		.word	.LANCHOR0+244
 1609 004c 00000000 		.word	.LC0
 1610 0050 00000000 		.word	prvIdleTask
 1611 0054 00000000 		.word	.LANCHOR0
 1612              		.cfi_endproc
 1613              	.LFE82:
 1614              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1615              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1616              		.align	2
 1617              		.global	vTaskEndScheduler
 1618              		.thumb
 1619              		.thumb_func
 1620              		.type	vTaskEndScheduler, %function
 1621              	vTaskEndScheduler:
 1622              	.LFB83:
2100:..\..\FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 129


 1623              		.loc 1 2100 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 0
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
 1627 0000 08B5     		push	{r3, lr}
 1628              		.cfi_def_cfa_offset 8
 1629              		.cfi_offset 3, -8
 1630              		.cfi_offset 14, -4
 1631              	.LBB38:
 1632              	.LBB39:
 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1633              		.loc 2 197 0
 1634              		.syntax unified
 1635              	@ 197 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1636 0002 4FF0A003 			mov r3, #160												
 1637 0006 83F31188 		msr basepri, r3											
 1638 000a BFF36F8F 		isb														
 1639 000e BFF34F8F 		dsb														
 1640              	
 1641              	@ 0 "" 2
 1642              		.thumb
 1643              		.syntax unified
 1644              	.LBE39:
 1645              	.LBE38:
2105:..\..\FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1646              		.loc 1 2105 0
 1647 0012 0022     		movs	r2, #0
 1648 0014 024B     		ldr	r3, .L141
 1649 0016 C3F8DC20 		str	r2, [r3, #220]
2106:..\..\FreeRTOS/tasks.c **** }
 1650              		.loc 1 2106 0
 1651 001a FFF7FEFF 		bl	vPortEndScheduler
 1652              	.LVL161:
 1653 001e 08BD     		pop	{r3, pc}
 1654              	.L142:
 1655              		.align	2
 1656              	.L141:
 1657 0020 00000000 		.word	.LANCHOR0
 1658              		.cfi_endproc
 1659              	.LFE83:
 1660              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1661              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1662              		.align	2
 1663              		.global	vTaskSuspendAll
 1664              		.thumb
 1665              		.thumb_func
 1666              		.type	vTaskSuspendAll, %function
 1667              	vTaskSuspendAll:
 1668              	.LFB84:
2111:..\..\FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1669              		.loc 1 2111 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              		@ link register save eliminated.
2123:..\..\FreeRTOS/tasks.c **** 
 1674              		.loc 1 2123 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 130


 1675 0000 034A     		ldr	r2, .L144
 1676 0002 D2F8F030 		ldr	r3, [r2, #240]
 1677 0006 0133     		adds	r3, r3, #1
 1678 0008 C2F8F030 		str	r3, [r2, #240]
2127:..\..\FreeRTOS/tasks.c **** }
 1679              		.loc 1 2127 0
 1680 000c 7047     		bx	lr
 1681              	.L145:
 1682 000e 00BF     		.align	2
 1683              	.L144:
 1684 0010 00000000 		.word	.LANCHOR0
 1685              		.cfi_endproc
 1686              	.LFE84:
 1687              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1688              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1689              		.align	2
 1690              		.global	xTaskGetTickCount
 1691              		.thumb
 1692              		.thumb_func
 1693              		.type	xTaskGetTickCount, %function
 1694              	xTaskGetTickCount:
 1695              	.LFB86:
2305:..\..\FreeRTOS/tasks.c **** TickType_t xTicks;
 1696              		.loc 1 2305 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		@ link register save eliminated.
2311:..\..\FreeRTOS/tasks.c **** 	}
 1701              		.loc 1 2311 0
 1702 0000 014B     		ldr	r3, .L147
 1703 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1704              	.LVL162:
2316:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1705              		.loc 1 2316 0
 1706 0006 7047     		bx	lr
 1707              	.L148:
 1708              		.align	2
 1709              	.L147:
 1710 0008 00000000 		.word	.LANCHOR0
 1711              		.cfi_endproc
 1712              	.LFE86:
 1713              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1714              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1715              		.align	2
 1716              		.global	xTaskGetTickCountFromISR
 1717              		.thumb
 1718              		.thumb_func
 1719              		.type	xTaskGetTickCountFromISR, %function
 1720              	xTaskGetTickCountFromISR:
 1721              	.LFB87:
2320:..\..\FreeRTOS/tasks.c **** TickType_t xReturn;
 1722              		.loc 1 2320 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 0
 1725              		@ frame_needed = 0, uses_anonymous_args = 0
 1726              		@ link register save eliminated.
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 131


 1727              	.LVL163:
2342:..\..\FreeRTOS/tasks.c **** 	}
 1728              		.loc 1 2342 0
 1729 0000 014B     		ldr	r3, .L150
 1730 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1731              	.LVL164:
2347:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1732              		.loc 1 2347 0
 1733 0006 7047     		bx	lr
 1734              	.L151:
 1735              		.align	2
 1736              	.L150:
 1737 0008 00000000 		.word	.LANCHOR0
 1738              		.cfi_endproc
 1739              	.LFE87:
 1740              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1741              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1742              		.align	2
 1743              		.global	uxTaskGetNumberOfTasks
 1744              		.thumb
 1745              		.thumb_func
 1746              		.type	uxTaskGetNumberOfTasks, %function
 1747              	uxTaskGetNumberOfTasks:
 1748              	.LFB88:
2351:..\..\FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 1749              		.loc 1 2351 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
2354:..\..\FreeRTOS/tasks.c **** }
 1754              		.loc 1 2354 0
 1755 0000 014B     		ldr	r3, .L153
 1756 0002 D3F8D400 		ldr	r0, [r3, #212]
2355:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1757              		.loc 1 2355 0
 1758 0006 7047     		bx	lr
 1759              	.L154:
 1760              		.align	2
 1761              	.L153:
 1762 0008 00000000 		.word	.LANCHOR0
 1763              		.cfi_endproc
 1764              	.LFE88:
 1765              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1766              		.section	.text.pcTaskGetName,"ax",%progbits
 1767              		.align	2
 1768              		.global	pcTaskGetName
 1769              		.thumb
 1770              		.thumb_func
 1771              		.type	pcTaskGetName, %function
 1772              	pcTaskGetName:
 1773              	.LFB89:
2359:..\..\FreeRTOS/tasks.c **** TCB_t *pxTCB;
 1774              		.loc 1 2359 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 132


 1778              		@ link register save eliminated.
 1779              	.LVL165:
2364:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1780              		.loc 1 2364 0
 1781 0000 0346     		mov	r3, r0
 1782 0002 10B9     		cbnz	r0, .L156
2364:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1783              		.loc 1 2364 0 is_stmt 0 discriminator 1
 1784 0004 024B     		ldr	r3, .L157
 1785 0006 D3F8D830 		ldr	r3, [r3, #216]
 1786              	.LVL166:
 1787              	.L156:
2367:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1788              		.loc 1 2367 0 is_stmt 1 discriminator 4
 1789 000a 03F13400 		add	r0, r3, #52
 1790 000e 7047     		bx	lr
 1791              	.L158:
 1792              		.align	2
 1793              	.L157:
 1794 0010 00000000 		.word	.LANCHOR0
 1795              		.cfi_endproc
 1796              	.LFE89:
 1797              		.size	pcTaskGetName, .-pcTaskGetName
 1798              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1799              		.align	2
 1800              		.global	xTaskIncrementTick
 1801              		.thumb
 1802              		.thumb_func
 1803              		.type	xTaskIncrementTick, %function
 1804              	xTaskIncrementTick:
 1805              	.LFB91:
2708:..\..\FreeRTOS/tasks.c **** TCB_t * pxTCB;
 1806              		.loc 1 2708 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 1810 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1811              		.cfi_def_cfa_offset 24
 1812              		.cfi_offset 4, -24
 1813              		.cfi_offset 5, -20
 1814              		.cfi_offset 6, -16
 1815              		.cfi_offset 7, -12
 1816              		.cfi_offset 8, -8
 1817              		.cfi_offset 14, -4
 1818              	.LVL167:
2717:..\..\FreeRTOS/tasks.c **** 	{
 1819              		.loc 1 2717 0
 1820 0004 3D4B     		ldr	r3, .L176
 1821 0006 D3F8F030 		ldr	r3, [r3, #240]
 1822 000a 002B     		cmp	r3, #0
 1823 000c 68D1     		bne	.L160
 1824              	.LBB40:
2721:..\..\FreeRTOS/tasks.c **** 
 1825              		.loc 1 2721 0
 1826 000e 3B4B     		ldr	r3, .L176
 1827 0010 D3F8EC70 		ldr	r7, [r3, #236]
 1828 0014 0137     		adds	r7, r7, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 133


 1829              	.LVL168:
2725:..\..\FreeRTOS/tasks.c **** 
 1830              		.loc 1 2725 0
 1831 0016 C3F8EC70 		str	r7, [r3, #236]
2727:..\..\FreeRTOS/tasks.c **** 		{
 1832              		.loc 1 2727 0
 1833 001a 67B9     		cbnz	r7, .L161
 1834              	.LBB41:
2729:..\..\FreeRTOS/tasks.c **** 		}
 1835              		.loc 1 2729 0
 1836 001c 9A6A     		ldr	r2, [r3, #40]
 1837              	.LVL169:
 1838 001e D3F8D010 		ldr	r1, [r3, #208]
 1839 0022 9962     		str	r1, [r3, #40]
 1840 0024 C3F8D020 		str	r2, [r3, #208]
 1841 0028 D3F8F820 		ldr	r2, [r3, #248]
 1842              	.LVL170:
 1843 002c 0132     		adds	r2, r2, #1
 1844 002e C3F8F820 		str	r2, [r3, #248]
 1845              	.LVL171:
 1846 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1847              	.LVL172:
 1848              	.L161:
 1849              	.LBE41:
2740:..\..\FreeRTOS/tasks.c **** 		{
 1850              		.loc 1 2740 0
 1851 0036 314B     		ldr	r3, .L176
 1852 0038 DB6A     		ldr	r3, [r3, #44]
 1853 003a 9F42     		cmp	r7, r3
 1854 003c 05D2     		bcs	.L171
 1855              	.LBE40:
2711:..\..\FreeRTOS/tasks.c **** 
 1856              		.loc 1 2711 0
 1857 003e 4FF00008 		mov	r8, #0
 1858 0042 3BE0     		b	.L163
 1859              	.LVL173:
 1860              	.L172:
 1861              	.LBB42:
2806:..\..\FreeRTOS/tasks.c **** 						}
 1862              		.loc 1 2806 0
 1863 0044 4FF00108 		mov	r8, #1
 1864              	.LVL174:
 1865 0048 01E0     		b	.L162
 1866              	.LVL175:
 1867              	.L171:
 1868 004a 4FF00008 		mov	r8, #0
 1869              	.LVL176:
 1870              	.L162:
2744:..\..\FreeRTOS/tasks.c **** 				{
 1871              		.loc 1 2744 0
 1872 004e 2B4B     		ldr	r3, .L176
 1873 0050 9B6A     		ldr	r3, [r3, #40]
 1874 0052 1B68     		ldr	r3, [r3]
 1875 0054 23B9     		cbnz	r3, .L164
2751:..\..\FreeRTOS/tasks.c **** 					break;
 1876              		.loc 1 2751 0
 1877 0056 4FF0FF32 		mov	r2, #-1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 134


 1878 005a 284B     		ldr	r3, .L176
 1879 005c DA62     		str	r2, [r3, #44]
2752:..\..\FreeRTOS/tasks.c **** 				}
 1880              		.loc 1 2752 0
 1881 005e 2DE0     		b	.L163
 1882              	.L164:
2760:..\..\FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1883              		.loc 1 2760 0
 1884 0060 264B     		ldr	r3, .L176
 1885 0062 9B6A     		ldr	r3, [r3, #40]
 1886 0064 DB68     		ldr	r3, [r3, #12]
 1887 0066 DC68     		ldr	r4, [r3, #12]
 1888              	.LVL177:
2761:..\..\FreeRTOS/tasks.c **** 
 1889              		.loc 1 2761 0
 1890 0068 6368     		ldr	r3, [r4, #4]
 1891              	.LVL178:
2763:..\..\FreeRTOS/tasks.c **** 					{
 1892              		.loc 1 2763 0
 1893 006a 9F42     		cmp	r7, r3
 1894 006c 02D2     		bcs	.L165
2770:..\..\FreeRTOS/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 1895              		.loc 1 2770 0
 1896 006e 234A     		ldr	r2, .L176
 1897 0070 D362     		str	r3, [r2, #44]
2771:..\..\FreeRTOS/tasks.c **** 					}
 1898              		.loc 1 2771 0
 1899 0072 23E0     		b	.L163
 1900              	.L165:
2779:..\..\FreeRTOS/tasks.c **** 
 1901              		.loc 1 2779 0
 1902 0074 261D     		adds	r6, r4, #4
 1903 0076 3046     		mov	r0, r6
 1904 0078 FFF7FEFF 		bl	uxListRemove
 1905              	.LVL179:
2783:..\..\FreeRTOS/tasks.c **** 					{
 1906              		.loc 1 2783 0
 1907 007c A36A     		ldr	r3, [r4, #40]
 1908 007e 1BB1     		cbz	r3, .L166
2785:..\..\FreeRTOS/tasks.c **** 					}
 1909              		.loc 1 2785 0
 1910 0080 04F11800 		add	r0, r4, #24
 1911 0084 FFF7FEFF 		bl	uxListRemove
 1912              	.LVL180:
 1913              	.L166:
2794:..\..\FreeRTOS/tasks.c **** 
 1914              		.loc 1 2794 0
 1915 0088 E36A     		ldr	r3, [r4, #44]
 1916 008a 0122     		movs	r2, #1
 1917 008c 02FA03F1 		lsl	r1, r2, r3
 1918 0090 1A4D     		ldr	r5, .L176
 1919 0092 D5F8E420 		ldr	r2, [r5, #228]
 1920 0096 0A43     		orrs	r2, r2, r1
 1921 0098 C5F8E420 		str	r2, [r5, #228]
 1922 009c 05F13000 		add	r0, r5, #48
 1923 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 1924 00a4 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 135


 1925 00a6 3146     		mov	r1, r6
 1926 00a8 1044     		add	r0, r0, r2
 1927 00aa FFF7FEFF 		bl	vListInsertEnd
 1928              	.LVL181:
2804:..\..\FreeRTOS/tasks.c **** 						{
 1929              		.loc 1 2804 0
 1930 00ae E26A     		ldr	r2, [r4, #44]
 1931 00b0 D5F8D830 		ldr	r3, [r5, #216]
 1932 00b4 DB6A     		ldr	r3, [r3, #44]
 1933 00b6 9A42     		cmp	r2, r3
 1934 00b8 C4D2     		bcs	.L172
 1935 00ba C8E7     		b	.L162
 1936              	.LVL182:
 1937              	.L163:
2823:..\..\FreeRTOS/tasks.c **** 			{
 1938              		.loc 1 2823 0
 1939 00bc 0F49     		ldr	r1, .L176
 1940 00be D1F8D830 		ldr	r3, [r1, #216]
 1941 00c2 DB6A     		ldr	r3, [r3, #44]
 1942 00c4 03EB8303 		add	r3, r3, r3, lsl #2
 1943 00c8 9A00     		lsls	r2, r3, #2
 1944 00ca 0A44     		add	r2, r2, r1
 1945 00cc 136B     		ldr	r3, [r2, #48]
 1946 00ce 012B     		cmp	r3, #1
 1947 00d0 01D9     		bls	.L169
2825:..\..\FreeRTOS/tasks.c **** 			}
 1948              		.loc 1 2825 0
 1949 00d2 4FF00108 		mov	r8, #1
 1950              	.LVL183:
 1951              	.L169:
2851:..\..\FreeRTOS/tasks.c **** 			{
 1952              		.loc 1 2851 0
 1953 00d6 094B     		ldr	r3, .L176
 1954 00d8 D3F8FC30 		ldr	r3, [r3, #252]
 1955 00dc 4BB9     		cbnz	r3, .L174
 1956 00de 0AE0     		b	.L170
 1957              	.LVL184:
 1958              	.L160:
 1959              	.LBE42:
2864:..\..\FreeRTOS/tasks.c **** 
 1960              		.loc 1 2864 0
 1961 00e0 064A     		ldr	r2, .L176
 1962 00e2 D2F80031 		ldr	r3, [r2, #256]
 1963 00e6 0133     		adds	r3, r3, #1
 1964 00e8 C2F80031 		str	r3, [r2, #256]
2711:..\..\FreeRTOS/tasks.c **** 
 1965              		.loc 1 2711 0
 1966 00ec 4FF00008 		mov	r8, #0
 1967 00f0 01E0     		b	.L170
 1968              	.LVL185:
 1969              	.L174:
 1970              	.LBB43:
2853:..\..\FreeRTOS/tasks.c **** 			}
 1971              		.loc 1 2853 0
 1972 00f2 4FF00108 		mov	r8, #1
 1973              	.LVL186:
 1974              	.L170:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 136


 1975              	.LBE43:
2876:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1976              		.loc 1 2876 0
 1977 00f6 4046     		mov	r0, r8
 1978 00f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1979              	.LVL187:
 1980              	.L177:
 1981              		.align	2
 1982              	.L176:
 1983 00fc 00000000 		.word	.LANCHOR0
 1984              		.cfi_endproc
 1985              	.LFE91:
 1986              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1987              		.section	.text.xTaskResumeAll,"ax",%progbits
 1988              		.align	2
 1989              		.global	xTaskResumeAll
 1990              		.thumb
 1991              		.thumb_func
 1992              		.type	xTaskResumeAll, %function
 1993              	xTaskResumeAll:
 1994              	.LFB85:
2195:..\..\FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
 1995              		.loc 1 2195 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999 0000 70B5     		push	{r4, r5, r6, lr}
 2000              		.cfi_def_cfa_offset 16
 2001              		.cfi_offset 4, -16
 2002              		.cfi_offset 5, -12
 2003              		.cfi_offset 6, -8
 2004              		.cfi_offset 14, -4
 2005              	.LVL188:
2208:..\..\FreeRTOS/tasks.c **** 	{
 2006              		.loc 1 2208 0
 2007 0002 FFF7FEFF 		bl	vPortEnterCritical
 2008              	.LVL189:
2210:..\..\FreeRTOS/tasks.c **** 
 2009              		.loc 1 2210 0
 2010 0006 324B     		ldr	r3, .L191
 2011 0008 D3F8F020 		ldr	r2, [r3, #240]
 2012 000c 013A     		subs	r2, r2, #1
 2013 000e C3F8F020 		str	r2, [r3, #240]
2212:..\..\FreeRTOS/tasks.c **** 		{
 2014              		.loc 1 2212 0
 2015 0012 D3F8F030 		ldr	r3, [r3, #240]
 2016 0016 002B     		cmp	r3, #0
 2017 0018 53D1     		bne	.L187
2214:..\..\FreeRTOS/tasks.c **** 			{
 2018              		.loc 1 2214 0
 2019 001a 2D4B     		ldr	r3, .L191
 2020 001c D3F8D430 		ldr	r3, [r3, #212]
 2021 0020 43BB     		cbnz	r3, .L188
2197:..\..\FreeRTOS/tasks.c **** 
 2022              		.loc 1 2197 0
 2023 0022 0024     		movs	r4, #0
 2024 0024 50E0     		b	.L179
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 137


 2025              	.LVL190:
 2026              	.L182:
2220:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2027              		.loc 1 2220 0
 2028 0026 2A4C     		ldr	r4, .L191
 2029 0028 236A     		ldr	r3, [r4, #32]
 2030 002a DD68     		ldr	r5, [r3, #12]
 2031              	.LVL191:
2221:..\..\FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2032              		.loc 1 2221 0
 2033 002c 05F11800 		add	r0, r5, #24
 2034 0030 FFF7FEFF 		bl	uxListRemove
 2035              	.LVL192:
2222:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2036              		.loc 1 2222 0
 2037 0034 2E1D     		adds	r6, r5, #4
 2038 0036 3046     		mov	r0, r6
 2039 0038 FFF7FEFF 		bl	uxListRemove
 2040              	.LVL193:
2223:..\..\FreeRTOS/tasks.c **** 
 2041              		.loc 1 2223 0
 2042 003c EB6A     		ldr	r3, [r5, #44]
 2043 003e 0122     		movs	r2, #1
 2044 0040 02FA03F1 		lsl	r1, r2, r3
 2045 0044 D4F8E420 		ldr	r2, [r4, #228]
 2046 0048 0A43     		orrs	r2, r2, r1
 2047 004a C4F8E420 		str	r2, [r4, #228]
 2048 004e 04F13000 		add	r0, r4, #48
 2049 0052 03EB8303 		add	r3, r3, r3, lsl #2
 2050 0056 9A00     		lsls	r2, r3, #2
 2051 0058 3146     		mov	r1, r6
 2052 005a 1044     		add	r0, r0, r2
 2053 005c FFF7FEFF 		bl	vListInsertEnd
 2054              	.LVL194:
2227:..\..\FreeRTOS/tasks.c **** 					{
 2055              		.loc 1 2227 0
 2056 0060 EA6A     		ldr	r2, [r5, #44]
 2057 0062 D4F8D830 		ldr	r3, [r4, #216]
 2058 0066 DB6A     		ldr	r3, [r3, #44]
 2059 0068 9A42     		cmp	r2, r3
 2060 006a 04D3     		bcc	.L180
2229:..\..\FreeRTOS/tasks.c **** 					}
 2061              		.loc 1 2229 0
 2062 006c 0122     		movs	r2, #1
 2063 006e C4F8FC20 		str	r2, [r4, #252]
 2064 0072 00E0     		b	.L180
 2065              	.LVL195:
 2066              	.L188:
 2067 0074 0025     		movs	r5, #0
 2068              	.LVL196:
 2069              	.L180:
2218:..\..\FreeRTOS/tasks.c **** 				{
 2070              		.loc 1 2218 0
 2071 0076 164B     		ldr	r3, .L191
 2072 0078 5B69     		ldr	r3, [r3, #20]
 2073 007a 002B     		cmp	r3, #0
 2074 007c D3D1     		bne	.L182
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 138


2237:..\..\FreeRTOS/tasks.c **** 				{
 2075              		.loc 1 2237 0
 2076 007e 0DB1     		cbz	r5, .L183
2245:..\..\FreeRTOS/tasks.c **** 				}
 2077              		.loc 1 2245 0
 2078 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2079              	.LVL197:
 2080              	.L183:
 2081              	.LBB44:
2253:..\..\FreeRTOS/tasks.c **** 
 2082              		.loc 1 2253 0
 2083 0084 124B     		ldr	r3, .L191
 2084 0086 D3F80041 		ldr	r4, [r3, #256]
 2085              	.LVL198:
2255:..\..\FreeRTOS/tasks.c **** 					{
 2086              		.loc 1 2255 0
 2087 008a 64B1     		cbz	r4, .L184
 2088              	.L186:
2259:..\..\FreeRTOS/tasks.c **** 							{
 2089              		.loc 1 2259 0
 2090 008c FFF7FEFF 		bl	xTaskIncrementTick
 2091              	.LVL199:
 2092 0090 18B1     		cbz	r0, .L185
2261:..\..\FreeRTOS/tasks.c **** 							}
 2093              		.loc 1 2261 0
 2094 0092 0122     		movs	r2, #1
 2095 0094 0E4B     		ldr	r3, .L191
 2096 0096 C3F8FC20 		str	r2, [r3, #252]
 2097              	.L185:
 2098              	.LVL200:
2268:..\..\FreeRTOS/tasks.c **** 
 2099              		.loc 1 2268 0
 2100 009a 013C     		subs	r4, r4, #1
 2101              	.LVL201:
 2102 009c F6D1     		bne	.L186
2270:..\..\FreeRTOS/tasks.c **** 					}
 2103              		.loc 1 2270 0
 2104 009e 0022     		movs	r2, #0
 2105 00a0 0B4B     		ldr	r3, .L191
 2106 00a2 C3F80021 		str	r2, [r3, #256]
 2107              	.L184:
 2108              	.LBE44:
2278:..\..\FreeRTOS/tasks.c **** 				{
 2109              		.loc 1 2278 0
 2110 00a6 0A4B     		ldr	r3, .L191
 2111 00a8 D3F8FC30 		ldr	r3, [r3, #252]
 2112 00ac 5BB1     		cbz	r3, .L189
 2113              	.LVL202:
2285:..\..\FreeRTOS/tasks.c **** 				}
 2114              		.loc 1 2285 0
 2115 00ae 4FF08052 		mov	r2, #268435456
 2116 00b2 084B     		ldr	r3, .L191+4
 2117 00b4 1A60     		str	r2, [r3]
 2118              		.syntax unified
 2119              	@ 2285 "..\..\FreeRTOS\tasks.c" 1
 2120 00b6 BFF34F8F 		dsb
 2121              	@ 0 "" 2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 139


 2122              	@ 2285 "..\..\FreeRTOS\tasks.c" 1
 2123 00ba BFF36F8F 		isb
 2124              	@ 0 "" 2
2282:..\..\FreeRTOS/tasks.c **** 					}
 2125              		.loc 1 2282 0
 2126              		.thumb
 2127              		.syntax unified
 2128 00be 0124     		movs	r4, #1
 2129              	.LVL203:
 2130 00c0 02E0     		b	.L179
 2131              	.LVL204:
 2132              	.L187:
2197:..\..\FreeRTOS/tasks.c **** 
 2133              		.loc 1 2197 0
 2134 00c2 0024     		movs	r4, #0
 2135 00c4 00E0     		b	.L179
 2136              	.LVL205:
 2137              	.L189:
 2138 00c6 0024     		movs	r4, #0
 2139              	.LVL206:
 2140              	.L179:
2298:..\..\FreeRTOS/tasks.c **** 
 2141              		.loc 1 2298 0
 2142 00c8 FFF7FEFF 		bl	vPortExitCritical
 2143              	.LVL207:
2301:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2144              		.loc 1 2301 0
 2145 00cc 2046     		mov	r0, r4
 2146 00ce 70BD     		pop	{r4, r5, r6, pc}
 2147              	.LVL208:
 2148              	.L192:
 2149              		.align	2
 2150              	.L191:
 2151 00d0 00000000 		.word	.LANCHOR0
 2152 00d4 04ED00E0 		.word	-536810236
 2153              		.cfi_endproc
 2154              	.LFE85:
 2155              		.size	xTaskResumeAll, .-xTaskResumeAll
 2156              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2157              		.align	2
 2158              		.global	vTaskDelayUntil
 2159              		.thumb
 2160              		.thumb_func
 2161              		.type	vTaskDelayUntil, %function
 2162              	vTaskDelayUntil:
 2163              	.LFB72:
1258:..\..\FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2164              		.loc 1 1258 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 2168              	.LVL209:
 2169 0000 38B5     		push	{r3, r4, r5, lr}
 2170              		.cfi_def_cfa_offset 16
 2171              		.cfi_offset 3, -16
 2172              		.cfi_offset 4, -12
 2173              		.cfi_offset 5, -8
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 140


 2174              		.cfi_offset 14, -4
 2175 0002 0546     		mov	r5, r0
 2176 0004 0C46     		mov	r4, r1
 2177              	.LVL210:
1266:..\..\FreeRTOS/tasks.c **** 		{
 2178              		.loc 1 1266 0
 2179 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2180              	.LVL211:
 2181              	.LBB45:
1270:..\..\FreeRTOS/tasks.c **** 
 2182              		.loc 1 1270 0
 2183 000a 164B     		ldr	r3, .L203
 2184 000c D3F8EC00 		ldr	r0, [r3, #236]
 2185              	.LVL212:
1273:..\..\FreeRTOS/tasks.c **** 
 2186              		.loc 1 1273 0
 2187 0010 2A68     		ldr	r2, [r5]
 2188 0012 1319     		adds	r3, r2, r4
 2189              	.LVL213:
1275:..\..\FreeRTOS/tasks.c **** 			{
 2190              		.loc 1 1275 0
 2191 0014 9042     		cmp	r0, r2
 2192 0016 05D2     		bcs	.L194
1282:..\..\FreeRTOS/tasks.c **** 				{
 2193              		.loc 1 1282 0
 2194 0018 9A42     		cmp	r2, r3
 2195 001a 09D9     		bls	.L198
1282:..\..\FreeRTOS/tasks.c **** 				{
 2196              		.loc 1 1282 0 is_stmt 0 discriminator 1
 2197 001c 9842     		cmp	r0, r3
 2198 001e 09D3     		bcc	.L199
 2199              	.LBE45:
1260:..\..\FreeRTOS/tasks.c **** 
 2200              		.loc 1 1260 0 is_stmt 1
 2201 0020 0022     		movs	r2, #0
 2202 0022 0CE0     		b	.L195
 2203              	.L194:
 2204              	.LBB46:
1296:..\..\FreeRTOS/tasks.c **** 				{
 2205              		.loc 1 1296 0
 2206 0024 9A42     		cmp	r2, r3
 2207 0026 07D8     		bhi	.L200
1296:..\..\FreeRTOS/tasks.c **** 				{
 2208              		.loc 1 1296 0 is_stmt 0 discriminator 1
 2209 0028 9842     		cmp	r0, r3
 2210 002a 07D3     		bcc	.L201
 2211              	.LBE46:
1260:..\..\FreeRTOS/tasks.c **** 
 2212              		.loc 1 1260 0 is_stmt 1
 2213 002c 0022     		movs	r2, #0
 2214 002e 06E0     		b	.L195
 2215              	.L198:
 2216 0030 0022     		movs	r2, #0
 2217 0032 04E0     		b	.L195
 2218              	.L199:
 2219              	.LBB47:
1284:..\..\FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 141


 2220              		.loc 1 1284 0
 2221 0034 0122     		movs	r2, #1
 2222 0036 02E0     		b	.L195
 2223              	.L200:
1298:..\..\FreeRTOS/tasks.c **** 				}
 2224              		.loc 1 1298 0
 2225 0038 0122     		movs	r2, #1
 2226 003a 00E0     		b	.L195
 2227              	.L201:
 2228 003c 0122     		movs	r2, #1
 2229              	.L195:
 2230              	.LVL214:
1307:..\..\FreeRTOS/tasks.c **** 
 2231              		.loc 1 1307 0
 2232 003e 2B60     		str	r3, [r5]
1309:..\..\FreeRTOS/tasks.c **** 			{
 2233              		.loc 1 1309 0
 2234 0040 1AB1     		cbz	r2, .L196
1315:..\..\FreeRTOS/tasks.c **** 			}
 2235              		.loc 1 1315 0
 2236 0042 0021     		movs	r1, #0
 2237 0044 181A     		subs	r0, r3, r0
 2238              	.LVL215:
 2239 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2240              	.LVL216:
 2241              	.L196:
 2242              	.LBE47:
1322:..\..\FreeRTOS/tasks.c **** 
 2243              		.loc 1 1322 0
 2244 004a FFF7FEFF 		bl	xTaskResumeAll
 2245              	.LVL217:
1326:..\..\FreeRTOS/tasks.c **** 		{
 2246              		.loc 1 1326 0
 2247 004e 38B9     		cbnz	r0, .L193
1328:..\..\FreeRTOS/tasks.c **** 		}
 2248              		.loc 1 1328 0
 2249 0050 4FF08052 		mov	r2, #268435456
 2250 0054 044B     		ldr	r3, .L203+4
 2251 0056 1A60     		str	r2, [r3]
 2252              		.syntax unified
 2253              	@ 1328 "..\..\FreeRTOS\tasks.c" 1
 2254 0058 BFF34F8F 		dsb
 2255              	@ 0 "" 2
 2256              	@ 1328 "..\..\FreeRTOS\tasks.c" 1
 2257 005c BFF36F8F 		isb
 2258              	@ 0 "" 2
 2259              		.thumb
 2260              		.syntax unified
 2261              	.L193:
 2262 0060 38BD     		pop	{r3, r4, r5, pc}
 2263              	.LVL218:
 2264              	.L204:
 2265 0062 00BF     		.align	2
 2266              	.L203:
 2267 0064 00000000 		.word	.LANCHOR0
 2268 0068 04ED00E0 		.word	-536810236
 2269              		.cfi_endproc
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 142


 2270              	.LFE72:
 2271              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2272              		.section	.text.vTaskDelay,"ax",%progbits
 2273              		.align	2
 2274              		.global	vTaskDelay
 2275              		.thumb
 2276              		.thumb_func
 2277              		.type	vTaskDelay, %function
 2278              	vTaskDelay:
 2279              	.LFB73:
1342:..\..\FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2280              		.loc 1 1342 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              	.LVL219:
 2285 0000 10B5     		push	{r4, lr}
 2286              		.cfi_def_cfa_offset 8
 2287              		.cfi_offset 4, -8
 2288              		.cfi_offset 14, -4
 2289              	.LVL220:
1346:..\..\FreeRTOS/tasks.c **** 		{
 2290              		.loc 1 1346 0
 2291 0002 48B1     		cbz	r0, .L208
 2292 0004 0446     		mov	r4, r0
1349:..\..\FreeRTOS/tasks.c **** 			{
 2293              		.loc 1 1349 0
 2294 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2295              	.LVL221:
1360:..\..\FreeRTOS/tasks.c **** 			}
 2296              		.loc 1 1360 0
 2297 000a 0021     		movs	r1, #0
 2298 000c 2046     		mov	r0, r4
 2299 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2300              	.LVL222:
1362:..\..\FreeRTOS/tasks.c **** 		}
 2301              		.loc 1 1362 0
 2302 0012 FFF7FEFF 		bl	xTaskResumeAll
 2303              	.LVL223:
 2304 0016 00E0     		b	.L206
 2305              	.LVL224:
 2306              	.L208:
1343:..\..\FreeRTOS/tasks.c **** 
 2307              		.loc 1 1343 0
 2308 0018 0020     		movs	r0, #0
 2309              	.LVL225:
 2310              	.L206:
1371:..\..\FreeRTOS/tasks.c **** 		{
 2311              		.loc 1 1371 0
 2312 001a 38B9     		cbnz	r0, .L205
1373:..\..\FreeRTOS/tasks.c **** 		}
 2313              		.loc 1 1373 0
 2314 001c 4FF08052 		mov	r2, #268435456
 2315 0020 034B     		ldr	r3, .L210
 2316 0022 1A60     		str	r2, [r3]
 2317              		.syntax unified
 2318              	@ 1373 "..\..\FreeRTOS\tasks.c" 1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 143


 2319 0024 BFF34F8F 		dsb
 2320              	@ 0 "" 2
 2321              	@ 1373 "..\..\FreeRTOS\tasks.c" 1
 2322 0028 BFF36F8F 		isb
 2323              	@ 0 "" 2
 2324              		.thumb
 2325              		.syntax unified
 2326              	.L205:
 2327 002c 10BD     		pop	{r4, pc}
 2328              	.L211:
 2329 002e 00BF     		.align	2
 2330              	.L210:
 2331 0030 04ED00E0 		.word	-536810236
 2332              		.cfi_endproc
 2333              	.LFE73:
 2334              		.size	vTaskDelay, .-vTaskDelay
 2335              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2336              		.align	2
 2337              		.global	xTaskCatchUpTicks
 2338              		.thumb
 2339              		.thumb_func
 2340              		.type	xTaskCatchUpTicks, %function
 2341              	xTaskCatchUpTicks:
 2342              	.LFB90:
2610:..\..\FreeRTOS/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2343              		.loc 1 2610 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 0
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              	.LVL226:
 2348 0000 10B5     		push	{r4, lr}
 2349              		.cfi_def_cfa_offset 8
 2350              		.cfi_offset 4, -8
 2351              		.cfi_offset 14, -4
 2352 0002 0446     		mov	r4, r0
 2353              	.LVL227:
2619:..\..\FreeRTOS/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2354              		.loc 1 2619 0
 2355 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2356              	.LVL228:
2620:..\..\FreeRTOS/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2357              		.loc 1 2620 0
 2358 0008 044B     		ldr	r3, .L214
 2359 000a D3F80021 		ldr	r2, [r3, #256]
 2360 000e 1444     		add	r4, r4, r2
 2361              	.LVL229:
 2362 0010 C3F80041 		str	r4, [r3, #256]
2621:..\..\FreeRTOS/tasks.c **** 
 2363              		.loc 1 2621 0
 2364 0014 FFF7FEFF 		bl	xTaskResumeAll
 2365              	.LVL230:
2624:..\..\FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 2366              		.loc 1 2624 0
 2367 0018 10BD     		pop	{r4, pc}
 2368              	.L215:
 2369 001a 00BF     		.align	2
 2370              	.L214:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 144


 2371 001c 00000000 		.word	.LANCHOR0
 2372              		.cfi_endproc
 2373              	.LFE90:
 2374              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2375              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2376              		.align	2
 2377              		.global	vTaskSwitchContext
 2378              		.thumb
 2379              		.thumb_func
 2380              		.type	vTaskSwitchContext, %function
 2381              	vTaskSwitchContext:
 2382              	.LFB92:
2990:..\..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2383              		.loc 1 2990 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 0
 2386              		@ frame_needed = 0, uses_anonymous_args = 0
 2387              		@ link register save eliminated.
2991:..\..\FreeRTOS/tasks.c **** 	{
 2388              		.loc 1 2991 0
 2389 0000 1A4B     		ldr	r3, .L221
 2390 0002 D3F8F030 		ldr	r3, [r3, #240]
 2391 0006 23B1     		cbz	r3, .L217
2995:..\..\FreeRTOS/tasks.c **** 	}
 2392              		.loc 1 2995 0
 2393 0008 0122     		movs	r2, #1
 2394 000a 184B     		ldr	r3, .L221
 2395 000c C3F8FC20 		str	r2, [r3, #252]
 2396 0010 7047     		bx	lr
 2397              	.L217:
2990:..\..\FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2398              		.loc 1 2990 0
 2399 0012 10B4     		push	{r4}
 2400              		.cfi_def_cfa_offset 4
 2401              		.cfi_offset 4, -4
2999:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2402              		.loc 1 2999 0
 2403 0014 154A     		ldr	r2, .L221
 2404 0016 0023     		movs	r3, #0
 2405 0018 C2F8FC30 		str	r3, [r2, #252]
 2406              	.LBB48:
3041:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2407              		.loc 1 3041 0
 2408 001c D2F8E430 		ldr	r3, [r2, #228]
 2409              	.LVL231:
 2410              	.LBB49:
 2411              	.LBB50:
 134:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2412              		.loc 2 134 0
 2413              		.syntax unified
 2414              	@ 134 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 2415 0020 B3FA83F3 		clz r3, r3
 2416              	@ 0 "" 2
 2417              	.LVL232:
 2418              		.thumb
 2419              		.syntax unified
 2420 0024 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 145


 2421              	.LBE50:
 2422              	.LBE49:
3041:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2423              		.loc 1 3041 0
 2424 0026 C3F11F03 		rsb	r3, r3, #31
 2425              	.LVL233:
 2426              	.LBB51:
 2427 002a 9800     		lsls	r0, r3, #2
 2428 002c C418     		adds	r4, r0, r3
 2429 002e A100     		lsls	r1, r4, #2
 2430 0030 1144     		add	r1, r1, r2
 2431 0032 4C6B     		ldr	r4, [r1, #52]
 2432 0034 6468     		ldr	r4, [r4, #4]
 2433 0036 4C63     		str	r4, [r1, #52]
 2434 0038 02F13001 		add	r1, r2, #48
 2435 003c 1844     		add	r0, r0, r3
 2436 003e 8200     		lsls	r2, r0, #2
 2437 0040 0832     		adds	r2, r2, #8
 2438 0042 0A44     		add	r2, r2, r1
 2439 0044 9442     		cmp	r4, r2
 2440 0046 06D1     		bne	.L219
3041:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2441              		.loc 1 3041 0 is_stmt 0 discriminator 1
 2442 0048 6068     		ldr	r0, [r4, #4]
 2443 004a 03EB8301 		add	r1, r3, r3, lsl #2
 2444 004e 8A00     		lsls	r2, r1, #2
 2445 0050 0649     		ldr	r1, .L221
 2446 0052 0A44     		add	r2, r2, r1
 2447 0054 5063     		str	r0, [r2, #52]
 2448              	.L219:
3041:..\..\FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2449              		.loc 1 3041 0 discriminator 3
 2450 0056 0549     		ldr	r1, .L221
 2451 0058 03EB8303 		add	r3, r3, r3, lsl #2
 2452              	.LVL234:
 2453 005c 9A00     		lsls	r2, r3, #2
 2454 005e 0A44     		add	r2, r2, r1
 2455 0060 536B     		ldr	r3, [r2, #52]
 2456 0062 DB68     		ldr	r3, [r3, #12]
 2457 0064 C1F8D830 		str	r3, [r1, #216]
 2458              	.LBE51:
 2459              	.LBE48:
3061:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2460              		.loc 1 3061 0 is_stmt 1 discriminator 3
 2461 0068 10BC     		pop	{r4}
 2462              		.cfi_restore 4
 2463              		.cfi_def_cfa_offset 0
 2464 006a 7047     		bx	lr
 2465              	.L222:
 2466              		.align	2
 2467              	.L221:
 2468 006c 00000000 		.word	.LANCHOR0
 2469              		.cfi_endproc
 2470              	.LFE92:
 2471              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2472              		.section	.text.vTaskSuspend,"ax",%progbits
 2473              		.align	2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 146


 2474              		.global	vTaskSuspend
 2475              		.thumb
 2476              		.thumb_func
 2477              		.type	vTaskSuspend, %function
 2478              	vTaskSuspend:
 2479              	.LFB78:
1705:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2480              		.loc 1 1705 0
 2481              		.cfi_startproc
 2482              		@ args = 0, pretend = 0, frame = 0
 2483              		@ frame_needed = 0, uses_anonymous_args = 0
 2484              	.LVL235:
 2485 0000 38B5     		push	{r3, r4, r5, lr}
 2486              		.cfi_def_cfa_offset 16
 2487              		.cfi_offset 3, -16
 2488              		.cfi_offset 4, -12
 2489              		.cfi_offset 5, -8
 2490              		.cfi_offset 14, -4
 2491 0002 0446     		mov	r4, r0
1708:..\..\FreeRTOS/tasks.c **** 		{
 2492              		.loc 1 1708 0
 2493 0004 FFF7FEFF 		bl	vPortEnterCritical
 2494              	.LVL236:
1712:..\..\FreeRTOS/tasks.c **** 
 2495              		.loc 1 1712 0
 2496 0008 14B9     		cbnz	r4, .L224
1712:..\..\FreeRTOS/tasks.c **** 
 2497              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2498 000a 2B4B     		ldr	r3, .L233
 2499 000c D3F8D840 		ldr	r4, [r3, #216]
 2500              	.LVL237:
 2501              	.L224:
1718:..\..\FreeRTOS/tasks.c **** 			{
 2502              		.loc 1 1718 0 is_stmt 1 discriminator 4
 2503 0010 251D     		adds	r5, r4, #4
 2504 0012 2846     		mov	r0, r5
 2505 0014 FFF7FEFF 		bl	uxListRemove
 2506              	.LVL238:
 2507 0018 80B9     		cbnz	r0, .L225
1720:..\..\FreeRTOS/tasks.c **** 			}
 2508              		.loc 1 1720 0
 2509 001a E26A     		ldr	r2, [r4, #44]
 2510 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2511 0020 8B00     		lsls	r3, r1, #2
 2512 0022 2549     		ldr	r1, .L233
 2513 0024 0B44     		add	r3, r3, r1
 2514 0026 1B6B     		ldr	r3, [r3, #48]
 2515 0028 43B9     		cbnz	r3, .L225
1720:..\..\FreeRTOS/tasks.c **** 			}
 2516              		.loc 1 1720 0 is_stmt 0 discriminator 1
 2517 002a 0123     		movs	r3, #1
 2518 002c 03FA02F2 		lsl	r2, r3, r2
 2519 0030 D1F8E430 		ldr	r3, [r1, #228]
 2520 0034 23EA0202 		bic	r2, r3, r2
 2521 0038 C1F8E420 		str	r2, [r1, #228]
 2522              	.L225:
1728:..\..\FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 147


 2523              		.loc 1 1728 0 is_stmt 1
 2524 003c A36A     		ldr	r3, [r4, #40]
 2525 003e 1BB1     		cbz	r3, .L226
1730:..\..\FreeRTOS/tasks.c **** 			}
 2526              		.loc 1 1730 0
 2527 0040 04F11800 		add	r0, r4, #24
 2528 0044 FFF7FEFF 		bl	uxListRemove
 2529              	.LVL239:
 2530              	.L226:
1737:..\..\FreeRTOS/tasks.c **** 
 2531              		.loc 1 1737 0
 2532 0048 2946     		mov	r1, r5
 2533 004a 1B48     		ldr	r0, .L233
 2534 004c FFF7FEFF 		bl	vListInsertEnd
 2535              	.LVL240:
1741:..\..\FreeRTOS/tasks.c **** 				{
 2536              		.loc 1 1741 0
 2537 0050 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 2538 0054 DBB2     		uxtb	r3, r3
 2539 0056 012B     		cmp	r3, #1
 2540 0058 02D1     		bne	.L227
1745:..\..\FreeRTOS/tasks.c **** 				}
 2541              		.loc 1 1745 0
 2542 005a 0023     		movs	r3, #0
 2543 005c 84F84C30 		strb	r3, [r4, #76]
 2544              	.L227:
1750:..\..\FreeRTOS/tasks.c **** 
 2545              		.loc 1 1750 0
 2546 0060 FFF7FEFF 		bl	vPortExitCritical
 2547              	.LVL241:
1752:..\..\FreeRTOS/tasks.c **** 		{
 2548              		.loc 1 1752 0
 2549 0064 144B     		ldr	r3, .L233
 2550 0066 D3F8DC30 		ldr	r3, [r3, #220]
 2551 006a 2BB1     		cbz	r3, .L228
1756:..\..\FreeRTOS/tasks.c **** 			{
 2552              		.loc 1 1756 0
 2553 006c FFF7FEFF 		bl	vPortEnterCritical
 2554              	.LVL242:
1758:..\..\FreeRTOS/tasks.c **** 			}
 2555              		.loc 1 1758 0
 2556 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2557              	.LVL243:
1760:..\..\FreeRTOS/tasks.c **** 		}
 2558              		.loc 1 1760 0
 2559 0074 FFF7FEFF 		bl	vPortExitCritical
 2560              	.LVL244:
 2561              	.L228:
1767:..\..\FreeRTOS/tasks.c **** 		{
 2562              		.loc 1 1767 0
 2563 0078 0F4B     		ldr	r3, .L233
 2564 007a D3F8D830 		ldr	r3, [r3, #216]
 2565 007e 9C42     		cmp	r4, r3
 2566 0080 19D1     		bne	.L223
1769:..\..\FreeRTOS/tasks.c **** 			{
 2567              		.loc 1 1769 0
 2568 0082 0D4B     		ldr	r3, .L233
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 148


 2569 0084 D3F8DC30 		ldr	r3, [r3, #220]
 2570 0088 43B1     		cbz	r3, .L230
1773:..\..\FreeRTOS/tasks.c **** 			}
 2571              		.loc 1 1773 0
 2572 008a 4FF08052 		mov	r2, #268435456
 2573 008e 0B4B     		ldr	r3, .L233+4
 2574 0090 1A60     		str	r2, [r3]
 2575              		.syntax unified
 2576              	@ 1773 "..\..\FreeRTOS\tasks.c" 1
 2577 0092 BFF34F8F 		dsb
 2578              	@ 0 "" 2
 2579              	@ 1773 "..\..\FreeRTOS\tasks.c" 1
 2580 0096 BFF36F8F 		isb
 2581              	@ 0 "" 2
 2582              		.thumb
 2583              		.syntax unified
 2584 009a 38BD     		pop	{r3, r4, r5, pc}
 2585              	.LVL245:
 2586              	.L230:
1780:..\..\FreeRTOS/tasks.c **** 				{
 2587              		.loc 1 1780 0
 2588 009c 064B     		ldr	r3, .L233
 2589 009e 1A68     		ldr	r2, [r3]
 2590 00a0 D3F8D430 		ldr	r3, [r3, #212]
 2591 00a4 9A42     		cmp	r2, r3
 2592 00a6 04D1     		bne	.L231
1786:..\..\FreeRTOS/tasks.c **** 				}
 2593              		.loc 1 1786 0
 2594 00a8 0022     		movs	r2, #0
 2595 00aa 034B     		ldr	r3, .L233
 2596 00ac C3F8D820 		str	r2, [r3, #216]
 2597 00b0 38BD     		pop	{r3, r4, r5, pc}
 2598              	.LVL246:
 2599              	.L231:
1790:..\..\FreeRTOS/tasks.c **** 				}
 2600              		.loc 1 1790 0
 2601 00b2 FFF7FEFF 		bl	vTaskSwitchContext
 2602              	.LVL247:
 2603              	.L223:
 2604 00b6 38BD     		pop	{r3, r4, r5, pc}
 2605              	.LVL248:
 2606              	.L234:
 2607              		.align	2
 2608              	.L233:
 2609 00b8 00000000 		.word	.LANCHOR0
 2610 00bc 04ED00E0 		.word	-536810236
 2611              		.cfi_endproc
 2612              	.LFE78:
 2613              		.size	vTaskSuspend, .-vTaskSuspend
 2614              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2615              		.align	2
 2616              		.global	vTaskPlaceOnEventList
 2617              		.thumb
 2618              		.thumb_func
 2619              		.type	vTaskPlaceOnEventList, %function
 2620              	vTaskPlaceOnEventList:
 2621              	.LFB93:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 149


3065:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2622              		.loc 1 3065 0
 2623              		.cfi_startproc
 2624              		@ args = 0, pretend = 0, frame = 0
 2625              		@ frame_needed = 0, uses_anonymous_args = 0
 2626              	.LVL249:
 2627 0000 10B5     		push	{r4, lr}
 2628              		.cfi_def_cfa_offset 8
 2629              		.cfi_offset 4, -8
 2630              		.cfi_offset 14, -4
 2631 0002 0C46     		mov	r4, r1
3075:..\..\FreeRTOS/tasks.c **** 
 2632              		.loc 1 3075 0
 2633 0004 054B     		ldr	r3, .L237
 2634 0006 D3F8D810 		ldr	r1, [r3, #216]
 2635              	.LVL250:
 2636 000a 1831     		adds	r1, r1, #24
 2637 000c FFF7FEFF 		bl	vListInsert
 2638              	.LVL251:
3077:..\..\FreeRTOS/tasks.c **** }
 2639              		.loc 1 3077 0
 2640 0010 0121     		movs	r1, #1
 2641 0012 2046     		mov	r0, r4
 2642 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2643              	.LVL252:
 2644 0018 10BD     		pop	{r4, pc}
 2645              	.LVL253:
 2646              	.L238:
 2647 001a 00BF     		.align	2
 2648              	.L237:
 2649 001c 00000000 		.word	.LANCHOR0
 2650              		.cfi_endproc
 2651              	.LFE93:
 2652              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2653              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2654              		.align	2
 2655              		.global	vTaskPlaceOnUnorderedEventList
 2656              		.thumb
 2657              		.thumb_func
 2658              		.type	vTaskPlaceOnUnorderedEventList, %function
 2659              	vTaskPlaceOnUnorderedEventList:
 2660              	.LFB94:
3082:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2661              		.loc 1 3082 0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 0
 2664              		@ frame_needed = 0, uses_anonymous_args = 0
 2665              	.LVL254:
 2666 0000 10B5     		push	{r4, lr}
 2667              		.cfi_def_cfa_offset 8
 2668              		.cfi_offset 4, -8
 2669              		.cfi_offset 14, -4
 2670 0002 1446     		mov	r4, r2
3092:..\..\FreeRTOS/tasks.c **** 
 2671              		.loc 1 3092 0
 2672 0004 074B     		ldr	r3, .L241
 2673 0006 D3F8D820 		ldr	r2, [r3, #216]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 150


 2674              	.LVL255:
 2675 000a 41F00041 		orr	r1, r1, #-2147483648
 2676              	.LVL256:
 2677 000e 9161     		str	r1, [r2, #24]
3099:..\..\FreeRTOS/tasks.c **** 
 2678              		.loc 1 3099 0
 2679 0010 D3F8D810 		ldr	r1, [r3, #216]
 2680 0014 1831     		adds	r1, r1, #24
 2681 0016 FFF7FEFF 		bl	vListInsertEnd
 2682              	.LVL257:
3101:..\..\FreeRTOS/tasks.c **** }
 2683              		.loc 1 3101 0
 2684 001a 0121     		movs	r1, #1
 2685 001c 2046     		mov	r0, r4
 2686 001e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2687              	.LVL258:
 2688 0022 10BD     		pop	{r4, pc}
 2689              	.LVL259:
 2690              	.L242:
 2691              		.align	2
 2692              	.L241:
 2693 0024 00000000 		.word	.LANCHOR0
 2694              		.cfi_endproc
 2695              	.LFE94:
 2696              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2697              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2698              		.align	2
 2699              		.global	xTaskRemoveFromEventList
 2700              		.thumb
 2701              		.thumb_func
 2702              		.type	xTaskRemoveFromEventList, %function
 2703              	xTaskRemoveFromEventList:
 2704              	.LFB95:
3139:..\..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2705              		.loc 1 3139 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 0
 2708              		@ frame_needed = 0, uses_anonymous_args = 0
 2709              	.LVL260:
 2710 0000 38B5     		push	{r3, r4, r5, lr}
 2711              		.cfi_def_cfa_offset 16
 2712              		.cfi_offset 3, -16
 2713              		.cfi_offset 4, -12
 2714              		.cfi_offset 5, -8
 2715              		.cfi_offset 14, -4
3156:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2716              		.loc 1 3156 0
 2717 0002 C368     		ldr	r3, [r0, #12]
 2718 0004 DC68     		ldr	r4, [r3, #12]
 2719              	.LVL261:
3158:..\..\FreeRTOS/tasks.c **** 
 2720              		.loc 1 3158 0
 2721 0006 04F11805 		add	r5, r4, #24
 2722 000a 2846     		mov	r0, r5
 2723              	.LVL262:
 2724 000c FFF7FEFF 		bl	uxListRemove
 2725              	.LVL263:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 151


3160:..\..\FreeRTOS/tasks.c **** 	{
 2726              		.loc 1 3160 0
 2727 0010 164B     		ldr	r3, .L249
 2728 0012 D3F8F030 		ldr	r3, [r3, #240]
 2729 0016 B3B9     		cbnz	r3, .L244
3162:..\..\FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2730              		.loc 1 3162 0
 2731 0018 251D     		adds	r5, r4, #4
 2732 001a 2846     		mov	r0, r5
 2733 001c FFF7FEFF 		bl	uxListRemove
 2734              	.LVL264:
3163:..\..\FreeRTOS/tasks.c **** 
 2735              		.loc 1 3163 0
 2736 0020 E36A     		ldr	r3, [r4, #44]
 2737 0022 0122     		movs	r2, #1
 2738 0024 02FA03F1 		lsl	r1, r2, r3
 2739 0028 1048     		ldr	r0, .L249
 2740 002a D0F8E420 		ldr	r2, [r0, #228]
 2741 002e 0A43     		orrs	r2, r2, r1
 2742 0030 C0F8E420 		str	r2, [r0, #228]
 2743 0034 3030     		adds	r0, r0, #48
 2744 0036 03EB8303 		add	r3, r3, r3, lsl #2
 2745 003a 9A00     		lsls	r2, r3, #2
 2746 003c 2946     		mov	r1, r5
 2747 003e 1044     		add	r0, r0, r2
 2748 0040 FFF7FEFF 		bl	vListInsertEnd
 2749              	.LVL265:
 2750 0044 03E0     		b	.L245
 2751              	.L244:
3183:..\..\FreeRTOS/tasks.c **** 	}
 2752              		.loc 1 3183 0
 2753 0046 2946     		mov	r1, r5
 2754 0048 0948     		ldr	r0, .L249+4
 2755 004a FFF7FEFF 		bl	vListInsertEnd
 2756              	.LVL266:
 2757              	.L245:
3186:..\..\FreeRTOS/tasks.c **** 	{
 2758              		.loc 1 3186 0
 2759 004e E26A     		ldr	r2, [r4, #44]
 2760 0050 064B     		ldr	r3, .L249
 2761 0052 D3F8D830 		ldr	r3, [r3, #216]
 2762 0056 DB6A     		ldr	r3, [r3, #44]
 2763 0058 9A42     		cmp	r2, r3
 2764 005a 04D9     		bls	.L247
 2765              	.LVL267:
3195:..\..\FreeRTOS/tasks.c **** 	}
 2766              		.loc 1 3195 0
 2767 005c 0120     		movs	r0, #1
 2768 005e 034B     		ldr	r3, .L249
 2769 0060 C3F8FC00 		str	r0, [r3, #252]
 2770 0064 38BD     		pop	{r3, r4, r5, pc}
 2771              	.LVL268:
 2772              	.L247:
3199:..\..\FreeRTOS/tasks.c **** 	}
 2773              		.loc 1 3199 0
 2774 0066 0020     		movs	r0, #0
 2775              	.LVL269:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 152


3203:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2776              		.loc 1 3203 0
 2777 0068 38BD     		pop	{r3, r4, r5, pc}
 2778              	.LVL270:
 2779              	.L250:
 2780 006a 00BF     		.align	2
 2781              	.L249:
 2782 006c 00000000 		.word	.LANCHOR0
 2783 0070 14000000 		.word	.LANCHOR0+20
 2784              		.cfi_endproc
 2785              	.LFE95:
 2786              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2787              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2788              		.align	2
 2789              		.global	vTaskRemoveFromUnorderedEventList
 2790              		.thumb
 2791              		.thumb_func
 2792              		.type	vTaskRemoveFromUnorderedEventList, %function
 2793              	vTaskRemoveFromUnorderedEventList:
 2794              	.LFB96:
3207:..\..\FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 2795              		.loc 1 3207 0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 0
 2798              		@ frame_needed = 0, uses_anonymous_args = 0
 2799              	.LVL271:
 2800 0000 70B5     		push	{r4, r5, r6, lr}
 2801              		.cfi_def_cfa_offset 16
 2802              		.cfi_offset 4, -16
 2803              		.cfi_offset 5, -12
 2804              		.cfi_offset 6, -8
 2805              		.cfi_offset 14, -4
3215:..\..\FreeRTOS/tasks.c **** 
 2806              		.loc 1 3215 0
 2807 0002 41F00041 		orr	r1, r1, #-2147483648
 2808              	.LVL272:
 2809 0006 0160     		str	r1, [r0]
3219:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2810              		.loc 1 3219 0
 2811 0008 C568     		ldr	r5, [r0, #12]
 2812              	.LVL273:
3221:..\..\FreeRTOS/tasks.c **** 
 2813              		.loc 1 3221 0
 2814 000a FFF7FEFF 		bl	uxListRemove
 2815              	.LVL274:
3240:..\..\FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2816              		.loc 1 3240 0
 2817 000e 2E1D     		adds	r6, r5, #4
 2818 0010 3046     		mov	r0, r6
 2819 0012 FFF7FEFF 		bl	uxListRemove
 2820              	.LVL275:
3241:..\..\FreeRTOS/tasks.c **** 
 2821              		.loc 1 3241 0
 2822 0016 EB6A     		ldr	r3, [r5, #44]
 2823 0018 0122     		movs	r2, #1
 2824 001a 02FA03F1 		lsl	r1, r2, r3
 2825 001e 0C4C     		ldr	r4, .L254
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 153


 2826 0020 D4F8E420 		ldr	r2, [r4, #228]
 2827 0024 0A43     		orrs	r2, r2, r1
 2828 0026 C4F8E420 		str	r2, [r4, #228]
 2829 002a 04F13000 		add	r0, r4, #48
 2830 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2831 0032 9A00     		lsls	r2, r3, #2
 2832 0034 3146     		mov	r1, r6
 2833 0036 1044     		add	r0, r0, r2
 2834 0038 FFF7FEFF 		bl	vListInsertEnd
 2835              	.LVL276:
3243:..\..\FreeRTOS/tasks.c **** 	{
 2836              		.loc 1 3243 0
 2837 003c EA6A     		ldr	r2, [r5, #44]
 2838 003e D4F8D830 		ldr	r3, [r4, #216]
 2839 0042 DB6A     		ldr	r3, [r3, #44]
 2840 0044 9A42     		cmp	r2, r3
 2841 0046 02D9     		bls	.L251
3249:..\..\FreeRTOS/tasks.c **** 	}
 2842              		.loc 1 3249 0
 2843 0048 0122     		movs	r2, #1
 2844 004a C4F8FC20 		str	r2, [r4, #252]
 2845              	.L251:
 2846 004e 70BD     		pop	{r4, r5, r6, pc}
 2847              	.LVL277:
 2848              	.L255:
 2849              		.align	2
 2850              	.L254:
 2851 0050 00000000 		.word	.LANCHOR0
 2852              		.cfi_endproc
 2853              	.LFE96:
 2854              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2855              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2856              		.align	2
 2857              		.global	vTaskSetTimeOutState
 2858              		.thumb
 2859              		.thumb_func
 2860              		.type	vTaskSetTimeOutState, %function
 2861              	vTaskSetTimeOutState:
 2862              	.LFB97:
3255:..\..\FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 2863              		.loc 1 3255 0
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 0
 2866              		@ frame_needed = 0, uses_anonymous_args = 0
 2867              	.LVL278:
 2868 0000 10B5     		push	{r4, lr}
 2869              		.cfi_def_cfa_offset 8
 2870              		.cfi_offset 4, -8
 2871              		.cfi_offset 14, -4
 2872 0002 0446     		mov	r4, r0
3257:..\..\FreeRTOS/tasks.c **** 	{
 2873              		.loc 1 3257 0
 2874 0004 FFF7FEFF 		bl	vPortEnterCritical
 2875              	.LVL279:
3259:..\..\FreeRTOS/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2876              		.loc 1 3259 0
 2877 0008 044B     		ldr	r3, .L258
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 154


 2878 000a D3F8F820 		ldr	r2, [r3, #248]
 2879 000e 2260     		str	r2, [r4]
3260:..\..\FreeRTOS/tasks.c **** 	}
 2880              		.loc 1 3260 0
 2881 0010 D3F8EC30 		ldr	r3, [r3, #236]
 2882 0014 6360     		str	r3, [r4, #4]
3262:..\..\FreeRTOS/tasks.c **** }
 2883              		.loc 1 3262 0
 2884 0016 FFF7FEFF 		bl	vPortExitCritical
 2885              	.LVL280:
 2886 001a 10BD     		pop	{r4, pc}
 2887              	.LVL281:
 2888              	.L259:
 2889              		.align	2
 2890              	.L258:
 2891 001c 00000000 		.word	.LANCHOR0
 2892              		.cfi_endproc
 2893              	.LFE97:
 2894              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2895              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2896              		.align	2
 2897              		.global	vTaskInternalSetTimeOutState
 2898              		.thumb
 2899              		.thumb_func
 2900              		.type	vTaskInternalSetTimeOutState, %function
 2901              	vTaskInternalSetTimeOutState:
 2902              	.LFB98:
3267:..\..\FreeRTOS/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2903              		.loc 1 3267 0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 0
 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 2907              		@ link register save eliminated.
 2908              	.LVL282:
3269:..\..\FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2909              		.loc 1 3269 0
 2910 0000 034B     		ldr	r3, .L261
 2911 0002 D3F8F820 		ldr	r2, [r3, #248]
 2912 0006 0260     		str	r2, [r0]
3270:..\..\FreeRTOS/tasks.c **** }
 2913              		.loc 1 3270 0
 2914 0008 D3F8EC30 		ldr	r3, [r3, #236]
 2915 000c 4360     		str	r3, [r0, #4]
 2916 000e 7047     		bx	lr
 2917              	.L262:
 2918              		.align	2
 2919              	.L261:
 2920 0010 00000000 		.word	.LANCHOR0
 2921              		.cfi_endproc
 2922              	.LFE98:
 2923              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2924              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2925              		.align	2
 2926              		.global	xTaskCheckForTimeOut
 2927              		.thumb
 2928              		.thumb_func
 2929              		.type	xTaskCheckForTimeOut, %function
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 155


 2930              	xTaskCheckForTimeOut:
 2931              	.LFB99:
3275:..\..\FreeRTOS/tasks.c **** BaseType_t xReturn;
 2932              		.loc 1 3275 0
 2933              		.cfi_startproc
 2934              		@ args = 0, pretend = 0, frame = 0
 2935              		@ frame_needed = 0, uses_anonymous_args = 0
 2936              	.LVL283:
 2937 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2938              		.cfi_def_cfa_offset 24
 2939              		.cfi_offset 3, -24
 2940              		.cfi_offset 4, -20
 2941              		.cfi_offset 5, -16
 2942              		.cfi_offset 6, -12
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 0446     		mov	r4, r0
 2946 0004 0D46     		mov	r5, r1
3281:..\..\FreeRTOS/tasks.c **** 	{
 2947              		.loc 1 3281 0
 2948 0006 FFF7FEFF 		bl	vPortEnterCritical
 2949              	.LVL284:
 2950              	.LBB52:
3284:..\..\FreeRTOS/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2951              		.loc 1 3284 0
 2952 000a 124B     		ldr	r3, .L270
 2953 000c D3F8EC10 		ldr	r1, [r3, #236]
 2954              	.LVL285:
3285:..\..\FreeRTOS/tasks.c **** 
 2955              		.loc 1 3285 0
 2956 0010 6268     		ldr	r2, [r4, #4]
 2957 0012 881A     		subs	r0, r1, r2
 2958              	.LVL286:
3299:..\..\FreeRTOS/tasks.c **** 			{
 2959              		.loc 1 3299 0
 2960 0014 2B68     		ldr	r3, [r5]
 2961 0016 B3F1FF3F 		cmp	r3, #-1
 2962 001a 14D0     		beq	.L267
3309:..\..\FreeRTOS/tasks.c **** 		{
 2963              		.loc 1 3309 0
 2964 001c 2768     		ldr	r7, [r4]
 2965 001e 0D4E     		ldr	r6, .L270
 2966 0020 D6F8F860 		ldr	r6, [r6, #248]
 2967 0024 B742     		cmp	r7, r6
 2968 0026 01D0     		beq	.L265
3309:..\..\FreeRTOS/tasks.c **** 		{
 2969              		.loc 1 3309 0 is_stmt 0 discriminator 1
 2970 0028 9142     		cmp	r1, r2
 2971 002a 0ED2     		bcs	.L268
 2972              	.L265:
3318:..\..\FreeRTOS/tasks.c **** 		{
 2973              		.loc 1 3318 0 is_stmt 1
 2974 002c 9842     		cmp	r0, r3
 2975 002e 06D2     		bcs	.L266
3321:..\..\FreeRTOS/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 2976              		.loc 1 3321 0
 2977 0030 1B1A     		subs	r3, r3, r0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 156


 2978 0032 2B60     		str	r3, [r5]
3322:..\..\FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 2979              		.loc 1 3322 0
 2980 0034 2046     		mov	r0, r4
 2981              	.LVL287:
 2982 0036 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2983              	.LVL288:
3323:..\..\FreeRTOS/tasks.c **** 		}
 2984              		.loc 1 3323 0
 2985 003a 0024     		movs	r4, #0
 2986              	.LVL289:
 2987 003c 06E0     		b	.L264
 2988              	.LVL290:
 2989              	.L266:
3327:..\..\FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 2990              		.loc 1 3327 0
 2991 003e 0023     		movs	r3, #0
 2992 0040 2B60     		str	r3, [r5]
 2993              	.LVL291:
3328:..\..\FreeRTOS/tasks.c **** 		}
 2994              		.loc 1 3328 0
 2995 0042 0124     		movs	r4, #1
 2996              	.LVL292:
 2997 0044 02E0     		b	.L264
 2998              	.LVL293:
 2999              	.L267:
3304:..\..\FreeRTOS/tasks.c **** 			}
 3000              		.loc 1 3304 0
 3001 0046 0024     		movs	r4, #0
 3002              	.LVL294:
 3003 0048 00E0     		b	.L264
 3004              	.LVL295:
 3005              	.L268:
3316:..\..\FreeRTOS/tasks.c **** 		}
 3006              		.loc 1 3316 0
 3007 004a 0124     		movs	r4, #1
 3008              	.LVL296:
 3009              	.L264:
 3010              	.LBE52:
3331:..\..\FreeRTOS/tasks.c **** 
 3011              		.loc 1 3331 0
 3012 004c FFF7FEFF 		bl	vPortExitCritical
 3013              	.LVL297:
3334:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3014              		.loc 1 3334 0
 3015 0050 2046     		mov	r0, r4
 3016 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3017              	.LVL298:
 3018              	.L271:
 3019              		.align	2
 3020              	.L270:
 3021 0054 00000000 		.word	.LANCHOR0
 3022              		.cfi_endproc
 3023              	.LFE99:
 3024              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3025              		.section	.text.vTaskMissedYield,"ax",%progbits
 3026              		.align	2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 157


 3027              		.global	vTaskMissedYield
 3028              		.thumb
 3029              		.thumb_func
 3030              		.type	vTaskMissedYield, %function
 3031              	vTaskMissedYield:
 3032              	.LFB100:
3338:..\..\FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3033              		.loc 1 3338 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 0
 3036              		@ frame_needed = 0, uses_anonymous_args = 0
 3037              		@ link register save eliminated.
3339:..\..\FreeRTOS/tasks.c **** }
 3038              		.loc 1 3339 0
 3039 0000 0122     		movs	r2, #1
 3040 0002 024B     		ldr	r3, .L273
 3041 0004 C3F8FC20 		str	r2, [r3, #252]
 3042 0008 7047     		bx	lr
 3043              	.L274:
 3044 000a 00BF     		.align	2
 3045              	.L273:
 3046 000c 00000000 		.word	.LANCHOR0
 3047              		.cfi_endproc
 3048              	.LFE100:
 3049              		.size	vTaskMissedYield, .-vTaskMissedYield
 3050              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3051              		.align	2
 3052              		.global	uxTaskGetStackHighWaterMark
 3053              		.thumb
 3054              		.thumb_func
 3055              		.type	uxTaskGetStackHighWaterMark, %function
 3056              	uxTaskGetStackHighWaterMark:
 3057              	.LFB105:
3860:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 3058              		.loc 1 3860 0
 3059              		.cfi_startproc
 3060              		@ args = 0, pretend = 0, frame = 0
 3061              		@ frame_needed = 0, uses_anonymous_args = 0
 3062              	.LVL299:
 3063 0000 08B5     		push	{r3, lr}
 3064              		.cfi_def_cfa_offset 8
 3065              		.cfi_offset 3, -8
 3066              		.cfi_offset 14, -4
3865:..\..\FreeRTOS/tasks.c **** 
 3067              		.loc 1 3865 0
 3068 0002 0346     		mov	r3, r0
 3069 0004 10B9     		cbnz	r0, .L276
3865:..\..\FreeRTOS/tasks.c **** 
 3070              		.loc 1 3865 0 is_stmt 0 discriminator 1
 3071 0006 034B     		ldr	r3, .L278
 3072 0008 D3F8D830 		ldr	r3, [r3, #216]
 3073              	.LVL300:
 3074              	.L276:
3877:..\..\FreeRTOS/tasks.c **** 
 3075              		.loc 1 3877 0 is_stmt 1 discriminator 4
 3076 000c 186B     		ldr	r0, [r3, #48]
 3077 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 158


 3078              	.LVL301:
3880:..\..\FreeRTOS/tasks.c **** 
 3079              		.loc 1 3880 0 discriminator 4
 3080 0012 08BD     		pop	{r3, pc}
 3081              	.L279:
 3082              		.align	2
 3083              	.L278:
 3084 0014 00000000 		.word	.LANCHOR0
 3085              		.cfi_endproc
 3086              	.LFE105:
 3087              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3088              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3089              		.align	2
 3090              		.global	xTaskGetCurrentTaskHandle
 3091              		.thumb
 3092              		.thumb_func
 3093              		.type	xTaskGetCurrentTaskHandle, %function
 3094              	xTaskGetCurrentTaskHandle:
 3095              	.LFB108:
3970:..\..\FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 3096              		.loc 1 3970 0
 3097              		.cfi_startproc
 3098              		@ args = 0, pretend = 0, frame = 0
 3099              		@ frame_needed = 0, uses_anonymous_args = 0
 3100              		@ link register save eliminated.
3976:..\..\FreeRTOS/tasks.c **** 
 3101              		.loc 1 3976 0
 3102 0000 014B     		ldr	r3, .L281
 3103 0002 D3F8D800 		ldr	r0, [r3, #216]
 3104              	.LVL302:
3979:..\..\FreeRTOS/tasks.c **** 
 3105              		.loc 1 3979 0
 3106 0006 7047     		bx	lr
 3107              	.L282:
 3108              		.align	2
 3109              	.L281:
 3110 0008 00000000 		.word	.LANCHOR0
 3111              		.cfi_endproc
 3112              	.LFE108:
 3113              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3114              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3115              		.align	2
 3116              		.global	xTaskPriorityInherit
 3117              		.thumb
 3118              		.thumb_func
 3119              		.type	xTaskPriorityInherit, %function
 3120              	xTaskPriorityInherit:
 3121              	.LFB109:
4015:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3122              		.loc 1 4015 0
 3123              		.cfi_startproc
 3124              		@ args = 0, pretend = 0, frame = 0
 3125              		@ frame_needed = 0, uses_anonymous_args = 0
 3126              	.LVL303:
4022:..\..\FreeRTOS/tasks.c **** 		{
 3127              		.loc 1 4022 0
 3128 0000 0028     		cmp	r0, #0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 159


 3129 0002 52D0     		beq	.L289
4015:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3130              		.loc 1 4015 0
 3131 0004 38B5     		push	{r3, r4, r5, lr}
 3132              		.cfi_def_cfa_offset 16
 3133              		.cfi_offset 3, -16
 3134              		.cfi_offset 4, -12
 3135              		.cfi_offset 5, -8
 3136              		.cfi_offset 14, -4
 3137 0006 0346     		mov	r3, r0
4027:..\..\FreeRTOS/tasks.c **** 			{
 3138              		.loc 1 4027 0
 3139 0008 C26A     		ldr	r2, [r0, #44]
 3140 000a 2A49     		ldr	r1, .L292
 3141 000c D1F8D810 		ldr	r1, [r1, #216]
 3142 0010 C96A     		ldr	r1, [r1, #44]
 3143 0012 8A42     		cmp	r2, r1
 3144 0014 40D2     		bcs	.L285
4032:..\..\FreeRTOS/tasks.c **** 				{
 3145              		.loc 1 4032 0
 3146 0016 8169     		ldr	r1, [r0, #24]
 3147 0018 0029     		cmp	r1, #0
 3148 001a 06DB     		blt	.L286
4034:..\..\FreeRTOS/tasks.c **** 				}
 3149              		.loc 1 4034 0
 3150 001c 2549     		ldr	r1, .L292
 3151 001e D1F8D810 		ldr	r1, [r1, #216]
 3152 0022 C96A     		ldr	r1, [r1, #44]
 3153 0024 C1F10501 		rsb	r1, r1, #5
 3154 0028 8161     		str	r1, [r0, #24]
 3155              	.L286:
4043:..\..\FreeRTOS/tasks.c **** 				{
 3156              		.loc 1 4043 0
 3157 002a 5869     		ldr	r0, [r3, #20]
 3158              	.LVL304:
 3159 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3160 0030 9100     		lsls	r1, r2, #2
 3161 0032 214A     		ldr	r2, .L292+4
 3162 0034 1144     		add	r1, r1, r2
 3163 0036 8842     		cmp	r0, r1
 3164 0038 27D1     		bne	.L287
 3165 003a 1C46     		mov	r4, r3
4045:..\..\FreeRTOS/tasks.c **** 					{
 3166              		.loc 1 4045 0
 3167 003c 1D1D     		adds	r5, r3, #4
 3168 003e 2846     		mov	r0, r5
 3169 0040 FFF7FEFF 		bl	uxListRemove
 3170              	.LVL305:
 3171 0044 50B9     		cbnz	r0, .L288
4050:..\..\FreeRTOS/tasks.c **** 					}
 3172              		.loc 1 4050 0
 3173 0046 E26A     		ldr	r2, [r4, #44]
 3174 0048 0123     		movs	r3, #1
 3175 004a 03FA02F2 		lsl	r2, r3, r2
 3176 004e 1949     		ldr	r1, .L292
 3177 0050 D1F8E430 		ldr	r3, [r1, #228]
 3178 0054 23EA0203 		bic	r3, r3, r2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 160


 3179 0058 C1F8E430 		str	r3, [r1, #228]
 3180              	.L288:
4058:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3181              		.loc 1 4058 0
 3182 005c 1548     		ldr	r0, .L292
 3183 005e D0F8D830 		ldr	r3, [r0, #216]
 3184 0062 DB6A     		ldr	r3, [r3, #44]
 3185 0064 E362     		str	r3, [r4, #44]
4059:..\..\FreeRTOS/tasks.c **** 				}
 3186              		.loc 1 4059 0
 3187 0066 0124     		movs	r4, #1
 3188              	.LVL306:
 3189 0068 04FA03F1 		lsl	r1, r4, r3
 3190 006c D0F8E420 		ldr	r2, [r0, #228]
 3191 0070 0A43     		orrs	r2, r2, r1
 3192 0072 C0F8E420 		str	r2, [r0, #228]
 3193 0076 3030     		adds	r0, r0, #48
 3194 0078 03EB8303 		add	r3, r3, r3, lsl #2
 3195 007c 9A00     		lsls	r2, r3, #2
 3196 007e 2946     		mov	r1, r5
 3197 0080 1044     		add	r0, r0, r2
 3198 0082 FFF7FEFF 		bl	vListInsertEnd
 3199              	.LVL307:
4070:..\..\FreeRTOS/tasks.c **** 			}
 3200              		.loc 1 4070 0
 3201 0086 2046     		mov	r0, r4
 3202 0088 38BD     		pop	{r3, r4, r5, pc}
 3203              	.LVL308:
 3204              	.L287:
4064:..\..\FreeRTOS/tasks.c **** 				}
 3205              		.loc 1 4064 0
 3206 008a 0A4A     		ldr	r2, .L292
 3207 008c D2F8D820 		ldr	r2, [r2, #216]
 3208 0090 D26A     		ldr	r2, [r2, #44]
 3209 0092 DA62     		str	r2, [r3, #44]
4070:..\..\FreeRTOS/tasks.c **** 			}
 3210              		.loc 1 4070 0
 3211 0094 0120     		movs	r0, #1
 3212 0096 38BD     		pop	{r3, r4, r5, pc}
 3213              	.LVL309:
 3214              	.L285:
4074:..\..\FreeRTOS/tasks.c **** 				{
 3215              		.loc 1 4074 0
 3216 0098 026C     		ldr	r2, [r0, #64]
 3217 009a 064B     		ldr	r3, .L292
 3218 009c D3F8D830 		ldr	r3, [r3, #216]
 3219 00a0 DB6A     		ldr	r3, [r3, #44]
 3220 00a2 9A42     		cmp	r2, r3
 3221 00a4 03D3     		bcc	.L290
4017:..\..\FreeRTOS/tasks.c **** 
 3222              		.loc 1 4017 0
 3223 00a6 0020     		movs	r0, #0
 3224              	.LVL310:
 3225 00a8 38BD     		pop	{r3, r4, r5, pc}
 3226              	.LVL311:
 3227              	.L289:
 3228              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 161


 3229              		.cfi_restore 3
 3230              		.cfi_restore 4
 3231              		.cfi_restore 5
 3232              		.cfi_restore 14
 3233 00aa 0020     		movs	r0, #0
 3234              	.LVL312:
4097:..\..\FreeRTOS/tasks.c **** 
 3235              		.loc 1 4097 0
 3236 00ac 7047     		bx	lr
 3237              	.LVL313:
 3238              	.L290:
 3239              		.cfi_def_cfa_offset 16
 3240              		.cfi_offset 3, -16
 3241              		.cfi_offset 4, -12
 3242              		.cfi_offset 5, -8
 3243              		.cfi_offset 14, -4
4083:..\..\FreeRTOS/tasks.c **** 				}
 3244              		.loc 1 4083 0
 3245 00ae 0120     		movs	r0, #1
 3246              	.LVL314:
4097:..\..\FreeRTOS/tasks.c **** 
 3247              		.loc 1 4097 0
 3248 00b0 38BD     		pop	{r3, r4, r5, pc}
 3249              	.L293:
 3250 00b2 00BF     		.align	2
 3251              	.L292:
 3252 00b4 00000000 		.word	.LANCHOR0
 3253 00b8 30000000 		.word	.LANCHOR0+48
 3254              		.cfi_endproc
 3255              	.LFE109:
 3256              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3257              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3258              		.align	2
 3259              		.global	xTaskPriorityDisinherit
 3260              		.thumb
 3261              		.thumb_func
 3262              		.type	xTaskPriorityDisinherit, %function
 3263              	xTaskPriorityDisinherit:
 3264              	.LFB110:
4105:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3265              		.loc 1 4105 0
 3266              		.cfi_startproc
 3267              		@ args = 0, pretend = 0, frame = 0
 3268              		@ frame_needed = 0, uses_anonymous_args = 0
 3269              	.LVL315:
4109:..\..\FreeRTOS/tasks.c **** 		{
 3270              		.loc 1 4109 0
 3271 0000 0028     		cmp	r0, #0
 3272 0002 38D0     		beq	.L297
4105:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3273              		.loc 1 4105 0
 3274 0004 38B5     		push	{r3, r4, r5, lr}
 3275              		.cfi_def_cfa_offset 16
 3276              		.cfi_offset 3, -16
 3277              		.cfi_offset 4, -12
 3278              		.cfi_offset 5, -8
 3279              		.cfi_offset 14, -4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 162


 3280 0006 0346     		mov	r3, r0
4117:..\..\FreeRTOS/tasks.c **** 
 3281              		.loc 1 4117 0
 3282 0008 426C     		ldr	r2, [r0, #68]
 3283 000a 013A     		subs	r2, r2, #1
 3284 000c 4264     		str	r2, [r0, #68]
4121:..\..\FreeRTOS/tasks.c **** 			{
 3285              		.loc 1 4121 0
 3286 000e C06A     		ldr	r0, [r0, #44]
 3287              	.LVL316:
 3288 0010 196C     		ldr	r1, [r3, #64]
 3289 0012 8842     		cmp	r0, r1
 3290 0014 31D0     		beq	.L298
4124:..\..\FreeRTOS/tasks.c **** 				{
 3291              		.loc 1 4124 0
 3292 0016 92BB     		cbnz	r2, .L299
 3293 0018 1C46     		mov	r4, r3
4131:..\..\FreeRTOS/tasks.c **** 					{
 3294              		.loc 1 4131 0
 3295 001a 1D1D     		adds	r5, r3, #4
 3296 001c 2846     		mov	r0, r5
 3297 001e FFF7FEFF 		bl	uxListRemove
 3298              	.LVL317:
 3299 0022 80B9     		cbnz	r0, .L296
4133:..\..\FreeRTOS/tasks.c **** 					}
 3300              		.loc 1 4133 0
 3301 0024 E26A     		ldr	r2, [r4, #44]
 3302 0026 02EB8201 		add	r1, r2, r2, lsl #2
 3303 002a 8B00     		lsls	r3, r1, #2
 3304 002c 1549     		ldr	r1, .L301
 3305 002e 0B44     		add	r3, r3, r1
 3306 0030 1B6B     		ldr	r3, [r3, #48]
 3307 0032 43B9     		cbnz	r3, .L296
4133:..\..\FreeRTOS/tasks.c **** 					}
 3308              		.loc 1 4133 0 is_stmt 0 discriminator 1
 3309 0034 0123     		movs	r3, #1
 3310 0036 03FA02F2 		lsl	r2, r3, r2
 3311 003a D1F8E430 		ldr	r3, [r1, #228]
 3312 003e 23EA0202 		bic	r2, r3, r2
 3313 0042 C1F8E420 		str	r2, [r1, #228]
 3314              	.L296:
4143:..\..\FreeRTOS/tasks.c **** 
 3315              		.loc 1 4143 0 is_stmt 1
 3316 0046 236C     		ldr	r3, [r4, #64]
 3317 0048 E362     		str	r3, [r4, #44]
4148:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3318              		.loc 1 4148 0
 3319 004a C3F10502 		rsb	r2, r3, #5
 3320 004e A261     		str	r2, [r4, #24]
4149:..\..\FreeRTOS/tasks.c **** 
 3321              		.loc 1 4149 0
 3322 0050 0124     		movs	r4, #1
 3323              	.LVL318:
 3324 0052 04FA03F1 		lsl	r1, r4, r3
 3325 0056 0B48     		ldr	r0, .L301
 3326 0058 D0F8E420 		ldr	r2, [r0, #228]
 3327 005c 0A43     		orrs	r2, r2, r1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 163


 3328 005e C0F8E420 		str	r2, [r0, #228]
 3329 0062 3030     		adds	r0, r0, #48
 3330 0064 03EB8303 		add	r3, r3, r3, lsl #2
 3331 0068 9A00     		lsls	r2, r3, #2
 3332 006a 2946     		mov	r1, r5
 3333 006c 1044     		add	r0, r0, r2
 3334 006e FFF7FEFF 		bl	vListInsertEnd
 3335              	.LVL319:
4159:..\..\FreeRTOS/tasks.c **** 				}
 3336              		.loc 1 4159 0
 3337 0072 2046     		mov	r0, r4
 3338 0074 38BD     		pop	{r3, r4, r5, pc}
 3339              	.LVL320:
 3340              	.L297:
 3341              		.cfi_def_cfa_offset 0
 3342              		.cfi_restore 3
 3343              		.cfi_restore 4
 3344              		.cfi_restore 5
 3345              		.cfi_restore 14
4107:..\..\FreeRTOS/tasks.c **** 
 3346              		.loc 1 4107 0
 3347 0076 0020     		movs	r0, #0
 3348              	.LVL321:
4177:..\..\FreeRTOS/tasks.c **** 
 3349              		.loc 1 4177 0
 3350 0078 7047     		bx	lr
 3351              	.LVL322:
 3352              	.L298:
 3353              		.cfi_def_cfa_offset 16
 3354              		.cfi_offset 3, -16
 3355              		.cfi_offset 4, -12
 3356              		.cfi_offset 5, -8
 3357              		.cfi_offset 14, -4
4107:..\..\FreeRTOS/tasks.c **** 
 3358              		.loc 1 4107 0
 3359 007a 0020     		movs	r0, #0
 3360 007c 38BD     		pop	{r3, r4, r5, pc}
 3361              	.LVL323:
 3362              	.L299:
 3363 007e 0020     		movs	r0, #0
 3364              	.LVL324:
4177:..\..\FreeRTOS/tasks.c **** 
 3365              		.loc 1 4177 0
 3366 0080 38BD     		pop	{r3, r4, r5, pc}
 3367              	.LVL325:
 3368              	.L302:
 3369 0082 00BF     		.align	2
 3370              	.L301:
 3371 0084 00000000 		.word	.LANCHOR0
 3372              		.cfi_endproc
 3373              	.LFE110:
 3374              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3375              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3376              		.align	2
 3377              		.global	vTaskPriorityDisinheritAfterTimeout
 3378              		.thumb
 3379              		.thumb_func
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 164


 3380              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3381              	vTaskPriorityDisinheritAfterTimeout:
 3382              	.LFB111:
4185:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3383              		.loc 1 4185 0
 3384              		.cfi_startproc
 3385              		@ args = 0, pretend = 0, frame = 0
 3386              		@ frame_needed = 0, uses_anonymous_args = 0
 3387              	.LVL326:
4190:..\..\FreeRTOS/tasks.c **** 		{
 3388              		.loc 1 4190 0
 3389 0000 0028     		cmp	r0, #0
 3390 0002 3ED0     		beq	.L309
4185:..\..\FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3391              		.loc 1 4185 0
 3392 0004 38B5     		push	{r3, r4, r5, lr}
 3393              		.cfi_def_cfa_offset 16
 3394              		.cfi_offset 3, -16
 3395              		.cfi_offset 4, -12
 3396              		.cfi_offset 5, -8
 3397              		.cfi_offset 14, -4
 3398 0006 0346     		mov	r3, r0
4200:..\..\FreeRTOS/tasks.c **** 			{
 3399              		.loc 1 4200 0
 3400 0008 026C     		ldr	r2, [r0, #64]
 3401 000a 8A42     		cmp	r2, r1
 3402 000c 00D2     		bcs	.L305
4202:..\..\FreeRTOS/tasks.c **** 			}
 3403              		.loc 1 4202 0
 3404 000e 0A46     		mov	r2, r1
 3405              	.L305:
 3406              	.LVL327:
4210:..\..\FreeRTOS/tasks.c **** 			{
 3407              		.loc 1 4210 0
 3408 0010 D96A     		ldr	r1, [r3, #44]
 3409              	.LVL328:
 3410 0012 8A42     		cmp	r2, r1
 3411 0014 34D0     		beq	.L303
4216:..\..\FreeRTOS/tasks.c **** 				{
 3412              		.loc 1 4216 0
 3413 0016 586C     		ldr	r0, [r3, #68]
 3414              	.LVL329:
 3415 0018 0128     		cmp	r0, #1
 3416 001a 31D1     		bne	.L303
 3417              	.LVL330:
4228:..\..\FreeRTOS/tasks.c **** 
 3418              		.loc 1 4228 0
 3419 001c DA62     		str	r2, [r3, #44]
4232:..\..\FreeRTOS/tasks.c **** 					{
 3420              		.loc 1 4232 0
 3421 001e 9869     		ldr	r0, [r3, #24]
 3422 0020 0028     		cmp	r0, #0
 3423 0022 02DB     		blt	.L306
4234:..\..\FreeRTOS/tasks.c **** 					}
 3424              		.loc 1 4234 0
 3425 0024 C2F10502 		rsb	r2, r2, #5
 3426              	.LVL331:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 165


 3427 0028 9A61     		str	r2, [r3, #24]
 3428              	.L306:
4247:..\..\FreeRTOS/tasks.c **** 					{
 3429              		.loc 1 4247 0
 3430 002a 5869     		ldr	r0, [r3, #20]
 3431 002c 01EB8101 		add	r1, r1, r1, lsl #2
 3432              	.LVL332:
 3433 0030 8A00     		lsls	r2, r1, #2
 3434 0032 1449     		ldr	r1, .L310
 3435 0034 0A44     		add	r2, r2, r1
 3436 0036 9042     		cmp	r0, r2
 3437 0038 22D1     		bne	.L303
 3438 003a 1C46     		mov	r4, r3
4249:..\..\FreeRTOS/tasks.c **** 						{
 3439              		.loc 1 4249 0
 3440 003c 1D1D     		adds	r5, r3, #4
 3441 003e 2846     		mov	r0, r5
 3442 0040 FFF7FEFF 		bl	uxListRemove
 3443              	.LVL333:
 3444 0044 50B9     		cbnz	r0, .L307
4254:..\..\FreeRTOS/tasks.c **** 						}
 3445              		.loc 1 4254 0
 3446 0046 E26A     		ldr	r2, [r4, #44]
 3447 0048 0123     		movs	r3, #1
 3448 004a 03FA02F2 		lsl	r2, r3, r2
 3449 004e 0E49     		ldr	r1, .L310+4
 3450 0050 D1F8E430 		ldr	r3, [r1, #228]
 3451 0054 23EA0203 		bic	r3, r3, r2
 3452 0058 C1F8E430 		str	r3, [r1, #228]
 3453              	.L307:
4261:..\..\FreeRTOS/tasks.c **** 					}
 3454              		.loc 1 4261 0
 3455 005c E36A     		ldr	r3, [r4, #44]
 3456 005e 0122     		movs	r2, #1
 3457 0060 02FA03F1 		lsl	r1, r2, r3
 3458 0064 0848     		ldr	r0, .L310+4
 3459 0066 D0F8E420 		ldr	r2, [r0, #228]
 3460 006a 0A43     		orrs	r2, r2, r1
 3461 006c C0F8E420 		str	r2, [r0, #228]
 3462 0070 3030     		adds	r0, r0, #48
 3463 0072 03EB8303 		add	r3, r3, r3, lsl #2
 3464 0076 9A00     		lsls	r2, r3, #2
 3465 0078 2946     		mov	r1, r5
 3466 007a 1044     		add	r0, r0, r2
 3467 007c FFF7FEFF 		bl	vListInsertEnd
 3468              	.LVL334:
 3469              	.L303:
 3470 0080 38BD     		pop	{r3, r4, r5, pc}
 3471              	.LVL335:
 3472              	.L309:
 3473              		.cfi_def_cfa_offset 0
 3474              		.cfi_restore 3
 3475              		.cfi_restore 4
 3476              		.cfi_restore 5
 3477              		.cfi_restore 14
 3478 0082 7047     		bx	lr
 3479              	.L311:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 166


 3480              		.align	2
 3481              	.L310:
 3482 0084 30000000 		.word	.LANCHOR0+48
 3483 0088 00000000 		.word	.LANCHOR0
 3484              		.cfi_endproc
 3485              	.LFE111:
 3486              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3487              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3488              		.align	2
 3489              		.global	uxTaskResetEventItemValue
 3490              		.thumb
 3491              		.thumb_func
 3492              		.type	uxTaskResetEventItemValue, %function
 3493              	uxTaskResetEventItemValue:
 3494              	.LFB112:
4603:..\..\FreeRTOS/tasks.c **** TickType_t uxReturn;
 3495              		.loc 1 4603 0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 0
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499              		@ link register save eliminated.
4606:..\..\FreeRTOS/tasks.c **** 
 3500              		.loc 1 4606 0
 3501 0000 064B     		ldr	r3, .L313
 3502 0002 D3F8D820 		ldr	r2, [r3, #216]
 3503 0006 9069     		ldr	r0, [r2, #24]
 3504              	.LVL336:
4610:..\..\FreeRTOS/tasks.c **** 
 3505              		.loc 1 4610 0
 3506 0008 D3F8D820 		ldr	r2, [r3, #216]
 3507 000c D3F8D830 		ldr	r3, [r3, #216]
 3508 0010 DB6A     		ldr	r3, [r3, #44]
 3509 0012 C3F10503 		rsb	r3, r3, #5
 3510 0016 9361     		str	r3, [r2, #24]
4613:..\..\FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3511              		.loc 1 4613 0
 3512 0018 7047     		bx	lr
 3513              	.L314:
 3514 001a 00BF     		.align	2
 3515              	.L313:
 3516 001c 00000000 		.word	.LANCHOR0
 3517              		.cfi_endproc
 3518              	.LFE112:
 3519              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3520              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3521              		.align	2
 3522              		.global	pvTaskIncrementMutexHeldCount
 3523              		.thumb
 3524              		.thumb_func
 3525              		.type	pvTaskIncrementMutexHeldCount, %function
 3526              	pvTaskIncrementMutexHeldCount:
 3527              	.LFB113:
4619:..\..\FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3528              		.loc 1 4619 0
 3529              		.cfi_startproc
 3530              		@ args = 0, pretend = 0, frame = 0
 3531              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 167


 3532              		@ link register save eliminated.
4622:..\..\FreeRTOS/tasks.c **** 		{
 3533              		.loc 1 4622 0
 3534 0000 064B     		ldr	r3, .L317
 3535 0002 D3F8D830 		ldr	r3, [r3, #216]
 3536 0006 2BB1     		cbz	r3, .L316
4624:..\..\FreeRTOS/tasks.c **** 		}
 3537              		.loc 1 4624 0
 3538 0008 044B     		ldr	r3, .L317
 3539 000a D3F8D820 		ldr	r2, [r3, #216]
 3540 000e 536C     		ldr	r3, [r2, #68]
 3541 0010 0133     		adds	r3, r3, #1
 3542 0012 5364     		str	r3, [r2, #68]
 3543              	.L316:
4627:..\..\FreeRTOS/tasks.c **** 	}
 3544              		.loc 1 4627 0
 3545 0014 014B     		ldr	r3, .L317
 3546 0016 D3F8D800 		ldr	r0, [r3, #216]
4628:..\..\FreeRTOS/tasks.c **** 
 3547              		.loc 1 4628 0
 3548 001a 7047     		bx	lr
 3549              	.L318:
 3550              		.align	2
 3551              	.L317:
 3552 001c 00000000 		.word	.LANCHOR0
 3553              		.cfi_endproc
 3554              	.LFE113:
 3555              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3556              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3557              		.align	2
 3558              		.global	ulTaskNotifyTake
 3559              		.thumb
 3560              		.thumb_func
 3561              		.type	ulTaskNotifyTake, %function
 3562              	ulTaskNotifyTake:
 3563              	.LFB114:
4636:..\..\FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 3564              		.loc 1 4636 0
 3565              		.cfi_startproc
 3566              		@ args = 0, pretend = 0, frame = 0
 3567              		@ frame_needed = 0, uses_anonymous_args = 0
 3568              	.LVL337:
 3569 0000 38B5     		push	{r3, r4, r5, lr}
 3570              		.cfi_def_cfa_offset 16
 3571              		.cfi_offset 3, -16
 3572              		.cfi_offset 4, -12
 3573              		.cfi_offset 5, -8
 3574              		.cfi_offset 14, -4
 3575 0002 0546     		mov	r5, r0
 3576 0004 0C46     		mov	r4, r1
4639:..\..\FreeRTOS/tasks.c **** 		{
 3577              		.loc 1 4639 0
 3578 0006 FFF7FEFF 		bl	vPortEnterCritical
 3579              	.LVL338:
4642:..\..\FreeRTOS/tasks.c **** 			{
 3580              		.loc 1 4642 0
 3581 000a 1B4B     		ldr	r3, .L324
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 168


 3582 000c D3F8D830 		ldr	r3, [r3, #216]
 3583 0010 9B6C     		ldr	r3, [r3, #72]
 3584 0012 93B9     		cbnz	r3, .L320
4645:..\..\FreeRTOS/tasks.c **** 
 3585              		.loc 1 4645 0
 3586 0014 184B     		ldr	r3, .L324
 3587 0016 D3F8D830 		ldr	r3, [r3, #216]
 3588 001a 0122     		movs	r2, #1
 3589 001c 83F84C20 		strb	r2, [r3, #76]
4647:..\..\FreeRTOS/tasks.c **** 				{
 3590              		.loc 1 4647 0
 3591 0020 5CB1     		cbz	r4, .L320
4649:..\..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3592              		.loc 1 4649 0
 3593 0022 1146     		mov	r1, r2
 3594 0024 2046     		mov	r0, r4
 3595 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3596              	.LVL339:
4656:..\..\FreeRTOS/tasks.c **** 				}
 3597              		.loc 1 4656 0
 3598 002a 4FF08052 		mov	r2, #268435456
 3599 002e 134B     		ldr	r3, .L324+4
 3600 0030 1A60     		str	r2, [r3]
 3601              		.syntax unified
 3602              	@ 4656 "..\..\FreeRTOS\tasks.c" 1
 3603 0032 BFF34F8F 		dsb
 3604              	@ 0 "" 2
 3605              	@ 4656 "..\..\FreeRTOS\tasks.c" 1
 3606 0036 BFF36F8F 		isb
 3607              	@ 0 "" 2
 3608              		.thumb
 3609              		.syntax unified
 3610              	.L320:
4668:..\..\FreeRTOS/tasks.c **** 
 3611              		.loc 1 4668 0
 3612 003a FFF7FEFF 		bl	vPortExitCritical
 3613              	.LVL340:
4670:..\..\FreeRTOS/tasks.c **** 		{
 3614              		.loc 1 4670 0
 3615 003e FFF7FEFF 		bl	vPortEnterCritical
 3616              	.LVL341:
4673:..\..\FreeRTOS/tasks.c **** 
 3617              		.loc 1 4673 0
 3618 0042 0D4B     		ldr	r3, .L324
 3619 0044 D3F8D830 		ldr	r3, [r3, #216]
 3620 0048 9C6C     		ldr	r4, [r3, #72]
 3621              	.LVL342:
4675:..\..\FreeRTOS/tasks.c **** 			{
 3622              		.loc 1 4675 0
 3623 004a 5CB1     		cbz	r4, .L321
4677:..\..\FreeRTOS/tasks.c **** 				{
 3624              		.loc 1 4677 0
 3625 004c 2DB1     		cbz	r5, .L322
4679:..\..\FreeRTOS/tasks.c **** 				}
 3626              		.loc 1 4679 0
 3627 004e 0A4B     		ldr	r3, .L324
 3628 0050 D3F8D830 		ldr	r3, [r3, #216]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 169


 3629 0054 0022     		movs	r2, #0
 3630 0056 9A64     		str	r2, [r3, #72]
 3631 0058 04E0     		b	.L321
 3632              	.L322:
4683:..\..\FreeRTOS/tasks.c **** 				}
 3633              		.loc 1 4683 0
 3634 005a 074B     		ldr	r3, .L324
 3635 005c D3F8D830 		ldr	r3, [r3, #216]
 3636 0060 621E     		subs	r2, r4, #1
 3637 0062 9A64     		str	r2, [r3, #72]
 3638              	.L321:
4691:..\..\FreeRTOS/tasks.c **** 		}
 3639              		.loc 1 4691 0
 3640 0064 044B     		ldr	r3, .L324
 3641 0066 D3F8D830 		ldr	r3, [r3, #216]
 3642 006a 0022     		movs	r2, #0
 3643 006c 83F84C20 		strb	r2, [r3, #76]
4693:..\..\FreeRTOS/tasks.c **** 
 3644              		.loc 1 4693 0
 3645 0070 FFF7FEFF 		bl	vPortExitCritical
 3646              	.LVL343:
4696:..\..\FreeRTOS/tasks.c **** 
 3647              		.loc 1 4696 0
 3648 0074 2046     		mov	r0, r4
 3649 0076 38BD     		pop	{r3, r4, r5, pc}
 3650              	.LVL344:
 3651              	.L325:
 3652              		.align	2
 3653              	.L324:
 3654 0078 00000000 		.word	.LANCHOR0
 3655 007c 04ED00E0 		.word	-536810236
 3656              		.cfi_endproc
 3657              	.LFE114:
 3658              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3659              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3660              		.align	2
 3661              		.global	xTaskNotifyWait
 3662              		.thumb
 3663              		.thumb_func
 3664              		.type	xTaskNotifyWait, %function
 3665              	xTaskNotifyWait:
 3666              	.LFB115:
4704:..\..\FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 3667              		.loc 1 4704 0
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 0
 3670              		@ frame_needed = 0, uses_anonymous_args = 0
 3671              	.LVL345:
 3672 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3673              		.cfi_def_cfa_offset 24
 3674              		.cfi_offset 3, -24
 3675              		.cfi_offset 4, -20
 3676              		.cfi_offset 5, -16
 3677              		.cfi_offset 6, -12
 3678              		.cfi_offset 7, -8
 3679              		.cfi_offset 14, -4
 3680 0002 0746     		mov	r7, r0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 170


 3681 0004 0D46     		mov	r5, r1
 3682 0006 1446     		mov	r4, r2
 3683 0008 1E46     		mov	r6, r3
4707:..\..\FreeRTOS/tasks.c **** 		{
 3684              		.loc 1 4707 0
 3685 000a FFF7FEFF 		bl	vPortEnterCritical
 3686              	.LVL346:
4710:..\..\FreeRTOS/tasks.c **** 			{
 3687              		.loc 1 4710 0
 3688 000e 234B     		ldr	r3, .L332
 3689 0010 D3F8D830 		ldr	r3, [r3, #216]
 3690 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3691 0018 DBB2     		uxtb	r3, r3
 3692 001a 022B     		cmp	r3, #2
 3693 001c 18D0     		beq	.L327
4715:..\..\FreeRTOS/tasks.c **** 
 3694              		.loc 1 4715 0
 3695 001e 1F4B     		ldr	r3, .L332
 3696 0020 D3F8D820 		ldr	r2, [r3, #216]
 3697 0024 906C     		ldr	r0, [r2, #72]
 3698 0026 20EA0700 		bic	r0, r0, r7
 3699 002a 9064     		str	r0, [r2, #72]
4718:..\..\FreeRTOS/tasks.c **** 
 3700              		.loc 1 4718 0
 3701 002c D3F8D830 		ldr	r3, [r3, #216]
 3702 0030 0122     		movs	r2, #1
 3703 0032 83F84C20 		strb	r2, [r3, #76]
4720:..\..\FreeRTOS/tasks.c **** 				{
 3704              		.loc 1 4720 0
 3705 0036 5EB1     		cbz	r6, .L327
4722:..\..\FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3706              		.loc 1 4722 0
 3707 0038 1146     		mov	r1, r2
 3708 003a 3046     		mov	r0, r6
 3709 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3710              	.LVL347:
4729:..\..\FreeRTOS/tasks.c **** 				}
 3711              		.loc 1 4729 0
 3712 0040 4FF08052 		mov	r2, #268435456
 3713 0044 164B     		ldr	r3, .L332+4
 3714 0046 1A60     		str	r2, [r3]
 3715              		.syntax unified
 3716              	@ 4729 "..\..\FreeRTOS\tasks.c" 1
 3717 0048 BFF34F8F 		dsb
 3718              	@ 0 "" 2
 3719              	@ 4729 "..\..\FreeRTOS\tasks.c" 1
 3720 004c BFF36F8F 		isb
 3721              	@ 0 "" 2
 3722              		.thumb
 3723              		.syntax unified
 3724              	.L327:
4741:..\..\FreeRTOS/tasks.c **** 
 3725              		.loc 1 4741 0
 3726 0050 FFF7FEFF 		bl	vPortExitCritical
 3727              	.LVL348:
4743:..\..\FreeRTOS/tasks.c **** 		{
 3728              		.loc 1 4743 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 171


 3729 0054 FFF7FEFF 		bl	vPortEnterCritical
 3730              	.LVL349:
4747:..\..\FreeRTOS/tasks.c **** 			{
 3731              		.loc 1 4747 0
 3732 0058 24B1     		cbz	r4, .L328
4751:..\..\FreeRTOS/tasks.c **** 			}
 3733              		.loc 1 4751 0
 3734 005a 104B     		ldr	r3, .L332
 3735 005c D3F8D830 		ldr	r3, [r3, #216]
 3736 0060 9B6C     		ldr	r3, [r3, #72]
 3737 0062 2360     		str	r3, [r4]
 3738              	.L328:
4758:..\..\FreeRTOS/tasks.c **** 			{
 3739              		.loc 1 4758 0
 3740 0064 0D4B     		ldr	r3, .L332
 3741 0066 D3F8D830 		ldr	r3, [r3, #216]
 3742 006a 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 3743 006e DBB2     		uxtb	r3, r3
 3744 0070 022B     		cmp	r3, #2
 3745 0072 08D1     		bne	.L330
4767:..\..\FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 3746              		.loc 1 4767 0
 3747 0074 094B     		ldr	r3, .L332
 3748 0076 D3F8D820 		ldr	r2, [r3, #216]
 3749 007a 936C     		ldr	r3, [r2, #72]
 3750 007c 23EA0505 		bic	r5, r3, r5
 3751              	.LVL350:
 3752 0080 9564     		str	r5, [r2, #72]
 3753              	.LVL351:
4768:..\..\FreeRTOS/tasks.c **** 			}
 3754              		.loc 1 4768 0
 3755 0082 0124     		movs	r4, #1
 3756              	.LVL352:
 3757 0084 00E0     		b	.L329
 3758              	.LVL353:
 3759              	.L330:
4761:..\..\FreeRTOS/tasks.c **** 			}
 3760              		.loc 1 4761 0
 3761 0086 0024     		movs	r4, #0
 3762              	.LVL354:
 3763              	.L329:
4771:..\..\FreeRTOS/tasks.c **** 		}
 3764              		.loc 1 4771 0
 3765 0088 044B     		ldr	r3, .L332
 3766 008a D3F8D830 		ldr	r3, [r3, #216]
 3767 008e 0022     		movs	r2, #0
 3768 0090 83F84C20 		strb	r2, [r3, #76]
4773:..\..\FreeRTOS/tasks.c **** 
 3769              		.loc 1 4773 0
 3770 0094 FFF7FEFF 		bl	vPortExitCritical
 3771              	.LVL355:
4776:..\..\FreeRTOS/tasks.c **** 
 3772              		.loc 1 4776 0
 3773 0098 2046     		mov	r0, r4
 3774 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3775              	.LVL356:
 3776              	.L333:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 172


 3777              		.align	2
 3778              	.L332:
 3779 009c 00000000 		.word	.LANCHOR0
 3780 00a0 04ED00E0 		.word	-536810236
 3781              		.cfi_endproc
 3782              	.LFE115:
 3783              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3784              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3785              		.align	2
 3786              		.global	xTaskGenericNotify
 3787              		.thumb
 3788              		.thumb_func
 3789              		.type	xTaskGenericNotify, %function
 3790              	xTaskGenericNotify:
 3791              	.LFB116:
4784:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 3792              		.loc 1 4784 0
 3793              		.cfi_startproc
 3794              		@ args = 0, pretend = 0, frame = 0
 3795              		@ frame_needed = 0, uses_anonymous_args = 0
 3796              	.LVL357:
 3797 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3798              		.cfi_def_cfa_offset 24
 3799              		.cfi_offset 3, -24
 3800              		.cfi_offset 4, -20
 3801              		.cfi_offset 5, -16
 3802              		.cfi_offset 6, -12
 3803              		.cfi_offset 7, -8
 3804              		.cfi_offset 14, -4
 3805 0002 0446     		mov	r4, r0
 3806 0004 0F46     		mov	r7, r1
 3807 0006 1546     		mov	r5, r2
 3808 0008 1E46     		mov	r6, r3
 3809              	.LVL358:
4792:..\..\FreeRTOS/tasks.c **** 		{
 3810              		.loc 1 4792 0
 3811 000a FFF7FEFF 		bl	vPortEnterCritical
 3812              	.LVL359:
4794:..\..\FreeRTOS/tasks.c **** 			{
 3813              		.loc 1 4794 0
 3814 000e 0EB1     		cbz	r6, .L335
4796:..\..\FreeRTOS/tasks.c **** 			}
 3815              		.loc 1 4796 0
 3816 0010 A36C     		ldr	r3, [r4, #72]
 3817 0012 3360     		str	r3, [r6]
 3818              	.L335:
4799:..\..\FreeRTOS/tasks.c **** 
 3819              		.loc 1 4799 0
 3820 0014 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 3821 0018 DBB2     		uxtb	r3, r3
 3822              	.LVL360:
4801:..\..\FreeRTOS/tasks.c **** 
 3823              		.loc 1 4801 0
 3824 001a 0222     		movs	r2, #2
 3825 001c 84F84C20 		strb	r2, [r4, #76]
4803:..\..\FreeRTOS/tasks.c **** 			{
 3826              		.loc 1 4803 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 173


 3827 0020 6A1E     		subs	r2, r5, #1
 3828 0022 032A     		cmp	r2, #3
 3829 0024 15D8     		bhi	.L343
 3830 0026 DFE802F0 		tbb	[pc, r2]
 3831              	.L338:
 3832 002a 02       		.byte	(.L337-.L338)/2
 3833 002b 07       		.byte	(.L339-.L338)/2
 3834 002c 0C       		.byte	(.L340-.L338)/2
 3835 002d 0F       		.byte	(.L341-.L338)/2
 3836              		.p2align 1
 3837              	.L337:
4806:..\..\FreeRTOS/tasks.c **** 					break;
 3838              		.loc 1 4806 0
 3839 002e A26C     		ldr	r2, [r4, #72]
 3840 0030 1743     		orrs	r7, r7, r2
 3841              	.LVL361:
 3842 0032 A764     		str	r7, [r4, #72]
4786:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3843              		.loc 1 4786 0
 3844 0034 0125     		movs	r5, #1
4807:..\..\FreeRTOS/tasks.c **** 
 3845              		.loc 1 4807 0
 3846 0036 0FE0     		b	.L336
 3847              	.LVL362:
 3848              	.L339:
4810:..\..\FreeRTOS/tasks.c **** 					break;
 3849              		.loc 1 4810 0
 3850 0038 A26C     		ldr	r2, [r4, #72]
 3851 003a 0132     		adds	r2, r2, #1
 3852 003c A264     		str	r2, [r4, #72]
4786:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3853              		.loc 1 4786 0
 3854 003e 0125     		movs	r5, #1
4811:..\..\FreeRTOS/tasks.c **** 
 3855              		.loc 1 4811 0
 3856 0040 0AE0     		b	.L336
 3857              	.L340:
4814:..\..\FreeRTOS/tasks.c **** 					break;
 3858              		.loc 1 4814 0
 3859 0042 A764     		str	r7, [r4, #72]
4786:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3860              		.loc 1 4786 0
 3861 0044 0125     		movs	r5, #1
4815:..\..\FreeRTOS/tasks.c **** 
 3862              		.loc 1 4815 0
 3863 0046 07E0     		b	.L336
 3864              	.L341:
4818:..\..\FreeRTOS/tasks.c **** 					{
 3865              		.loc 1 4818 0
 3866 0048 022B     		cmp	r3, #2
 3867 004a 04D0     		beq	.L344
4820:..\..\FreeRTOS/tasks.c **** 					}
 3868              		.loc 1 4820 0
 3869 004c A764     		str	r7, [r4, #72]
4786:..\..\FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3870              		.loc 1 4786 0
 3871 004e 0125     		movs	r5, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 174


 3872 0050 02E0     		b	.L336
 3873              	.L343:
 3874 0052 0125     		movs	r5, #1
 3875 0054 00E0     		b	.L336
 3876              	.L344:
4825:..\..\FreeRTOS/tasks.c **** 					}
 3877              		.loc 1 4825 0
 3878 0056 0025     		movs	r5, #0
 3879              	.LVL363:
 3880              	.L336:
4847:..\..\FreeRTOS/tasks.c **** 			{
 3881              		.loc 1 4847 0
 3882 0058 012B     		cmp	r3, #1
 3883 005a 24D1     		bne	.L342
4849:..\..\FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3884              		.loc 1 4849 0
 3885 005c 271D     		adds	r7, r4, #4
 3886 005e 3846     		mov	r0, r7
 3887 0060 FFF7FEFF 		bl	uxListRemove
 3888              	.LVL364:
4850:..\..\FreeRTOS/tasks.c **** 
 3889              		.loc 1 4850 0
 3890 0064 E36A     		ldr	r3, [r4, #44]
 3891 0066 0122     		movs	r2, #1
 3892 0068 02FA03F1 		lsl	r1, r2, r3
 3893 006c 104E     		ldr	r6, .L346
 3894              	.LVL365:
 3895 006e D6F8E420 		ldr	r2, [r6, #228]
 3896 0072 0A43     		orrs	r2, r2, r1
 3897 0074 C6F8E420 		str	r2, [r6, #228]
 3898 0078 06F13000 		add	r0, r6, #48
 3899 007c 03EB8303 		add	r3, r3, r3, lsl #2
 3900 0080 9A00     		lsls	r2, r3, #2
 3901 0082 3946     		mov	r1, r7
 3902 0084 1044     		add	r0, r0, r2
 3903 0086 FFF7FEFF 		bl	vListInsertEnd
 3904              	.LVL366:
4871:..\..\FreeRTOS/tasks.c **** 				{
 3905              		.loc 1 4871 0
 3906 008a E26A     		ldr	r2, [r4, #44]
 3907 008c D6F8D830 		ldr	r3, [r6, #216]
 3908 0090 DB6A     		ldr	r3, [r3, #44]
 3909 0092 9A42     		cmp	r2, r3
 3910 0094 07D9     		bls	.L342
4875:..\..\FreeRTOS/tasks.c **** 				}
 3911              		.loc 1 4875 0
 3912 0096 4FF08052 		mov	r2, #268435456
 3913 009a 064B     		ldr	r3, .L346+4
 3914 009c 1A60     		str	r2, [r3]
 3915              		.syntax unified
 3916              	@ 4875 "..\..\FreeRTOS\tasks.c" 1
 3917 009e BFF34F8F 		dsb
 3918              	@ 0 "" 2
 3919              	@ 4875 "..\..\FreeRTOS\tasks.c" 1
 3920 00a2 BFF36F8F 		isb
 3921              	@ 0 "" 2
 3922              		.thumb
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 175


 3923              		.syntax unified
 3924              	.L342:
4887:..\..\FreeRTOS/tasks.c **** 
 3925              		.loc 1 4887 0
 3926 00a6 FFF7FEFF 		bl	vPortExitCritical
 3927              	.LVL367:
4890:..\..\FreeRTOS/tasks.c **** 
 3928              		.loc 1 4890 0
 3929 00aa 2846     		mov	r0, r5
 3930 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3931              	.LVL368:
 3932              	.L347:
 3933 00ae 00BF     		.align	2
 3934              	.L346:
 3935 00b0 00000000 		.word	.LANCHOR0
 3936 00b4 04ED00E0 		.word	-536810236
 3937              		.cfi_endproc
 3938              	.LFE116:
 3939              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3940              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3941              		.align	2
 3942              		.global	xTaskGenericNotifyFromISR
 3943              		.thumb
 3944              		.thumb_func
 3945              		.type	xTaskGenericNotifyFromISR, %function
 3946              	xTaskGenericNotifyFromISR:
 3947              	.LFB117:
4898:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 3948              		.loc 1 4898 0
 3949              		.cfi_startproc
 3950              		@ args = 4, pretend = 0, frame = 0
 3951              		@ frame_needed = 0, uses_anonymous_args = 0
 3952              	.LVL369:
 3953 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3954              		.cfi_def_cfa_offset 24
 3955              		.cfi_offset 3, -24
 3956              		.cfi_offset 4, -20
 3957              		.cfi_offset 5, -16
 3958              		.cfi_offset 6, -12
 3959              		.cfi_offset 7, -8
 3960              		.cfi_offset 14, -4
 3961              	.LVL370:
 3962              	.LBB53:
 3963              	.LBB54:
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 3964              		.loc 2 213 0
 3965              		.syntax unified
 3966              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 3967 0002 EFF31185 			mrs r5, basepri											
 3968 0006 4FF0A004 		mov r4, #160												
 3969 000a 84F31188 		msr basepri, r4											
 3970 000e BFF36F8F 		isb														
 3971 0012 BFF34F8F 		dsb														
 3972              	
 3973              	@ 0 "" 2
 3974              		.thumb
 3975              		.syntax unified
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 176


 3976              	.LBE54:
 3977              	.LBE53:
4928:..\..\FreeRTOS/tasks.c **** 			{
 3978              		.loc 1 4928 0
 3979 0016 0BB1     		cbz	r3, .L349
4930:..\..\FreeRTOS/tasks.c **** 			}
 3980              		.loc 1 4930 0
 3981 0018 846C     		ldr	r4, [r0, #72]
 3982 001a 1C60     		str	r4, [r3]
 3983              	.L349:
4933:..\..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3984              		.loc 1 4933 0
 3985 001c 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
 3986              	.LVL371:
 3987 0020 DBB2     		uxtb	r3, r3
 3988              	.LVL372:
4934:..\..\FreeRTOS/tasks.c **** 
 3989              		.loc 1 4934 0
 3990 0022 0224     		movs	r4, #2
 3991 0024 80F84C40 		strb	r4, [r0, #76]
4936:..\..\FreeRTOS/tasks.c **** 			{
 3992              		.loc 1 4936 0
 3993 0028 013A     		subs	r2, r2, #1
 3994              	.LVL373:
 3995 002a 032A     		cmp	r2, #3
 3996 002c 15D8     		bhi	.L360
 3997 002e DFE802F0 		tbb	[pc, r2]
 3998              	.L352:
 3999 0032 02       		.byte	(.L351-.L352)/2
 4000 0033 07       		.byte	(.L353-.L352)/2
 4001 0034 0C       		.byte	(.L354-.L352)/2
 4002 0035 0F       		.byte	(.L355-.L352)/2
 4003              		.p2align 1
 4004              	.L351:
4939:..\..\FreeRTOS/tasks.c **** 					break;
 4005              		.loc 1 4939 0
 4006 0036 826C     		ldr	r2, [r0, #72]
 4007 0038 1143     		orrs	r1, r1, r2
 4008              	.LVL374:
 4009 003a 8164     		str	r1, [r0, #72]
4901:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4010              		.loc 1 4901 0
 4011 003c 0124     		movs	r4, #1
4940:..\..\FreeRTOS/tasks.c **** 
 4012              		.loc 1 4940 0
 4013 003e 0FE0     		b	.L350
 4014              	.LVL375:
 4015              	.L353:
4943:..\..\FreeRTOS/tasks.c **** 					break;
 4016              		.loc 1 4943 0
 4017 0040 826C     		ldr	r2, [r0, #72]
 4018 0042 0132     		adds	r2, r2, #1
 4019 0044 8264     		str	r2, [r0, #72]
4901:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4020              		.loc 1 4901 0
 4021 0046 0124     		movs	r4, #1
4944:..\..\FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 177


 4022              		.loc 1 4944 0
 4023 0048 0AE0     		b	.L350
 4024              	.L354:
4947:..\..\FreeRTOS/tasks.c **** 					break;
 4025              		.loc 1 4947 0
 4026 004a 8164     		str	r1, [r0, #72]
4901:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4027              		.loc 1 4901 0
 4028 004c 0124     		movs	r4, #1
4948:..\..\FreeRTOS/tasks.c **** 
 4029              		.loc 1 4948 0
 4030 004e 07E0     		b	.L350
 4031              	.L355:
4951:..\..\FreeRTOS/tasks.c **** 					{
 4032              		.loc 1 4951 0
 4033 0050 022B     		cmp	r3, #2
 4034 0052 04D0     		beq	.L361
4953:..\..\FreeRTOS/tasks.c **** 					}
 4035              		.loc 1 4953 0
 4036 0054 8164     		str	r1, [r0, #72]
4901:..\..\FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4037              		.loc 1 4901 0
 4038 0056 0124     		movs	r4, #1
 4039 0058 02E0     		b	.L350
 4040              	.L360:
 4041 005a 0124     		movs	r4, #1
 4042 005c 00E0     		b	.L350
 4043              	.L361:
4958:..\..\FreeRTOS/tasks.c **** 					}
 4044              		.loc 1 4958 0
 4045 005e 0024     		movs	r4, #0
 4046              	.LVL376:
 4047              	.L350:
4979:..\..\FreeRTOS/tasks.c **** 			{
 4048              		.loc 1 4979 0
 4049 0060 012B     		cmp	r3, #1
 4050 0062 30D1     		bne	.L356
 4051 0064 0646     		mov	r6, r0
4984:..\..\FreeRTOS/tasks.c **** 				{
 4052              		.loc 1 4984 0
 4053 0066 1A4B     		ldr	r3, .L363
 4054              	.LVL377:
 4055 0068 D3F8F030 		ldr	r3, [r3, #240]
 4056 006c B3B9     		cbnz	r3, .L357
4986:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4057              		.loc 1 4986 0
 4058 006e 071D     		adds	r7, r0, #4
 4059 0070 3846     		mov	r0, r7
 4060              	.LVL378:
 4061 0072 FFF7FEFF 		bl	uxListRemove
 4062              	.LVL379:
4987:..\..\FreeRTOS/tasks.c **** 				}
 4063              		.loc 1 4987 0
 4064 0076 F36A     		ldr	r3, [r6, #44]
 4065 0078 0122     		movs	r2, #1
 4066 007a 02FA03F1 		lsl	r1, r2, r3
 4067 007e 1448     		ldr	r0, .L363
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 178


 4068 0080 D0F8E420 		ldr	r2, [r0, #228]
 4069 0084 0A43     		orrs	r2, r2, r1
 4070 0086 C0F8E420 		str	r2, [r0, #228]
 4071 008a 3030     		adds	r0, r0, #48
 4072 008c 03EB8303 		add	r3, r3, r3, lsl #2
 4073 0090 9A00     		lsls	r2, r3, #2
 4074 0092 3946     		mov	r1, r7
 4075 0094 1044     		add	r0, r0, r2
 4076 0096 FFF7FEFF 		bl	vListInsertEnd
 4077              	.LVL380:
 4078 009a 04E0     		b	.L358
 4079              	.LVL381:
 4080              	.L357:
4993:..\..\FreeRTOS/tasks.c **** 				}
 4081              		.loc 1 4993 0
 4082 009c 00F11801 		add	r1, r0, #24
 4083 00a0 0C48     		ldr	r0, .L363+4
 4084              	.LVL382:
 4085 00a2 FFF7FEFF 		bl	vListInsertEnd
 4086              	.LVL383:
 4087              	.L358:
4996:..\..\FreeRTOS/tasks.c **** 				{
 4088              		.loc 1 4996 0
 4089 00a6 F26A     		ldr	r2, [r6, #44]
 4090 00a8 094B     		ldr	r3, .L363
 4091 00aa D3F8D830 		ldr	r3, [r3, #216]
 4092 00ae DB6A     		ldr	r3, [r3, #44]
 4093 00b0 9A42     		cmp	r2, r3
 4094 00b2 08D9     		bls	.L356
5000:..\..\FreeRTOS/tasks.c **** 					{
 4095              		.loc 1 5000 0
 4096 00b4 069B     		ldr	r3, [sp, #24]
 4097 00b6 13B1     		cbz	r3, .L359
5002:..\..\FreeRTOS/tasks.c **** 					}
 4098              		.loc 1 5002 0
 4099 00b8 0123     		movs	r3, #1
 4100 00ba 069A     		ldr	r2, [sp, #24]
 4101 00bc 1360     		str	r3, [r2]
 4102              	.L359:
5008:..\..\FreeRTOS/tasks.c **** 				}
 4103              		.loc 1 5008 0
 4104 00be 0122     		movs	r2, #1
 4105 00c0 034B     		ldr	r3, .L363
 4106 00c2 C3F8FC20 		str	r2, [r3, #252]
 4107              	.LVL384:
 4108              	.L356:
 4109              	.LBB55:
 4110              	.LBB56:
 4111              		.loc 2 231 0
 4112              		.syntax unified
 4113              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 4114 00c6 85F31188 			msr basepri, r5	
 4115              	@ 0 "" 2
 4116              	.LVL385:
 4117              		.thumb
 4118              		.syntax unified
 4119              	.LBE56:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 179


 4120              	.LBE55:
5019:..\..\FreeRTOS/tasks.c **** 
 4121              		.loc 1 5019 0
 4122 00ca 2046     		mov	r0, r4
 4123 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4124              	.LVL386:
 4125              	.L364:
 4126 00ce 00BF     		.align	2
 4127              	.L363:
 4128 00d0 00000000 		.word	.LANCHOR0
 4129 00d4 14000000 		.word	.LANCHOR0+20
 4130              		.cfi_endproc
 4131              	.LFE117:
 4132              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4133              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4134              		.align	2
 4135              		.global	vTaskNotifyGiveFromISR
 4136              		.thumb
 4137              		.thumb_func
 4138              		.type	vTaskNotifyGiveFromISR, %function
 4139              	vTaskNotifyGiveFromISR:
 4140              	.LFB118:
5027:..\..\FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4141              		.loc 1 5027 0
 4142              		.cfi_startproc
 4143              		@ args = 0, pretend = 0, frame = 0
 4144              		@ frame_needed = 0, uses_anonymous_args = 0
 4145              	.LVL387:
 4146 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4147              		.cfi_def_cfa_offset 24
 4148              		.cfi_offset 3, -24
 4149              		.cfi_offset 4, -20
 4150              		.cfi_offset 5, -16
 4151              		.cfi_offset 6, -12
 4152              		.cfi_offset 7, -8
 4153              		.cfi_offset 14, -4
 4154              	.LVL388:
 4155              	.LBB57:
 4156              	.LBB58:
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4157              		.loc 2 213 0
 4158              		.syntax unified
 4159              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 4160 0002 EFF31185 			mrs r5, basepri											
 4161 0006 4FF0A003 		mov r3, #160												
 4162 000a 83F31188 		msr basepri, r3											
 4163 000e BFF36F8F 		isb														
 4164 0012 BFF34F8F 		dsb														
 4165              	
 4166              	@ 0 "" 2
 4167              		.thumb
 4168              		.syntax unified
 4169              	.LBE58:
 4170              	.LBE57:
5056:..\..\FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4171              		.loc 1 5056 0
 4172 0016 90F84C30 		ldrb	r3, [r0, #76]	@ zero_extendqisi2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 180


 4173 001a DBB2     		uxtb	r3, r3
 4174              	.LVL389:
5057:..\..\FreeRTOS/tasks.c **** 
 4175              		.loc 1 5057 0
 4176 001c 0222     		movs	r2, #2
 4177 001e 80F84C20 		strb	r2, [r0, #76]
5061:..\..\FreeRTOS/tasks.c **** 
 4178              		.loc 1 5061 0
 4179 0022 826C     		ldr	r2, [r0, #72]
 4180 0024 0132     		adds	r2, r2, #1
 4181 0026 8264     		str	r2, [r0, #72]
5067:..\..\FreeRTOS/tasks.c **** 			{
 4182              		.loc 1 5067 0
 4183 0028 012B     		cmp	r3, #1
 4184 002a 2FD1     		bne	.L366
 4185 002c 0E46     		mov	r6, r1
 4186 002e 0446     		mov	r4, r0
5072:..\..\FreeRTOS/tasks.c **** 				{
 4187              		.loc 1 5072 0
 4188 0030 184B     		ldr	r3, .L371
 4189              	.LVL390:
 4190 0032 D3F8F030 		ldr	r3, [r3, #240]
 4191 0036 B3B9     		cbnz	r3, .L367
5074:..\..\FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4192              		.loc 1 5074 0
 4193 0038 071D     		adds	r7, r0, #4
 4194 003a 3846     		mov	r0, r7
 4195              	.LVL391:
 4196 003c FFF7FEFF 		bl	uxListRemove
 4197              	.LVL392:
5075:..\..\FreeRTOS/tasks.c **** 				}
 4198              		.loc 1 5075 0
 4199 0040 E36A     		ldr	r3, [r4, #44]
 4200 0042 0122     		movs	r2, #1
 4201 0044 02FA03F1 		lsl	r1, r2, r3
 4202 0048 1248     		ldr	r0, .L371
 4203 004a D0F8E420 		ldr	r2, [r0, #228]
 4204 004e 0A43     		orrs	r2, r2, r1
 4205 0050 C0F8E420 		str	r2, [r0, #228]
 4206 0054 3030     		adds	r0, r0, #48
 4207 0056 03EB8303 		add	r3, r3, r3, lsl #2
 4208 005a 9A00     		lsls	r2, r3, #2
 4209 005c 3946     		mov	r1, r7
 4210 005e 1044     		add	r0, r0, r2
 4211 0060 FFF7FEFF 		bl	vListInsertEnd
 4212              	.LVL393:
 4213 0064 04E0     		b	.L368
 4214              	.LVL394:
 4215              	.L367:
5081:..\..\FreeRTOS/tasks.c **** 				}
 4216              		.loc 1 5081 0
 4217 0066 00F11801 		add	r1, r0, #24
 4218              	.LVL395:
 4219 006a 0B48     		ldr	r0, .L371+4
 4220              	.LVL396:
 4221 006c FFF7FEFF 		bl	vListInsertEnd
 4222              	.LVL397:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 181


 4223              	.L368:
5084:..\..\FreeRTOS/tasks.c **** 				{
 4224              		.loc 1 5084 0
 4225 0070 E26A     		ldr	r2, [r4, #44]
 4226 0072 084B     		ldr	r3, .L371
 4227 0074 D3F8D830 		ldr	r3, [r3, #216]
 4228 0078 DB6A     		ldr	r3, [r3, #44]
 4229 007a 9A42     		cmp	r2, r3
 4230 007c 06D9     		bls	.L366
5088:..\..\FreeRTOS/tasks.c **** 					{
 4231              		.loc 1 5088 0
 4232 007e 0EB1     		cbz	r6, .L369
5090:..\..\FreeRTOS/tasks.c **** 					}
 4233              		.loc 1 5090 0
 4234 0080 0123     		movs	r3, #1
 4235 0082 3360     		str	r3, [r6]
 4236              	.L369:
5096:..\..\FreeRTOS/tasks.c **** 				}
 4237              		.loc 1 5096 0
 4238 0084 0122     		movs	r2, #1
 4239 0086 034B     		ldr	r3, .L371
 4240 0088 C3F8FC20 		str	r2, [r3, #252]
 4241              	.LVL398:
 4242              	.L366:
 4243              	.LBB59:
 4244              	.LBB60:
 4245              		.loc 2 231 0
 4246              		.syntax unified
 4247              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 4248 008c 85F31188 			msr basepri, r5	
 4249              	@ 0 "" 2
 4250              	.LVL399:
 4251              		.thumb
 4252              		.syntax unified
 4253 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4254              	.L372:
 4255 0092 00BF     		.align	2
 4256              	.L371:
 4257 0094 00000000 		.word	.LANCHOR0
 4258 0098 14000000 		.word	.LANCHOR0+20
 4259              	.LBE60:
 4260              	.LBE59:
 4261              		.cfi_endproc
 4262              	.LFE118:
 4263              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4264              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4265              		.align	2
 4266              		.global	xTaskNotifyStateClear
 4267              		.thumb
 4268              		.thumb_func
 4269              		.type	xTaskNotifyStateClear, %function
 4270              	xTaskNotifyStateClear:
 4271              	.LFB119:
5113:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 4272              		.loc 1 5113 0
 4273              		.cfi_startproc
 4274              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 182


 4275              		@ frame_needed = 0, uses_anonymous_args = 0
 4276              	.LVL400:
 4277 0000 10B5     		push	{r4, lr}
 4278              		.cfi_def_cfa_offset 8
 4279              		.cfi_offset 4, -8
 4280              		.cfi_offset 14, -4
5119:..\..\FreeRTOS/tasks.c **** 
 4281              		.loc 1 5119 0
 4282 0002 0446     		mov	r4, r0
 4283 0004 10B9     		cbnz	r0, .L374
5119:..\..\FreeRTOS/tasks.c **** 
 4284              		.loc 1 5119 0 is_stmt 0 discriminator 1
 4285 0006 0A4B     		ldr	r3, .L378
 4286 0008 D3F8D840 		ldr	r4, [r3, #216]
 4287              	.LVL401:
 4288              	.L374:
5121:..\..\FreeRTOS/tasks.c **** 		{
 4289              		.loc 1 5121 0 is_stmt 1 discriminator 4
 4290 000c FFF7FEFF 		bl	vPortEnterCritical
 4291              	.LVL402:
5123:..\..\FreeRTOS/tasks.c **** 			{
 4292              		.loc 1 5123 0 discriminator 4
 4293 0010 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4294 0014 DBB2     		uxtb	r3, r3
 4295 0016 022B     		cmp	r3, #2
 4296 0018 04D1     		bne	.L376
5125:..\..\FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 4297              		.loc 1 5125 0
 4298 001a 0023     		movs	r3, #0
 4299 001c 84F84C30 		strb	r3, [r4, #76]
 4300              	.LVL403:
5126:..\..\FreeRTOS/tasks.c **** 			}
 4301              		.loc 1 5126 0
 4302 0020 0124     		movs	r4, #1
 4303              	.LVL404:
 4304 0022 00E0     		b	.L375
 4305              	.LVL405:
 4306              	.L376:
5130:..\..\FreeRTOS/tasks.c **** 			}
 4307              		.loc 1 5130 0
 4308 0024 0024     		movs	r4, #0
 4309              	.LVL406:
 4310              	.L375:
5133:..\..\FreeRTOS/tasks.c **** 
 4311              		.loc 1 5133 0
 4312 0026 FFF7FEFF 		bl	vPortExitCritical
 4313              	.LVL407:
5136:..\..\FreeRTOS/tasks.c **** 
 4314              		.loc 1 5136 0
 4315 002a 2046     		mov	r0, r4
 4316 002c 10BD     		pop	{r4, pc}
 4317              	.LVL408:
 4318              	.L379:
 4319 002e 00BF     		.align	2
 4320              	.L378:
 4321 0030 00000000 		.word	.LANCHOR0
 4322              		.cfi_endproc
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 183


 4323              	.LFE119:
 4324              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4325              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 4326              		.align	2
 4327              		.global	ulTaskNotifyValueClear
 4328              		.thumb
 4329              		.thumb_func
 4330              		.type	ulTaskNotifyValueClear, %function
 4331              	ulTaskNotifyValueClear:
 4332              	.LFB120:
5144:..\..\FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 4333              		.loc 1 5144 0
 4334              		.cfi_startproc
 4335              		@ args = 0, pretend = 0, frame = 0
 4336              		@ frame_needed = 0, uses_anonymous_args = 0
 4337              	.LVL409:
 4338 0000 70B5     		push	{r4, r5, r6, lr}
 4339              		.cfi_def_cfa_offset 16
 4340              		.cfi_offset 4, -16
 4341              		.cfi_offset 5, -12
 4342              		.cfi_offset 6, -8
 4343              		.cfi_offset 14, -4
 4344 0002 0E46     		mov	r6, r1
5150:..\..\FreeRTOS/tasks.c **** 
 4345              		.loc 1 5150 0
 4346 0004 0446     		mov	r4, r0
 4347 0006 10B9     		cbnz	r0, .L381
5150:..\..\FreeRTOS/tasks.c **** 
 4348              		.loc 1 5150 0 is_stmt 0 discriminator 1
 4349 0008 084B     		ldr	r3, .L383
 4350 000a D3F8D840 		ldr	r4, [r3, #216]
 4351              	.LVL410:
 4352              	.L381:
5152:..\..\FreeRTOS/tasks.c **** 		{
 4353              		.loc 1 5152 0 is_stmt 1 discriminator 4
 4354 000e FFF7FEFF 		bl	vPortEnterCritical
 4355              	.LVL411:
5156:..\..\FreeRTOS/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 4356              		.loc 1 5156 0 discriminator 4
 4357 0012 064B     		ldr	r3, .L383
 4358 0014 D3F8D830 		ldr	r3, [r3, #216]
 4359 0018 9D6C     		ldr	r5, [r3, #72]
 4360              	.LVL412:
5157:..\..\FreeRTOS/tasks.c **** 		}
 4361              		.loc 1 5157 0 discriminator 4
 4362 001a A16C     		ldr	r1, [r4, #72]
 4363 001c 21EA0601 		bic	r1, r1, r6
 4364 0020 A164     		str	r1, [r4, #72]
5159:..\..\FreeRTOS/tasks.c **** 
 4365              		.loc 1 5159 0 discriminator 4
 4366 0022 FFF7FEFF 		bl	vPortExitCritical
 4367              	.LVL413:
5162:..\..\FreeRTOS/tasks.c **** 
 4368              		.loc 1 5162 0 discriminator 4
 4369 0026 2846     		mov	r0, r5
 4370 0028 70BD     		pop	{r4, r5, r6, pc}
 4371              	.LVL414:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 184


 4372              	.L384:
 4373 002a 00BF     		.align	2
 4374              	.L383:
 4375 002c 00000000 		.word	.LANCHOR0
 4376              		.cfi_endproc
 4377              	.LFE120:
 4378              		.size	ulTaskNotifyValueClear, .-ulTaskNotifyValueClear
 4379              		.global	pxCurrentTCB
 4380              		.section	.rodata.str1.4,"aMS",%progbits,1
 4381              		.align	2
 4382              	.LC0:
 4383 0000 49444C45 		.ascii	"IDLE\000"
 4383      00
 4384              		.bss
 4385              		.align	2
 4386              		.set	.LANCHOR0,. + 0
 4387              		.type	xSuspendedTaskList, %object
 4388              		.size	xSuspendedTaskList, 20
 4389              	xSuspendedTaskList:
 4390 0000 00000000 		.space	20
 4390      00000000 
 4390      00000000 
 4390      00000000 
 4390      00000000 
 4391              		.type	xPendingReadyList, %object
 4392              		.size	xPendingReadyList, 20
 4393              	xPendingReadyList:
 4394 0014 00000000 		.space	20
 4394      00000000 
 4394      00000000 
 4394      00000000 
 4394      00000000 
 4395              		.type	pxDelayedTaskList, %object
 4396              		.size	pxDelayedTaskList, 4
 4397              	pxDelayedTaskList:
 4398 0028 00000000 		.space	4
 4399              		.type	xNextTaskUnblockTime, %object
 4400              		.size	xNextTaskUnblockTime, 4
 4401              	xNextTaskUnblockTime:
 4402 002c 00000000 		.space	4
 4403              		.type	pxReadyTasksLists, %object
 4404              		.size	pxReadyTasksLists, 100
 4405              	pxReadyTasksLists:
 4406 0030 00000000 		.space	100
 4406      00000000 
 4406      00000000 
 4406      00000000 
 4406      00000000 
 4407              		.type	xDelayedTaskList1, %object
 4408              		.size	xDelayedTaskList1, 20
 4409              	xDelayedTaskList1:
 4410 0094 00000000 		.space	20
 4410      00000000 
 4410      00000000 
 4410      00000000 
 4410      00000000 
 4411              		.type	xDelayedTaskList2, %object
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 185


 4412              		.size	xDelayedTaskList2, 20
 4413              	xDelayedTaskList2:
 4414 00a8 00000000 		.space	20
 4414      00000000 
 4414      00000000 
 4414      00000000 
 4414      00000000 
 4415              		.type	xTasksWaitingTermination, %object
 4416              		.size	xTasksWaitingTermination, 20
 4417              	xTasksWaitingTermination:
 4418 00bc 00000000 		.space	20
 4418      00000000 
 4418      00000000 
 4418      00000000 
 4418      00000000 
 4419              		.type	pxOverflowDelayedTaskList, %object
 4420              		.size	pxOverflowDelayedTaskList, 4
 4421              	pxOverflowDelayedTaskList:
 4422 00d0 00000000 		.space	4
 4423              		.type	uxCurrentNumberOfTasks, %object
 4424              		.size	uxCurrentNumberOfTasks, 4
 4425              	uxCurrentNumberOfTasks:
 4426 00d4 00000000 		.space	4
 4427              		.type	pxCurrentTCB, %object
 4428              		.size	pxCurrentTCB, 4
 4429              	pxCurrentTCB:
 4430 00d8 00000000 		.space	4
 4431              		.type	xSchedulerRunning, %object
 4432              		.size	xSchedulerRunning, 4
 4433              	xSchedulerRunning:
 4434 00dc 00000000 		.space	4
 4435              		.type	uxTaskNumber, %object
 4436              		.size	uxTaskNumber, 4
 4437              	uxTaskNumber:
 4438 00e0 00000000 		.space	4
 4439              		.type	uxTopReadyPriority, %object
 4440              		.size	uxTopReadyPriority, 4
 4441              	uxTopReadyPriority:
 4442 00e4 00000000 		.space	4
 4443              		.type	uxDeletedTasksWaitingCleanUp, %object
 4444              		.size	uxDeletedTasksWaitingCleanUp, 4
 4445              	uxDeletedTasksWaitingCleanUp:
 4446 00e8 00000000 		.space	4
 4447              		.type	xTickCount, %object
 4448              		.size	xTickCount, 4
 4449              	xTickCount:
 4450 00ec 00000000 		.space	4
 4451              		.type	uxSchedulerSuspended, %object
 4452              		.size	uxSchedulerSuspended, 4
 4453              	uxSchedulerSuspended:
 4454 00f0 00000000 		.space	4
 4455              		.type	xIdleTaskHandle, %object
 4456              		.size	xIdleTaskHandle, 4
 4457              	xIdleTaskHandle:
 4458 00f4 00000000 		.space	4
 4459              		.type	xNumOfOverflows, %object
 4460              		.size	xNumOfOverflows, 4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 186


 4461              	xNumOfOverflows:
 4462 00f8 00000000 		.space	4
 4463              		.type	xYieldPending, %object
 4464              		.size	xYieldPending, 4
 4465              	xYieldPending:
 4466 00fc 00000000 		.space	4
 4467              		.type	xPendedTicks, %object
 4468              		.size	xPendedTicks, 4
 4469              	xPendedTicks:
 4470 0100 00000000 		.space	4
 4471              		.text
 4472              	.Letext0:
 4473              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4474              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4475              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 4476              		.file 6 "..\\..\\FreeRTOS\\include/projdefs.h"
 4477              		.file 7 "..\\..\\FreeRTOS\\include/list.h"
 4478              		.file 8 "..\\..\\FreeRTOS\\include/task.h"
 4479              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 4480              		.file 10 "..\\..\\FreeRTOS\\include/portable.h"
 4481              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4
 4482              		.section	.debug_info,"",%progbits
 4483              	.Ldebug_info0:
 4484 0000 A8200000 		.4byte	0x20a8
 4485 0004 0400     		.2byte	0x4
 4486 0006 00000000 		.4byte	.Ldebug_abbrev0
 4487 000a 04       		.byte	0x4
 4488 000b 01       		.uleb128 0x1
 4489 000c 4E0A0000 		.4byte	.LASF244
 4490 0010 0C       		.byte	0xc
 4491 0011 9A040000 		.4byte	.LASF245
 4492 0015 DF030000 		.4byte	.LASF246
 4493 0019 40000000 		.4byte	.Ldebug_ranges0+0x40
 4494 001d 00000000 		.4byte	0
 4495 0021 00000000 		.4byte	.Ldebug_line0
 4496 0025 02       		.uleb128 0x2
 4497 0026 50000000 		.4byte	.LASF4
 4498 002a 03       		.byte	0x3
 4499 002b D8       		.byte	0xd8
 4500 002c 30000000 		.4byte	0x30
 4501 0030 03       		.uleb128 0x3
 4502 0031 04       		.byte	0x4
 4503 0032 07       		.byte	0x7
 4504 0033 310C0000 		.4byte	.LASF0
 4505 0037 04       		.uleb128 0x4
 4506 0038 04       		.byte	0x4
 4507 0039 05       		.byte	0x5
 4508 003a 696E7400 		.ascii	"int\000"
 4509 003e 03       		.uleb128 0x3
 4510 003f 08       		.byte	0x8
 4511 0040 05       		.byte	0x5
 4512 0041 8C010000 		.4byte	.LASF1
 4513 0045 03       		.uleb128 0x3
 4514 0046 08       		.byte	0x8
 4515 0047 04       		.byte	0x4
 4516 0048 40070000 		.4byte	.LASF2
 4517 004c 03       		.uleb128 0x3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 187


 4518 004d 01       		.byte	0x1
 4519 004e 06       		.byte	0x6
 4520 004f 9A010000 		.4byte	.LASF3
 4521 0053 02       		.uleb128 0x2
 4522 0054 B7000000 		.4byte	.LASF5
 4523 0058 04       		.byte	0x4
 4524 0059 1D       		.byte	0x1d
 4525 005a 5E000000 		.4byte	0x5e
 4526 005e 03       		.uleb128 0x3
 4527 005f 01       		.byte	0x1
 4528 0060 08       		.byte	0x8
 4529 0061 75090000 		.4byte	.LASF6
 4530 0065 03       		.uleb128 0x3
 4531 0066 02       		.byte	0x2
 4532 0067 05       		.byte	0x5
 4533 0068 DC020000 		.4byte	.LASF7
 4534 006c 02       		.uleb128 0x2
 4535 006d 86030000 		.4byte	.LASF8
 4536 0071 04       		.byte	0x4
 4537 0072 2B       		.byte	0x2b
 4538 0073 77000000 		.4byte	0x77
 4539 0077 03       		.uleb128 0x3
 4540 0078 02       		.byte	0x2
 4541 0079 07       		.byte	0x7
 4542 007a 86050000 		.4byte	.LASF9
 4543 007e 02       		.uleb128 0x2
 4544 007f 7D0C0000 		.4byte	.LASF10
 4545 0083 04       		.byte	0x4
 4546 0084 3F       		.byte	0x3f
 4547 0085 89000000 		.4byte	0x89
 4548 0089 03       		.uleb128 0x3
 4549 008a 04       		.byte	0x4
 4550 008b 05       		.byte	0x5
 4551 008c 3F020000 		.4byte	.LASF11
 4552 0090 02       		.uleb128 0x2
 4553 0091 67040000 		.4byte	.LASF12
 4554 0095 04       		.byte	0x4
 4555 0096 41       		.byte	0x41
 4556 0097 9B000000 		.4byte	0x9b
 4557 009b 03       		.uleb128 0x3
 4558 009c 04       		.byte	0x4
 4559 009d 07       		.byte	0x7
 4560 009e 18050000 		.4byte	.LASF13
 4561 00a2 03       		.uleb128 0x3
 4562 00a3 08       		.byte	0x8
 4563 00a4 07       		.byte	0x7
 4564 00a5 01020000 		.4byte	.LASF14
 4565 00a9 03       		.uleb128 0x3
 4566 00aa 04       		.byte	0x4
 4567 00ab 07       		.byte	0x7
 4568 00ac 1A070000 		.4byte	.LASF15
 4569 00b0 05       		.uleb128 0x5
 4570 00b1 04       		.byte	0x4
 4571 00b2 06       		.uleb128 0x6
 4572 00b3 04       		.byte	0x4
 4573 00b4 B8000000 		.4byte	0xb8
 4574 00b8 03       		.uleb128 0x3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 188


 4575 00b9 01       		.byte	0x1
 4576 00ba 08       		.byte	0x8
 4577 00bb D50B0000 		.4byte	.LASF16
 4578 00bf 06       		.uleb128 0x6
 4579 00c0 04       		.byte	0x4
 4580 00c1 C5000000 		.4byte	0xc5
 4581 00c5 07       		.uleb128 0x7
 4582 00c6 B8000000 		.4byte	0xb8
 4583 00ca 02       		.uleb128 0x2
 4584 00cb 3B0E0000 		.4byte	.LASF17
 4585 00cf 05       		.byte	0x5
 4586 00d0 18       		.byte	0x18
 4587 00d1 53000000 		.4byte	0x53
 4588 00d5 02       		.uleb128 0x2
 4589 00d6 08030000 		.4byte	.LASF18
 4590 00da 05       		.byte	0x5
 4591 00db 24       		.byte	0x24
 4592 00dc 6C000000 		.4byte	0x6c
 4593 00e0 02       		.uleb128 0x2
 4594 00e1 6D090000 		.4byte	.LASF19
 4595 00e5 05       		.byte	0x5
 4596 00e6 2C       		.byte	0x2c
 4597 00e7 7E000000 		.4byte	0x7e
 4598 00eb 02       		.uleb128 0x2
 4599 00ec 800F0000 		.4byte	.LASF20
 4600 00f0 05       		.byte	0x5
 4601 00f1 30       		.byte	0x30
 4602 00f2 90000000 		.4byte	0x90
 4603 00f6 03       		.uleb128 0x3
 4604 00f7 04       		.byte	0x4
 4605 00f8 04       		.byte	0x4
 4606 00f9 F4080000 		.4byte	.LASF21
 4607 00fd 03       		.uleb128 0x3
 4608 00fe 08       		.byte	0x8
 4609 00ff 04       		.byte	0x4
 4610 0100 790F0000 		.4byte	.LASF22
 4611 0104 08       		.uleb128 0x8
 4612 0105 EB000000 		.4byte	0xeb
 4613 0109 08       		.uleb128 0x8
 4614 010a CA000000 		.4byte	0xca
 4615 010e 02       		.uleb128 0x2
 4616 010f 200A0000 		.4byte	.LASF23
 4617 0113 06       		.byte	0x6
 4618 0114 23       		.byte	0x23
 4619 0115 19010000 		.4byte	0x119
 4620 0119 06       		.uleb128 0x6
 4621 011a 04       		.byte	0x4
 4622 011b 1F010000 		.4byte	0x11f
 4623 011f 09       		.uleb128 0x9
 4624 0120 2A010000 		.4byte	0x12a
 4625 0124 0A       		.uleb128 0xa
 4626 0125 B0000000 		.4byte	0xb0
 4627 0129 00       		.byte	0
 4628 012a 02       		.uleb128 0x2
 4629 012b 99050000 		.4byte	.LASF24
 4630 012f 02       		.byte	0x2
 4631 0130 37       		.byte	0x37
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 189


 4632 0131 EB000000 		.4byte	0xeb
 4633 0135 02       		.uleb128 0x2
 4634 0136 1F030000 		.4byte	.LASF25
 4635 013a 02       		.byte	0x2
 4636 013b 38       		.byte	0x38
 4637 013c 89000000 		.4byte	0x89
 4638 0140 02       		.uleb128 0x2
 4639 0141 6D0F0000 		.4byte	.LASF26
 4640 0145 02       		.byte	0x2
 4641 0146 39       		.byte	0x39
 4642 0147 9B000000 		.4byte	0x9b
 4643 014b 02       		.uleb128 0x2
 4644 014c D1020000 		.4byte	.LASF27
 4645 0150 02       		.byte	0x2
 4646 0151 3F       		.byte	0x3f
 4647 0152 EB000000 		.4byte	0xeb
 4648 0156 06       		.uleb128 0x6
 4649 0157 04       		.byte	0x4
 4650 0158 CA000000 		.4byte	0xca
 4651 015c 0B       		.uleb128 0xb
 4652 015d F20C0000 		.4byte	.LASF33
 4653 0161 14       		.byte	0x14
 4654 0162 07       		.byte	0x7
 4655 0163 8C       		.byte	0x8c
 4656 0164 A5010000 		.4byte	0x1a5
 4657 0168 0C       		.uleb128 0xc
 4658 0169 B00D0000 		.4byte	.LASF28
 4659 016d 07       		.byte	0x7
 4660 016e 8F       		.byte	0x8f
 4661 016f 4B010000 		.4byte	0x14b
 4662 0173 00       		.byte	0
 4663 0174 0C       		.uleb128 0xc
 4664 0175 720E0000 		.4byte	.LASF29
 4665 0179 07       		.byte	0x7
 4666 017a 90       		.byte	0x90
 4667 017b A5010000 		.4byte	0x1a5
 4668 017f 04       		.byte	0x4
 4669 0180 0C       		.uleb128 0xc
 4670 0181 CD080000 		.4byte	.LASF30
 4671 0185 07       		.byte	0x7
 4672 0186 91       		.byte	0x91
 4673 0187 A5010000 		.4byte	0x1a5
 4674 018b 08       		.byte	0x8
 4675 018c 0C       		.uleb128 0xc
 4676 018d A80D0000 		.4byte	.LASF31
 4677 0191 07       		.byte	0x7
 4678 0192 92       		.byte	0x92
 4679 0193 B0000000 		.4byte	0xb0
 4680 0197 0C       		.byte	0xc
 4681 0198 0C       		.uleb128 0xc
 4682 0199 10090000 		.4byte	.LASF32
 4683 019d 07       		.byte	0x7
 4684 019e 93       		.byte	0x93
 4685 019f DC010000 		.4byte	0x1dc
 4686 01a3 10       		.byte	0x10
 4687 01a4 00       		.byte	0
 4688 01a5 06       		.uleb128 0x6
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 190


 4689 01a6 04       		.byte	0x4
 4690 01a7 5C010000 		.4byte	0x15c
 4691 01ab 0B       		.uleb128 0xb
 4692 01ac 2F0A0000 		.4byte	.LASF34
 4693 01b0 14       		.byte	0x14
 4694 01b1 07       		.byte	0x7
 4695 01b2 A4       		.byte	0xa4
 4696 01b3 DC010000 		.4byte	0x1dc
 4697 01b7 0C       		.uleb128 0xc
 4698 01b8 08050000 		.4byte	.LASF35
 4699 01bc 07       		.byte	0x7
 4700 01bd A7       		.byte	0xa7
 4701 01be 29020000 		.4byte	0x229
 4702 01c2 00       		.byte	0
 4703 01c3 0C       		.uleb128 0xc
 4704 01c4 08090000 		.4byte	.LASF36
 4705 01c8 07       		.byte	0x7
 4706 01c9 A8       		.byte	0xa8
 4707 01ca 2E020000 		.4byte	0x22e
 4708 01ce 04       		.byte	0x4
 4709 01cf 0C       		.uleb128 0xc
 4710 01d0 4B010000 		.4byte	.LASF37
 4711 01d4 07       		.byte	0x7
 4712 01d5 A9       		.byte	0xa9
 4713 01d6 1E020000 		.4byte	0x21e
 4714 01da 08       		.byte	0x8
 4715 01db 00       		.byte	0
 4716 01dc 06       		.uleb128 0x6
 4717 01dd 04       		.byte	0x4
 4718 01de AB010000 		.4byte	0x1ab
 4719 01e2 02       		.uleb128 0x2
 4720 01e3 7B080000 		.4byte	.LASF38
 4721 01e7 07       		.byte	0x7
 4722 01e8 96       		.byte	0x96
 4723 01e9 5C010000 		.4byte	0x15c
 4724 01ed 0B       		.uleb128 0xb
 4725 01ee 6B010000 		.4byte	.LASF39
 4726 01f2 0C       		.byte	0xc
 4727 01f3 07       		.byte	0x7
 4728 01f4 98       		.byte	0x98
 4729 01f5 1E020000 		.4byte	0x21e
 4730 01f9 0C       		.uleb128 0xc
 4731 01fa B00D0000 		.4byte	.LASF28
 4732 01fe 07       		.byte	0x7
 4733 01ff 9B       		.byte	0x9b
 4734 0200 4B010000 		.4byte	0x14b
 4735 0204 00       		.byte	0
 4736 0205 0C       		.uleb128 0xc
 4737 0206 720E0000 		.4byte	.LASF29
 4738 020a 07       		.byte	0x7
 4739 020b 9C       		.byte	0x9c
 4740 020c A5010000 		.4byte	0x1a5
 4741 0210 04       		.byte	0x4
 4742 0211 0C       		.uleb128 0xc
 4743 0212 CD080000 		.4byte	.LASF30
 4744 0216 07       		.byte	0x7
 4745 0217 9D       		.byte	0x9d
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 191


 4746 0218 A5010000 		.4byte	0x1a5
 4747 021c 08       		.byte	0x8
 4748 021d 00       		.byte	0
 4749 021e 02       		.uleb128 0x2
 4750 021f 57000000 		.4byte	.LASF40
 4751 0223 07       		.byte	0x7
 4752 0224 9F       		.byte	0x9f
 4753 0225 ED010000 		.4byte	0x1ed
 4754 0229 08       		.uleb128 0x8
 4755 022a 40010000 		.4byte	0x140
 4756 022e 06       		.uleb128 0x6
 4757 022f 04       		.byte	0x4
 4758 0230 E2010000 		.4byte	0x1e2
 4759 0234 02       		.uleb128 0x2
 4760 0235 67060000 		.4byte	.LASF41
 4761 0239 07       		.byte	0x7
 4762 023a AB       		.byte	0xab
 4763 023b AB010000 		.4byte	0x1ab
 4764 023f 02       		.uleb128 0x2
 4765 0240 C4020000 		.4byte	.LASF42
 4766 0244 08       		.byte	0x8
 4767 0245 46       		.byte	0x46
 4768 0246 4A020000 		.4byte	0x24a
 4769 024a 06       		.uleb128 0x6
 4770 024b 04       		.byte	0x4
 4771 024c 50020000 		.4byte	0x250
 4772 0250 0B       		.uleb128 0xb
 4773 0251 48020000 		.4byte	.LASF43
 4774 0255 50       		.byte	0x50
 4775 0256 01       		.byte	0x1
 4776 0257 FC       		.byte	0xfc
 4777 0258 DE020000 		.4byte	0x2de
 4778 025c 0C       		.uleb128 0xc
 4779 025d 3F050000 		.4byte	.LASF44
 4780 0261 01       		.byte	0x1
 4781 0262 FE       		.byte	0xfe
 4782 0263 C7030000 		.4byte	0x3c7
 4783 0267 00       		.byte	0
 4784 0268 0D       		.uleb128 0xd
 4785 0269 18020000 		.4byte	.LASF45
 4786 026d 01       		.byte	0x1
 4787 026e 0401     		.2byte	0x104
 4788 0270 E2010000 		.4byte	0x1e2
 4789 0274 04       		.byte	0x4
 4790 0275 0D       		.uleb128 0xd
 4791 0276 E5070000 		.4byte	.LASF46
 4792 027a 01       		.byte	0x1
 4793 027b 0501     		.2byte	0x105
 4794 027d E2010000 		.4byte	0x1e2
 4795 0281 18       		.byte	0x18
 4796 0282 0D       		.uleb128 0xd
 4797 0283 F40E0000 		.4byte	.LASF47
 4798 0287 01       		.byte	0x1
 4799 0288 0601     		.2byte	0x106
 4800 028a 40010000 		.4byte	0x140
 4801 028e 2C       		.byte	0x2c
 4802 028f 0D       		.uleb128 0xd
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 192


 4803 0290 E4060000 		.4byte	.LASF48
 4804 0294 01       		.byte	0x1
 4805 0295 0701     		.2byte	0x107
 4806 0297 C1030000 		.4byte	0x3c1
 4807 029b 30       		.byte	0x30
 4808 029c 0D       		.uleb128 0xd
 4809 029d 300E0000 		.4byte	.LASF49
 4810 02a1 01       		.byte	0x1
 4811 02a2 0801     		.2byte	0x108
 4812 02a4 D2030000 		.4byte	0x3d2
 4813 02a8 34       		.byte	0x34
 4814 02a9 0D       		.uleb128 0xd
 4815 02aa DC0A0000 		.4byte	.LASF50
 4816 02ae 01       		.byte	0x1
 4817 02af 1801     		.2byte	0x118
 4818 02b1 40010000 		.4byte	0x140
 4819 02b5 40       		.byte	0x40
 4820 02b6 0D       		.uleb128 0xd
 4821 02b7 990B0000 		.4byte	.LASF51
 4822 02bb 01       		.byte	0x1
 4823 02bc 1901     		.2byte	0x119
 4824 02be 40010000 		.4byte	0x140
 4825 02c2 44       		.byte	0x44
 4826 02c3 0D       		.uleb128 0xd
 4827 02c4 83090000 		.4byte	.LASF52
 4828 02c8 01       		.byte	0x1
 4829 02c9 3701     		.2byte	0x137
 4830 02cb 04010000 		.4byte	0x104
 4831 02cf 48       		.byte	0x48
 4832 02d0 0D       		.uleb128 0xd
 4833 02d1 4C040000 		.4byte	.LASF53
 4834 02d5 01       		.byte	0x1
 4835 02d6 3801     		.2byte	0x138
 4836 02d8 09010000 		.4byte	0x109
 4837 02dc 4C       		.byte	0x4c
 4838 02dd 00       		.byte	0
 4839 02de 0E       		.uleb128 0xe
 4840 02df 01       		.byte	0x1
 4841 02e0 5E000000 		.4byte	0x5e
 4842 02e4 08       		.byte	0x8
 4843 02e5 50       		.byte	0x50
 4844 02e6 0F030000 		.4byte	0x30f
 4845 02ea 0F       		.uleb128 0xf
 4846 02eb 410B0000 		.4byte	.LASF54
 4847 02ef 00       		.byte	0
 4848 02f0 0F       		.uleb128 0xf
 4849 02f1 2A050000 		.4byte	.LASF55
 4850 02f5 01       		.byte	0x1
 4851 02f6 0F       		.uleb128 0xf
 4852 02f7 1C010000 		.4byte	.LASF56
 4853 02fb 02       		.byte	0x2
 4854 02fc 0F       		.uleb128 0xf
 4855 02fd 00000000 		.4byte	.LASF57
 4856 0301 03       		.byte	0x3
 4857 0302 0F       		.uleb128 0xf
 4858 0303 1C090000 		.4byte	.LASF58
 4859 0307 04       		.byte	0x4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 193


 4860 0308 0F       		.uleb128 0xf
 4861 0309 270E0000 		.4byte	.LASF59
 4862 030d 05       		.byte	0x5
 4863 030e 00       		.byte	0
 4864 030f 02       		.uleb128 0x2
 4865 0310 790E0000 		.4byte	.LASF60
 4866 0314 08       		.byte	0x8
 4867 0315 57       		.byte	0x57
 4868 0316 DE020000 		.4byte	0x2de
 4869 031a 0E       		.uleb128 0xe
 4870 031b 01       		.byte	0x1
 4871 031c 5E000000 		.4byte	0x5e
 4872 0320 08       		.byte	0x8
 4873 0321 5B       		.byte	0x5b
 4874 0322 45030000 		.4byte	0x345
 4875 0326 0F       		.uleb128 0xf
 4876 0327 680E0000 		.4byte	.LASF61
 4877 032b 00       		.byte	0
 4878 032c 0F       		.uleb128 0xf
 4879 032d 7E020000 		.4byte	.LASF62
 4880 0331 01       		.byte	0x1
 4881 0332 0F       		.uleb128 0xf
 4882 0333 CB060000 		.4byte	.LASF63
 4883 0337 02       		.byte	0x2
 4884 0338 0F       		.uleb128 0xf
 4885 0339 FC070000 		.4byte	.LASF64
 4886 033d 03       		.byte	0x3
 4887 033e 0F       		.uleb128 0xf
 4888 033f 0D0E0000 		.4byte	.LASF65
 4889 0343 04       		.byte	0x4
 4890 0344 00       		.byte	0
 4891 0345 02       		.uleb128 0x2
 4892 0346 940E0000 		.4byte	.LASF66
 4893 034a 08       		.byte	0x8
 4894 034b 61       		.byte	0x61
 4895 034c 1A030000 		.4byte	0x31a
 4896 0350 0B       		.uleb128 0xb
 4897 0351 61010000 		.4byte	.LASF67
 4898 0355 08       		.byte	0x8
 4899 0356 08       		.byte	0x8
 4900 0357 66       		.byte	0x66
 4901 0358 75030000 		.4byte	0x375
 4902 035c 0C       		.uleb128 0xc
 4903 035d BC030000 		.4byte	.LASF68
 4904 0361 08       		.byte	0x8
 4905 0362 68       		.byte	0x68
 4906 0363 35010000 		.4byte	0x135
 4907 0367 00       		.byte	0
 4908 0368 0C       		.uleb128 0xc
 4909 0369 BB0E0000 		.4byte	.LASF69
 4910 036d 08       		.byte	0x8
 4911 036e 69       		.byte	0x69
 4912 036f 4B010000 		.4byte	0x14b
 4913 0373 04       		.byte	0x4
 4914 0374 00       		.byte	0
 4915 0375 02       		.uleb128 0x2
 4916 0376 66000000 		.4byte	.LASF70
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 194


 4917 037a 08       		.byte	0x8
 4918 037b 6A       		.byte	0x6a
 4919 037c 50030000 		.4byte	0x350
 4920 0380 0B       		.uleb128 0xb
 4921 0381 33090000 		.4byte	.LASF71
 4922 0385 0C       		.byte	0xc
 4923 0386 08       		.byte	0x8
 4924 0387 6F       		.byte	0x6f
 4925 0388 B1030000 		.4byte	0x3b1
 4926 038c 0C       		.uleb128 0xc
 4927 038d AB0F0000 		.4byte	.LASF72
 4928 0391 08       		.byte	0x8
 4929 0392 71       		.byte	0x71
 4930 0393 B0000000 		.4byte	0xb0
 4931 0397 00       		.byte	0
 4932 0398 0C       		.uleb128 0xc
 4933 0399 5B080000 		.4byte	.LASF73
 4934 039d 08       		.byte	0x8
 4935 039e 72       		.byte	0x72
 4936 039f EB000000 		.4byte	0xeb
 4937 03a3 04       		.byte	0x4
 4938 03a4 0C       		.uleb128 0xc
 4939 03a5 700B0000 		.4byte	.LASF74
 4940 03a9 08       		.byte	0x8
 4941 03aa 73       		.byte	0x73
 4942 03ab EB000000 		.4byte	0xeb
 4943 03af 08       		.byte	0x8
 4944 03b0 00       		.byte	0
 4945 03b1 02       		.uleb128 0x2
 4946 03b2 E6020000 		.4byte	.LASF75
 4947 03b6 08       		.byte	0x8
 4948 03b7 74       		.byte	0x74
 4949 03b8 80030000 		.4byte	0x380
 4950 03bc 07       		.uleb128 0x7
 4951 03bd BF000000 		.4byte	0xbf
 4952 03c1 06       		.uleb128 0x6
 4953 03c2 04       		.byte	0x4
 4954 03c3 2A010000 		.4byte	0x12a
 4955 03c7 06       		.uleb128 0x6
 4956 03c8 04       		.byte	0x4
 4957 03c9 CD030000 		.4byte	0x3cd
 4958 03cd 08       		.uleb128 0x8
 4959 03ce 2A010000 		.4byte	0x12a
 4960 03d2 10       		.uleb128 0x10
 4961 03d3 B8000000 		.4byte	0xb8
 4962 03d7 E2030000 		.4byte	0x3e2
 4963 03db 11       		.uleb128 0x11
 4964 03dc A9000000 		.4byte	0xa9
 4965 03e0 0B       		.byte	0xb
 4966 03e1 00       		.byte	0
 4967 03e2 12       		.uleb128 0x12
 4968 03e3 73050000 		.4byte	.LASF76
 4969 03e7 01       		.byte	0x1
 4970 03e8 4901     		.2byte	0x149
 4971 03ea 50020000 		.4byte	0x250
 4972 03ee 12       		.uleb128 0x12
 4973 03ef A9090000 		.4byte	.LASF77
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 195


 4974 03f3 01       		.byte	0x1
 4975 03f4 4D01     		.2byte	0x14d
 4976 03f6 E2030000 		.4byte	0x3e2
 4977 03fa 13       		.uleb128 0x13
 4978 03fb D2070000 		.4byte	.LASF82
 4979 03ff 02       		.byte	0x2
 4980 0400 D1       		.byte	0xd1
 4981 0401 EB000000 		.4byte	0xeb
 4982 0405 03       		.byte	0x3
 4983 0406 21040000 		.4byte	0x421
 4984 040a 14       		.uleb128 0x14
 4985 040b 2A000000 		.4byte	.LASF78
 4986 040f 02       		.byte	0x2
 4987 0410 D3       		.byte	0xd3
 4988 0411 EB000000 		.4byte	0xeb
 4989 0415 14       		.uleb128 0x14
 4990 0416 0F010000 		.4byte	.LASF79
 4991 041a 02       		.byte	0x2
 4992 041b D3       		.byte	0xd3
 4993 041c EB000000 		.4byte	0xeb
 4994 0420 00       		.byte	0
 4995 0421 15       		.uleb128 0x15
 4996 0422 6B080000 		.4byte	.LASF80
 4997 0426 02       		.byte	0x2
 4998 0427 E5       		.byte	0xe5
 4999 0428 03       		.byte	0x3
 5000 0429 39040000 		.4byte	0x439
 5001 042d 16       		.uleb128 0x16
 5002 042e A70B0000 		.4byte	.LASF84
 5003 0432 02       		.byte	0x2
 5004 0433 E5       		.byte	0xe5
 5005 0434 EB000000 		.4byte	0xeb
 5006 0438 00       		.byte	0
 5007 0439 15       		.uleb128 0x15
 5008 043a 55060000 		.4byte	.LASF81
 5009 043e 02       		.byte	0x2
 5010 043f C1       		.byte	0xc1
 5011 0440 03       		.byte	0x3
 5012 0441 51040000 		.4byte	0x451
 5013 0445 14       		.uleb128 0x14
 5014 0446 0F010000 		.4byte	.LASF79
 5015 044a 02       		.byte	0x2
 5016 044b C3       		.byte	0xc3
 5017 044c EB000000 		.4byte	0xeb
 5018 0450 00       		.byte	0
 5019 0451 13       		.uleb128 0x13
 5020 0452 C20D0000 		.4byte	.LASF83
 5021 0456 02       		.byte	0x2
 5022 0457 82       		.byte	0x82
 5023 0458 CA000000 		.4byte	0xca
 5024 045c 03       		.byte	0x3
 5025 045d 78040000 		.4byte	0x478
 5026 0461 16       		.uleb128 0x16
 5027 0462 BE090000 		.4byte	.LASF85
 5028 0466 02       		.byte	0x2
 5029 0467 82       		.byte	0x82
 5030 0468 EB000000 		.4byte	0xeb
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 196


 5031 046c 14       		.uleb128 0x14
 5032 046d 21000000 		.4byte	.LASF86
 5033 0471 02       		.byte	0x2
 5034 0472 84       		.byte	0x84
 5035 0473 CA000000 		.4byte	0xca
 5036 0477 00       		.byte	0
 5037 0478 17       		.uleb128 0x17
 5038 0479 510E0000 		.4byte	.LASF89
 5039 047d 01       		.byte	0x1
 5040 047e 0D07     		.2byte	0x70d
 5041 0480 35010000 		.4byte	0x135
 5042 0484 00000000 		.4byte	.LFB79
 5043 0488 2C000000 		.4byte	.LFE79-.LFB79
 5044 048c 01       		.uleb128 0x1
 5045 048d 9C       		.byte	0x9c
 5046 048e C3040000 		.4byte	0x4c3
 5047 0492 18       		.uleb128 0x18
 5048 0493 6A0B0000 		.4byte	.LASF91
 5049 0497 01       		.byte	0x1
 5050 0498 0D07     		.2byte	0x70d
 5051 049a C3040000 		.4byte	0x4c3
 5052 049e 00000000 		.4byte	.LLST0
 5053 04a2 19       		.uleb128 0x19
 5054 04a3 B1040000 		.4byte	.LASF87
 5055 04a7 01       		.byte	0x1
 5056 04a8 0F07     		.2byte	0x70f
 5057 04aa 35010000 		.4byte	0x135
 5058 04ae 6C000000 		.4byte	.LLST1
 5059 04b2 19       		.uleb128 0x19
 5060 04b3 A5050000 		.4byte	.LASF88
 5061 04b7 01       		.byte	0x1
 5062 04b8 1007     		.2byte	0x710
 5063 04ba D3040000 		.4byte	0x4d3
 5064 04be 8B000000 		.4byte	.LLST2
 5065 04c2 00       		.byte	0
 5066 04c3 07       		.uleb128 0x7
 5067 04c4 3F020000 		.4byte	0x23f
 5068 04c8 06       		.uleb128 0x6
 5069 04c9 04       		.byte	0x4
 5070 04ca CE040000 		.4byte	0x4ce
 5071 04ce 07       		.uleb128 0x7
 5072 04cf EE030000 		.4byte	0x3ee
 5073 04d3 07       		.uleb128 0x7
 5074 04d4 C8040000 		.4byte	0x4c8
 5075 04d8 17       		.uleb128 0x17
 5076 04d9 52090000 		.4byte	.LASF90
 5077 04dd 01       		.byte	0x1
 5078 04de D70E     		.2byte	0xed7
 5079 04e0 D5000000 		.4byte	0xd5
 5080 04e4 00000000 		.4byte	.LFB104
 5081 04e8 14000000 		.4byte	.LFE104-.LFB104
 5082 04ec 01       		.uleb128 0x1
 5083 04ed 9C       		.byte	0x9c
 5084 04ee 13050000 		.4byte	0x513
 5085 04f2 18       		.uleb128 0x18
 5086 04f3 85060000 		.4byte	.LASF92
 5087 04f7 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 197


 5088 04f8 D70E     		.2byte	0xed7
 5089 04fa 13050000 		.4byte	0x513
 5090 04fe F7000000 		.4byte	.LLST3
 5091 0502 19       		.uleb128 0x19
 5092 0503 F4070000 		.4byte	.LASF93
 5093 0507 01       		.byte	0x1
 5094 0508 D90E     		.2byte	0xed9
 5095 050a EB000000 		.4byte	0xeb
 5096 050e 15010000 		.4byte	.LLST4
 5097 0512 00       		.byte	0
 5098 0513 06       		.uleb128 0x6
 5099 0514 04       		.byte	0x4
 5100 0515 19050000 		.4byte	0x519
 5101 0519 07       		.uleb128 0x7
 5102 051a CA000000 		.4byte	0xca
 5103 051e 1A       		.uleb128 0x1a
 5104 051f 6A030000 		.4byte	.LASF94
 5105 0523 01       		.byte	0x1
 5106 0524 670F     		.2byte	0xf67
 5107 0526 00000000 		.4byte	.LFB107
 5108 052a 24000000 		.4byte	.LFE107-.LFB107
 5109 052e 01       		.uleb128 0x1
 5110 052f 9C       		.byte	0x9c
 5111 0530 45050000 		.4byte	0x545
 5112 0534 19       		.uleb128 0x19
 5113 0535 A5050000 		.4byte	.LASF88
 5114 0539 01       		.byte	0x1
 5115 053a 690F     		.2byte	0xf69
 5116 053c 45050000 		.4byte	0x545
 5117 0540 43010000 		.4byte	.LLST5
 5118 0544 00       		.byte	0
 5119 0545 06       		.uleb128 0x6
 5120 0546 04       		.byte	0x4
 5121 0547 EE030000 		.4byte	0x3ee
 5122 054b 1A       		.uleb128 0x1a
 5123 054c 92060000 		.4byte	.LASF95
 5124 0550 01       		.byte	0x1
 5125 0551 2F0F     		.2byte	0xf2f
 5126 0553 00000000 		.4byte	.LFB106
 5127 0557 12000000 		.4byte	.LFE106-.LFB106
 5128 055b 01       		.uleb128 0x1
 5129 055c 9C       		.byte	0x9c
 5130 055d 8B050000 		.4byte	0x58b
 5131 0561 18       		.uleb128 0x18
 5132 0562 A5050000 		.4byte	.LASF88
 5133 0566 01       		.byte	0x1
 5134 0567 2F0F     		.2byte	0xf2f
 5135 0569 45050000 		.4byte	0x545
 5136 056d 56010000 		.4byte	.LLST6
 5137 0571 1B       		.uleb128 0x1b
 5138 0572 0A000000 		.4byte	.LVL18
 5139 0576 17200000 		.4byte	0x2017
 5140 057a 1C       		.uleb128 0x1c
 5141 057b 10000000 		.4byte	.LVL19
 5142 057f 17200000 		.4byte	0x2017
 5143 0583 1D       		.uleb128 0x1d
 5144 0584 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 198


 5145 0585 50       		.byte	0x50
 5146 0586 02       		.uleb128 0x2
 5147 0587 74       		.byte	0x74
 5148 0588 00       		.sleb128 0
 5149 0589 00       		.byte	0
 5150 058a 00       		.byte	0
 5151 058b 1A       		.uleb128 0x1a
 5152 058c FE0A0000 		.4byte	.LASF96
 5153 0590 01       		.byte	0x1
 5154 0591 3803     		.2byte	0x338
 5155 0593 00000000 		.4byte	.LFB69
 5156 0597 9C000000 		.4byte	.LFE69-.LFB69
 5157 059b 01       		.uleb128 0x1
 5158 059c 9C       		.byte	0x9c
 5159 059d 9B060000 		.4byte	0x69b
 5160 05a1 18       		.uleb128 0x18
 5161 05a2 B3070000 		.4byte	.LASF97
 5162 05a6 01       		.byte	0x1
 5163 05a7 3803     		.2byte	0x338
 5164 05a9 0E010000 		.4byte	0x10e
 5165 05ad 74010000 		.4byte	.LLST7
 5166 05b1 18       		.uleb128 0x18
 5167 05b2 2B0F0000 		.4byte	.LASF98
 5168 05b6 01       		.byte	0x1
 5169 05b7 3903     		.2byte	0x339
 5170 05b9 BC030000 		.4byte	0x3bc
 5171 05bd 92010000 		.4byte	.LLST8
 5172 05c1 18       		.uleb128 0x18
 5173 05c2 5A040000 		.4byte	.LASF99
 5174 05c6 01       		.byte	0x1
 5175 05c7 3A03     		.2byte	0x33a
 5176 05c9 9B060000 		.4byte	0x69b
 5177 05cd BE010000 		.4byte	.LLST9
 5178 05d1 18       		.uleb128 0x18
 5179 05d2 4C050000 		.4byte	.LASF100
 5180 05d6 01       		.byte	0x1
 5181 05d7 3B03     		.2byte	0x33b
 5182 05d9 A0060000 		.4byte	0x6a0
 5183 05dd FB010000 		.4byte	.LLST10
 5184 05e1 18       		.uleb128 0x18
 5185 05e2 F40E0000 		.4byte	.LASF47
 5186 05e6 01       		.byte	0x1
 5187 05e7 3C03     		.2byte	0x33c
 5188 05e9 40010000 		.4byte	0x140
 5189 05ed 19020000 		.4byte	.LLST11
 5190 05f1 1E       		.uleb128 0x1e
 5191 05f2 FA040000 		.4byte	.LASF101
 5192 05f6 01       		.byte	0x1
 5193 05f7 3D03     		.2byte	0x33d
 5194 05f9 AB060000 		.4byte	0x6ab
 5195 05fd 02       		.uleb128 0x2
 5196 05fe 91       		.byte	0x91
 5197 05ff 04       		.sleb128 4
 5198 0600 1E       		.uleb128 0x1e
 5199 0601 75020000 		.4byte	.LASF102
 5200 0605 01       		.byte	0x1
 5201 0606 3E03     		.2byte	0x33e
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 199


 5202 0608 45050000 		.4byte	0x545
 5203 060c 02       		.uleb128 0x2
 5204 060d 91       		.byte	0x91
 5205 060e 08       		.sleb128 8
 5206 060f 1E       		.uleb128 0x1e
 5207 0610 4C070000 		.4byte	.LASF103
 5208 0614 01       		.byte	0x1
 5209 0615 3F03     		.2byte	0x33f
 5210 0617 BB060000 		.4byte	0x6bb
 5211 061b 02       		.uleb128 0x2
 5212 061c 91       		.byte	0x91
 5213 061d 0C       		.sleb128 12
 5214 061e 1F       		.uleb128 0x1f
 5215 061f 3F050000 		.4byte	.LASF44
 5216 0623 01       		.byte	0x1
 5217 0624 4103     		.2byte	0x341
 5218 0626 C1030000 		.4byte	0x3c1
 5219 062a 01       		.uleb128 0x1
 5220 062b 57       		.byte	0x57
 5221 062c 20       		.uleb128 0x20
 5222 062d 7800     		.ascii	"x\000"
 5223 062f 01       		.byte	0x1
 5224 0630 4203     		.2byte	0x342
 5225 0632 40010000 		.4byte	0x140
 5226 0636 38020000 		.4byte	.LLST12
 5227 063a 21       		.uleb128 0x21
 5228 063b 1E000000 		.4byte	.LVL24
 5229 063f 22200000 		.4byte	0x2022
 5230 0643 56060000 		.4byte	0x656
 5231 0647 1D       		.uleb128 0x1d
 5232 0648 01       		.uleb128 0x1
 5233 0649 51       		.byte	0x51
 5234 064a 02       		.uleb128 0x2
 5235 064b 08       		.byte	0x8
 5236 064c A5       		.byte	0xa5
 5237 064d 1D       		.uleb128 0x1d
 5238 064e 01       		.uleb128 0x1
 5239 064f 52       		.byte	0x52
 5240 0650 04       		.uleb128 0x4
 5241 0651 77       		.byte	0x77
 5242 0652 00       		.sleb128 0
 5243 0653 32       		.byte	0x32
 5244 0654 24       		.byte	0x24
 5245 0655 00       		.byte	0
 5246 0656 21       		.uleb128 0x21
 5247 0657 6A000000 		.4byte	.LVL34
 5248 065b 2D200000 		.4byte	0x202d
 5249 065f 6A060000 		.4byte	0x66a
 5250 0663 1D       		.uleb128 0x1d
 5251 0664 01       		.uleb128 0x1
 5252 0665 50       		.byte	0x50
 5253 0666 02       		.uleb128 0x2
 5254 0667 74       		.byte	0x74
 5255 0668 04       		.sleb128 4
 5256 0669 00       		.byte	0
 5257 066a 21       		.uleb128 0x21
 5258 066b 72000000 		.4byte	.LVL35
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 200


 5259 066f 2D200000 		.4byte	0x202d
 5260 0673 7E060000 		.4byte	0x67e
 5261 0677 1D       		.uleb128 0x1d
 5262 0678 01       		.uleb128 0x1
 5263 0679 50       		.byte	0x50
 5264 067a 02       		.uleb128 0x2
 5265 067b 74       		.byte	0x74
 5266 067c 18       		.sleb128 24
 5267 067d 00       		.byte	0
 5268 067e 1C       		.uleb128 0x1c
 5269 067f 8C000000 		.4byte	.LVL37
 5270 0683 39200000 		.4byte	0x2039
 5271 0687 1D       		.uleb128 0x1d
 5272 0688 01       		.uleb128 0x1
 5273 0689 50       		.byte	0x50
 5274 068a 02       		.uleb128 0x2
 5275 068b 77       		.byte	0x77
 5276 068c 00       		.sleb128 0
 5277 068d 1D       		.uleb128 0x1d
 5278 068e 01       		.uleb128 0x1
 5279 068f 51       		.byte	0x51
 5280 0690 02       		.uleb128 0x2
 5281 0691 79       		.byte	0x79
 5282 0692 00       		.sleb128 0
 5283 0693 1D       		.uleb128 0x1d
 5284 0694 01       		.uleb128 0x1
 5285 0695 52       		.byte	0x52
 5286 0696 02       		.uleb128 0x2
 5287 0697 7A       		.byte	0x7a
 5288 0698 00       		.sleb128 0
 5289 0699 00       		.byte	0
 5290 069a 00       		.byte	0
 5291 069b 07       		.uleb128 0x7
 5292 069c EB000000 		.4byte	0xeb
 5293 06a0 07       		.uleb128 0x7
 5294 06a1 B0000000 		.4byte	0xb0
 5295 06a5 06       		.uleb128 0x6
 5296 06a6 04       		.byte	0x4
 5297 06a7 3F020000 		.4byte	0x23f
 5298 06ab 07       		.uleb128 0x7
 5299 06ac A5060000 		.4byte	0x6a5
 5300 06b0 06       		.uleb128 0x6
 5301 06b1 04       		.byte	0x4
 5302 06b2 B6060000 		.4byte	0x6b6
 5303 06b6 07       		.uleb128 0x7
 5304 06b7 B1030000 		.4byte	0x3b1
 5305 06bb 07       		.uleb128 0x7
 5306 06bc B0060000 		.4byte	0x6b0
 5307 06c0 1A       		.uleb128 0x1a
 5308 06c1 B90F0000 		.4byte	.LASF104
 5309 06c5 01       		.byte	0x1
 5310 06c6 170E     		.2byte	0xe17
 5311 06c8 00000000 		.4byte	.LFB102
 5312 06cc 58000000 		.4byte	.LFE102-.LFB102
 5313 06d0 01       		.uleb128 0x1
 5314 06d1 9C       		.byte	0x9c
 5315 06d2 69070000 		.4byte	0x769
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 201


 5316 06d6 19       		.uleb128 0x19
 5317 06d7 F40E0000 		.4byte	.LASF47
 5318 06db 01       		.byte	0x1
 5319 06dc 190E     		.2byte	0xe19
 5320 06de 40010000 		.4byte	0x140
 5321 06e2 56020000 		.4byte	.LLST13
 5322 06e6 21       		.uleb128 0x21
 5323 06e7 14000000 		.4byte	.LVL40
 5324 06eb 44200000 		.4byte	0x2044
 5325 06ef 07070000 		.4byte	0x707
 5326 06f3 1D       		.uleb128 0x1d
 5327 06f4 01       		.uleb128 0x1
 5328 06f5 50       		.byte	0x50
 5329 06f6 0F       		.uleb128 0xf
 5330 06f7 74       		.byte	0x74
 5331 06f8 00       		.sleb128 0
 5332 06f9 32       		.byte	0x32
 5333 06fa 24       		.byte	0x24
 5334 06fb 74       		.byte	0x74
 5335 06fc 00       		.sleb128 0
 5336 06fd 22       		.byte	0x22
 5337 06fe 32       		.byte	0x32
 5338 06ff 24       		.byte	0x24
 5339 0700 03       		.byte	0x3
 5340 0701 30000000 		.4byte	.LANCHOR0+48
 5341 0705 22       		.byte	0x22
 5342 0706 00       		.byte	0
 5343 0707 21       		.uleb128 0x21
 5344 0708 26000000 		.4byte	.LVL43
 5345 070c 44200000 		.4byte	0x2044
 5346 0710 1B070000 		.4byte	0x71b
 5347 0714 1D       		.uleb128 0x1d
 5348 0715 01       		.uleb128 0x1
 5349 0716 50       		.byte	0x50
 5350 0717 02       		.uleb128 0x2
 5351 0718 76       		.byte	0x76
 5352 0719 00       		.sleb128 0
 5353 071a 00       		.byte	0
 5354 071b 21       		.uleb128 0x21
 5355 071c 30000000 		.4byte	.LVL44
 5356 0720 44200000 		.4byte	0x2044
 5357 0724 2F070000 		.4byte	0x72f
 5358 0728 1D       		.uleb128 0x1d
 5359 0729 01       		.uleb128 0x1
 5360 072a 50       		.byte	0x50
 5361 072b 02       		.uleb128 0x2
 5362 072c 75       		.byte	0x75
 5363 072d 00       		.sleb128 0
 5364 072e 00       		.byte	0
 5365 072f 21       		.uleb128 0x21
 5366 0730 38000000 		.4byte	.LVL45
 5367 0734 44200000 		.4byte	0x2044
 5368 0738 43070000 		.4byte	0x743
 5369 073c 1D       		.uleb128 0x1d
 5370 073d 01       		.uleb128 0x1
 5371 073e 50       		.byte	0x50
 5372 073f 02       		.uleb128 0x2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 202


 5373 0740 74       		.byte	0x74
 5374 0741 14       		.sleb128 20
 5375 0742 00       		.byte	0
 5376 0743 21       		.uleb128 0x21
 5377 0744 40000000 		.4byte	.LVL46
 5378 0748 44200000 		.4byte	0x2044
 5379 074c 58070000 		.4byte	0x758
 5380 0750 1D       		.uleb128 0x1d
 5381 0751 01       		.uleb128 0x1
 5382 0752 50       		.byte	0x50
 5383 0753 03       		.uleb128 0x3
 5384 0754 74       		.byte	0x74
 5385 0755 BC01     		.sleb128 188
 5386 0757 00       		.byte	0
 5387 0758 1C       		.uleb128 0x1c
 5388 0759 46000000 		.4byte	.LVL47
 5389 075d 44200000 		.4byte	0x2044
 5390 0761 1D       		.uleb128 0x1d
 5391 0762 01       		.uleb128 0x1
 5392 0763 50       		.byte	0x50
 5393 0764 02       		.uleb128 0x2
 5394 0765 74       		.byte	0x74
 5395 0766 00       		.sleb128 0
 5396 0767 00       		.byte	0
 5397 0768 00       		.byte	0
 5398 0769 1A       		.uleb128 0x1a
 5399 076a DC050000 		.4byte	.LASF105
 5400 076e 01       		.byte	0x1
 5401 076f 3504     		.2byte	0x435
 5402 0771 00000000 		.4byte	.LFB70
 5403 0775 AC000000 		.4byte	.LFE70-.LFB70
 5404 0779 01       		.uleb128 0x1
 5405 077a 9C       		.byte	0x9c
 5406 077b BF070000 		.4byte	0x7bf
 5407 077f 18       		.uleb128 0x18
 5408 0780 75020000 		.4byte	.LASF102
 5409 0784 01       		.byte	0x1
 5410 0785 3504     		.2byte	0x435
 5411 0787 45050000 		.4byte	0x545
 5412 078b 75020000 		.4byte	.LLST14
 5413 078f 1B       		.uleb128 0x1b
 5414 0790 08000000 		.4byte	.LVL49
 5415 0794 50200000 		.4byte	0x2050
 5416 0798 1B       		.uleb128 0x1b
 5417 0799 2C000000 		.4byte	.LVL50
 5418 079d C0060000 		.4byte	0x6c0
 5419 07a1 21       		.uleb128 0x21
 5420 07a2 7A000000 		.4byte	.LVL51
 5421 07a6 5B200000 		.4byte	0x205b
 5422 07aa B5070000 		.4byte	0x7b5
 5423 07ae 1D       		.uleb128 0x1d
 5424 07af 01       		.uleb128 0x1
 5425 07b0 51       		.byte	0x51
 5426 07b1 02       		.uleb128 0x2
 5427 07b2 75       		.byte	0x75
 5428 07b3 04       		.sleb128 4
 5429 07b4 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 203


 5430 07b5 1B       		.uleb128 0x1b
 5431 07b6 7E000000 		.4byte	.LVL52
 5432 07ba 67200000 		.4byte	0x2067
 5433 07be 00       		.byte	0
 5434 07bf 1A       		.uleb128 0x1a
 5435 07c0 4A0B0000 		.4byte	.LASF106
 5436 07c4 01       		.byte	0x1
 5437 07c5 370E     		.2byte	0xe37
 5438 07c7 00000000 		.4byte	.LFB103
 5439 07cb 44000000 		.4byte	.LFE103-.LFB103
 5440 07cf 01       		.uleb128 0x1
 5441 07d0 9C       		.byte	0x9c
 5442 07d1 26080000 		.4byte	0x826
 5443 07d5 22       		.uleb128 0x22
 5444 07d6 02000000 		.4byte	.LBB26
 5445 07da 3C000000 		.4byte	.LBE26-.LBB26
 5446 07de 19       		.uleb128 0x19
 5447 07df A5050000 		.4byte	.LASF88
 5448 07e3 01       		.byte	0x1
 5449 07e4 3E0E     		.2byte	0xe3e
 5450 07e6 45050000 		.4byte	0x545
 5451 07ea A1020000 		.4byte	.LLST15
 5452 07ee 1B       		.uleb128 0x1b
 5453 07ef 08000000 		.4byte	.LVL54
 5454 07f3 50200000 		.4byte	0x2050
 5455 07f7 21       		.uleb128 0x21
 5456 07f8 16000000 		.4byte	.LVL56
 5457 07fc 72200000 		.4byte	0x2072
 5458 0800 0B080000 		.4byte	0x80b
 5459 0804 1D       		.uleb128 0x1d
 5460 0805 01       		.uleb128 0x1
 5461 0806 50       		.byte	0x50
 5462 0807 02       		.uleb128 0x2
 5463 0808 75       		.byte	0x75
 5464 0809 04       		.sleb128 4
 5465 080a 00       		.byte	0
 5466 080b 1B       		.uleb128 0x1b
 5467 080c 2E000000 		.4byte	.LVL57
 5468 0810 67200000 		.4byte	0x2067
 5469 0814 1C       		.uleb128 0x1c
 5470 0815 34000000 		.4byte	.LVL58
 5471 0819 4B050000 		.4byte	0x54b
 5472 081d 1D       		.uleb128 0x1d
 5473 081e 01       		.uleb128 0x1
 5474 081f 50       		.byte	0x50
 5475 0820 02       		.uleb128 0x2
 5476 0821 75       		.byte	0x75
 5477 0822 00       		.sleb128 0
 5478 0823 00       		.byte	0
 5479 0824 00       		.byte	0
 5480 0825 00       		.byte	0
 5481 0826 23       		.uleb128 0x23
 5482 0827 9F060000 		.4byte	.LASF107
 5483 082b 01       		.byte	0x1
 5484 082c 400D     		.2byte	0xd40
 5485 082e 00000000 		.4byte	.LFB101
 5486 0832 08000000 		.4byte	.LFE101-.LFB101
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 204


 5487 0836 01       		.uleb128 0x1
 5488 0837 9C       		.byte	0x9c
 5489 0838 56080000 		.4byte	0x856
 5490 083c 18       		.uleb128 0x18
 5491 083d 4C050000 		.4byte	.LASF100
 5492 0841 01       		.byte	0x1
 5493 0842 400D     		.2byte	0xd40
 5494 0844 B0000000 		.4byte	0xb0
 5495 0848 B4020000 		.4byte	.LLST16
 5496 084c 1B       		.uleb128 0x1b
 5497 084d 06000000 		.4byte	.LVL61
 5498 0851 BF070000 		.4byte	0x7bf
 5499 0855 00       		.byte	0
 5500 0856 1A       		.uleb128 0x1a
 5501 0857 B60B0000 		.4byte	.LASF108
 5502 085b 01       		.byte	0x1
 5503 085c 3914     		.2byte	0x1439
 5504 085e 00000000 		.4byte	.LFB121
 5505 0862 84000000 		.4byte	.LFE121-.LFB121
 5506 0866 01       		.uleb128 0x1
 5507 0867 9C       		.byte	0x9c
 5508 0868 DF080000 		.4byte	0x8df
 5509 086c 18       		.uleb128 0x18
 5510 086d CD010000 		.4byte	.LASF109
 5511 0871 01       		.byte	0x1
 5512 0872 3914     		.2byte	0x1439
 5513 0874 4B010000 		.4byte	0x14b
 5514 0878 D5020000 		.4byte	.LLST17
 5515 087c 18       		.uleb128 0x18
 5516 087d 0B000000 		.4byte	.LASF110
 5517 0881 01       		.byte	0x1
 5518 0882 3914     		.2byte	0x1439
 5519 0884 DF080000 		.4byte	0x8df
 5520 0888 01030000 		.4byte	.LLST18
 5521 088c 19       		.uleb128 0x19
 5522 088d 25010000 		.4byte	.LASF111
 5523 0891 01       		.byte	0x1
 5524 0892 3B14     		.2byte	0x143b
 5525 0894 4B010000 		.4byte	0x14b
 5526 0898 2D030000 		.4byte	.LLST19
 5527 089c 19       		.uleb128 0x19
 5528 089d B9040000 		.4byte	.LASF112
 5529 08a1 01       		.byte	0x1
 5530 08a2 3C14     		.2byte	0x143c
 5531 08a4 E4080000 		.4byte	0x8e4
 5532 08a8 40030000 		.4byte	.LLST20
 5533 08ac 1B       		.uleb128 0x1b
 5534 08ad 16000000 		.4byte	.LVL65
 5535 08b1 72200000 		.4byte	0x2072
 5536 08b5 21       		.uleb128 0x21
 5537 08b6 46000000 		.4byte	.LVL66
 5538 08ba 5B200000 		.4byte	0x205b
 5539 08be CC080000 		.4byte	0x8cc
 5540 08c2 1D       		.uleb128 0x1d
 5541 08c3 01       		.uleb128 0x1
 5542 08c4 50       		.byte	0x50
 5543 08c5 05       		.uleb128 0x5
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 205


 5544 08c6 03       		.byte	0x3
 5545 08c7 00000000 		.4byte	.LANCHOR0
 5546 08cb 00       		.byte	0
 5547 08cc 1B       		.uleb128 0x1b
 5548 08cd 66000000 		.4byte	.LVL69
 5549 08d1 7E200000 		.4byte	0x207e
 5550 08d5 1B       		.uleb128 0x1b
 5551 08d6 76000000 		.4byte	.LVL72
 5552 08da 7E200000 		.4byte	0x207e
 5553 08de 00       		.byte	0
 5554 08df 07       		.uleb128 0x7
 5555 08e0 35010000 		.4byte	0x135
 5556 08e4 07       		.uleb128 0x7
 5557 08e5 4B010000 		.4byte	0x14b
 5558 08e9 24       		.uleb128 0x24
 5559 08ea 7E070000 		.4byte	.LASF115
 5560 08ee 01       		.byte	0x1
 5561 08ef DD02     		.2byte	0x2dd
 5562 08f1 35010000 		.4byte	0x135
 5563 08f5 00000000 		.4byte	.LFB68
 5564 08f9 62000000 		.4byte	.LFE68-.LFB68
 5565 08fd 01       		.uleb128 0x1
 5566 08fe 9C       		.byte	0x9c
 5567 08ff 2D0A0000 		.4byte	0xa2d
 5568 0903 18       		.uleb128 0x18
 5569 0904 B3070000 		.4byte	.LASF97
 5570 0908 01       		.byte	0x1
 5571 0909 DD02     		.2byte	0x2dd
 5572 090b 0E010000 		.4byte	0x10e
 5573 090f 53030000 		.4byte	.LLST21
 5574 0913 18       		.uleb128 0x18
 5575 0914 2B0F0000 		.4byte	.LASF98
 5576 0918 01       		.byte	0x1
 5577 0919 DE02     		.2byte	0x2de
 5578 091b BC030000 		.4byte	0x3bc
 5579 091f 71030000 		.4byte	.LLST22
 5580 0923 18       		.uleb128 0x18
 5581 0924 91030000 		.4byte	.LASF113
 5582 0928 01       		.byte	0x1
 5583 0929 DF02     		.2byte	0x2df
 5584 092b 2D0A0000 		.4byte	0xa2d
 5585 092f 8F030000 		.4byte	.LLST23
 5586 0933 18       		.uleb128 0x18
 5587 0934 4C050000 		.4byte	.LASF100
 5588 0938 01       		.byte	0x1
 5589 0939 E002     		.2byte	0x2e0
 5590 093b A0060000 		.4byte	0x6a0
 5591 093f B0030000 		.4byte	.LLST24
 5592 0943 1E       		.uleb128 0x1e
 5593 0944 F40E0000 		.4byte	.LASF47
 5594 0948 01       		.byte	0x1
 5595 0949 E102     		.2byte	0x2e1
 5596 094b 40010000 		.4byte	0x140
 5597 094f 02       		.uleb128 0x2
 5598 0950 91       		.byte	0x91
 5599 0951 00       		.sleb128 0
 5600 0952 1E       		.uleb128 0x1e
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 206


 5601 0953 FA040000 		.4byte	.LASF101
 5602 0957 01       		.byte	0x1
 5603 0958 E202     		.2byte	0x2e2
 5604 095a AB060000 		.4byte	0x6ab
 5605 095e 02       		.uleb128 0x2
 5606 095f 91       		.byte	0x91
 5607 0960 04       		.sleb128 4
 5608 0961 19       		.uleb128 0x19
 5609 0962 75020000 		.4byte	.LASF102
 5610 0966 01       		.byte	0x1
 5611 0967 E402     		.2byte	0x2e4
 5612 0969 45050000 		.4byte	0x545
 5613 096d CE030000 		.4byte	.LLST25
 5614 0971 19       		.uleb128 0x19
 5615 0972 B1040000 		.4byte	.LASF87
 5616 0976 01       		.byte	0x1
 5617 0977 E502     		.2byte	0x2e5
 5618 0979 35010000 		.4byte	0x135
 5619 097d F7030000 		.4byte	.LLST26
 5620 0981 25       		.uleb128 0x25
 5621 0982 0E000000 		.4byte	.LBB27
 5622 0986 24000000 		.4byte	.LBE27-.LBB27
 5623 098a D9090000 		.4byte	0x9d9
 5624 098e 19       		.uleb128 0x19
 5625 098f E4060000 		.4byte	.LASF48
 5626 0993 01       		.byte	0x1
 5627 0994 0203     		.2byte	0x302
 5628 0996 C1030000 		.4byte	0x3c1
 5629 099a 16040000 		.4byte	.LLST27
 5630 099e 21       		.uleb128 0x21
 5631 099f 14000000 		.4byte	.LVL76
 5632 09a3 8A200000 		.4byte	0x208a
 5633 09a7 B4090000 		.4byte	0x9b4
 5634 09ab 1D       		.uleb128 0x1d
 5635 09ac 01       		.uleb128 0x1
 5636 09ad 50       		.byte	0x50
 5637 09ae 04       		.uleb128 0x4
 5638 09af 75       		.byte	0x75
 5639 09b0 00       		.sleb128 0
 5640 09b1 32       		.byte	0x32
 5641 09b2 24       		.byte	0x24
 5642 09b3 00       		.byte	0
 5643 09b4 21       		.uleb128 0x21
 5644 09b5 1E000000 		.4byte	.LVL78
 5645 09b9 8A200000 		.4byte	0x208a
 5646 09bd C8090000 		.4byte	0x9c8
 5647 09c1 1D       		.uleb128 0x1d
 5648 09c2 01       		.uleb128 0x1
 5649 09c3 50       		.byte	0x50
 5650 09c4 02       		.uleb128 0x2
 5651 09c5 08       		.byte	0x8
 5652 09c6 50       		.byte	0x50
 5653 09c7 00       		.byte	0
 5654 09c8 1C       		.uleb128 0x1c
 5655 09c9 2E000000 		.4byte	.LVL80
 5656 09cd 17200000 		.4byte	0x2017
 5657 09d1 1D       		.uleb128 0x1d
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 207


 5658 09d2 01       		.uleb128 0x1
 5659 09d3 50       		.byte	0x50
 5660 09d4 02       		.uleb128 0x2
 5661 09d5 79       		.byte	0x79
 5662 09d6 00       		.sleb128 0
 5663 09d7 00       		.byte	0
 5664 09d8 00       		.byte	0
 5665 09d9 21       		.uleb128 0x21
 5666 09da 4E000000 		.4byte	.LVL83
 5667 09de 8B050000 		.4byte	0x58b
 5668 09e2 1C0A0000 		.4byte	0xa1c
 5669 09e6 1D       		.uleb128 0x1d
 5670 09e7 01       		.uleb128 0x1
 5671 09e8 50       		.byte	0x50
 5672 09e9 02       		.uleb128 0x2
 5673 09ea 76       		.byte	0x76
 5674 09eb 00       		.sleb128 0
 5675 09ec 1D       		.uleb128 0x1d
 5676 09ed 01       		.uleb128 0x1
 5677 09ee 51       		.byte	0x51
 5678 09ef 02       		.uleb128 0x2
 5679 09f0 77       		.byte	0x77
 5680 09f1 00       		.sleb128 0
 5681 09f2 1D       		.uleb128 0x1d
 5682 09f3 01       		.uleb128 0x1
 5683 09f4 52       		.byte	0x52
 5684 09f5 02       		.uleb128 0x2
 5685 09f6 75       		.byte	0x75
 5686 09f7 00       		.sleb128 0
 5687 09f8 1D       		.uleb128 0x1d
 5688 09f9 01       		.uleb128 0x1
 5689 09fa 53       		.byte	0x53
 5690 09fb 02       		.uleb128 0x2
 5691 09fc 78       		.byte	0x78
 5692 09fd 00       		.sleb128 0
 5693 09fe 1D       		.uleb128 0x1d
 5694 09ff 02       		.uleb128 0x2
 5695 0a00 7D       		.byte	0x7d
 5696 0a01 00       		.sleb128 0
 5697 0a02 03       		.uleb128 0x3
 5698 0a03 91       		.byte	0x91
 5699 0a04 00       		.sleb128 0
 5700 0a05 06       		.byte	0x6
 5701 0a06 1D       		.uleb128 0x1d
 5702 0a07 02       		.uleb128 0x2
 5703 0a08 7D       		.byte	0x7d
 5704 0a09 04       		.sleb128 4
 5705 0a0a 03       		.uleb128 0x3
 5706 0a0b 91       		.byte	0x91
 5707 0a0c 04       		.sleb128 4
 5708 0a0d 06       		.byte	0x6
 5709 0a0e 1D       		.uleb128 0x1d
 5710 0a0f 02       		.uleb128 0x2
 5711 0a10 7D       		.byte	0x7d
 5712 0a11 08       		.sleb128 8
 5713 0a12 02       		.uleb128 0x2
 5714 0a13 74       		.byte	0x74
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 208


 5715 0a14 00       		.sleb128 0
 5716 0a15 1D       		.uleb128 0x1d
 5717 0a16 02       		.uleb128 0x2
 5718 0a17 7D       		.byte	0x7d
 5719 0a18 0C       		.sleb128 12
 5720 0a19 01       		.uleb128 0x1
 5721 0a1a 30       		.byte	0x30
 5722 0a1b 00       		.byte	0
 5723 0a1c 1C       		.uleb128 0x1c
 5724 0a1d 54000000 		.4byte	.LVL84
 5725 0a21 69070000 		.4byte	0x769
 5726 0a25 1D       		.uleb128 0x1d
 5727 0a26 01       		.uleb128 0x1
 5728 0a27 50       		.byte	0x50
 5729 0a28 02       		.uleb128 0x2
 5730 0a29 74       		.byte	0x74
 5731 0a2a 00       		.sleb128 0
 5732 0a2b 00       		.byte	0
 5733 0a2c 00       		.byte	0
 5734 0a2d 07       		.uleb128 0x7
 5735 0a2e D5000000 		.4byte	0xd5
 5736 0a32 26       		.uleb128 0x26
 5737 0a33 5B0C0000 		.4byte	.LASF125
 5738 0a37 01       		.byte	0x1
 5739 0a38 8A04     		.2byte	0x48a
 5740 0a3a 00000000 		.4byte	.LFB71
 5741 0a3e BC000000 		.4byte	.LFE71-.LFB71
 5742 0a42 01       		.uleb128 0x1
 5743 0a43 9C       		.byte	0x9c
 5744 0a44 DB0A0000 		.4byte	0xadb
 5745 0a48 18       		.uleb128 0x18
 5746 0a49 D8080000 		.4byte	.LASF114
 5747 0a4d 01       		.byte	0x1
 5748 0a4e 8A04     		.2byte	0x48a
 5749 0a50 3F020000 		.4byte	0x23f
 5750 0a54 3F040000 		.4byte	.LLST28
 5751 0a58 19       		.uleb128 0x19
 5752 0a59 A5050000 		.4byte	.LASF88
 5753 0a5d 01       		.byte	0x1
 5754 0a5e 8C04     		.2byte	0x48c
 5755 0a60 45050000 		.4byte	0x545
 5756 0a64 5D040000 		.4byte	.LLST29
 5757 0a68 1B       		.uleb128 0x1b
 5758 0a69 08000000 		.4byte	.LVL88
 5759 0a6d 50200000 		.4byte	0x2050
 5760 0a71 21       		.uleb128 0x21
 5761 0a72 18000000 		.4byte	.LVL90
 5762 0a76 72200000 		.4byte	0x2072
 5763 0a7a 850A0000 		.4byte	0xa85
 5764 0a7e 1D       		.uleb128 0x1d
 5765 0a7f 01       		.uleb128 0x1
 5766 0a80 50       		.byte	0x50
 5767 0a81 02       		.uleb128 0x2
 5768 0a82 75       		.byte	0x75
 5769 0a83 00       		.sleb128 0
 5770 0a84 00       		.byte	0
 5771 0a85 21       		.uleb128 0x21
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 209


 5772 0a86 48000000 		.4byte	.LVL91
 5773 0a8a 72200000 		.4byte	0x2072
 5774 0a8e 990A0000 		.4byte	0xa99
 5775 0a92 1D       		.uleb128 0x1d
 5776 0a93 01       		.uleb128 0x1
 5777 0a94 50       		.byte	0x50
 5778 0a95 02       		.uleb128 0x2
 5779 0a96 74       		.byte	0x74
 5780 0a97 18       		.sleb128 24
 5781 0a98 00       		.byte	0
 5782 0a99 21       		.uleb128 0x21
 5783 0a9a 68000000 		.4byte	.LVL92
 5784 0a9e 5B200000 		.4byte	0x205b
 5785 0aa2 B40A0000 		.4byte	0xab4
 5786 0aa6 1D       		.uleb128 0x1d
 5787 0aa7 01       		.uleb128 0x1
 5788 0aa8 50       		.byte	0x50
 5789 0aa9 03       		.uleb128 0x3
 5790 0aaa 76       		.byte	0x76
 5791 0aab BC01     		.sleb128 188
 5792 0aad 1D       		.uleb128 0x1d
 5793 0aae 01       		.uleb128 0x1
 5794 0aaf 51       		.byte	0x51
 5795 0ab0 02       		.uleb128 0x2
 5796 0ab1 75       		.byte	0x75
 5797 0ab2 00       		.sleb128 0
 5798 0ab3 00       		.byte	0
 5799 0ab4 21       		.uleb128 0x21
 5800 0ab5 86000000 		.4byte	.LVL93
 5801 0ab9 4B050000 		.4byte	0x54b
 5802 0abd C80A0000 		.4byte	0xac8
 5803 0ac1 1D       		.uleb128 0x1d
 5804 0ac2 01       		.uleb128 0x1
 5805 0ac3 50       		.byte	0x50
 5806 0ac4 02       		.uleb128 0x2
 5807 0ac5 74       		.byte	0x74
 5808 0ac6 00       		.sleb128 0
 5809 0ac7 00       		.byte	0
 5810 0ac8 1B       		.uleb128 0x1b
 5811 0ac9 8A000000 		.4byte	.LVL94
 5812 0acd 1E050000 		.4byte	0x51e
 5813 0ad1 1B       		.uleb128 0x1b
 5814 0ad2 8E000000 		.4byte	.LVL95
 5815 0ad6 67200000 		.4byte	0x2067
 5816 0ada 00       		.byte	0
 5817 0adb 24       		.uleb128 0x24
 5818 0adc 25090000 		.4byte	.LASF116
 5819 0ae0 01       		.byte	0x1
 5820 0ae1 6A05     		.2byte	0x56a
 5821 0ae3 0F030000 		.4byte	0x30f
 5822 0ae7 00000000 		.4byte	.LFB74
 5823 0aeb 70000000 		.4byte	.LFE74-.LFB74
 5824 0aef 01       		.uleb128 0x1
 5825 0af0 9C       		.byte	0x9c
 5826 0af1 660B0000 		.4byte	0xb66
 5827 0af5 18       		.uleb128 0x18
 5828 0af6 6A0B0000 		.4byte	.LASF91
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 210


 5829 0afa 01       		.byte	0x1
 5830 0afb 6A05     		.2byte	0x56a
 5831 0afd 3F020000 		.4byte	0x23f
 5832 0b01 70040000 		.4byte	.LLST30
 5833 0b05 1F       		.uleb128 0x1f
 5834 0b06 2A030000 		.4byte	.LASF117
 5835 0b0a 01       		.byte	0x1
 5836 0b0b 6C05     		.2byte	0x56c
 5837 0b0d 0F030000 		.4byte	0x30f
 5838 0b11 01       		.uleb128 0x1
 5839 0b12 50       		.byte	0x50
 5840 0b13 19       		.uleb128 0x19
 5841 0b14 5E030000 		.4byte	.LASF118
 5842 0b18 01       		.byte	0x1
 5843 0b19 6D05     		.2byte	0x56d
 5844 0b1b 660B0000 		.4byte	0xb66
 5845 0b1f C0040000 		.4byte	.LLST31
 5846 0b23 19       		.uleb128 0x19
 5847 0b24 01060000 		.4byte	.LASF119
 5848 0b28 01       		.byte	0x1
 5849 0b29 6D05     		.2byte	0x56d
 5850 0b2b 660B0000 		.4byte	0xb66
 5851 0b2f DE040000 		.4byte	.LLST32
 5852 0b33 19       		.uleb128 0x19
 5853 0b34 C7090000 		.4byte	.LASF120
 5854 0b38 01       		.byte	0x1
 5855 0b39 6D05     		.2byte	0x56d
 5856 0b3b 660B0000 		.4byte	0xb66
 5857 0b3f FC040000 		.4byte	.LLST33
 5858 0b43 19       		.uleb128 0x19
 5859 0b44 A5050000 		.4byte	.LASF88
 5860 0b48 01       		.byte	0x1
 5861 0b49 6E05     		.2byte	0x56e
 5862 0b4b D3040000 		.4byte	0x4d3
 5863 0b4f 1A050000 		.4byte	.LLST34
 5864 0b53 1B       		.uleb128 0x1b
 5865 0b54 12000000 		.4byte	.LVL99
 5866 0b58 50200000 		.4byte	0x2050
 5867 0b5c 1B       		.uleb128 0x1b
 5868 0b5d 20000000 		.4byte	.LVL103
 5869 0b61 67200000 		.4byte	0x2067
 5870 0b65 00       		.byte	0
 5871 0b66 06       		.uleb128 0x6
 5872 0b67 04       		.byte	0x4
 5873 0b68 6C0B0000 		.4byte	0xb6c
 5874 0b6c 07       		.uleb128 0x7
 5875 0b6d 34020000 		.4byte	0x234
 5876 0b71 24       		.uleb128 0x24
 5877 0b72 320F0000 		.4byte	.LASF121
 5878 0b76 01       		.byte	0x1
 5879 0b77 C605     		.2byte	0x5c6
 5880 0b79 40010000 		.4byte	0x140
 5881 0b7d 00000000 		.4byte	.LFB75
 5882 0b81 20000000 		.4byte	.LFE75-.LFB75
 5883 0b85 01       		.uleb128 0x1
 5884 0b86 9C       		.byte	0x9c
 5885 0b87 CE0B0000 		.4byte	0xbce
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 211


 5886 0b8b 18       		.uleb128 0x18
 5887 0b8c 6A0B0000 		.4byte	.LASF91
 5888 0b90 01       		.byte	0x1
 5889 0b91 C605     		.2byte	0x5c6
 5890 0b93 C3040000 		.4byte	0x4c3
 5891 0b97 6A050000 		.4byte	.LLST35
 5892 0b9b 19       		.uleb128 0x19
 5893 0b9c A5050000 		.4byte	.LASF88
 5894 0ba0 01       		.byte	0x1
 5895 0ba1 C805     		.2byte	0x5c8
 5896 0ba3 C8040000 		.4byte	0x4c8
 5897 0ba7 96050000 		.4byte	.LLST36
 5898 0bab 19       		.uleb128 0x19
 5899 0bac 1C060000 		.4byte	.LASF122
 5900 0bb0 01       		.byte	0x1
 5901 0bb1 C905     		.2byte	0x5c9
 5902 0bb3 40010000 		.4byte	0x140
 5903 0bb7 A9050000 		.4byte	.LLST37
 5904 0bbb 1B       		.uleb128 0x1b
 5905 0bbc 08000000 		.4byte	.LVL116
 5906 0bc0 50200000 		.4byte	0x2050
 5907 0bc4 1B       		.uleb128 0x1b
 5908 0bc5 16000000 		.4byte	.LVL119
 5909 0bc9 67200000 		.4byte	0x2067
 5910 0bcd 00       		.byte	0
 5911 0bce 24       		.uleb128 0x24
 5912 0bcf 350A0000 		.4byte	.LASF123
 5913 0bd3 01       		.byte	0x1
 5914 0bd4 DC05     		.2byte	0x5dc
 5915 0bd6 40010000 		.4byte	0x140
 5916 0bda 00000000 		.4byte	.LFB76
 5917 0bde 28000000 		.4byte	.LFE76-.LFB76
 5918 0be2 01       		.uleb128 0x1
 5919 0be3 9C       		.byte	0x9c
 5920 0be4 660C0000 		.4byte	0xc66
 5921 0be8 18       		.uleb128 0x18
 5922 0be9 6A0B0000 		.4byte	.LASF91
 5923 0bed 01       		.byte	0x1
 5924 0bee DC05     		.2byte	0x5dc
 5925 0bf0 C3040000 		.4byte	0x4c3
 5926 0bf4 C7050000 		.4byte	.LLST38
 5927 0bf8 19       		.uleb128 0x19
 5928 0bf9 A5050000 		.4byte	.LASF88
 5929 0bfd 01       		.byte	0x1
 5930 0bfe DE05     		.2byte	0x5de
 5931 0c00 C8040000 		.4byte	0x4c8
 5932 0c04 E8050000 		.4byte	.LLST39
 5933 0c08 1F       		.uleb128 0x1f
 5934 0c09 1C060000 		.4byte	.LASF122
 5935 0c0d 01       		.byte	0x1
 5936 0c0e DF05     		.2byte	0x5df
 5937 0c10 40010000 		.4byte	0x140
 5938 0c14 01       		.uleb128 0x1
 5939 0c15 50       		.byte	0x50
 5940 0c16 27       		.uleb128 0x27
 5941 0c17 670C0000 		.4byte	.LASF124
 5942 0c1b 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 212


 5943 0c1c DF05     		.2byte	0x5df
 5944 0c1e 40010000 		.4byte	0x140
 5945 0c22 28       		.uleb128 0x28
 5946 0c23 FA030000 		.4byte	0x3fa
 5947 0c27 00000000 		.4byte	.LBB28
 5948 0c2b 14000000 		.4byte	.LBE28-.LBB28
 5949 0c2f 01       		.byte	0x1
 5950 0c30 F305     		.2byte	0x5f3
 5951 0c32 4B0C0000 		.4byte	0xc4b
 5952 0c36 22       		.uleb128 0x22
 5953 0c37 00000000 		.4byte	.LBB29
 5954 0c3b 14000000 		.4byte	.LBE29-.LBB29
 5955 0c3f 29       		.uleb128 0x29
 5956 0c40 0A040000 		.4byte	0x40a
 5957 0c44 29       		.uleb128 0x29
 5958 0c45 15040000 		.4byte	0x415
 5959 0c49 00       		.byte	0
 5960 0c4a 00       		.byte	0
 5961 0c4b 2A       		.uleb128 0x2a
 5962 0c4c 21040000 		.4byte	0x421
 5963 0c50 1E000000 		.4byte	.LBB30
 5964 0c54 04000000 		.4byte	.LBE30-.LBB30
 5965 0c58 01       		.byte	0x1
 5966 0c59 FA05     		.2byte	0x5fa
 5967 0c5b 2B       		.uleb128 0x2b
 5968 0c5c 2D040000 		.4byte	0x42d
 5969 0c60 FB050000 		.4byte	.LLST40
 5970 0c64 00       		.byte	0
 5971 0c65 00       		.byte	0
 5972 0c66 26       		.uleb128 0x26
 5973 0c67 AB030000 		.4byte	.LASF126
 5974 0c6b 01       		.byte	0x1
 5975 0c6c 0406     		.2byte	0x604
 5976 0c6e 00000000 		.4byte	.LFB77
 5977 0c72 E0000000 		.4byte	.LFE77-.LFB77
 5978 0c76 01       		.uleb128 0x1
 5979 0c77 9C       		.byte	0x9c
 5980 0c78 170D0000 		.4byte	0xd17
 5981 0c7c 18       		.uleb128 0x18
 5982 0c7d 6A0B0000 		.4byte	.LASF91
 5983 0c81 01       		.byte	0x1
 5984 0c82 0406     		.2byte	0x604
 5985 0c84 3F020000 		.4byte	0x23f
 5986 0c88 0E060000 		.4byte	.LLST41
 5987 0c8c 18       		.uleb128 0x18
 5988 0c8d E6080000 		.4byte	.LASF127
 5989 0c91 01       		.byte	0x1
 5990 0c92 0406     		.2byte	0x604
 5991 0c94 40010000 		.4byte	0x140
 5992 0c98 2C060000 		.4byte	.LLST42
 5993 0c9c 19       		.uleb128 0x19
 5994 0c9d A5050000 		.4byte	.LASF88
 5995 0ca1 01       		.byte	0x1
 5996 0ca2 0606     		.2byte	0x606
 5997 0ca4 45050000 		.4byte	0x545
 5998 0ca8 57060000 		.4byte	.LLST43
 5999 0cac 19       		.uleb128 0x19
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 213


 6000 0cad 93090000 		.4byte	.LASF128
 6001 0cb1 01       		.byte	0x1
 6002 0cb2 0706     		.2byte	0x607
 6003 0cb4 40010000 		.4byte	0x140
 6004 0cb8 6A060000 		.4byte	.LLST44
 6005 0cbc 19       		.uleb128 0x19
 6006 0cbd B7010000 		.4byte	.LASF129
 6007 0cc1 01       		.byte	0x1
 6008 0cc2 0706     		.2byte	0x607
 6009 0cc4 40010000 		.4byte	0x140
 6010 0cc8 7D060000 		.4byte	.LLST45
 6011 0ccc 19       		.uleb128 0x19
 6012 0ccd AB050000 		.4byte	.LASF130
 6013 0cd1 01       		.byte	0x1
 6014 0cd2 0806     		.2byte	0x608
 6015 0cd4 35010000 		.4byte	0x135
 6016 0cd8 90060000 		.4byte	.LLST46
 6017 0cdc 1B       		.uleb128 0x1b
 6018 0cdd 10000000 		.4byte	.LVL128
 6019 0ce1 50200000 		.4byte	0x2050
 6020 0ce5 21       		.uleb128 0x21
 6021 0ce6 80000000 		.4byte	.LVL135
 6022 0cea 72200000 		.4byte	0x2072
 6023 0cee F90C0000 		.4byte	0xcf9
 6024 0cf2 1D       		.uleb128 0x1d
 6025 0cf3 01       		.uleb128 0x1
 6026 0cf4 50       		.byte	0x50
 6027 0cf5 02       		.uleb128 0x2
 6028 0cf6 75       		.byte	0x75
 6029 0cf7 00       		.sleb128 0
 6030 0cf8 00       		.byte	0
 6031 0cf9 21       		.uleb128 0x21
 6032 0cfa BA000000 		.4byte	.LVL137
 6033 0cfe 5B200000 		.4byte	0x205b
 6034 0d02 0D0D0000 		.4byte	0xd0d
 6035 0d06 1D       		.uleb128 0x1d
 6036 0d07 01       		.uleb128 0x1
 6037 0d08 51       		.byte	0x51
 6038 0d09 02       		.uleb128 0x2
 6039 0d0a 75       		.byte	0x75
 6040 0d0b 00       		.sleb128 0
 6041 0d0c 00       		.byte	0
 6042 0d0d 1B       		.uleb128 0x1b
 6043 0d0e D0000000 		.4byte	.LVL139
 6044 0d12 67200000 		.4byte	0x2067
 6045 0d16 00       		.byte	0
 6046 0d17 26       		.uleb128 0x26
 6047 0d18 F5050000 		.4byte	.LASF131
 6048 0d1c 01       		.byte	0x1
 6049 0d1d 3B07     		.2byte	0x73b
 6050 0d1f 00000000 		.4byte	.LFB80
 6051 0d23 78000000 		.4byte	.LFE80-.LFB80
 6052 0d27 01       		.uleb128 0x1
 6053 0d28 9C       		.byte	0x9c
 6054 0d29 9C0D0000 		.4byte	0xd9c
 6055 0d2d 18       		.uleb128 0x18
 6056 0d2e 030A0000 		.4byte	.LASF132
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 214


 6057 0d32 01       		.byte	0x1
 6058 0d33 3B07     		.2byte	0x73b
 6059 0d35 3F020000 		.4byte	0x23f
 6060 0d39 AF060000 		.4byte	.LLST47
 6061 0d3d 19       		.uleb128 0x19
 6062 0d3e A5050000 		.4byte	.LASF88
 6063 0d42 01       		.byte	0x1
 6064 0d43 3D07     		.2byte	0x73d
 6065 0d45 9C0D0000 		.4byte	0xd9c
 6066 0d49 AF060000 		.4byte	.LLST47
 6067 0d4d 1B       		.uleb128 0x1b
 6068 0d4e 14000000 		.4byte	.LVL142
 6069 0d52 50200000 		.4byte	0x2050
 6070 0d56 21       		.uleb128 0x21
 6071 0d57 1A000000 		.4byte	.LVL143
 6072 0d5b 78040000 		.4byte	0x478
 6073 0d5f 6A0D0000 		.4byte	0xd6a
 6074 0d63 1D       		.uleb128 0x1d
 6075 0d64 01       		.uleb128 0x1
 6076 0d65 50       		.byte	0x50
 6077 0d66 02       		.uleb128 0x2
 6078 0d67 74       		.byte	0x74
 6079 0d68 00       		.sleb128 0
 6080 0d69 00       		.byte	0
 6081 0d6a 21       		.uleb128 0x21
 6082 0d6b 24000000 		.4byte	.LVL144
 6083 0d6f 72200000 		.4byte	0x2072
 6084 0d73 7E0D0000 		.4byte	0xd7e
 6085 0d77 1D       		.uleb128 0x1d
 6086 0d78 01       		.uleb128 0x1
 6087 0d79 50       		.byte	0x50
 6088 0d7a 02       		.uleb128 0x2
 6089 0d7b 76       		.byte	0x76
 6090 0d7c 00       		.sleb128 0
 6091 0d7d 00       		.byte	0
 6092 0d7e 21       		.uleb128 0x21
 6093 0d7f 4A000000 		.4byte	.LVL145
 6094 0d83 5B200000 		.4byte	0x205b
 6095 0d87 920D0000 		.4byte	0xd92
 6096 0d8b 1D       		.uleb128 0x1d
 6097 0d8c 01       		.uleb128 0x1
 6098 0d8d 51       		.byte	0x51
 6099 0d8e 02       		.uleb128 0x2
 6100 0d8f 76       		.byte	0x76
 6101 0d90 00       		.sleb128 0
 6102 0d91 00       		.byte	0
 6103 0d92 1B       		.uleb128 0x1b
 6104 0d93 6A000000 		.4byte	.LVL146
 6105 0d97 67200000 		.4byte	0x2067
 6106 0d9b 00       		.byte	0
 6107 0d9c 07       		.uleb128 0x7
 6108 0d9d 45050000 		.4byte	0x545
 6109 0da1 24       		.uleb128 0x24
 6110 0da2 87040000 		.4byte	.LASF133
 6111 0da6 01       		.byte	0x1
 6112 0da7 7107     		.2byte	0x771
 6113 0da9 35010000 		.4byte	0x135
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 215


 6114 0dad 00000000 		.4byte	.LFB81
 6115 0db1 88000000 		.4byte	.LFE81-.LFB81
 6116 0db5 01       		.uleb128 0x1
 6117 0db6 9C       		.byte	0x9c
 6118 0db7 940E0000 		.4byte	0xe94
 6119 0dbb 18       		.uleb128 0x18
 6120 0dbc 030A0000 		.4byte	.LASF132
 6121 0dc0 01       		.byte	0x1
 6122 0dc1 7107     		.2byte	0x771
 6123 0dc3 3F020000 		.4byte	0x23f
 6124 0dc7 D8060000 		.4byte	.LLST49
 6125 0dcb 19       		.uleb128 0x19
 6126 0dcc AB050000 		.4byte	.LASF130
 6127 0dd0 01       		.byte	0x1
 6128 0dd1 7307     		.2byte	0x773
 6129 0dd3 35010000 		.4byte	0x135
 6130 0dd7 04070000 		.4byte	.LLST50
 6131 0ddb 19       		.uleb128 0x19
 6132 0ddc A5050000 		.4byte	.LASF88
 6133 0de0 01       		.byte	0x1
 6134 0de1 7407     		.2byte	0x774
 6135 0de3 9C0D0000 		.4byte	0xd9c
 6136 0de7 45070000 		.4byte	.LLST51
 6137 0deb 27       		.uleb128 0x27
 6138 0dec 1D0B0000 		.4byte	.LASF134
 6139 0df0 01       		.byte	0x1
 6140 0df1 7507     		.2byte	0x775
 6141 0df3 40010000 		.4byte	0x140
 6142 0df7 28       		.uleb128 0x28
 6143 0df8 FA030000 		.4byte	0x3fa
 6144 0dfc 04000000 		.4byte	.LBB32
 6145 0e00 14000000 		.4byte	.LBE32-.LBB32
 6146 0e04 01       		.byte	0x1
 6147 0e05 8B07     		.2byte	0x78b
 6148 0e07 200E0000 		.4byte	0xe20
 6149 0e0b 22       		.uleb128 0x22
 6150 0e0c 04000000 		.4byte	.LBB33
 6151 0e10 14000000 		.4byte	.LBE33-.LBB33
 6152 0e14 29       		.uleb128 0x29
 6153 0e15 0A040000 		.4byte	0x40a
 6154 0e19 29       		.uleb128 0x29
 6155 0e1a 15040000 		.4byte	0x415
 6156 0e1e 00       		.byte	0
 6157 0e1f 00       		.byte	0
 6158 0e20 28       		.uleb128 0x28
 6159 0e21 21040000 		.4byte	0x421
 6160 0e25 78000000 		.4byte	.LBB34
 6161 0e29 04000000 		.4byte	.LBE34-.LBB34
 6162 0e2d 01       		.byte	0x1
 6163 0e2e AF07     		.2byte	0x7af
 6164 0e30 3E0E0000 		.4byte	0xe3e
 6165 0e34 2B       		.uleb128 0x2b
 6166 0e35 2D040000 		.4byte	0x42d
 6167 0e39 71070000 		.4byte	.LLST52
 6168 0e3d 00       		.byte	0
 6169 0e3e 21       		.uleb128 0x21
 6170 0e3f 1C000000 		.4byte	.LVL150
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 216


 6171 0e43 78040000 		.4byte	0x478
 6172 0e47 520E0000 		.4byte	0xe52
 6173 0e4b 1D       		.uleb128 0x1d
 6174 0e4c 01       		.uleb128 0x1
 6175 0e4d 50       		.byte	0x50
 6176 0e4e 02       		.uleb128 0x2
 6177 0e4f 74       		.byte	0x74
 6178 0e50 00       		.sleb128 0
 6179 0e51 00       		.byte	0
 6180 0e52 21       		.uleb128 0x21
 6181 0e53 42000000 		.4byte	.LVL152
 6182 0e57 72200000 		.4byte	0x2072
 6183 0e5b 660E0000 		.4byte	0xe66
 6184 0e5f 1D       		.uleb128 0x1d
 6185 0e60 01       		.uleb128 0x1
 6186 0e61 50       		.byte	0x50
 6187 0e62 02       		.uleb128 0x2
 6188 0e63 77       		.byte	0x77
 6189 0e64 00       		.sleb128 0
 6190 0e65 00       		.byte	0
 6191 0e66 21       		.uleb128 0x21
 6192 0e67 66000000 		.4byte	.LVL153
 6193 0e6b 5B200000 		.4byte	0x205b
 6194 0e6f 7A0E0000 		.4byte	0xe7a
 6195 0e73 1D       		.uleb128 0x1d
 6196 0e74 01       		.uleb128 0x1
 6197 0e75 51       		.byte	0x51
 6198 0e76 02       		.uleb128 0x2
 6199 0e77 77       		.byte	0x77
 6200 0e78 00       		.sleb128 0
 6201 0e79 00       		.byte	0
 6202 0e7a 1C       		.uleb128 0x1c
 6203 0e7b 72000000 		.4byte	.LVL155
 6204 0e7f 5B200000 		.4byte	0x205b
 6205 0e83 1D       		.uleb128 0x1d
 6206 0e84 01       		.uleb128 0x1
 6207 0e85 50       		.byte	0x50
 6208 0e86 05       		.uleb128 0x5
 6209 0e87 03       		.byte	0x3
 6210 0e88 14000000 		.4byte	.LANCHOR0+20
 6211 0e8c 1D       		.uleb128 0x1d
 6212 0e8d 01       		.uleb128 0x1
 6213 0e8e 51       		.byte	0x51
 6214 0e8f 02       		.uleb128 0x2
 6215 0e90 74       		.byte	0x74
 6216 0e91 18       		.sleb128 24
 6217 0e92 00       		.byte	0
 6218 0e93 00       		.byte	0
 6219 0e94 26       		.uleb128 0x26
 6220 0e95 CB030000 		.4byte	.LASF135
 6221 0e99 01       		.byte	0x1
 6222 0e9a B707     		.2byte	0x7b7
 6223 0e9c 00000000 		.4byte	.LFB82
 6224 0ea0 58000000 		.4byte	.LFE82-.LFB82
 6225 0ea4 01       		.uleb128 0x1
 6226 0ea5 9C       		.byte	0x9c
 6227 0ea6 230F0000 		.4byte	0xf23
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 217


 6228 0eaa 19       		.uleb128 0x19
 6229 0eab B1040000 		.4byte	.LASF87
 6230 0eaf 01       		.byte	0x1
 6231 0eb0 B907     		.2byte	0x7b9
 6232 0eb2 35010000 		.4byte	0x135
 6233 0eb6 84070000 		.4byte	.LLST53
 6234 0eba 28       		.uleb128 0x28
 6235 0ebb 39040000 		.4byte	0x439
 6236 0ebf 1A000000 		.4byte	.LBB36
 6237 0ec3 10000000 		.4byte	.LBE36-.LBB36
 6238 0ec7 01       		.byte	0x1
 6239 0ec8 FF07     		.2byte	0x7ff
 6240 0eca DE0E0000 		.4byte	0xede
 6241 0ece 22       		.uleb128 0x22
 6242 0ecf 1A000000 		.4byte	.LBB37
 6243 0ed3 10000000 		.4byte	.LBE37-.LBB37
 6244 0ed7 29       		.uleb128 0x29
 6245 0ed8 45040000 		.4byte	0x445
 6246 0edc 00       		.byte	0
 6247 0edd 00       		.byte	0
 6248 0ede 21       		.uleb128 0x21
 6249 0edf 16000000 		.4byte	.LVL159
 6250 0ee3 E9080000 		.4byte	0x8e9
 6251 0ee7 190F0000 		.4byte	0xf19
 6252 0eeb 1D       		.uleb128 0x1d
 6253 0eec 01       		.uleb128 0x1
 6254 0eed 50       		.byte	0x50
 6255 0eee 05       		.uleb128 0x5
 6256 0eef 03       		.byte	0x3
 6257 0ef0 00000000 		.4byte	prvIdleTask
 6258 0ef4 1D       		.uleb128 0x1d
 6259 0ef5 01       		.uleb128 0x1
 6260 0ef6 51       		.byte	0x51
 6261 0ef7 05       		.uleb128 0x5
 6262 0ef8 03       		.byte	0x3
 6263 0ef9 00000000 		.4byte	.LC0
 6264 0efd 1D       		.uleb128 0x1d
 6265 0efe 01       		.uleb128 0x1
 6266 0eff 52       		.byte	0x52
 6267 0f00 02       		.uleb128 0x2
 6268 0f01 08       		.byte	0x8
 6269 0f02 C8       		.byte	0xc8
 6270 0f03 1D       		.uleb128 0x1d
 6271 0f04 01       		.uleb128 0x1
 6272 0f05 53       		.byte	0x53
 6273 0f06 01       		.uleb128 0x1
 6274 0f07 30       		.byte	0x30
 6275 0f08 1D       		.uleb128 0x1d
 6276 0f09 02       		.uleb128 0x2
 6277 0f0a 7D       		.byte	0x7d
 6278 0f0b 00       		.sleb128 0
 6279 0f0c 01       		.uleb128 0x1
 6280 0f0d 30       		.byte	0x30
 6281 0f0e 1D       		.uleb128 0x1d
 6282 0f0f 02       		.uleb128 0x2
 6283 0f10 7D       		.byte	0x7d
 6284 0f11 04       		.sleb128 4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 218


 6285 0f12 05       		.uleb128 0x5
 6286 0f13 03       		.byte	0x3
 6287 0f14 F4000000 		.4byte	.LANCHOR0+244
 6288 0f18 00       		.byte	0
 6289 0f19 1B       		.uleb128 0x1b
 6290 0f1a 42000000 		.4byte	.LVL160
 6291 0f1e 95200000 		.4byte	0x2095
 6292 0f22 00       		.byte	0
 6293 0f23 26       		.uleb128 0x26
 6294 0f24 F1090000 		.4byte	.LASF136
 6295 0f28 01       		.byte	0x1
 6296 0f29 3308     		.2byte	0x833
 6297 0f2b 00000000 		.4byte	.LFB83
 6298 0f2f 24000000 		.4byte	.LFE83-.LFB83
 6299 0f33 01       		.uleb128 0x1
 6300 0f34 9C       		.byte	0x9c
 6301 0f35 670F0000 		.4byte	0xf67
 6302 0f39 28       		.uleb128 0x28
 6303 0f3a 39040000 		.4byte	0x439
 6304 0f3e 02000000 		.4byte	.LBB38
 6305 0f42 10000000 		.4byte	.LBE38-.LBB38
 6306 0f46 01       		.byte	0x1
 6307 0f47 3808     		.2byte	0x838
 6308 0f49 5D0F0000 		.4byte	0xf5d
 6309 0f4d 22       		.uleb128 0x22
 6310 0f4e 02000000 		.4byte	.LBB39
 6311 0f52 10000000 		.4byte	.LBE39-.LBB39
 6312 0f56 29       		.uleb128 0x29
 6313 0f57 45040000 		.4byte	0x445
 6314 0f5b 00       		.byte	0
 6315 0f5c 00       		.byte	0
 6316 0f5d 1B       		.uleb128 0x1b
 6317 0f5e 1E000000 		.4byte	.LVL161
 6318 0f62 A0200000 		.4byte	0x20a0
 6319 0f66 00       		.byte	0
 6320 0f67 2C       		.uleb128 0x2c
 6321 0f68 890B0000 		.4byte	.LASF174
 6322 0f6c 01       		.byte	0x1
 6323 0f6d 3E08     		.2byte	0x83e
 6324 0f6f 00000000 		.4byte	.LFB84
 6325 0f73 14000000 		.4byte	.LFE84-.LFB84
 6326 0f77 01       		.uleb128 0x1
 6327 0f78 9C       		.byte	0x9c
 6328 0f79 24       		.uleb128 0x24
 6329 0f7a 37060000 		.4byte	.LASF137
 6330 0f7e 01       		.byte	0x1
 6331 0f7f 0009     		.2byte	0x900
 6332 0f81 4B010000 		.4byte	0x14b
 6333 0f85 00000000 		.4byte	.LFB86
 6334 0f89 0C000000 		.4byte	.LFE86-.LFB86
 6335 0f8d 01       		.uleb128 0x1
 6336 0f8e 9C       		.byte	0x9c
 6337 0f8f A20F0000 		.4byte	0xfa2
 6338 0f93 1F       		.uleb128 0x1f
 6339 0f94 3C000000 		.4byte	.LASF138
 6340 0f98 01       		.byte	0x1
 6341 0f99 0209     		.2byte	0x902
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 219


 6342 0f9b 4B010000 		.4byte	0x14b
 6343 0f9f 01       		.uleb128 0x1
 6344 0fa0 50       		.byte	0x50
 6345 0fa1 00       		.byte	0
 6346 0fa2 24       		.uleb128 0x24
 6347 0fa3 AB020000 		.4byte	.LASF139
 6348 0fa7 01       		.byte	0x1
 6349 0fa8 0F09     		.2byte	0x90f
 6350 0faa 4B010000 		.4byte	0x14b
 6351 0fae 00000000 		.4byte	.LFB87
 6352 0fb2 0C000000 		.4byte	.LFE87-.LFB87
 6353 0fb6 01       		.uleb128 0x1
 6354 0fb7 9C       		.byte	0x9c
 6355 0fb8 D80F0000 		.4byte	0xfd8
 6356 0fbc 1F       		.uleb128 0x1f
 6357 0fbd B1040000 		.4byte	.LASF87
 6358 0fc1 01       		.byte	0x1
 6359 0fc2 1109     		.2byte	0x911
 6360 0fc4 4B010000 		.4byte	0x14b
 6361 0fc8 01       		.uleb128 0x1
 6362 0fc9 50       		.byte	0x50
 6363 0fca 2D       		.uleb128 0x2d
 6364 0fcb 1D0B0000 		.4byte	.LASF134
 6365 0fcf 01       		.byte	0x1
 6366 0fd0 1209     		.2byte	0x912
 6367 0fd2 40010000 		.4byte	0x140
 6368 0fd6 00       		.byte	0
 6369 0fd7 00       		.byte	0
 6370 0fd8 2E       		.uleb128 0x2e
 6371 0fd9 0F0D0000 		.4byte	.LASF188
 6372 0fdd 01       		.byte	0x1
 6373 0fde 2E09     		.2byte	0x92e
 6374 0fe0 40010000 		.4byte	0x140
 6375 0fe4 00000000 		.4byte	.LFB88
 6376 0fe8 0C000000 		.4byte	.LFE88-.LFB88
 6377 0fec 01       		.uleb128 0x1
 6378 0fed 9C       		.byte	0x9c
 6379 0fee 24       		.uleb128 0x24
 6380 0fef DA0B0000 		.4byte	.LASF140
 6381 0ff3 01       		.byte	0x1
 6382 0ff4 3609     		.2byte	0x936
 6383 0ff6 B2000000 		.4byte	0xb2
 6384 0ffa 00000000 		.4byte	.LFB89
 6385 0ffe 14000000 		.4byte	.LFE89-.LFB89
 6386 1002 01       		.uleb128 0x1
 6387 1003 9C       		.byte	0x9c
 6388 1004 27100000 		.4byte	0x1027
 6389 1008 18       		.uleb128 0x18
 6390 1009 9E030000 		.4byte	.LASF141
 6391 100d 01       		.byte	0x1
 6392 100e 3609     		.2byte	0x936
 6393 1010 3F020000 		.4byte	0x23f
 6394 1014 97070000 		.4byte	.LLST54
 6395 1018 1F       		.uleb128 0x1f
 6396 1019 A5050000 		.4byte	.LASF88
 6397 101d 01       		.byte	0x1
 6398 101e 3809     		.2byte	0x938
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 220


 6399 1020 45050000 		.4byte	0x545
 6400 1024 01       		.uleb128 0x1
 6401 1025 53       		.byte	0x53
 6402 1026 00       		.byte	0
 6403 1027 24       		.uleb128 0x24
 6404 1028 F5020000 		.4byte	.LASF142
 6405 102c 01       		.byte	0x1
 6406 102d 930A     		.2byte	0xa93
 6407 102f 35010000 		.4byte	0x135
 6408 1033 00000000 		.4byte	.LFB91
 6409 1037 00010000 		.4byte	.LFE91-.LFB91
 6410 103b 01       		.uleb128 0x1
 6411 103c 9C       		.byte	0x9c
 6412 103d E7100000 		.4byte	0x10e7
 6413 1041 19       		.uleb128 0x19
 6414 1042 A5050000 		.4byte	.LASF88
 6415 1046 01       		.byte	0x1
 6416 1047 950A     		.2byte	0xa95
 6417 1049 45050000 		.4byte	0x545
 6418 104d AA070000 		.4byte	.LLST55
 6419 1051 19       		.uleb128 0x19
 6420 1052 B00D0000 		.4byte	.LASF28
 6421 1056 01       		.byte	0x1
 6422 1057 960A     		.2byte	0xa96
 6423 1059 4B010000 		.4byte	0x14b
 6424 105d C8070000 		.4byte	.LLST56
 6425 1061 19       		.uleb128 0x19
 6426 1062 2F020000 		.4byte	.LASF143
 6427 1066 01       		.byte	0x1
 6428 1067 970A     		.2byte	0xa97
 6429 1069 35010000 		.4byte	0x135
 6430 106d DB070000 		.4byte	.LLST57
 6431 1071 2F       		.uleb128 0x2f
 6432 1072 00000000 		.4byte	.Ldebug_ranges0+0
 6433 1076 19       		.uleb128 0x19
 6434 1077 B9040000 		.4byte	.LASF112
 6435 107b 01       		.byte	0x1
 6436 107c A10A     		.2byte	0xaa1
 6437 107e E4080000 		.4byte	0x8e4
 6438 1082 33080000 		.4byte	.LLST58
 6439 1086 25       		.uleb128 0x25
 6440 1087 1C000000 		.4byte	.LBB41
 6441 108b 1A000000 		.4byte	.LBE41-.LBB41
 6442 108f AD100000 		.4byte	0x10ad
 6443 1093 19       		.uleb128 0x19
 6444 1094 C60C0000 		.4byte	.LASF144
 6445 1098 01       		.byte	0x1
 6446 1099 A90A     		.2byte	0xaa9
 6447 109b E7100000 		.4byte	0x10e7
 6448 109f 51080000 		.4byte	.LLST59
 6449 10a3 1B       		.uleb128 0x1b
 6450 10a4 36000000 		.4byte	.LVL172
 6451 10a8 1E050000 		.4byte	0x51e
 6452 10ac 00       		.byte	0
 6453 10ad 21       		.uleb128 0x21
 6454 10ae 7C000000 		.4byte	.LVL179
 6455 10b2 72200000 		.4byte	0x2072
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 221


 6456 10b6 C1100000 		.4byte	0x10c1
 6457 10ba 1D       		.uleb128 0x1d
 6458 10bb 01       		.uleb128 0x1
 6459 10bc 50       		.byte	0x50
 6460 10bd 02       		.uleb128 0x2
 6461 10be 76       		.byte	0x76
 6462 10bf 00       		.sleb128 0
 6463 10c0 00       		.byte	0
 6464 10c1 21       		.uleb128 0x21
 6465 10c2 88000000 		.4byte	.LVL180
 6466 10c6 72200000 		.4byte	0x2072
 6467 10ca D5100000 		.4byte	0x10d5
 6468 10ce 1D       		.uleb128 0x1d
 6469 10cf 01       		.uleb128 0x1
 6470 10d0 50       		.byte	0x50
 6471 10d1 02       		.uleb128 0x2
 6472 10d2 74       		.byte	0x74
 6473 10d3 18       		.sleb128 24
 6474 10d4 00       		.byte	0
 6475 10d5 1C       		.uleb128 0x1c
 6476 10d6 AE000000 		.4byte	.LVL181
 6477 10da 5B200000 		.4byte	0x205b
 6478 10de 1D       		.uleb128 0x1d
 6479 10df 01       		.uleb128 0x1
 6480 10e0 51       		.byte	0x51
 6481 10e1 02       		.uleb128 0x2
 6482 10e2 76       		.byte	0x76
 6483 10e3 00       		.sleb128 0
 6484 10e4 00       		.byte	0
 6485 10e5 00       		.byte	0
 6486 10e6 00       		.byte	0
 6487 10e7 06       		.uleb128 0x6
 6488 10e8 04       		.byte	0x4
 6489 10e9 34020000 		.4byte	0x234
 6490 10ed 24       		.uleb128 0x24
 6491 10ee 110A0000 		.4byte	.LASF145
 6492 10f2 01       		.byte	0x1
 6493 10f3 9208     		.2byte	0x892
 6494 10f5 35010000 		.4byte	0x135
 6495 10f9 00000000 		.4byte	.LFB85
 6496 10fd D8000000 		.4byte	.LFE85-.LFB85
 6497 1101 01       		.uleb128 0x1
 6498 1102 9C       		.byte	0x9c
 6499 1103 A6110000 		.4byte	0x11a6
 6500 1107 19       		.uleb128 0x19
 6501 1108 A5050000 		.4byte	.LASF88
 6502 110c 01       		.byte	0x1
 6503 110d 9408     		.2byte	0x894
 6504 110f 45050000 		.4byte	0x545
 6505 1113 73080000 		.4byte	.LLST60
 6506 1117 19       		.uleb128 0x19
 6507 1118 31010000 		.4byte	.LASF146
 6508 111c 01       		.byte	0x1
 6509 111d 9508     		.2byte	0x895
 6510 111f 35010000 		.4byte	0x135
 6511 1123 C0080000 		.4byte	.LLST61
 6512 1127 25       		.uleb128 0x25
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 222


 6513 1128 84000000 		.4byte	.LBB44
 6514 112c 22000000 		.4byte	.LBE44-.LBB44
 6515 1130 4E110000 		.4byte	0x114e
 6516 1134 19       		.uleb128 0x19
 6517 1135 FA080000 		.4byte	.LASF147
 6518 1139 01       		.byte	0x1
 6519 113a CD08     		.2byte	0x8cd
 6520 113c 4B010000 		.4byte	0x14b
 6521 1140 02090000 		.4byte	.LLST62
 6522 1144 1B       		.uleb128 0x1b
 6523 1145 90000000 		.4byte	.LVL199
 6524 1149 27100000 		.4byte	0x1027
 6525 114d 00       		.byte	0
 6526 114e 1B       		.uleb128 0x1b
 6527 114f 06000000 		.4byte	.LVL189
 6528 1153 50200000 		.4byte	0x2050
 6529 1157 21       		.uleb128 0x21
 6530 1158 34000000 		.4byte	.LVL192
 6531 115c 72200000 		.4byte	0x2072
 6532 1160 6B110000 		.4byte	0x116b
 6533 1164 1D       		.uleb128 0x1d
 6534 1165 01       		.uleb128 0x1
 6535 1166 50       		.byte	0x50
 6536 1167 02       		.uleb128 0x2
 6537 1168 75       		.byte	0x75
 6538 1169 18       		.sleb128 24
 6539 116a 00       		.byte	0
 6540 116b 21       		.uleb128 0x21
 6541 116c 3C000000 		.4byte	.LVL193
 6542 1170 72200000 		.4byte	0x2072
 6543 1174 7F110000 		.4byte	0x117f
 6544 1178 1D       		.uleb128 0x1d
 6545 1179 01       		.uleb128 0x1
 6546 117a 50       		.byte	0x50
 6547 117b 02       		.uleb128 0x2
 6548 117c 76       		.byte	0x76
 6549 117d 00       		.sleb128 0
 6550 117e 00       		.byte	0
 6551 117f 21       		.uleb128 0x21
 6552 1180 60000000 		.4byte	.LVL194
 6553 1184 5B200000 		.4byte	0x205b
 6554 1188 93110000 		.4byte	0x1193
 6555 118c 1D       		.uleb128 0x1d
 6556 118d 01       		.uleb128 0x1
 6557 118e 51       		.byte	0x51
 6558 118f 02       		.uleb128 0x2
 6559 1190 76       		.byte	0x76
 6560 1191 00       		.sleb128 0
 6561 1192 00       		.byte	0
 6562 1193 1B       		.uleb128 0x1b
 6563 1194 84000000 		.4byte	.LVL197
 6564 1198 1E050000 		.4byte	0x51e
 6565 119c 1B       		.uleb128 0x1b
 6566 119d CC000000 		.4byte	.LVL207
 6567 11a1 67200000 		.4byte	0x2067
 6568 11a5 00       		.byte	0
 6569 11a6 26       		.uleb128 0x26
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 223


 6570 11a7 42090000 		.4byte	.LASF148
 6571 11ab 01       		.byte	0x1
 6572 11ac E904     		.2byte	0x4e9
 6573 11ae 00000000 		.4byte	.LFB72
 6574 11b2 6C000000 		.4byte	.LFE72-.LFB72
 6575 11b6 01       		.uleb128 0x1
 6576 11b7 9C       		.byte	0x9c
 6577 11b8 46120000 		.4byte	0x1246
 6578 11bc 18       		.uleb128 0x18
 6579 11bd 48080000 		.4byte	.LASF149
 6580 11c1 01       		.byte	0x1
 6581 11c2 E904     		.2byte	0x4e9
 6582 11c4 4C120000 		.4byte	0x124c
 6583 11c8 38090000 		.4byte	.LLST63
 6584 11cc 18       		.uleb128 0x18
 6585 11cd FE0D0000 		.4byte	.LASF150
 6586 11d1 01       		.byte	0x1
 6587 11d2 E904     		.2byte	0x4e9
 6588 11d4 E4080000 		.4byte	0x8e4
 6589 11d8 64090000 		.4byte	.LLST64
 6590 11dc 19       		.uleb128 0x19
 6591 11dd 25010000 		.4byte	.LASF111
 6592 11e1 01       		.byte	0x1
 6593 11e2 EB04     		.2byte	0x4eb
 6594 11e4 4B010000 		.4byte	0x14b
 6595 11e8 90090000 		.4byte	.LLST65
 6596 11ec 1F       		.uleb128 0x1f
 6597 11ed 31010000 		.4byte	.LASF146
 6598 11f1 01       		.byte	0x1
 6599 11f2 EC04     		.2byte	0x4ec
 6600 11f4 35010000 		.4byte	0x135
 6601 11f8 01       		.uleb128 0x1
 6602 11f9 50       		.byte	0x50
 6603 11fa 19       		.uleb128 0x19
 6604 11fb 340B0000 		.4byte	.LASF151
 6605 11ff 01       		.byte	0x1
 6606 1200 EC04     		.2byte	0x4ec
 6607 1202 35010000 		.4byte	0x135
 6608 1206 A3090000 		.4byte	.LLST66
 6609 120a 30       		.uleb128 0x30
 6610 120b 20000000 		.4byte	.Ldebug_ranges0+0x20
 6611 120f 33120000 		.4byte	0x1233
 6612 1213 19       		.uleb128 0x19
 6613 1214 B9040000 		.4byte	.LASF112
 6614 1218 01       		.byte	0x1
 6615 1219 F604     		.2byte	0x4f6
 6616 121b E4080000 		.4byte	0x8e4
 6617 121f C2090000 		.4byte	.LLST67
 6618 1223 1C       		.uleb128 0x1c
 6619 1224 4A000000 		.4byte	.LVL216
 6620 1228 56080000 		.4byte	0x856
 6621 122c 1D       		.uleb128 0x1d
 6622 122d 01       		.uleb128 0x1
 6623 122e 51       		.byte	0x51
 6624 122f 01       		.uleb128 0x1
 6625 1230 30       		.byte	0x30
 6626 1231 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 224


 6627 1232 00       		.byte	0
 6628 1233 1B       		.uleb128 0x1b
 6629 1234 0A000000 		.4byte	.LVL211
 6630 1238 670F0000 		.4byte	0xf67
 6631 123c 1B       		.uleb128 0x1b
 6632 123d 4E000000 		.4byte	.LVL217
 6633 1241 ED100000 		.4byte	0x10ed
 6634 1245 00       		.byte	0
 6635 1246 06       		.uleb128 0x6
 6636 1247 04       		.byte	0x4
 6637 1248 4B010000 		.4byte	0x14b
 6638 124c 07       		.uleb128 0x7
 6639 124d 46120000 		.4byte	0x1246
 6640 1251 26       		.uleb128 0x26
 6641 1252 EE000000 		.4byte	.LASF152
 6642 1256 01       		.byte	0x1
 6643 1257 3D05     		.2byte	0x53d
 6644 1259 00000000 		.4byte	.LFB73
 6645 125d 34000000 		.4byte	.LFE73-.LFB73
 6646 1261 01       		.uleb128 0x1
 6647 1262 9C       		.byte	0x9c
 6648 1263 B3120000 		.4byte	0x12b3
 6649 1267 18       		.uleb128 0x18
 6650 1268 DA0D0000 		.4byte	.LASF153
 6651 126c 01       		.byte	0x1
 6652 126d 3D05     		.2byte	0x53d
 6653 126f E4080000 		.4byte	0x8e4
 6654 1273 D5090000 		.4byte	.LLST68
 6655 1277 19       		.uleb128 0x19
 6656 1278 31010000 		.4byte	.LASF146
 6657 127c 01       		.byte	0x1
 6658 127d 3F05     		.2byte	0x53f
 6659 127f 35010000 		.4byte	0x135
 6660 1283 0C0A0000 		.4byte	.LLST69
 6661 1287 1B       		.uleb128 0x1b
 6662 1288 0A000000 		.4byte	.LVL221
 6663 128c 670F0000 		.4byte	0xf67
 6664 1290 21       		.uleb128 0x21
 6665 1291 12000000 		.4byte	.LVL222
 6666 1295 56080000 		.4byte	0x856
 6667 1299 A9120000 		.4byte	0x12a9
 6668 129d 1D       		.uleb128 0x1d
 6669 129e 01       		.uleb128 0x1
 6670 129f 50       		.byte	0x50
 6671 12a0 02       		.uleb128 0x2
 6672 12a1 74       		.byte	0x74
 6673 12a2 00       		.sleb128 0
 6674 12a3 1D       		.uleb128 0x1d
 6675 12a4 01       		.uleb128 0x1
 6676 12a5 51       		.byte	0x51
 6677 12a6 01       		.uleb128 0x1
 6678 12a7 30       		.byte	0x30
 6679 12a8 00       		.byte	0
 6680 12a9 1B       		.uleb128 0x1b
 6681 12aa 16000000 		.4byte	.LVL223
 6682 12ae ED100000 		.4byte	0x10ed
 6683 12b2 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 225


 6684 12b3 24       		.uleb128 0x24
 6685 12b4 C9040000 		.4byte	.LASF154
 6686 12b8 01       		.byte	0x1
 6687 12b9 310A     		.2byte	0xa31
 6688 12bb 35010000 		.4byte	0x135
 6689 12bf 00000000 		.4byte	.LFB90
 6690 12c3 20000000 		.4byte	.LFE90-.LFB90
 6691 12c7 01       		.uleb128 0x1
 6692 12c8 9C       		.byte	0x9c
 6693 12c9 00130000 		.4byte	0x1300
 6694 12cd 18       		.uleb128 0x18
 6695 12ce 25080000 		.4byte	.LASF155
 6696 12d2 01       		.byte	0x1
 6697 12d3 310A     		.2byte	0xa31
 6698 12d5 4B010000 		.4byte	0x14b
 6699 12d9 420A0000 		.4byte	.LLST70
 6700 12dd 19       		.uleb128 0x19
 6701 12de AB050000 		.4byte	.LASF130
 6702 12e2 01       		.byte	0x1
 6703 12e3 330A     		.2byte	0xa33
 6704 12e5 35010000 		.4byte	0x135
 6705 12e9 6E0A0000 		.4byte	.LLST71
 6706 12ed 1B       		.uleb128 0x1b
 6707 12ee 08000000 		.4byte	.LVL228
 6708 12f2 670F0000 		.4byte	0xf67
 6709 12f6 1B       		.uleb128 0x1b
 6710 12f7 18000000 		.4byte	.LVL230
 6711 12fb ED100000 		.4byte	0x10ed
 6712 12ff 00       		.byte	0
 6713 1300 26       		.uleb128 0x26
 6714 1301 B8060000 		.4byte	.LASF156
 6715 1305 01       		.byte	0x1
 6716 1306 AD0B     		.2byte	0xbad
 6717 1308 00000000 		.4byte	.LFB92
 6718 130c 70000000 		.4byte	.LFE92-.LFB92
 6719 1310 01       		.uleb128 0x1
 6720 1311 9C       		.byte	0x9c
 6721 1312 7A130000 		.4byte	0x137a
 6722 1316 22       		.uleb128 0x22
 6723 1317 1C000000 		.4byte	.LBB48
 6724 131b 4C000000 		.4byte	.LBE48-.LBB48
 6725 131f 19       		.uleb128 0x19
 6726 1320 AA080000 		.4byte	.LASF157
 6727 1324 01       		.byte	0x1
 6728 1325 E10B     		.2byte	0xbe1
 6729 1327 40010000 		.4byte	0x140
 6730 132b 8D0A0000 		.4byte	.LLST72
 6731 132f 28       		.uleb128 0x28
 6732 1330 51040000 		.4byte	0x451
 6733 1334 20000000 		.4byte	.LBB49
 6734 1338 06000000 		.4byte	.LBE49-.LBB49
 6735 133c 01       		.byte	0x1
 6736 133d E10B     		.2byte	0xbe1
 6737 133f 5E130000 		.4byte	0x135e
 6738 1343 2B       		.uleb128 0x2b
 6739 1344 61040000 		.4byte	0x461
 6740 1348 A00A0000 		.4byte	.LLST73
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 226


 6741 134c 22       		.uleb128 0x22
 6742 134d 20000000 		.4byte	.LBB50
 6743 1351 06000000 		.4byte	.LBE50-.LBB50
 6744 1355 31       		.uleb128 0x31
 6745 1356 6C040000 		.4byte	0x46c
 6746 135a 01       		.uleb128 0x1
 6747 135b 53       		.byte	0x53
 6748 135c 00       		.byte	0
 6749 135d 00       		.byte	0
 6750 135e 22       		.uleb128 0x22
 6751 135f 2A000000 		.4byte	.LBB51
 6752 1363 3E000000 		.4byte	.LBE51-.LBB51
 6753 1367 19       		.uleb128 0x19
 6754 1368 7A050000 		.4byte	.LASF158
 6755 136c 01       		.byte	0x1
 6756 136d E10B     		.2byte	0xbe1
 6757 136f 7A130000 		.4byte	0x137a
 6758 1373 B30A0000 		.4byte	.LLST74
 6759 1377 00       		.byte	0
 6760 1378 00       		.byte	0
 6761 1379 00       		.byte	0
 6762 137a 07       		.uleb128 0x7
 6763 137b E7100000 		.4byte	0x10e7
 6764 137f 26       		.uleb128 0x26
 6765 1380 43000000 		.4byte	.LASF159
 6766 1384 01       		.byte	0x1
 6767 1385 A806     		.2byte	0x6a8
 6768 1387 00000000 		.4byte	.LFB78
 6769 138b C0000000 		.4byte	.LFE78-.LFB78
 6770 138f 01       		.uleb128 0x1
 6771 1390 9C       		.byte	0x9c
 6772 1391 31140000 		.4byte	0x1431
 6773 1395 18       		.uleb128 0x18
 6774 1396 8A070000 		.4byte	.LASF160
 6775 139a 01       		.byte	0x1
 6776 139b A806     		.2byte	0x6a8
 6777 139d 3F020000 		.4byte	0x23f
 6778 13a1 D00A0000 		.4byte	.LLST75
 6779 13a5 19       		.uleb128 0x19
 6780 13a6 A5050000 		.4byte	.LASF88
 6781 13aa 01       		.byte	0x1
 6782 13ab AA06     		.2byte	0x6aa
 6783 13ad 45050000 		.4byte	0x545
 6784 13b1 EE0A0000 		.4byte	.LLST76
 6785 13b5 1B       		.uleb128 0x1b
 6786 13b6 08000000 		.4byte	.LVL236
 6787 13ba 50200000 		.4byte	0x2050
 6788 13be 21       		.uleb128 0x21
 6789 13bf 18000000 		.4byte	.LVL238
 6790 13c3 72200000 		.4byte	0x2072
 6791 13c7 D2130000 		.4byte	0x13d2
 6792 13cb 1D       		.uleb128 0x1d
 6793 13cc 01       		.uleb128 0x1
 6794 13cd 50       		.byte	0x50
 6795 13ce 02       		.uleb128 0x2
 6796 13cf 75       		.byte	0x75
 6797 13d0 00       		.sleb128 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 227


 6798 13d1 00       		.byte	0
 6799 13d2 21       		.uleb128 0x21
 6800 13d3 48000000 		.4byte	.LVL239
 6801 13d7 72200000 		.4byte	0x2072
 6802 13db E6130000 		.4byte	0x13e6
 6803 13df 1D       		.uleb128 0x1d
 6804 13e0 01       		.uleb128 0x1
 6805 13e1 50       		.byte	0x50
 6806 13e2 02       		.uleb128 0x2
 6807 13e3 74       		.byte	0x74
 6808 13e4 18       		.sleb128 24
 6809 13e5 00       		.byte	0
 6810 13e6 21       		.uleb128 0x21
 6811 13e7 50000000 		.4byte	.LVL240
 6812 13eb 5B200000 		.4byte	0x205b
 6813 13ef 03140000 		.4byte	0x1403
 6814 13f3 1D       		.uleb128 0x1d
 6815 13f4 01       		.uleb128 0x1
 6816 13f5 50       		.byte	0x50
 6817 13f6 05       		.uleb128 0x5
 6818 13f7 03       		.byte	0x3
 6819 13f8 00000000 		.4byte	.LANCHOR0
 6820 13fc 1D       		.uleb128 0x1d
 6821 13fd 01       		.uleb128 0x1
 6822 13fe 51       		.byte	0x51
 6823 13ff 02       		.uleb128 0x2
 6824 1400 75       		.byte	0x75
 6825 1401 00       		.sleb128 0
 6826 1402 00       		.byte	0
 6827 1403 1B       		.uleb128 0x1b
 6828 1404 64000000 		.4byte	.LVL241
 6829 1408 67200000 		.4byte	0x2067
 6830 140c 1B       		.uleb128 0x1b
 6831 140d 70000000 		.4byte	.LVL242
 6832 1411 50200000 		.4byte	0x2050
 6833 1415 1B       		.uleb128 0x1b
 6834 1416 74000000 		.4byte	.LVL243
 6835 141a 1E050000 		.4byte	0x51e
 6836 141e 1B       		.uleb128 0x1b
 6837 141f 78000000 		.4byte	.LVL244
 6838 1423 67200000 		.4byte	0x2067
 6839 1427 1B       		.uleb128 0x1b
 6840 1428 B6000000 		.4byte	.LVL247
 6841 142c 00130000 		.4byte	0x1300
 6842 1430 00       		.byte	0
 6843 1431 26       		.uleb128 0x26
 6844 1432 36040000 		.4byte	.LASF161
 6845 1436 01       		.byte	0x1
 6846 1437 F80B     		.2byte	0xbf8
 6847 1439 00000000 		.4byte	.LFB93
 6848 143d 20000000 		.4byte	.LFE93-.LFB93
 6849 1441 01       		.uleb128 0x1
 6850 1442 9C       		.byte	0x9c
 6851 1443 92140000 		.4byte	0x1492
 6852 1447 18       		.uleb128 0x18
 6853 1448 49060000 		.4byte	.LASF162
 6854 144c 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 228


 6855 144d F80B     		.2byte	0xbf8
 6856 144f 7A130000 		.4byte	0x137a
 6857 1453 010B0000 		.4byte	.LLST77
 6858 1457 18       		.uleb128 0x18
 6859 1458 CD010000 		.4byte	.LASF109
 6860 145c 01       		.byte	0x1
 6861 145d F80B     		.2byte	0xbf8
 6862 145f E4080000 		.4byte	0x8e4
 6863 1463 220B0000 		.4byte	.LLST78
 6864 1467 21       		.uleb128 0x21
 6865 1468 10000000 		.4byte	.LVL251
 6866 146c 7E200000 		.4byte	0x207e
 6867 1470 7C140000 		.4byte	0x147c
 6868 1474 1D       		.uleb128 0x1d
 6869 1475 01       		.uleb128 0x1
 6870 1476 50       		.byte	0x50
 6871 1477 03       		.uleb128 0x3
 6872 1478 F3       		.byte	0xf3
 6873 1479 01       		.uleb128 0x1
 6874 147a 50       		.byte	0x50
 6875 147b 00       		.byte	0
 6876 147c 1C       		.uleb128 0x1c
 6877 147d 18000000 		.4byte	.LVL252
 6878 1481 56080000 		.4byte	0x856
 6879 1485 1D       		.uleb128 0x1d
 6880 1486 01       		.uleb128 0x1
 6881 1487 50       		.byte	0x50
 6882 1488 02       		.uleb128 0x2
 6883 1489 74       		.byte	0x74
 6884 148a 00       		.sleb128 0
 6885 148b 1D       		.uleb128 0x1d
 6886 148c 01       		.uleb128 0x1
 6887 148d 51       		.byte	0x51
 6888 148e 01       		.uleb128 0x1
 6889 148f 31       		.byte	0x31
 6890 1490 00       		.byte	0
 6891 1491 00       		.byte	0
 6892 1492 26       		.uleb128 0x26
 6893 1493 DB040000 		.4byte	.LASF163
 6894 1497 01       		.byte	0x1
 6895 1498 090C     		.2byte	0xc09
 6896 149a 00000000 		.4byte	.LFB94
 6897 149e 28000000 		.4byte	.LFE94-.LFB94
 6898 14a2 01       		.uleb128 0x1
 6899 14a3 9C       		.byte	0x9c
 6900 14a4 03150000 		.4byte	0x1503
 6901 14a8 18       		.uleb128 0x18
 6902 14a9 49060000 		.4byte	.LASF162
 6903 14ad 01       		.byte	0x1
 6904 14ae 090C     		.2byte	0xc09
 6905 14b0 E7100000 		.4byte	0x10e7
 6906 14b4 4E0B0000 		.4byte	.LLST79
 6907 14b8 18       		.uleb128 0x18
 6908 14b9 B00D0000 		.4byte	.LASF28
 6909 14bd 01       		.byte	0x1
 6910 14be 090C     		.2byte	0xc09
 6911 14c0 E4080000 		.4byte	0x8e4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 229


 6912 14c4 6F0B0000 		.4byte	.LLST80
 6913 14c8 18       		.uleb128 0x18
 6914 14c9 CD010000 		.4byte	.LASF109
 6915 14cd 01       		.byte	0x1
 6916 14ce 090C     		.2byte	0xc09
 6917 14d0 E4080000 		.4byte	0x8e4
 6918 14d4 900B0000 		.4byte	.LLST81
 6919 14d8 21       		.uleb128 0x21
 6920 14d9 1A000000 		.4byte	.LVL257
 6921 14dd 5B200000 		.4byte	0x205b
 6922 14e1 ED140000 		.4byte	0x14ed
 6923 14e5 1D       		.uleb128 0x1d
 6924 14e6 01       		.uleb128 0x1
 6925 14e7 50       		.byte	0x50
 6926 14e8 03       		.uleb128 0x3
 6927 14e9 F3       		.byte	0xf3
 6928 14ea 01       		.uleb128 0x1
 6929 14eb 50       		.byte	0x50
 6930 14ec 00       		.byte	0
 6931 14ed 1C       		.uleb128 0x1c
 6932 14ee 22000000 		.4byte	.LVL258
 6933 14f2 56080000 		.4byte	0x856
 6934 14f6 1D       		.uleb128 0x1d
 6935 14f7 01       		.uleb128 0x1
 6936 14f8 50       		.byte	0x50
 6937 14f9 02       		.uleb128 0x2
 6938 14fa 74       		.byte	0x74
 6939 14fb 00       		.sleb128 0
 6940 14fc 1D       		.uleb128 0x1d
 6941 14fd 01       		.uleb128 0x1
 6942 14fe 51       		.byte	0x51
 6943 14ff 01       		.uleb128 0x1
 6944 1500 31       		.byte	0x31
 6945 1501 00       		.byte	0
 6946 1502 00       		.byte	0
 6947 1503 24       		.uleb128 0x24
 6948 1504 FA0B0000 		.4byte	.LASF164
 6949 1508 01       		.byte	0x1
 6950 1509 420C     		.2byte	0xc42
 6951 150b 35010000 		.4byte	0x135
 6952 150f 00000000 		.4byte	.LFB95
 6953 1513 74000000 		.4byte	.LFE95-.LFB95
 6954 1517 01       		.uleb128 0x1
 6955 1518 9C       		.byte	0x9c
 6956 1519 A3150000 		.4byte	0x15a3
 6957 151d 18       		.uleb128 0x18
 6958 151e 49060000 		.4byte	.LASF162
 6959 1522 01       		.byte	0x1
 6960 1523 420C     		.2byte	0xc42
 6961 1525 A3150000 		.4byte	0x15a3
 6962 1529 BC0B0000 		.4byte	.LLST82
 6963 152d 19       		.uleb128 0x19
 6964 152e AF090000 		.4byte	.LASF165
 6965 1532 01       		.byte	0x1
 6966 1533 440C     		.2byte	0xc44
 6967 1535 45050000 		.4byte	0x545
 6968 1539 DD0B0000 		.4byte	.LLST83
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 230


 6969 153d 19       		.uleb128 0x19
 6970 153e B1040000 		.4byte	.LASF87
 6971 1542 01       		.byte	0x1
 6972 1543 450C     		.2byte	0xc45
 6973 1545 35010000 		.4byte	0x135
 6974 1549 F00B0000 		.4byte	.LLST84
 6975 154d 21       		.uleb128 0x21
 6976 154e 10000000 		.4byte	.LVL263
 6977 1552 72200000 		.4byte	0x2072
 6978 1556 61150000 		.4byte	0x1561
 6979 155a 1D       		.uleb128 0x1d
 6980 155b 01       		.uleb128 0x1
 6981 155c 50       		.byte	0x50
 6982 155d 02       		.uleb128 0x2
 6983 155e 75       		.byte	0x75
 6984 155f 00       		.sleb128 0
 6985 1560 00       		.byte	0
 6986 1561 21       		.uleb128 0x21
 6987 1562 20000000 		.4byte	.LVL264
 6988 1566 72200000 		.4byte	0x2072
 6989 156a 75150000 		.4byte	0x1575
 6990 156e 1D       		.uleb128 0x1d
 6991 156f 01       		.uleb128 0x1
 6992 1570 50       		.byte	0x50
 6993 1571 02       		.uleb128 0x2
 6994 1572 75       		.byte	0x75
 6995 1573 00       		.sleb128 0
 6996 1574 00       		.byte	0
 6997 1575 21       		.uleb128 0x21
 6998 1576 44000000 		.4byte	.LVL265
 6999 157a 5B200000 		.4byte	0x205b
 7000 157e 89150000 		.4byte	0x1589
 7001 1582 1D       		.uleb128 0x1d
 7002 1583 01       		.uleb128 0x1
 7003 1584 51       		.byte	0x51
 7004 1585 02       		.uleb128 0x2
 7005 1586 75       		.byte	0x75
 7006 1587 00       		.sleb128 0
 7007 1588 00       		.byte	0
 7008 1589 1C       		.uleb128 0x1c
 7009 158a 4E000000 		.4byte	.LVL266
 7010 158e 5B200000 		.4byte	0x205b
 7011 1592 1D       		.uleb128 0x1d
 7012 1593 01       		.uleb128 0x1
 7013 1594 50       		.byte	0x50
 7014 1595 05       		.uleb128 0x5
 7015 1596 03       		.byte	0x3
 7016 1597 14000000 		.4byte	.LANCHOR0+20
 7017 159b 1D       		.uleb128 0x1d
 7018 159c 01       		.uleb128 0x1
 7019 159d 51       		.byte	0x51
 7020 159e 02       		.uleb128 0x2
 7021 159f 75       		.byte	0x75
 7022 15a0 00       		.sleb128 0
 7023 15a1 00       		.byte	0
 7024 15a2 00       		.byte	0
 7025 15a3 07       		.uleb128 0x7
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 231


 7026 15a4 660B0000 		.4byte	0xb66
 7027 15a8 26       		.uleb128 0x26
 7028 15a9 890F0000 		.4byte	.LASF166
 7029 15ad 01       		.byte	0x1
 7030 15ae 860C     		.2byte	0xc86
 7031 15b0 00000000 		.4byte	.LFB96
 7032 15b4 54000000 		.4byte	.LFE96-.LFB96
 7033 15b8 01       		.uleb128 0x1
 7034 15b9 9C       		.byte	0x9c
 7035 15ba 28160000 		.4byte	0x1628
 7036 15be 18       		.uleb128 0x18
 7037 15bf A90C0000 		.4byte	.LASF167
 7038 15c3 01       		.byte	0x1
 7039 15c4 860C     		.2byte	0xc86
 7040 15c6 2E020000 		.4byte	0x22e
 7041 15ca 0F0C0000 		.4byte	.LLST85
 7042 15ce 18       		.uleb128 0x18
 7043 15cf B00D0000 		.4byte	.LASF28
 7044 15d3 01       		.byte	0x1
 7045 15d4 860C     		.2byte	0xc86
 7046 15d6 E4080000 		.4byte	0x8e4
 7047 15da 300C0000 		.4byte	.LLST86
 7048 15de 19       		.uleb128 0x19
 7049 15df AF090000 		.4byte	.LASF165
 7050 15e3 01       		.byte	0x1
 7051 15e4 880C     		.2byte	0xc88
 7052 15e6 45050000 		.4byte	0x545
 7053 15ea 510C0000 		.4byte	.LLST87
 7054 15ee 21       		.uleb128 0x21
 7055 15ef 0E000000 		.4byte	.LVL274
 7056 15f3 72200000 		.4byte	0x2072
 7057 15f7 03160000 		.4byte	0x1603
 7058 15fb 1D       		.uleb128 0x1d
 7059 15fc 01       		.uleb128 0x1
 7060 15fd 50       		.byte	0x50
 7061 15fe 03       		.uleb128 0x3
 7062 15ff F3       		.byte	0xf3
 7063 1600 01       		.uleb128 0x1
 7064 1601 50       		.byte	0x50
 7065 1602 00       		.byte	0
 7066 1603 21       		.uleb128 0x21
 7067 1604 16000000 		.4byte	.LVL275
 7068 1608 72200000 		.4byte	0x2072
 7069 160c 17160000 		.4byte	0x1617
 7070 1610 1D       		.uleb128 0x1d
 7071 1611 01       		.uleb128 0x1
 7072 1612 50       		.byte	0x50
 7073 1613 02       		.uleb128 0x2
 7074 1614 76       		.byte	0x76
 7075 1615 00       		.sleb128 0
 7076 1616 00       		.byte	0
 7077 1617 1C       		.uleb128 0x1c
 7078 1618 3C000000 		.4byte	.LVL276
 7079 161c 5B200000 		.4byte	0x205b
 7080 1620 1D       		.uleb128 0x1d
 7081 1621 01       		.uleb128 0x1
 7082 1622 51       		.byte	0x51
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 232


 7083 1623 02       		.uleb128 0x2
 7084 1624 76       		.byte	0x76
 7085 1625 00       		.sleb128 0
 7086 1626 00       		.byte	0
 7087 1627 00       		.byte	0
 7088 1628 26       		.uleb128 0x26
 7089 1629 440F0000 		.4byte	.LASF168
 7090 162d 01       		.byte	0x1
 7091 162e B60C     		.2byte	0xcb6
 7092 1630 00000000 		.4byte	.LFB97
 7093 1634 20000000 		.4byte	.LFE97-.LFB97
 7094 1638 01       		.uleb128 0x1
 7095 1639 9C       		.byte	0x9c
 7096 163a 61160000 		.4byte	0x1661
 7097 163e 18       		.uleb128 0x18
 7098 163f 41010000 		.4byte	.LASF169
 7099 1643 01       		.byte	0x1
 7100 1644 B60C     		.2byte	0xcb6
 7101 1646 67160000 		.4byte	0x1667
 7102 164a 640C0000 		.4byte	.LLST88
 7103 164e 1B       		.uleb128 0x1b
 7104 164f 08000000 		.4byte	.LVL279
 7105 1653 50200000 		.4byte	0x2050
 7106 1657 1B       		.uleb128 0x1b
 7107 1658 1A000000 		.4byte	.LVL280
 7108 165c 67200000 		.4byte	0x2067
 7109 1660 00       		.byte	0
 7110 1661 06       		.uleb128 0x6
 7111 1662 04       		.byte	0x4
 7112 1663 75030000 		.4byte	0x375
 7113 1667 07       		.uleb128 0x7
 7114 1668 61160000 		.4byte	0x1661
 7115 166c 26       		.uleb128 0x26
 7116 166d 8B0D0000 		.4byte	.LASF170
 7117 1671 01       		.byte	0x1
 7118 1672 C20C     		.2byte	0xcc2
 7119 1674 00000000 		.4byte	.LFB98
 7120 1678 14000000 		.4byte	.LFE98-.LFB98
 7121 167c 01       		.uleb128 0x1
 7122 167d 9C       		.byte	0x9c
 7123 167e 91160000 		.4byte	0x1691
 7124 1682 1E       		.uleb128 0x1e
 7125 1683 41010000 		.4byte	.LASF169
 7126 1687 01       		.byte	0x1
 7127 1688 C20C     		.2byte	0xcc2
 7128 168a 67160000 		.4byte	0x1667
 7129 168e 01       		.uleb128 0x1
 7130 168f 50       		.byte	0x50
 7131 1690 00       		.byte	0
 7132 1691 24       		.uleb128 0x24
 7133 1692 870C0000 		.4byte	.LASF171
 7134 1696 01       		.byte	0x1
 7135 1697 CA0C     		.2byte	0xcca
 7136 1699 35010000 		.4byte	0x135
 7137 169d 00000000 		.4byte	.LFB99
 7138 16a1 58000000 		.4byte	.LFE99-.LFB99
 7139 16a5 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 233


 7140 16a6 9C       		.byte	0x9c
 7141 16a7 2C170000 		.4byte	0x172c
 7142 16ab 18       		.uleb128 0x18
 7143 16ac 41010000 		.4byte	.LASF169
 7144 16b0 01       		.byte	0x1
 7145 16b1 CA0C     		.2byte	0xcca
 7146 16b3 67160000 		.4byte	0x1667
 7147 16b7 900C0000 		.4byte	.LLST89
 7148 16bb 18       		.uleb128 0x18
 7149 16bc 430E0000 		.4byte	.LASF172
 7150 16c0 01       		.byte	0x1
 7151 16c1 CA0C     		.2byte	0xcca
 7152 16c3 4C120000 		.4byte	0x124c
 7153 16c7 070D0000 		.4byte	.LLST90
 7154 16cb 19       		.uleb128 0x19
 7155 16cc B1040000 		.4byte	.LASF87
 7156 16d0 01       		.byte	0x1
 7157 16d1 CC0C     		.2byte	0xccc
 7158 16d3 35010000 		.4byte	0x135
 7159 16d7 330D0000 		.4byte	.LLST91
 7160 16db 25       		.uleb128 0x25
 7161 16dc 0A000000 		.4byte	.LBB52
 7162 16e0 42000000 		.4byte	.LBE52-.LBB52
 7163 16e4 19170000 		.4byte	0x1719
 7164 16e8 19       		.uleb128 0x19
 7165 16e9 B9040000 		.4byte	.LASF112
 7166 16ed 01       		.byte	0x1
 7167 16ee D40C     		.2byte	0xcd4
 7168 16f0 E4080000 		.4byte	0x8e4
 7169 16f4 690D0000 		.4byte	.LLST92
 7170 16f8 19       		.uleb128 0x19
 7171 16f9 AB060000 		.4byte	.LASF173
 7172 16fd 01       		.byte	0x1
 7173 16fe D50C     		.2byte	0xcd5
 7174 1700 E4080000 		.4byte	0x8e4
 7175 1704 870D0000 		.4byte	.LLST93
 7176 1708 1C       		.uleb128 0x1c
 7177 1709 3A000000 		.4byte	.LVL288
 7178 170d 6C160000 		.4byte	0x166c
 7179 1711 1D       		.uleb128 0x1d
 7180 1712 01       		.uleb128 0x1
 7181 1713 50       		.byte	0x50
 7182 1714 02       		.uleb128 0x2
 7183 1715 74       		.byte	0x74
 7184 1716 00       		.sleb128 0
 7185 1717 00       		.byte	0
 7186 1718 00       		.byte	0
 7187 1719 1B       		.uleb128 0x1b
 7188 171a 0A000000 		.4byte	.LVL284
 7189 171e 50200000 		.4byte	0x2050
 7190 1722 1B       		.uleb128 0x1b
 7191 1723 50000000 		.4byte	.LVL297
 7192 1727 67200000 		.4byte	0x2067
 7193 172b 00       		.byte	0
 7194 172c 2C       		.uleb128 0x2c
 7195 172d A6010000 		.4byte	.LASF175
 7196 1731 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 234


 7197 1732 090D     		.2byte	0xd09
 7198 1734 00000000 		.4byte	.LFB100
 7199 1738 10000000 		.4byte	.LFE100-.LFB100
 7200 173c 01       		.uleb128 0x1
 7201 173d 9C       		.byte	0x9c
 7202 173e 24       		.uleb128 0x24
 7203 173f FF0E0000 		.4byte	.LASF176
 7204 1743 01       		.byte	0x1
 7205 1744 130F     		.2byte	0xf13
 7206 1746 40010000 		.4byte	0x140
 7207 174a 00000000 		.4byte	.LFB105
 7208 174e 18000000 		.4byte	.LFE105-.LFB105
 7209 1752 01       		.uleb128 0x1
 7210 1753 9C       		.byte	0x9c
 7211 1754 A0170000 		.4byte	0x17a0
 7212 1758 18       		.uleb128 0x18
 7213 1759 6A0B0000 		.4byte	.LASF91
 7214 175d 01       		.byte	0x1
 7215 175e 130F     		.2byte	0xf13
 7216 1760 3F020000 		.4byte	0x23f
 7217 1764 B50D0000 		.4byte	.LLST94
 7218 1768 19       		.uleb128 0x19
 7219 1769 A5050000 		.4byte	.LASF88
 7220 176d 01       		.byte	0x1
 7221 176e 150F     		.2byte	0xf15
 7222 1770 45050000 		.4byte	0x545
 7223 1774 C80D0000 		.4byte	.LLST95
 7224 1778 19       		.uleb128 0x19
 7225 1779 11030000 		.4byte	.LASF177
 7226 177d 01       		.byte	0x1
 7227 177e 160F     		.2byte	0xf16
 7228 1780 56010000 		.4byte	0x156
 7229 1784 DB0D0000 		.4byte	.LLST96
 7230 1788 1F       		.uleb128 0x1f
 7231 1789 1C060000 		.4byte	.LASF122
 7232 178d 01       		.byte	0x1
 7233 178e 170F     		.2byte	0xf17
 7234 1790 40010000 		.4byte	0x140
 7235 1794 01       		.uleb128 0x1
 7236 1795 50       		.byte	0x50
 7237 1796 1B       		.uleb128 0x1b
 7238 1797 12000000 		.4byte	.LVL301
 7239 179b D8040000 		.4byte	0x4d8
 7240 179f 00       		.byte	0
 7241 17a0 24       		.uleb128 0x24
 7242 17a1 99070000 		.4byte	.LASF178
 7243 17a5 01       		.byte	0x1
 7244 17a6 810F     		.2byte	0xf81
 7245 17a8 3F020000 		.4byte	0x23f
 7246 17ac 00000000 		.4byte	.LFB108
 7247 17b0 0C000000 		.4byte	.LFE108-.LFB108
 7248 17b4 01       		.uleb128 0x1
 7249 17b5 9C       		.byte	0x9c
 7250 17b6 C9170000 		.4byte	0x17c9
 7251 17ba 1F       		.uleb128 0x1f
 7252 17bb B1040000 		.4byte	.LASF87
 7253 17bf 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 235


 7254 17c0 830F     		.2byte	0xf83
 7255 17c2 3F020000 		.4byte	0x23f
 7256 17c6 01       		.uleb128 0x1
 7257 17c7 50       		.byte	0x50
 7258 17c8 00       		.byte	0
 7259 17c9 24       		.uleb128 0x24
 7260 17ca CD0C0000 		.4byte	.LASF179
 7261 17ce 01       		.byte	0x1
 7262 17cf AE0F     		.2byte	0xfae
 7263 17d1 35010000 		.4byte	0x135
 7264 17d5 00000000 		.4byte	.LFB109
 7265 17d9 BC000000 		.4byte	.LFE109-.LFB109
 7266 17dd 01       		.uleb128 0x1
 7267 17de 9C       		.byte	0x9c
 7268 17df 38180000 		.4byte	0x1838
 7269 17e3 18       		.uleb128 0x18
 7270 17e4 D6060000 		.4byte	.LASF180
 7271 17e8 01       		.byte	0x1
 7272 17e9 AE0F     		.2byte	0xfae
 7273 17eb C3040000 		.4byte	0x4c3
 7274 17ef EF0D0000 		.4byte	.LLST97
 7275 17f3 19       		.uleb128 0x19
 7276 17f4 7B010000 		.4byte	.LASF181
 7277 17f8 01       		.byte	0x1
 7278 17f9 B00F     		.2byte	0xfb0
 7279 17fb 9C0D0000 		.4byte	0xd9c
 7280 17ff 7B0E0000 		.4byte	.LLST98
 7281 1803 19       		.uleb128 0x19
 7282 1804 B1040000 		.4byte	.LASF87
 7283 1808 01       		.byte	0x1
 7284 1809 B10F     		.2byte	0xfb1
 7285 180b 35010000 		.4byte	0x135
 7286 180f 070F0000 		.4byte	.LLST99
 7287 1813 21       		.uleb128 0x21
 7288 1814 44000000 		.4byte	.LVL305
 7289 1818 72200000 		.4byte	0x2072
 7290 181c 27180000 		.4byte	0x1827
 7291 1820 1D       		.uleb128 0x1d
 7292 1821 01       		.uleb128 0x1
 7293 1822 50       		.byte	0x50
 7294 1823 02       		.uleb128 0x2
 7295 1824 75       		.byte	0x75
 7296 1825 00       		.sleb128 0
 7297 1826 00       		.byte	0
 7298 1827 1C       		.uleb128 0x1c
 7299 1828 86000000 		.4byte	.LVL307
 7300 182c 5B200000 		.4byte	0x205b
 7301 1830 1D       		.uleb128 0x1d
 7302 1831 01       		.uleb128 0x1
 7303 1832 51       		.byte	0x51
 7304 1833 02       		.uleb128 0x2
 7305 1834 75       		.byte	0x75
 7306 1835 00       		.sleb128 0
 7307 1836 00       		.byte	0
 7308 1837 00       		.byte	0
 7309 1838 24       		.uleb128 0x24
 7310 1839 DC0E0000 		.4byte	.LASF182
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 236


 7311 183d 01       		.byte	0x1
 7312 183e 0810     		.2byte	0x1008
 7313 1840 35010000 		.4byte	0x135
 7314 1844 00000000 		.4byte	.LFB110
 7315 1848 88000000 		.4byte	.LFE110-.LFB110
 7316 184c 01       		.uleb128 0x1
 7317 184d 9C       		.byte	0x9c
 7318 184e A7180000 		.4byte	0x18a7
 7319 1852 18       		.uleb128 0x18
 7320 1853 D6060000 		.4byte	.LASF180
 7321 1857 01       		.byte	0x1
 7322 1858 0810     		.2byte	0x1008
 7323 185a C3040000 		.4byte	0x4c3
 7324 185e 3D0F0000 		.4byte	.LLST100
 7325 1862 19       		.uleb128 0x19
 7326 1863 A5050000 		.4byte	.LASF88
 7327 1867 01       		.byte	0x1
 7328 1868 0A10     		.2byte	0x100a
 7329 186a 9C0D0000 		.4byte	0xd9c
 7330 186e A50F0000 		.4byte	.LLST101
 7331 1872 19       		.uleb128 0x19
 7332 1873 B1040000 		.4byte	.LASF87
 7333 1877 01       		.byte	0x1
 7334 1878 0B10     		.2byte	0x100b
 7335 187a 35010000 		.4byte	0x135
 7336 187e 0D100000 		.4byte	.LLST102
 7337 1882 21       		.uleb128 0x21
 7338 1883 22000000 		.4byte	.LVL317
 7339 1887 72200000 		.4byte	0x2072
 7340 188b 96180000 		.4byte	0x1896
 7341 188f 1D       		.uleb128 0x1d
 7342 1890 01       		.uleb128 0x1
 7343 1891 50       		.byte	0x50
 7344 1892 02       		.uleb128 0x2
 7345 1893 75       		.byte	0x75
 7346 1894 00       		.sleb128 0
 7347 1895 00       		.byte	0
 7348 1896 1C       		.uleb128 0x1c
 7349 1897 72000000 		.4byte	.LVL319
 7350 189b 5B200000 		.4byte	0x205b
 7351 189f 1D       		.uleb128 0x1d
 7352 18a0 01       		.uleb128 0x1
 7353 18a1 51       		.byte	0x51
 7354 18a2 02       		.uleb128 0x2
 7355 18a3 75       		.byte	0x75
 7356 18a4 00       		.sleb128 0
 7357 18a5 00       		.byte	0
 7358 18a6 00       		.byte	0
 7359 18a7 26       		.uleb128 0x26
 7360 18a8 86080000 		.4byte	.LASF183
 7361 18ac 01       		.byte	0x1
 7362 18ad 5810     		.2byte	0x1058
 7363 18af 00000000 		.4byte	.LFB111
 7364 18b3 8C000000 		.4byte	.LFE111-.LFB111
 7365 18b7 01       		.uleb128 0x1
 7366 18b8 9C       		.byte	0x9c
 7367 18b9 3F190000 		.4byte	0x193f
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 237


 7368 18bd 18       		.uleb128 0x18
 7369 18be D6060000 		.4byte	.LASF180
 7370 18c2 01       		.byte	0x1
 7371 18c3 5810     		.2byte	0x1058
 7372 18c5 C3040000 		.4byte	0x4c3
 7373 18c9 5B100000 		.4byte	.LLST103
 7374 18cd 18       		.uleb128 0x18
 7375 18ce 23070000 		.4byte	.LASF184
 7376 18d2 01       		.byte	0x1
 7377 18d3 5810     		.2byte	0x1058
 7378 18d5 40010000 		.4byte	0x140
 7379 18d9 9D100000 		.4byte	.LLST104
 7380 18dd 19       		.uleb128 0x19
 7381 18de A5050000 		.4byte	.LASF88
 7382 18e2 01       		.byte	0x1
 7383 18e3 5A10     		.2byte	0x105a
 7384 18e5 9C0D0000 		.4byte	0xd9c
 7385 18e9 C9100000 		.4byte	.LLST105
 7386 18ed 19       		.uleb128 0x19
 7387 18ee B7010000 		.4byte	.LASF129
 7388 18f2 01       		.byte	0x1
 7389 18f3 5B10     		.2byte	0x105b
 7390 18f5 40010000 		.4byte	0x140
 7391 18f9 0B110000 		.4byte	.LLST106
 7392 18fd 19       		.uleb128 0x19
 7393 18fe 1B0F0000 		.4byte	.LASF185
 7394 1902 01       		.byte	0x1
 7395 1903 5B10     		.2byte	0x105b
 7396 1905 40010000 		.4byte	0x140
 7397 1909 1E110000 		.4byte	.LLST107
 7398 190d 2D       		.uleb128 0x2d
 7399 190e EB0A0000 		.4byte	.LASF186
 7400 1912 01       		.byte	0x1
 7401 1913 5C10     		.2byte	0x105c
 7402 1915 3F190000 		.4byte	0x193f
 7403 1919 01       		.byte	0x1
 7404 191a 21       		.uleb128 0x21
 7405 191b 44000000 		.4byte	.LVL333
 7406 191f 72200000 		.4byte	0x2072
 7407 1923 2E190000 		.4byte	0x192e
 7408 1927 1D       		.uleb128 0x1d
 7409 1928 01       		.uleb128 0x1
 7410 1929 50       		.byte	0x50
 7411 192a 02       		.uleb128 0x2
 7412 192b 75       		.byte	0x75
 7413 192c 00       		.sleb128 0
 7414 192d 00       		.byte	0
 7415 192e 1C       		.uleb128 0x1c
 7416 192f 80000000 		.4byte	.LVL334
 7417 1933 5B200000 		.4byte	0x205b
 7418 1937 1D       		.uleb128 0x1d
 7419 1938 01       		.uleb128 0x1
 7420 1939 51       		.byte	0x51
 7421 193a 02       		.uleb128 0x2
 7422 193b 75       		.byte	0x75
 7423 193c 00       		.sleb128 0
 7424 193d 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 238


 7425 193e 00       		.byte	0
 7426 193f 07       		.uleb128 0x7
 7427 1940 40010000 		.4byte	0x140
 7428 1944 24       		.uleb128 0x24
 7429 1945 8F000000 		.4byte	.LASF187
 7430 1949 01       		.byte	0x1
 7431 194a FA11     		.2byte	0x11fa
 7432 194c 4B010000 		.4byte	0x14b
 7433 1950 00000000 		.4byte	.LFB112
 7434 1954 20000000 		.4byte	.LFE112-.LFB112
 7435 1958 01       		.uleb128 0x1
 7436 1959 9C       		.byte	0x9c
 7437 195a 6D190000 		.4byte	0x196d
 7438 195e 1F       		.uleb128 0x1f
 7439 195f 1C060000 		.4byte	.LASF122
 7440 1963 01       		.byte	0x1
 7441 1964 FC11     		.2byte	0x11fc
 7442 1966 4B010000 		.4byte	0x14b
 7443 196a 01       		.uleb128 0x1
 7444 196b 50       		.byte	0x50
 7445 196c 00       		.byte	0
 7446 196d 2E       		.uleb128 0x2e
 7447 196e 130C0000 		.4byte	.LASF189
 7448 1972 01       		.byte	0x1
 7449 1973 0A12     		.2byte	0x120a
 7450 1975 3F020000 		.4byte	0x23f
 7451 1979 00000000 		.4byte	.LFB113
 7452 197d 20000000 		.4byte	.LFE113-.LFB113
 7453 1981 01       		.uleb128 0x1
 7454 1982 9C       		.byte	0x9c
 7455 1983 24       		.uleb128 0x24
 7456 1984 CB0E0000 		.4byte	.LASF190
 7457 1988 01       		.byte	0x1
 7458 1989 1B12     		.2byte	0x121b
 7459 198b EB000000 		.4byte	0xeb
 7460 198f 00000000 		.4byte	.LFB114
 7461 1993 80000000 		.4byte	.LFE114-.LFB114
 7462 1997 01       		.uleb128 0x1
 7463 1998 9C       		.byte	0x9c
 7464 1999 0B1A0000 		.4byte	0x1a0b
 7465 199d 18       		.uleb128 0x18
 7466 199e EF010000 		.4byte	.LASF191
 7467 19a2 01       		.byte	0x1
 7468 19a3 1B12     		.2byte	0x121b
 7469 19a5 35010000 		.4byte	0x135
 7470 19a9 3D110000 		.4byte	.LLST108
 7471 19ad 18       		.uleb128 0x18
 7472 19ae CD010000 		.4byte	.LASF109
 7473 19b2 01       		.byte	0x1
 7474 19b3 1B12     		.2byte	0x121b
 7475 19b5 4B010000 		.4byte	0x14b
 7476 19b9 69110000 		.4byte	.LLST109
 7477 19bd 19       		.uleb128 0x19
 7478 19be B20E0000 		.4byte	.LASF192
 7479 19c2 01       		.byte	0x1
 7480 19c3 1D12     		.2byte	0x121d
 7481 19c5 EB000000 		.4byte	0xeb
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 239


 7482 19c9 95110000 		.4byte	.LLST110
 7483 19cd 1B       		.uleb128 0x1b
 7484 19ce 0A000000 		.4byte	.LVL338
 7485 19d2 50200000 		.4byte	0x2050
 7486 19d6 21       		.uleb128 0x21
 7487 19d7 2A000000 		.4byte	.LVL339
 7488 19db 56080000 		.4byte	0x856
 7489 19df EF190000 		.4byte	0x19ef
 7490 19e3 1D       		.uleb128 0x1d
 7491 19e4 01       		.uleb128 0x1
 7492 19e5 50       		.byte	0x50
 7493 19e6 02       		.uleb128 0x2
 7494 19e7 74       		.byte	0x74
 7495 19e8 00       		.sleb128 0
 7496 19e9 1D       		.uleb128 0x1d
 7497 19ea 01       		.uleb128 0x1
 7498 19eb 51       		.byte	0x51
 7499 19ec 01       		.uleb128 0x1
 7500 19ed 31       		.byte	0x31
 7501 19ee 00       		.byte	0
 7502 19ef 1B       		.uleb128 0x1b
 7503 19f0 3E000000 		.4byte	.LVL340
 7504 19f4 67200000 		.4byte	0x2067
 7505 19f8 1B       		.uleb128 0x1b
 7506 19f9 42000000 		.4byte	.LVL341
 7507 19fd 50200000 		.4byte	0x2050
 7508 1a01 1B       		.uleb128 0x1b
 7509 1a02 74000000 		.4byte	.LVL343
 7510 1a06 67200000 		.4byte	0x2067
 7511 1a0a 00       		.byte	0
 7512 1a0b 24       		.uleb128 0x24
 7513 1a0c A20E0000 		.4byte	.LASF193
 7514 1a10 01       		.byte	0x1
 7515 1a11 5F12     		.2byte	0x125f
 7516 1a13 35010000 		.4byte	0x135
 7517 1a17 00000000 		.4byte	.LFB115
 7518 1a1b A4000000 		.4byte	.LFE115-.LFB115
 7519 1a1f 01       		.uleb128 0x1
 7520 1a20 9C       		.byte	0x9c
 7521 1a21 B31A0000 		.4byte	0x1ab3
 7522 1a25 18       		.uleb128 0x18
 7523 1a26 BA050000 		.4byte	.LASF194
 7524 1a2a 01       		.byte	0x1
 7525 1a2b 5F12     		.2byte	0x125f
 7526 1a2d EB000000 		.4byte	0xeb
 7527 1a31 B3110000 		.4byte	.LLST111
 7528 1a35 18       		.uleb128 0x18
 7529 1a36 590F0000 		.4byte	.LASF195
 7530 1a3a 01       		.byte	0x1
 7531 1a3b 5F12     		.2byte	0x125f
 7532 1a3d EB000000 		.4byte	0xeb
 7533 1a41 DF110000 		.4byte	.LLST112
 7534 1a45 18       		.uleb128 0x18
 7535 1a46 B8080000 		.4byte	.LASF196
 7536 1a4a 01       		.byte	0x1
 7537 1a4b 5F12     		.2byte	0x125f
 7538 1a4d B31A0000 		.4byte	0x1ab3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 240


 7539 1a51 24120000 		.4byte	.LLST113
 7540 1a55 18       		.uleb128 0x18
 7541 1a56 CD010000 		.4byte	.LASF109
 7542 1a5a 01       		.byte	0x1
 7543 1a5b 5F12     		.2byte	0x125f
 7544 1a5d 4B010000 		.4byte	0x14b
 7545 1a61 69120000 		.4byte	.LLST114
 7546 1a65 19       		.uleb128 0x19
 7547 1a66 B1040000 		.4byte	.LASF87
 7548 1a6a 01       		.byte	0x1
 7549 1a6b 6112     		.2byte	0x1261
 7550 1a6d 35010000 		.4byte	0x135
 7551 1a71 95120000 		.4byte	.LLST115
 7552 1a75 1B       		.uleb128 0x1b
 7553 1a76 0E000000 		.4byte	.LVL346
 7554 1a7a 50200000 		.4byte	0x2050
 7555 1a7e 21       		.uleb128 0x21
 7556 1a7f 40000000 		.4byte	.LVL347
 7557 1a83 56080000 		.4byte	0x856
 7558 1a87 971A0000 		.4byte	0x1a97
 7559 1a8b 1D       		.uleb128 0x1d
 7560 1a8c 01       		.uleb128 0x1
 7561 1a8d 50       		.byte	0x50
 7562 1a8e 02       		.uleb128 0x2
 7563 1a8f 76       		.byte	0x76
 7564 1a90 00       		.sleb128 0
 7565 1a91 1D       		.uleb128 0x1d
 7566 1a92 01       		.uleb128 0x1
 7567 1a93 51       		.byte	0x51
 7568 1a94 01       		.uleb128 0x1
 7569 1a95 31       		.byte	0x31
 7570 1a96 00       		.byte	0
 7571 1a97 1B       		.uleb128 0x1b
 7572 1a98 54000000 		.4byte	.LVL348
 7573 1a9c 67200000 		.4byte	0x2067
 7574 1aa0 1B       		.uleb128 0x1b
 7575 1aa1 58000000 		.4byte	.LVL349
 7576 1aa5 50200000 		.4byte	0x2050
 7577 1aa9 1B       		.uleb128 0x1b
 7578 1aaa 98000000 		.4byte	.LVL355
 7579 1aae 67200000 		.4byte	0x2067
 7580 1ab2 00       		.byte	0
 7581 1ab3 06       		.uleb128 0x6
 7582 1ab4 04       		.byte	0x4
 7583 1ab5 EB000000 		.4byte	0xeb
 7584 1ab9 24       		.uleb128 0x24
 7585 1aba 6D0D0000 		.4byte	.LASF197
 7586 1abe 01       		.byte	0x1
 7587 1abf AF12     		.2byte	0x12af
 7588 1ac1 35010000 		.4byte	0x135
 7589 1ac5 00000000 		.4byte	.LFB116
 7590 1ac9 B8000000 		.4byte	.LFE116-.LFB116
 7591 1acd 01       		.uleb128 0x1
 7592 1ace 9C       		.byte	0x9c
 7593 1acf 7E1B0000 		.4byte	0x1b7e
 7594 1ad3 18       		.uleb128 0x18
 7595 1ad4 31050000 		.4byte	.LASF198
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 241


 7596 1ad8 01       		.byte	0x1
 7597 1ad9 AF12     		.2byte	0x12af
 7598 1adb 3F020000 		.4byte	0x23f
 7599 1adf BF120000 		.4byte	.LLST116
 7600 1ae3 18       		.uleb128 0x18
 7601 1ae4 87000000 		.4byte	.LASF199
 7602 1ae8 01       		.byte	0x1
 7603 1ae9 AF12     		.2byte	0x12af
 7604 1aeb EB000000 		.4byte	0xeb
 7605 1aef EB120000 		.4byte	.LLST117
 7606 1af3 18       		.uleb128 0x18
 7607 1af4 27020000 		.4byte	.LASF200
 7608 1af8 01       		.byte	0x1
 7609 1af9 AF12     		.2byte	0x12af
 7610 1afb 45030000 		.4byte	0x345
 7611 1aff 30130000 		.4byte	.LLST118
 7612 1b03 18       		.uleb128 0x18
 7613 1b04 41030000 		.4byte	.LASF201
 7614 1b08 01       		.byte	0x1
 7615 1b09 AF12     		.2byte	0x12af
 7616 1b0b B31A0000 		.4byte	0x1ab3
 7617 1b0f 51130000 		.4byte	.LLST119
 7618 1b13 19       		.uleb128 0x19
 7619 1b14 A5050000 		.4byte	.LASF88
 7620 1b18 01       		.byte	0x1
 7621 1b19 B112     		.2byte	0x12b1
 7622 1b1b 45050000 		.4byte	0x545
 7623 1b1f 7D130000 		.4byte	.LLST120
 7624 1b23 19       		.uleb128 0x19
 7625 1b24 B1040000 		.4byte	.LASF87
 7626 1b28 01       		.byte	0x1
 7627 1b29 B212     		.2byte	0x12b2
 7628 1b2b 35010000 		.4byte	0x135
 7629 1b2f A9130000 		.4byte	.LLST121
 7630 1b33 19       		.uleb128 0x19
 7631 1b34 95020000 		.4byte	.LASF202
 7632 1b38 01       		.byte	0x1
 7633 1b39 B312     		.2byte	0x12b3
 7634 1b3b CA000000 		.4byte	0xca
 7635 1b3f D3130000 		.4byte	.LLST122
 7636 1b43 1B       		.uleb128 0x1b
 7637 1b44 0E000000 		.4byte	.LVL359
 7638 1b48 50200000 		.4byte	0x2050
 7639 1b4c 21       		.uleb128 0x21
 7640 1b4d 64000000 		.4byte	.LVL364
 7641 1b51 72200000 		.4byte	0x2072
 7642 1b55 601B0000 		.4byte	0x1b60
 7643 1b59 1D       		.uleb128 0x1d
 7644 1b5a 01       		.uleb128 0x1
 7645 1b5b 50       		.byte	0x50
 7646 1b5c 02       		.uleb128 0x2
 7647 1b5d 77       		.byte	0x77
 7648 1b5e 00       		.sleb128 0
 7649 1b5f 00       		.byte	0
 7650 1b60 21       		.uleb128 0x21
 7651 1b61 8A000000 		.4byte	.LVL366
 7652 1b65 5B200000 		.4byte	0x205b
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 242


 7653 1b69 741B0000 		.4byte	0x1b74
 7654 1b6d 1D       		.uleb128 0x1d
 7655 1b6e 01       		.uleb128 0x1
 7656 1b6f 51       		.byte	0x51
 7657 1b70 02       		.uleb128 0x2
 7658 1b71 77       		.byte	0x77
 7659 1b72 00       		.sleb128 0
 7660 1b73 00       		.byte	0
 7661 1b74 1B       		.uleb128 0x1b
 7662 1b75 AA000000 		.4byte	.LVL367
 7663 1b79 67200000 		.4byte	0x2067
 7664 1b7d 00       		.byte	0
 7665 1b7e 24       		.uleb128 0x24
 7666 1b7f C1000000 		.4byte	.LASF203
 7667 1b83 01       		.byte	0x1
 7668 1b84 2113     		.2byte	0x1321
 7669 1b86 35010000 		.4byte	0x135
 7670 1b8a 00000000 		.4byte	.LFB117
 7671 1b8e D8000000 		.4byte	.LFE117-.LFB117
 7672 1b92 01       		.uleb128 0x1
 7673 1b93 9C       		.byte	0x9c
 7674 1b94 AD1C0000 		.4byte	0x1cad
 7675 1b98 18       		.uleb128 0x18
 7676 1b99 31050000 		.4byte	.LASF198
 7677 1b9d 01       		.byte	0x1
 7678 1b9e 2113     		.2byte	0x1321
 7679 1ba0 3F020000 		.4byte	0x23f
 7680 1ba4 E6130000 		.4byte	.LLST123
 7681 1ba8 18       		.uleb128 0x18
 7682 1ba9 87000000 		.4byte	.LASF199
 7683 1bad 01       		.byte	0x1
 7684 1bae 2113     		.2byte	0x1321
 7685 1bb0 EB000000 		.4byte	0xeb
 7686 1bb4 28140000 		.4byte	.LLST124
 7687 1bb8 18       		.uleb128 0x18
 7688 1bb9 27020000 		.4byte	.LASF200
 7689 1bbd 01       		.byte	0x1
 7690 1bbe 2113     		.2byte	0x1321
 7691 1bc0 45030000 		.4byte	0x345
 7692 1bc4 62140000 		.4byte	.LLST125
 7693 1bc8 18       		.uleb128 0x18
 7694 1bc9 41030000 		.4byte	.LASF201
 7695 1bcd 01       		.byte	0x1
 7696 1bce 2113     		.2byte	0x1321
 7697 1bd0 B31A0000 		.4byte	0x1ab3
 7698 1bd4 83140000 		.4byte	.LLST126
 7699 1bd8 18       		.uleb128 0x18
 7700 1bd9 59050000 		.4byte	.LASF204
 7701 1bdd 01       		.byte	0x1
 7702 1bde 2113     		.2byte	0x1321
 7703 1be0 AD1C0000 		.4byte	0x1cad
 7704 1be4 A4140000 		.4byte	.LLST127
 7705 1be8 19       		.uleb128 0x19
 7706 1be9 A5050000 		.4byte	.LASF88
 7707 1bed 01       		.byte	0x1
 7708 1bee 2313     		.2byte	0x1323
 7709 1bf0 45050000 		.4byte	0x545
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 243


 7710 1bf4 C4140000 		.4byte	.LLST128
 7711 1bf8 19       		.uleb128 0x19
 7712 1bf9 95020000 		.4byte	.LASF202
 7713 1bfd 01       		.byte	0x1
 7714 1bfe 2413     		.2byte	0x1324
 7715 1c00 CA000000 		.4byte	0xca
 7716 1c04 06150000 		.4byte	.LLST129
 7717 1c08 19       		.uleb128 0x19
 7718 1c09 B1040000 		.4byte	.LASF87
 7719 1c0d 01       		.byte	0x1
 7720 1c0e 2513     		.2byte	0x1325
 7721 1c10 35010000 		.4byte	0x135
 7722 1c14 19150000 		.4byte	.LLST130
 7723 1c18 27       		.uleb128 0x27
 7724 1c19 1D0B0000 		.4byte	.LASF134
 7725 1c1d 01       		.byte	0x1
 7726 1c1e 2613     		.2byte	0x1326
 7727 1c20 40010000 		.4byte	0x140
 7728 1c24 28       		.uleb128 0x28
 7729 1c25 FA030000 		.4byte	0x3fa
 7730 1c29 02000000 		.4byte	.LBB53
 7731 1c2d 14000000 		.4byte	.LBE53-.LBB53
 7732 1c31 01       		.byte	0x1
 7733 1c32 3E13     		.2byte	0x133e
 7734 1c34 4D1C0000 		.4byte	0x1c4d
 7735 1c38 22       		.uleb128 0x22
 7736 1c39 02000000 		.4byte	.LBB54
 7737 1c3d 14000000 		.4byte	.LBE54-.LBB54
 7738 1c41 29       		.uleb128 0x29
 7739 1c42 0A040000 		.4byte	0x40a
 7740 1c46 29       		.uleb128 0x29
 7741 1c47 15040000 		.4byte	0x415
 7742 1c4b 00       		.byte	0
 7743 1c4c 00       		.byte	0
 7744 1c4d 28       		.uleb128 0x28
 7745 1c4e 21040000 		.4byte	0x421
 7746 1c52 C6000000 		.4byte	.LBB55
 7747 1c56 04000000 		.4byte	.LBE55-.LBB55
 7748 1c5a 01       		.byte	0x1
 7749 1c5b 9813     		.2byte	0x1398
 7750 1c5d 6B1C0000 		.4byte	0x1c6b
 7751 1c61 2B       		.uleb128 0x2b
 7752 1c62 2D040000 		.4byte	0x42d
 7753 1c66 43150000 		.4byte	.LLST131
 7754 1c6a 00       		.byte	0
 7755 1c6b 21       		.uleb128 0x21
 7756 1c6c 76000000 		.4byte	.LVL379
 7757 1c70 72200000 		.4byte	0x2072
 7758 1c74 7F1C0000 		.4byte	0x1c7f
 7759 1c78 1D       		.uleb128 0x1d
 7760 1c79 01       		.uleb128 0x1
 7761 1c7a 50       		.byte	0x50
 7762 1c7b 02       		.uleb128 0x2
 7763 1c7c 77       		.byte	0x77
 7764 1c7d 00       		.sleb128 0
 7765 1c7e 00       		.byte	0
 7766 1c7f 21       		.uleb128 0x21
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 244


 7767 1c80 9A000000 		.4byte	.LVL380
 7768 1c84 5B200000 		.4byte	0x205b
 7769 1c88 931C0000 		.4byte	0x1c93
 7770 1c8c 1D       		.uleb128 0x1d
 7771 1c8d 01       		.uleb128 0x1
 7772 1c8e 51       		.byte	0x51
 7773 1c8f 02       		.uleb128 0x2
 7774 1c90 77       		.byte	0x77
 7775 1c91 00       		.sleb128 0
 7776 1c92 00       		.byte	0
 7777 1c93 1C       		.uleb128 0x1c
 7778 1c94 A6000000 		.4byte	.LVL383
 7779 1c98 5B200000 		.4byte	0x205b
 7780 1c9c 1D       		.uleb128 0x1d
 7781 1c9d 01       		.uleb128 0x1
 7782 1c9e 50       		.byte	0x50
 7783 1c9f 05       		.uleb128 0x5
 7784 1ca0 03       		.byte	0x3
 7785 1ca1 14000000 		.4byte	.LANCHOR0+20
 7786 1ca5 1D       		.uleb128 0x1d
 7787 1ca6 01       		.uleb128 0x1
 7788 1ca7 51       		.byte	0x51
 7789 1ca8 02       		.uleb128 0x2
 7790 1ca9 76       		.byte	0x76
 7791 1caa 18       		.sleb128 24
 7792 1cab 00       		.byte	0
 7793 1cac 00       		.byte	0
 7794 1cad 06       		.uleb128 0x6
 7795 1cae 04       		.byte	0x4
 7796 1caf 35010000 		.4byte	0x135
 7797 1cb3 26       		.uleb128 0x26
 7798 1cb4 55070000 		.4byte	.LASF205
 7799 1cb8 01       		.byte	0x1
 7800 1cb9 A213     		.2byte	0x13a2
 7801 1cbb 00000000 		.4byte	.LFB118
 7802 1cbf 9C000000 		.4byte	.LFE118-.LFB118
 7803 1cc3 01       		.uleb128 0x1
 7804 1cc4 9C       		.byte	0x9c
 7805 1cc5 9E1D0000 		.4byte	0x1d9e
 7806 1cc9 18       		.uleb128 0x18
 7807 1cca 31050000 		.4byte	.LASF198
 7808 1cce 01       		.byte	0x1
 7809 1ccf A213     		.2byte	0x13a2
 7810 1cd1 3F020000 		.4byte	0x23f
 7811 1cd5 56150000 		.4byte	.LLST132
 7812 1cd9 18       		.uleb128 0x18
 7813 1cda 59050000 		.4byte	.LASF204
 7814 1cde 01       		.byte	0x1
 7815 1cdf A213     		.2byte	0x13a2
 7816 1ce1 AD1C0000 		.4byte	0x1cad
 7817 1ce5 98150000 		.4byte	.LLST133
 7818 1ce9 19       		.uleb128 0x19
 7819 1cea A5050000 		.4byte	.LASF88
 7820 1cee 01       		.byte	0x1
 7821 1cef A413     		.2byte	0x13a4
 7822 1cf1 45050000 		.4byte	0x545
 7823 1cf5 DA150000 		.4byte	.LLST134
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 245


 7824 1cf9 19       		.uleb128 0x19
 7825 1cfa 95020000 		.4byte	.LASF202
 7826 1cfe 01       		.byte	0x1
 7827 1cff A513     		.2byte	0x13a5
 7828 1d01 CA000000 		.4byte	0xca
 7829 1d05 1C160000 		.4byte	.LLST135
 7830 1d09 27       		.uleb128 0x27
 7831 1d0a 1D0B0000 		.4byte	.LASF134
 7832 1d0e 01       		.byte	0x1
 7833 1d0f A613     		.2byte	0x13a6
 7834 1d11 40010000 		.4byte	0x140
 7835 1d15 28       		.uleb128 0x28
 7836 1d16 FA030000 		.4byte	0x3fa
 7837 1d1a 02000000 		.4byte	.LBB57
 7838 1d1e 14000000 		.4byte	.LBE57-.LBB57
 7839 1d22 01       		.byte	0x1
 7840 1d23 BE13     		.2byte	0x13be
 7841 1d25 3E1D0000 		.4byte	0x1d3e
 7842 1d29 22       		.uleb128 0x22
 7843 1d2a 02000000 		.4byte	.LBB58
 7844 1d2e 14000000 		.4byte	.LBE58-.LBB58
 7845 1d32 29       		.uleb128 0x29
 7846 1d33 0A040000 		.4byte	0x40a
 7847 1d37 29       		.uleb128 0x29
 7848 1d38 15040000 		.4byte	0x415
 7849 1d3c 00       		.byte	0
 7850 1d3d 00       		.byte	0
 7851 1d3e 28       		.uleb128 0x28
 7852 1d3f 21040000 		.4byte	0x421
 7853 1d43 8C000000 		.4byte	.LBB59
 7854 1d47 10000000 		.4byte	.LBE59-.LBB59
 7855 1d4b 01       		.byte	0x1
 7856 1d4c F013     		.2byte	0x13f0
 7857 1d4e 5C1D0000 		.4byte	0x1d5c
 7858 1d52 2B       		.uleb128 0x2b
 7859 1d53 2D040000 		.4byte	0x42d
 7860 1d57 2F160000 		.4byte	.LLST136
 7861 1d5b 00       		.byte	0
 7862 1d5c 21       		.uleb128 0x21
 7863 1d5d 40000000 		.4byte	.LVL392
 7864 1d61 72200000 		.4byte	0x2072
 7865 1d65 701D0000 		.4byte	0x1d70
 7866 1d69 1D       		.uleb128 0x1d
 7867 1d6a 01       		.uleb128 0x1
 7868 1d6b 50       		.byte	0x50
 7869 1d6c 02       		.uleb128 0x2
 7870 1d6d 77       		.byte	0x77
 7871 1d6e 00       		.sleb128 0
 7872 1d6f 00       		.byte	0
 7873 1d70 21       		.uleb128 0x21
 7874 1d71 64000000 		.4byte	.LVL393
 7875 1d75 5B200000 		.4byte	0x205b
 7876 1d79 841D0000 		.4byte	0x1d84
 7877 1d7d 1D       		.uleb128 0x1d
 7878 1d7e 01       		.uleb128 0x1
 7879 1d7f 51       		.byte	0x51
 7880 1d80 02       		.uleb128 0x2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 246


 7881 1d81 77       		.byte	0x77
 7882 1d82 00       		.sleb128 0
 7883 1d83 00       		.byte	0
 7884 1d84 1C       		.uleb128 0x1c
 7885 1d85 70000000 		.4byte	.LVL397
 7886 1d89 5B200000 		.4byte	0x205b
 7887 1d8d 1D       		.uleb128 0x1d
 7888 1d8e 01       		.uleb128 0x1
 7889 1d8f 50       		.byte	0x50
 7890 1d90 05       		.uleb128 0x5
 7891 1d91 03       		.byte	0x3
 7892 1d92 14000000 		.4byte	.LANCHOR0+20
 7893 1d96 1D       		.uleb128 0x1d
 7894 1d97 01       		.uleb128 0x1
 7895 1d98 51       		.byte	0x51
 7896 1d99 02       		.uleb128 0x2
 7897 1d9a 74       		.byte	0x74
 7898 1d9b 18       		.sleb128 24
 7899 1d9c 00       		.byte	0
 7900 1d9d 00       		.byte	0
 7901 1d9e 24       		.uleb128 0x24
 7902 1d9f F9000000 		.4byte	.LASF206
 7903 1da3 01       		.byte	0x1
 7904 1da4 F813     		.2byte	0x13f8
 7905 1da6 35010000 		.4byte	0x135
 7906 1daa 00000000 		.4byte	.LFB119
 7907 1dae 34000000 		.4byte	.LFE119-.LFB119
 7908 1db2 01       		.uleb128 0x1
 7909 1db3 9C       		.byte	0x9c
 7910 1db4 FB1D0000 		.4byte	0x1dfb
 7911 1db8 18       		.uleb128 0x18
 7912 1db9 6A0B0000 		.4byte	.LASF91
 7913 1dbd 01       		.byte	0x1
 7914 1dbe F813     		.2byte	0x13f8
 7915 1dc0 3F020000 		.4byte	0x23f
 7916 1dc4 42160000 		.4byte	.LLST137
 7917 1dc8 19       		.uleb128 0x19
 7918 1dc9 A5050000 		.4byte	.LASF88
 7919 1dcd 01       		.byte	0x1
 7920 1dce FA13     		.2byte	0x13fa
 7921 1dd0 45050000 		.4byte	0x545
 7922 1dd4 55160000 		.4byte	.LLST138
 7923 1dd8 19       		.uleb128 0x19
 7924 1dd9 B1040000 		.4byte	.LASF87
 7925 1ddd 01       		.byte	0x1
 7926 1dde FB13     		.2byte	0x13fb
 7927 1de0 35010000 		.4byte	0x135
 7928 1de4 73160000 		.4byte	.LLST139
 7929 1de8 1B       		.uleb128 0x1b
 7930 1de9 10000000 		.4byte	.LVL402
 7931 1ded 50200000 		.4byte	0x2050
 7932 1df1 1B       		.uleb128 0x1b
 7933 1df2 2A000000 		.4byte	.LVL407
 7934 1df6 67200000 		.4byte	0x2067
 7935 1dfa 00       		.byte	0
 7936 1dfb 24       		.uleb128 0x24
 7937 1dfc 6E060000 		.4byte	.LASF207
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 247


 7938 1e00 01       		.byte	0x1
 7939 1e01 1714     		.2byte	0x1417
 7940 1e03 EB000000 		.4byte	0xeb
 7941 1e07 00000000 		.4byte	.LFB120
 7942 1e0b 30000000 		.4byte	.LFE120-.LFB120
 7943 1e0f 01       		.uleb128 0x1
 7944 1e10 9C       		.byte	0x9c
 7945 1e11 681E0000 		.4byte	0x1e68
 7946 1e15 18       		.uleb128 0x18
 7947 1e16 6A0B0000 		.4byte	.LASF91
 7948 1e1a 01       		.byte	0x1
 7949 1e1b 1714     		.2byte	0x1417
 7950 1e1d 3F020000 		.4byte	0x23f
 7951 1e21 9D160000 		.4byte	.LLST140
 7952 1e25 18       		.uleb128 0x18
 7953 1e26 87020000 		.4byte	.LASF208
 7954 1e2a 01       		.byte	0x1
 7955 1e2b 1714     		.2byte	0x1417
 7956 1e2d EB000000 		.4byte	0xeb
 7957 1e31 B0160000 		.4byte	.LLST141
 7958 1e35 19       		.uleb128 0x19
 7959 1e36 A5050000 		.4byte	.LASF88
 7960 1e3a 01       		.byte	0x1
 7961 1e3b 1914     		.2byte	0x1419
 7962 1e3d 45050000 		.4byte	0x545
 7963 1e41 DC160000 		.4byte	.LLST142
 7964 1e45 19       		.uleb128 0x19
 7965 1e46 B20E0000 		.4byte	.LASF192
 7966 1e4a 01       		.byte	0x1
 7967 1e4b 1A14     		.2byte	0x141a
 7968 1e4d EB000000 		.4byte	0xeb
 7969 1e51 EF160000 		.4byte	.LLST143
 7970 1e55 1B       		.uleb128 0x1b
 7971 1e56 12000000 		.4byte	.LVL411
 7972 1e5a 50200000 		.4byte	0x2050
 7973 1e5e 1B       		.uleb128 0x1b
 7974 1e5f 26000000 		.4byte	.LVL413
 7975 1e63 67200000 		.4byte	0x2067
 7976 1e67 00       		.byte	0
 7977 1e68 10       		.uleb128 0x10
 7978 1e69 34020000 		.4byte	0x234
 7979 1e6d 781E0000 		.4byte	0x1e78
 7980 1e71 11       		.uleb128 0x11
 7981 1e72 A9000000 		.4byte	0xa9
 7982 1e76 04       		.byte	0x4
 7983 1e77 00       		.byte	0
 7984 1e78 1F       		.uleb128 0x1f
 7985 1e79 FD0C0000 		.4byte	.LASF209
 7986 1e7d 01       		.byte	0x1
 7987 1e7e 5701     		.2byte	0x157
 7988 1e80 681E0000 		.4byte	0x1e68
 7989 1e84 05       		.uleb128 0x5
 7990 1e85 03       		.byte	0x3
 7991 1e86 30000000 		.4byte	pxReadyTasksLists
 7992 1e8a 1F       		.uleb128 0x1f
 7993 1e8b 390D0000 		.4byte	.LASF210
 7994 1e8f 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 248


 7995 1e90 5801     		.2byte	0x158
 7996 1e92 34020000 		.4byte	0x234
 7997 1e96 05       		.uleb128 0x5
 7998 1e97 03       		.byte	0x3
 7999 1e98 94000000 		.4byte	xDelayedTaskList1
 8000 1e9c 1F       		.uleb128 0x1f
 8001 1e9d 4B0D0000 		.4byte	.LASF211
 8002 1ea1 01       		.byte	0x1
 8003 1ea2 5901     		.2byte	0x159
 8004 1ea4 34020000 		.4byte	0x234
 8005 1ea8 05       		.uleb128 0x5
 8006 1ea9 03       		.byte	0x3
 8007 1eaa A8000000 		.4byte	xDelayedTaskList2
 8008 1eae 1F       		.uleb128 0x1f
 8009 1eaf 25060000 		.4byte	.LASF212
 8010 1eb3 01       		.byte	0x1
 8011 1eb4 5A01     		.2byte	0x15a
 8012 1eb6 C01E0000 		.4byte	0x1ec0
 8013 1eba 05       		.uleb128 0x5
 8014 1ebb 03       		.byte	0x3
 8015 1ebc 28000000 		.4byte	pxDelayedTaskList
 8016 1ec0 08       		.uleb128 0x8
 8017 1ec1 E7100000 		.4byte	0x10e7
 8018 1ec5 1F       		.uleb128 0x1f
 8019 1ec6 00070000 		.4byte	.LASF213
 8020 1eca 01       		.byte	0x1
 8021 1ecb 5B01     		.2byte	0x15b
 8022 1ecd C01E0000 		.4byte	0x1ec0
 8023 1ed1 05       		.uleb128 0x5
 8024 1ed2 03       		.byte	0x3
 8025 1ed3 D0000000 		.4byte	pxOverflowDelayedTaskList
 8026 1ed7 1F       		.uleb128 0x1f
 8027 1ed8 6C070000 		.4byte	.LASF214
 8028 1edc 01       		.byte	0x1
 8029 1edd 5C01     		.2byte	0x15c
 8030 1edf 34020000 		.4byte	0x234
 8031 1ee3 05       		.uleb128 0x5
 8032 1ee4 03       		.byte	0x3
 8033 1ee5 14000000 		.4byte	xPendingReadyList
 8034 1ee9 1F       		.uleb128 0x1f
 8035 1eea 5C020000 		.4byte	.LASF215
 8036 1eee 01       		.byte	0x1
 8037 1eef 6001     		.2byte	0x160
 8038 1ef1 34020000 		.4byte	0x234
 8039 1ef5 05       		.uleb128 0x5
 8040 1ef6 03       		.byte	0x3
 8041 1ef7 BC000000 		.4byte	xTasksWaitingTermination
 8042 1efb 1F       		.uleb128 0x1f
 8043 1efc 3E0C0000 		.4byte	.LASF216
 8044 1f00 01       		.byte	0x1
 8045 1f01 6101     		.2byte	0x161
 8046 1f03 29020000 		.4byte	0x229
 8047 1f07 05       		.uleb128 0x5
 8048 1f08 03       		.byte	0x3
 8049 1f09 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8050 1f0d 1F       		.uleb128 0x1f
 8051 1f0e DB000000 		.4byte	.LASF217
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 249


 8052 1f12 01       		.byte	0x1
 8053 1f13 6701     		.2byte	0x167
 8054 1f15 34020000 		.4byte	0x234
 8055 1f19 05       		.uleb128 0x5
 8056 1f1a 03       		.byte	0x3
 8057 1f1b 00000000 		.4byte	xSuspendedTaskList
 8058 1f1f 1F       		.uleb128 0x1f
 8059 1f20 70000000 		.4byte	.LASF218
 8060 1f24 01       		.byte	0x1
 8061 1f25 7201     		.2byte	0x172
 8062 1f27 29020000 		.4byte	0x229
 8063 1f2b 05       		.uleb128 0x5
 8064 1f2c 03       		.byte	0x3
 8065 1f2d D4000000 		.4byte	uxCurrentNumberOfTasks
 8066 1f31 1F       		.uleb128 0x1f
 8067 1f32 800D0000 		.4byte	.LASF219
 8068 1f36 01       		.byte	0x1
 8069 1f37 7301     		.2byte	0x173
 8070 1f39 431F0000 		.4byte	0x1f43
 8071 1f3d 05       		.uleb128 0x5
 8072 1f3e 03       		.byte	0x3
 8073 1f3f EC000000 		.4byte	xTickCount
 8074 1f43 08       		.uleb128 0x8
 8075 1f44 4B010000 		.4byte	0x14b
 8076 1f48 1F       		.uleb128 0x1f
 8077 1f49 35080000 		.4byte	.LASF220
 8078 1f4d 01       		.byte	0x1
 8079 1f4e 7401     		.2byte	0x174
 8080 1f50 29020000 		.4byte	0x229
 8081 1f54 05       		.uleb128 0x5
 8082 1f55 03       		.byte	0x3
 8083 1f56 E4000000 		.4byte	uxTopReadyPriority
 8084 1f5a 1F       		.uleb128 0x1f
 8085 1f5b DF090000 		.4byte	.LASF221
 8086 1f5f 01       		.byte	0x1
 8087 1f60 7501     		.2byte	0x175
 8088 1f62 6C1F0000 		.4byte	0x1f6c
 8089 1f66 05       		.uleb128 0x5
 8090 1f67 03       		.byte	0x3
 8091 1f68 DC000000 		.4byte	xSchedulerRunning
 8092 1f6c 08       		.uleb128 0x8
 8093 1f6d 35010000 		.4byte	0x135
 8094 1f71 1F       		.uleb128 0x1f
 8095 1f72 CF050000 		.4byte	.LASF222
 8096 1f76 01       		.byte	0x1
 8097 1f77 7601     		.2byte	0x176
 8098 1f79 431F0000 		.4byte	0x1f43
 8099 1f7d 05       		.uleb128 0x5
 8100 1f7e 03       		.byte	0x3
 8101 1f7f 00010000 		.4byte	xPendedTicks
 8102 1f83 1F       		.uleb128 0x1f
 8103 1f84 A9000000 		.4byte	.LASF223
 8104 1f88 01       		.byte	0x1
 8105 1f89 7701     		.2byte	0x177
 8106 1f8b 6C1F0000 		.4byte	0x1f6c
 8107 1f8f 05       		.uleb128 0x5
 8108 1f90 03       		.byte	0x3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 250


 8109 1f91 FC000000 		.4byte	xYieldPending
 8110 1f95 1F       		.uleb128 0x1f
 8111 1f96 5D0D0000 		.4byte	.LASF224
 8112 1f9a 01       		.byte	0x1
 8113 1f9b 7801     		.2byte	0x178
 8114 1f9d 6C1F0000 		.4byte	0x1f6c
 8115 1fa1 05       		.uleb128 0x5
 8116 1fa2 03       		.byte	0x3
 8117 1fa3 F8000000 		.4byte	xNumOfOverflows
 8118 1fa7 1F       		.uleb128 0x1f
 8119 1fa8 B90C0000 		.4byte	.LASF225
 8120 1fac 01       		.byte	0x1
 8121 1fad 7901     		.2byte	0x179
 8122 1faf 40010000 		.4byte	0x140
 8123 1fb3 05       		.uleb128 0x5
 8124 1fb4 03       		.byte	0x3
 8125 1fb5 E0000000 		.4byte	uxTaskNumber
 8126 1fb9 1F       		.uleb128 0x1f
 8127 1fba DA010000 		.4byte	.LASF226
 8128 1fbe 01       		.byte	0x1
 8129 1fbf 7A01     		.2byte	0x17a
 8130 1fc1 431F0000 		.4byte	0x1f43
 8131 1fc5 05       		.uleb128 0x5
 8132 1fc6 03       		.byte	0x3
 8133 1fc7 2C000000 		.4byte	xNextTaskUnblockTime
 8134 1fcb 1F       		.uleb128 0x1f
 8135 1fcc E20C0000 		.4byte	.LASF227
 8136 1fd0 01       		.byte	0x1
 8137 1fd1 7B01     		.2byte	0x17b
 8138 1fd3 3F020000 		.4byte	0x23f
 8139 1fd7 05       		.uleb128 0x5
 8140 1fd8 03       		.byte	0x3
 8141 1fd9 F4000000 		.4byte	xIdleTaskHandle
 8142 1fdd 1F       		.uleb128 0x1f
 8143 1fde 72040000 		.4byte	.LASF228
 8144 1fe2 01       		.byte	0x1
 8145 1fe3 8501     		.2byte	0x185
 8146 1fe5 29020000 		.4byte	0x229
 8147 1fe9 05       		.uleb128 0x5
 8148 1fea 03       		.byte	0x3
 8149 1feb F0000000 		.4byte	uxSchedulerSuspended
 8150 1fef 32       		.uleb128 0x32
 8151 1ff0 54010000 		.4byte	.LASF229
 8152 1ff4 09       		.byte	0x9
 8153 1ff5 1207     		.2byte	0x712
 8154 1ff7 FB1F0000 		.4byte	0x1ffb
 8155 1ffb 08       		.uleb128 0x8
 8156 1ffc E0000000 		.4byte	0xe0
 8157 2000 33       		.uleb128 0x33
 8158 2001 0F060000 		.4byte	.LASF230
 8159 2005 01       		.byte	0x1
 8160 2006 5101     		.2byte	0x151
 8161 2008 12200000 		.4byte	0x2012
 8162 200c 05       		.uleb128 0x5
 8163 200d 03       		.byte	0x3
 8164 200e 00000000 		.4byte	pxCurrentTCB
 8165 2012 08       		.uleb128 0x8
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 251


 8166 2013 45050000 		.4byte	0x545
 8167 2017 34       		.uleb128 0x34
 8168 2018 130B0000 		.4byte	.LASF231
 8169 201c 130B0000 		.4byte	.LASF231
 8170 2020 0A       		.byte	0xa
 8171 2021 A4       		.byte	0xa4
 8172 2022 34       		.uleb128 0x34
 8173 2023 BB0D0000 		.4byte	.LASF232
 8174 2027 BB0D0000 		.4byte	.LASF232
 8175 202b 0B       		.byte	0xb
 8176 202c 19       		.byte	0x19
 8177 202d 35       		.uleb128 0x35
 8178 202e EC060000 		.4byte	.LASF233
 8179 2032 EC060000 		.4byte	.LASF233
 8180 2036 07       		.byte	0x7
 8181 2037 6401     		.2byte	0x164
 8182 2039 34       		.uleb128 0x34
 8183 203a E80D0000 		.4byte	.LASF234
 8184 203e E80D0000 		.4byte	.LASF234
 8185 2042 0A       		.byte	0xa
 8186 2043 75       		.byte	0x75
 8187 2044 35       		.uleb128 0x35
 8188 2045 840E0000 		.4byte	.LASF235
 8189 2049 840E0000 		.4byte	.LASF235
 8190 204d 07       		.byte	0x7
 8191 204e 5901     		.2byte	0x159
 8192 2050 34       		.uleb128 0x34
 8193 2051 260D0000 		.4byte	.LASF236
 8194 2055 260D0000 		.4byte	.LASF236
 8195 2059 02       		.byte	0x2
 8196 205a 61       		.byte	0x61
 8197 205b 35       		.uleb128 0x35
 8198 205c 32030000 		.4byte	.LASF237
 8199 2060 32030000 		.4byte	.LASF237
 8200 2064 07       		.byte	0x7
 8201 2065 8601     		.2byte	0x186
 8202 2067 34       		.uleb128 0x34
 8203 2068 E80B0000 		.4byte	.LASF238
 8204 206c E80B0000 		.4byte	.LASF238
 8205 2070 02       		.byte	0x2
 8206 2071 62       		.byte	0x62
 8207 2072 35       		.uleb128 0x35
 8208 2073 9C0C0000 		.4byte	.LASF239
 8209 2077 9C0C0000 		.4byte	.LASF239
 8210 207b 07       		.byte	0x7
 8211 207c 9501     		.2byte	0x195
 8212 207e 35       		.uleb128 0x35
 8213 207f 7D0B0000 		.4byte	.LASF240
 8214 2083 7D0B0000 		.4byte	.LASF240
 8215 2087 07       		.byte	0x7
 8216 2088 7101     		.2byte	0x171
 8217 208a 34       		.uleb128 0x34
 8218 208b 29040000 		.4byte	.LASF241
 8219 208f 29040000 		.4byte	.LASF241
 8220 2093 0A       		.byte	0xa
 8221 2094 A3       		.byte	0xa3
 8222 2095 34       		.uleb128 0x34
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 252


 8223 2096 BE070000 		.4byte	.LASF242
 8224 209a BE070000 		.4byte	.LASF242
 8225 209e 0A       		.byte	0xa
 8226 209f AD       		.byte	0xad
 8227 20a0 34       		.uleb128 0x34
 8228 20a1 13080000 		.4byte	.LASF243
 8229 20a5 13080000 		.4byte	.LASF243
 8230 20a9 0A       		.byte	0xa
 8231 20aa B4       		.byte	0xb4
 8232 20ab 00       		.byte	0
 8233              		.section	.debug_abbrev,"",%progbits
 8234              	.Ldebug_abbrev0:
 8235 0000 01       		.uleb128 0x1
 8236 0001 11       		.uleb128 0x11
 8237 0002 01       		.byte	0x1
 8238 0003 25       		.uleb128 0x25
 8239 0004 0E       		.uleb128 0xe
 8240 0005 13       		.uleb128 0x13
 8241 0006 0B       		.uleb128 0xb
 8242 0007 03       		.uleb128 0x3
 8243 0008 0E       		.uleb128 0xe
 8244 0009 1B       		.uleb128 0x1b
 8245 000a 0E       		.uleb128 0xe
 8246 000b 55       		.uleb128 0x55
 8247 000c 17       		.uleb128 0x17
 8248 000d 11       		.uleb128 0x11
 8249 000e 01       		.uleb128 0x1
 8250 000f 10       		.uleb128 0x10
 8251 0010 17       		.uleb128 0x17
 8252 0011 00       		.byte	0
 8253 0012 00       		.byte	0
 8254 0013 02       		.uleb128 0x2
 8255 0014 16       		.uleb128 0x16
 8256 0015 00       		.byte	0
 8257 0016 03       		.uleb128 0x3
 8258 0017 0E       		.uleb128 0xe
 8259 0018 3A       		.uleb128 0x3a
 8260 0019 0B       		.uleb128 0xb
 8261 001a 3B       		.uleb128 0x3b
 8262 001b 0B       		.uleb128 0xb
 8263 001c 49       		.uleb128 0x49
 8264 001d 13       		.uleb128 0x13
 8265 001e 00       		.byte	0
 8266 001f 00       		.byte	0
 8267 0020 03       		.uleb128 0x3
 8268 0021 24       		.uleb128 0x24
 8269 0022 00       		.byte	0
 8270 0023 0B       		.uleb128 0xb
 8271 0024 0B       		.uleb128 0xb
 8272 0025 3E       		.uleb128 0x3e
 8273 0026 0B       		.uleb128 0xb
 8274 0027 03       		.uleb128 0x3
 8275 0028 0E       		.uleb128 0xe
 8276 0029 00       		.byte	0
 8277 002a 00       		.byte	0
 8278 002b 04       		.uleb128 0x4
 8279 002c 24       		.uleb128 0x24
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 253


 8280 002d 00       		.byte	0
 8281 002e 0B       		.uleb128 0xb
 8282 002f 0B       		.uleb128 0xb
 8283 0030 3E       		.uleb128 0x3e
 8284 0031 0B       		.uleb128 0xb
 8285 0032 03       		.uleb128 0x3
 8286 0033 08       		.uleb128 0x8
 8287 0034 00       		.byte	0
 8288 0035 00       		.byte	0
 8289 0036 05       		.uleb128 0x5
 8290 0037 0F       		.uleb128 0xf
 8291 0038 00       		.byte	0
 8292 0039 0B       		.uleb128 0xb
 8293 003a 0B       		.uleb128 0xb
 8294 003b 00       		.byte	0
 8295 003c 00       		.byte	0
 8296 003d 06       		.uleb128 0x6
 8297 003e 0F       		.uleb128 0xf
 8298 003f 00       		.byte	0
 8299 0040 0B       		.uleb128 0xb
 8300 0041 0B       		.uleb128 0xb
 8301 0042 49       		.uleb128 0x49
 8302 0043 13       		.uleb128 0x13
 8303 0044 00       		.byte	0
 8304 0045 00       		.byte	0
 8305 0046 07       		.uleb128 0x7
 8306 0047 26       		.uleb128 0x26
 8307 0048 00       		.byte	0
 8308 0049 49       		.uleb128 0x49
 8309 004a 13       		.uleb128 0x13
 8310 004b 00       		.byte	0
 8311 004c 00       		.byte	0
 8312 004d 08       		.uleb128 0x8
 8313 004e 35       		.uleb128 0x35
 8314 004f 00       		.byte	0
 8315 0050 49       		.uleb128 0x49
 8316 0051 13       		.uleb128 0x13
 8317 0052 00       		.byte	0
 8318 0053 00       		.byte	0
 8319 0054 09       		.uleb128 0x9
 8320 0055 15       		.uleb128 0x15
 8321 0056 01       		.byte	0x1
 8322 0057 27       		.uleb128 0x27
 8323 0058 19       		.uleb128 0x19
 8324 0059 01       		.uleb128 0x1
 8325 005a 13       		.uleb128 0x13
 8326 005b 00       		.byte	0
 8327 005c 00       		.byte	0
 8328 005d 0A       		.uleb128 0xa
 8329 005e 05       		.uleb128 0x5
 8330 005f 00       		.byte	0
 8331 0060 49       		.uleb128 0x49
 8332 0061 13       		.uleb128 0x13
 8333 0062 00       		.byte	0
 8334 0063 00       		.byte	0
 8335 0064 0B       		.uleb128 0xb
 8336 0065 13       		.uleb128 0x13
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 254


 8337 0066 01       		.byte	0x1
 8338 0067 03       		.uleb128 0x3
 8339 0068 0E       		.uleb128 0xe
 8340 0069 0B       		.uleb128 0xb
 8341 006a 0B       		.uleb128 0xb
 8342 006b 3A       		.uleb128 0x3a
 8343 006c 0B       		.uleb128 0xb
 8344 006d 3B       		.uleb128 0x3b
 8345 006e 0B       		.uleb128 0xb
 8346 006f 01       		.uleb128 0x1
 8347 0070 13       		.uleb128 0x13
 8348 0071 00       		.byte	0
 8349 0072 00       		.byte	0
 8350 0073 0C       		.uleb128 0xc
 8351 0074 0D       		.uleb128 0xd
 8352 0075 00       		.byte	0
 8353 0076 03       		.uleb128 0x3
 8354 0077 0E       		.uleb128 0xe
 8355 0078 3A       		.uleb128 0x3a
 8356 0079 0B       		.uleb128 0xb
 8357 007a 3B       		.uleb128 0x3b
 8358 007b 0B       		.uleb128 0xb
 8359 007c 49       		.uleb128 0x49
 8360 007d 13       		.uleb128 0x13
 8361 007e 38       		.uleb128 0x38
 8362 007f 0B       		.uleb128 0xb
 8363 0080 00       		.byte	0
 8364 0081 00       		.byte	0
 8365 0082 0D       		.uleb128 0xd
 8366 0083 0D       		.uleb128 0xd
 8367 0084 00       		.byte	0
 8368 0085 03       		.uleb128 0x3
 8369 0086 0E       		.uleb128 0xe
 8370 0087 3A       		.uleb128 0x3a
 8371 0088 0B       		.uleb128 0xb
 8372 0089 3B       		.uleb128 0x3b
 8373 008a 05       		.uleb128 0x5
 8374 008b 49       		.uleb128 0x49
 8375 008c 13       		.uleb128 0x13
 8376 008d 38       		.uleb128 0x38
 8377 008e 0B       		.uleb128 0xb
 8378 008f 00       		.byte	0
 8379 0090 00       		.byte	0
 8380 0091 0E       		.uleb128 0xe
 8381 0092 04       		.uleb128 0x4
 8382 0093 01       		.byte	0x1
 8383 0094 0B       		.uleb128 0xb
 8384 0095 0B       		.uleb128 0xb
 8385 0096 49       		.uleb128 0x49
 8386 0097 13       		.uleb128 0x13
 8387 0098 3A       		.uleb128 0x3a
 8388 0099 0B       		.uleb128 0xb
 8389 009a 3B       		.uleb128 0x3b
 8390 009b 0B       		.uleb128 0xb
 8391 009c 01       		.uleb128 0x1
 8392 009d 13       		.uleb128 0x13
 8393 009e 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 255


 8394 009f 00       		.byte	0
 8395 00a0 0F       		.uleb128 0xf
 8396 00a1 28       		.uleb128 0x28
 8397 00a2 00       		.byte	0
 8398 00a3 03       		.uleb128 0x3
 8399 00a4 0E       		.uleb128 0xe
 8400 00a5 1C       		.uleb128 0x1c
 8401 00a6 0B       		.uleb128 0xb
 8402 00a7 00       		.byte	0
 8403 00a8 00       		.byte	0
 8404 00a9 10       		.uleb128 0x10
 8405 00aa 01       		.uleb128 0x1
 8406 00ab 01       		.byte	0x1
 8407 00ac 49       		.uleb128 0x49
 8408 00ad 13       		.uleb128 0x13
 8409 00ae 01       		.uleb128 0x1
 8410 00af 13       		.uleb128 0x13
 8411 00b0 00       		.byte	0
 8412 00b1 00       		.byte	0
 8413 00b2 11       		.uleb128 0x11
 8414 00b3 21       		.uleb128 0x21
 8415 00b4 00       		.byte	0
 8416 00b5 49       		.uleb128 0x49
 8417 00b6 13       		.uleb128 0x13
 8418 00b7 2F       		.uleb128 0x2f
 8419 00b8 0B       		.uleb128 0xb
 8420 00b9 00       		.byte	0
 8421 00ba 00       		.byte	0
 8422 00bb 12       		.uleb128 0x12
 8423 00bc 16       		.uleb128 0x16
 8424 00bd 00       		.byte	0
 8425 00be 03       		.uleb128 0x3
 8426 00bf 0E       		.uleb128 0xe
 8427 00c0 3A       		.uleb128 0x3a
 8428 00c1 0B       		.uleb128 0xb
 8429 00c2 3B       		.uleb128 0x3b
 8430 00c3 05       		.uleb128 0x5
 8431 00c4 49       		.uleb128 0x49
 8432 00c5 13       		.uleb128 0x13
 8433 00c6 00       		.byte	0
 8434 00c7 00       		.byte	0
 8435 00c8 13       		.uleb128 0x13
 8436 00c9 2E       		.uleb128 0x2e
 8437 00ca 01       		.byte	0x1
 8438 00cb 03       		.uleb128 0x3
 8439 00cc 0E       		.uleb128 0xe
 8440 00cd 3A       		.uleb128 0x3a
 8441 00ce 0B       		.uleb128 0xb
 8442 00cf 3B       		.uleb128 0x3b
 8443 00d0 0B       		.uleb128 0xb
 8444 00d1 27       		.uleb128 0x27
 8445 00d2 19       		.uleb128 0x19
 8446 00d3 49       		.uleb128 0x49
 8447 00d4 13       		.uleb128 0x13
 8448 00d5 20       		.uleb128 0x20
 8449 00d6 0B       		.uleb128 0xb
 8450 00d7 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 256


 8451 00d8 13       		.uleb128 0x13
 8452 00d9 00       		.byte	0
 8453 00da 00       		.byte	0
 8454 00db 14       		.uleb128 0x14
 8455 00dc 34       		.uleb128 0x34
 8456 00dd 00       		.byte	0
 8457 00de 03       		.uleb128 0x3
 8458 00df 0E       		.uleb128 0xe
 8459 00e0 3A       		.uleb128 0x3a
 8460 00e1 0B       		.uleb128 0xb
 8461 00e2 3B       		.uleb128 0x3b
 8462 00e3 0B       		.uleb128 0xb
 8463 00e4 49       		.uleb128 0x49
 8464 00e5 13       		.uleb128 0x13
 8465 00e6 00       		.byte	0
 8466 00e7 00       		.byte	0
 8467 00e8 15       		.uleb128 0x15
 8468 00e9 2E       		.uleb128 0x2e
 8469 00ea 01       		.byte	0x1
 8470 00eb 03       		.uleb128 0x3
 8471 00ec 0E       		.uleb128 0xe
 8472 00ed 3A       		.uleb128 0x3a
 8473 00ee 0B       		.uleb128 0xb
 8474 00ef 3B       		.uleb128 0x3b
 8475 00f0 0B       		.uleb128 0xb
 8476 00f1 27       		.uleb128 0x27
 8477 00f2 19       		.uleb128 0x19
 8478 00f3 20       		.uleb128 0x20
 8479 00f4 0B       		.uleb128 0xb
 8480 00f5 01       		.uleb128 0x1
 8481 00f6 13       		.uleb128 0x13
 8482 00f7 00       		.byte	0
 8483 00f8 00       		.byte	0
 8484 00f9 16       		.uleb128 0x16
 8485 00fa 05       		.uleb128 0x5
 8486 00fb 00       		.byte	0
 8487 00fc 03       		.uleb128 0x3
 8488 00fd 0E       		.uleb128 0xe
 8489 00fe 3A       		.uleb128 0x3a
 8490 00ff 0B       		.uleb128 0xb
 8491 0100 3B       		.uleb128 0x3b
 8492 0101 0B       		.uleb128 0xb
 8493 0102 49       		.uleb128 0x49
 8494 0103 13       		.uleb128 0x13
 8495 0104 00       		.byte	0
 8496 0105 00       		.byte	0
 8497 0106 17       		.uleb128 0x17
 8498 0107 2E       		.uleb128 0x2e
 8499 0108 01       		.byte	0x1
 8500 0109 03       		.uleb128 0x3
 8501 010a 0E       		.uleb128 0xe
 8502 010b 3A       		.uleb128 0x3a
 8503 010c 0B       		.uleb128 0xb
 8504 010d 3B       		.uleb128 0x3b
 8505 010e 05       		.uleb128 0x5
 8506 010f 27       		.uleb128 0x27
 8507 0110 19       		.uleb128 0x19
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 257


 8508 0111 49       		.uleb128 0x49
 8509 0112 13       		.uleb128 0x13
 8510 0113 11       		.uleb128 0x11
 8511 0114 01       		.uleb128 0x1
 8512 0115 12       		.uleb128 0x12
 8513 0116 06       		.uleb128 0x6
 8514 0117 40       		.uleb128 0x40
 8515 0118 18       		.uleb128 0x18
 8516 0119 9742     		.uleb128 0x2117
 8517 011b 19       		.uleb128 0x19
 8518 011c 01       		.uleb128 0x1
 8519 011d 13       		.uleb128 0x13
 8520 011e 00       		.byte	0
 8521 011f 00       		.byte	0
 8522 0120 18       		.uleb128 0x18
 8523 0121 05       		.uleb128 0x5
 8524 0122 00       		.byte	0
 8525 0123 03       		.uleb128 0x3
 8526 0124 0E       		.uleb128 0xe
 8527 0125 3A       		.uleb128 0x3a
 8528 0126 0B       		.uleb128 0xb
 8529 0127 3B       		.uleb128 0x3b
 8530 0128 05       		.uleb128 0x5
 8531 0129 49       		.uleb128 0x49
 8532 012a 13       		.uleb128 0x13
 8533 012b 02       		.uleb128 0x2
 8534 012c 17       		.uleb128 0x17
 8535 012d 00       		.byte	0
 8536 012e 00       		.byte	0
 8537 012f 19       		.uleb128 0x19
 8538 0130 34       		.uleb128 0x34
 8539 0131 00       		.byte	0
 8540 0132 03       		.uleb128 0x3
 8541 0133 0E       		.uleb128 0xe
 8542 0134 3A       		.uleb128 0x3a
 8543 0135 0B       		.uleb128 0xb
 8544 0136 3B       		.uleb128 0x3b
 8545 0137 05       		.uleb128 0x5
 8546 0138 49       		.uleb128 0x49
 8547 0139 13       		.uleb128 0x13
 8548 013a 02       		.uleb128 0x2
 8549 013b 17       		.uleb128 0x17
 8550 013c 00       		.byte	0
 8551 013d 00       		.byte	0
 8552 013e 1A       		.uleb128 0x1a
 8553 013f 2E       		.uleb128 0x2e
 8554 0140 01       		.byte	0x1
 8555 0141 03       		.uleb128 0x3
 8556 0142 0E       		.uleb128 0xe
 8557 0143 3A       		.uleb128 0x3a
 8558 0144 0B       		.uleb128 0xb
 8559 0145 3B       		.uleb128 0x3b
 8560 0146 05       		.uleb128 0x5
 8561 0147 27       		.uleb128 0x27
 8562 0148 19       		.uleb128 0x19
 8563 0149 11       		.uleb128 0x11
 8564 014a 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 258


 8565 014b 12       		.uleb128 0x12
 8566 014c 06       		.uleb128 0x6
 8567 014d 40       		.uleb128 0x40
 8568 014e 18       		.uleb128 0x18
 8569 014f 9742     		.uleb128 0x2117
 8570 0151 19       		.uleb128 0x19
 8571 0152 01       		.uleb128 0x1
 8572 0153 13       		.uleb128 0x13
 8573 0154 00       		.byte	0
 8574 0155 00       		.byte	0
 8575 0156 1B       		.uleb128 0x1b
 8576 0157 898201   		.uleb128 0x4109
 8577 015a 00       		.byte	0
 8578 015b 11       		.uleb128 0x11
 8579 015c 01       		.uleb128 0x1
 8580 015d 31       		.uleb128 0x31
 8581 015e 13       		.uleb128 0x13
 8582 015f 00       		.byte	0
 8583 0160 00       		.byte	0
 8584 0161 1C       		.uleb128 0x1c
 8585 0162 898201   		.uleb128 0x4109
 8586 0165 01       		.byte	0x1
 8587 0166 11       		.uleb128 0x11
 8588 0167 01       		.uleb128 0x1
 8589 0168 31       		.uleb128 0x31
 8590 0169 13       		.uleb128 0x13
 8591 016a 00       		.byte	0
 8592 016b 00       		.byte	0
 8593 016c 1D       		.uleb128 0x1d
 8594 016d 8A8201   		.uleb128 0x410a
 8595 0170 00       		.byte	0
 8596 0171 02       		.uleb128 0x2
 8597 0172 18       		.uleb128 0x18
 8598 0173 9142     		.uleb128 0x2111
 8599 0175 18       		.uleb128 0x18
 8600 0176 00       		.byte	0
 8601 0177 00       		.byte	0
 8602 0178 1E       		.uleb128 0x1e
 8603 0179 05       		.uleb128 0x5
 8604 017a 00       		.byte	0
 8605 017b 03       		.uleb128 0x3
 8606 017c 0E       		.uleb128 0xe
 8607 017d 3A       		.uleb128 0x3a
 8608 017e 0B       		.uleb128 0xb
 8609 017f 3B       		.uleb128 0x3b
 8610 0180 05       		.uleb128 0x5
 8611 0181 49       		.uleb128 0x49
 8612 0182 13       		.uleb128 0x13
 8613 0183 02       		.uleb128 0x2
 8614 0184 18       		.uleb128 0x18
 8615 0185 00       		.byte	0
 8616 0186 00       		.byte	0
 8617 0187 1F       		.uleb128 0x1f
 8618 0188 34       		.uleb128 0x34
 8619 0189 00       		.byte	0
 8620 018a 03       		.uleb128 0x3
 8621 018b 0E       		.uleb128 0xe
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 259


 8622 018c 3A       		.uleb128 0x3a
 8623 018d 0B       		.uleb128 0xb
 8624 018e 3B       		.uleb128 0x3b
 8625 018f 05       		.uleb128 0x5
 8626 0190 49       		.uleb128 0x49
 8627 0191 13       		.uleb128 0x13
 8628 0192 02       		.uleb128 0x2
 8629 0193 18       		.uleb128 0x18
 8630 0194 00       		.byte	0
 8631 0195 00       		.byte	0
 8632 0196 20       		.uleb128 0x20
 8633 0197 34       		.uleb128 0x34
 8634 0198 00       		.byte	0
 8635 0199 03       		.uleb128 0x3
 8636 019a 08       		.uleb128 0x8
 8637 019b 3A       		.uleb128 0x3a
 8638 019c 0B       		.uleb128 0xb
 8639 019d 3B       		.uleb128 0x3b
 8640 019e 05       		.uleb128 0x5
 8641 019f 49       		.uleb128 0x49
 8642 01a0 13       		.uleb128 0x13
 8643 01a1 02       		.uleb128 0x2
 8644 01a2 17       		.uleb128 0x17
 8645 01a3 00       		.byte	0
 8646 01a4 00       		.byte	0
 8647 01a5 21       		.uleb128 0x21
 8648 01a6 898201   		.uleb128 0x4109
 8649 01a9 01       		.byte	0x1
 8650 01aa 11       		.uleb128 0x11
 8651 01ab 01       		.uleb128 0x1
 8652 01ac 31       		.uleb128 0x31
 8653 01ad 13       		.uleb128 0x13
 8654 01ae 01       		.uleb128 0x1
 8655 01af 13       		.uleb128 0x13
 8656 01b0 00       		.byte	0
 8657 01b1 00       		.byte	0
 8658 01b2 22       		.uleb128 0x22
 8659 01b3 0B       		.uleb128 0xb
 8660 01b4 01       		.byte	0x1
 8661 01b5 11       		.uleb128 0x11
 8662 01b6 01       		.uleb128 0x1
 8663 01b7 12       		.uleb128 0x12
 8664 01b8 06       		.uleb128 0x6
 8665 01b9 00       		.byte	0
 8666 01ba 00       		.byte	0
 8667 01bb 23       		.uleb128 0x23
 8668 01bc 2E       		.uleb128 0x2e
 8669 01bd 01       		.byte	0x1
 8670 01be 03       		.uleb128 0x3
 8671 01bf 0E       		.uleb128 0xe
 8672 01c0 3A       		.uleb128 0x3a
 8673 01c1 0B       		.uleb128 0xb
 8674 01c2 3B       		.uleb128 0x3b
 8675 01c3 05       		.uleb128 0x5
 8676 01c4 27       		.uleb128 0x27
 8677 01c5 19       		.uleb128 0x19
 8678 01c6 8701     		.uleb128 0x87
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 260


 8679 01c8 19       		.uleb128 0x19
 8680 01c9 11       		.uleb128 0x11
 8681 01ca 01       		.uleb128 0x1
 8682 01cb 12       		.uleb128 0x12
 8683 01cc 06       		.uleb128 0x6
 8684 01cd 40       		.uleb128 0x40
 8685 01ce 18       		.uleb128 0x18
 8686 01cf 9742     		.uleb128 0x2117
 8687 01d1 19       		.uleb128 0x19
 8688 01d2 01       		.uleb128 0x1
 8689 01d3 13       		.uleb128 0x13
 8690 01d4 00       		.byte	0
 8691 01d5 00       		.byte	0
 8692 01d6 24       		.uleb128 0x24
 8693 01d7 2E       		.uleb128 0x2e
 8694 01d8 01       		.byte	0x1
 8695 01d9 3F       		.uleb128 0x3f
 8696 01da 19       		.uleb128 0x19
 8697 01db 03       		.uleb128 0x3
 8698 01dc 0E       		.uleb128 0xe
 8699 01dd 3A       		.uleb128 0x3a
 8700 01de 0B       		.uleb128 0xb
 8701 01df 3B       		.uleb128 0x3b
 8702 01e0 05       		.uleb128 0x5
 8703 01e1 27       		.uleb128 0x27
 8704 01e2 19       		.uleb128 0x19
 8705 01e3 49       		.uleb128 0x49
 8706 01e4 13       		.uleb128 0x13
 8707 01e5 11       		.uleb128 0x11
 8708 01e6 01       		.uleb128 0x1
 8709 01e7 12       		.uleb128 0x12
 8710 01e8 06       		.uleb128 0x6
 8711 01e9 40       		.uleb128 0x40
 8712 01ea 18       		.uleb128 0x18
 8713 01eb 9742     		.uleb128 0x2117
 8714 01ed 19       		.uleb128 0x19
 8715 01ee 01       		.uleb128 0x1
 8716 01ef 13       		.uleb128 0x13
 8717 01f0 00       		.byte	0
 8718 01f1 00       		.byte	0
 8719 01f2 25       		.uleb128 0x25
 8720 01f3 0B       		.uleb128 0xb
 8721 01f4 01       		.byte	0x1
 8722 01f5 11       		.uleb128 0x11
 8723 01f6 01       		.uleb128 0x1
 8724 01f7 12       		.uleb128 0x12
 8725 01f8 06       		.uleb128 0x6
 8726 01f9 01       		.uleb128 0x1
 8727 01fa 13       		.uleb128 0x13
 8728 01fb 00       		.byte	0
 8729 01fc 00       		.byte	0
 8730 01fd 26       		.uleb128 0x26
 8731 01fe 2E       		.uleb128 0x2e
 8732 01ff 01       		.byte	0x1
 8733 0200 3F       		.uleb128 0x3f
 8734 0201 19       		.uleb128 0x19
 8735 0202 03       		.uleb128 0x3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 261


 8736 0203 0E       		.uleb128 0xe
 8737 0204 3A       		.uleb128 0x3a
 8738 0205 0B       		.uleb128 0xb
 8739 0206 3B       		.uleb128 0x3b
 8740 0207 05       		.uleb128 0x5
 8741 0208 27       		.uleb128 0x27
 8742 0209 19       		.uleb128 0x19
 8743 020a 11       		.uleb128 0x11
 8744 020b 01       		.uleb128 0x1
 8745 020c 12       		.uleb128 0x12
 8746 020d 06       		.uleb128 0x6
 8747 020e 40       		.uleb128 0x40
 8748 020f 18       		.uleb128 0x18
 8749 0210 9742     		.uleb128 0x2117
 8750 0212 19       		.uleb128 0x19
 8751 0213 01       		.uleb128 0x1
 8752 0214 13       		.uleb128 0x13
 8753 0215 00       		.byte	0
 8754 0216 00       		.byte	0
 8755 0217 27       		.uleb128 0x27
 8756 0218 34       		.uleb128 0x34
 8757 0219 00       		.byte	0
 8758 021a 03       		.uleb128 0x3
 8759 021b 0E       		.uleb128 0xe
 8760 021c 3A       		.uleb128 0x3a
 8761 021d 0B       		.uleb128 0xb
 8762 021e 3B       		.uleb128 0x3b
 8763 021f 05       		.uleb128 0x5
 8764 0220 49       		.uleb128 0x49
 8765 0221 13       		.uleb128 0x13
 8766 0222 00       		.byte	0
 8767 0223 00       		.byte	0
 8768 0224 28       		.uleb128 0x28
 8769 0225 1D       		.uleb128 0x1d
 8770 0226 01       		.byte	0x1
 8771 0227 31       		.uleb128 0x31
 8772 0228 13       		.uleb128 0x13
 8773 0229 11       		.uleb128 0x11
 8774 022a 01       		.uleb128 0x1
 8775 022b 12       		.uleb128 0x12
 8776 022c 06       		.uleb128 0x6
 8777 022d 58       		.uleb128 0x58
 8778 022e 0B       		.uleb128 0xb
 8779 022f 59       		.uleb128 0x59
 8780 0230 05       		.uleb128 0x5
 8781 0231 01       		.uleb128 0x1
 8782 0232 13       		.uleb128 0x13
 8783 0233 00       		.byte	0
 8784 0234 00       		.byte	0
 8785 0235 29       		.uleb128 0x29
 8786 0236 34       		.uleb128 0x34
 8787 0237 00       		.byte	0
 8788 0238 31       		.uleb128 0x31
 8789 0239 13       		.uleb128 0x13
 8790 023a 00       		.byte	0
 8791 023b 00       		.byte	0
 8792 023c 2A       		.uleb128 0x2a
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 262


 8793 023d 1D       		.uleb128 0x1d
 8794 023e 01       		.byte	0x1
 8795 023f 31       		.uleb128 0x31
 8796 0240 13       		.uleb128 0x13
 8797 0241 11       		.uleb128 0x11
 8798 0242 01       		.uleb128 0x1
 8799 0243 12       		.uleb128 0x12
 8800 0244 06       		.uleb128 0x6
 8801 0245 58       		.uleb128 0x58
 8802 0246 0B       		.uleb128 0xb
 8803 0247 59       		.uleb128 0x59
 8804 0248 05       		.uleb128 0x5
 8805 0249 00       		.byte	0
 8806 024a 00       		.byte	0
 8807 024b 2B       		.uleb128 0x2b
 8808 024c 05       		.uleb128 0x5
 8809 024d 00       		.byte	0
 8810 024e 31       		.uleb128 0x31
 8811 024f 13       		.uleb128 0x13
 8812 0250 02       		.uleb128 0x2
 8813 0251 17       		.uleb128 0x17
 8814 0252 00       		.byte	0
 8815 0253 00       		.byte	0
 8816 0254 2C       		.uleb128 0x2c
 8817 0255 2E       		.uleb128 0x2e
 8818 0256 00       		.byte	0
 8819 0257 3F       		.uleb128 0x3f
 8820 0258 19       		.uleb128 0x19
 8821 0259 03       		.uleb128 0x3
 8822 025a 0E       		.uleb128 0xe
 8823 025b 3A       		.uleb128 0x3a
 8824 025c 0B       		.uleb128 0xb
 8825 025d 3B       		.uleb128 0x3b
 8826 025e 05       		.uleb128 0x5
 8827 025f 27       		.uleb128 0x27
 8828 0260 19       		.uleb128 0x19
 8829 0261 11       		.uleb128 0x11
 8830 0262 01       		.uleb128 0x1
 8831 0263 12       		.uleb128 0x12
 8832 0264 06       		.uleb128 0x6
 8833 0265 40       		.uleb128 0x40
 8834 0266 18       		.uleb128 0x18
 8835 0267 9742     		.uleb128 0x2117
 8836 0269 19       		.uleb128 0x19
 8837 026a 00       		.byte	0
 8838 026b 00       		.byte	0
 8839 026c 2D       		.uleb128 0x2d
 8840 026d 34       		.uleb128 0x34
 8841 026e 00       		.byte	0
 8842 026f 03       		.uleb128 0x3
 8843 0270 0E       		.uleb128 0xe
 8844 0271 3A       		.uleb128 0x3a
 8845 0272 0B       		.uleb128 0xb
 8846 0273 3B       		.uleb128 0x3b
 8847 0274 05       		.uleb128 0x5
 8848 0275 49       		.uleb128 0x49
 8849 0276 13       		.uleb128 0x13
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 263


 8850 0277 1C       		.uleb128 0x1c
 8851 0278 0B       		.uleb128 0xb
 8852 0279 00       		.byte	0
 8853 027a 00       		.byte	0
 8854 027b 2E       		.uleb128 0x2e
 8855 027c 2E       		.uleb128 0x2e
 8856 027d 00       		.byte	0
 8857 027e 3F       		.uleb128 0x3f
 8858 027f 19       		.uleb128 0x19
 8859 0280 03       		.uleb128 0x3
 8860 0281 0E       		.uleb128 0xe
 8861 0282 3A       		.uleb128 0x3a
 8862 0283 0B       		.uleb128 0xb
 8863 0284 3B       		.uleb128 0x3b
 8864 0285 05       		.uleb128 0x5
 8865 0286 27       		.uleb128 0x27
 8866 0287 19       		.uleb128 0x19
 8867 0288 49       		.uleb128 0x49
 8868 0289 13       		.uleb128 0x13
 8869 028a 11       		.uleb128 0x11
 8870 028b 01       		.uleb128 0x1
 8871 028c 12       		.uleb128 0x12
 8872 028d 06       		.uleb128 0x6
 8873 028e 40       		.uleb128 0x40
 8874 028f 18       		.uleb128 0x18
 8875 0290 9742     		.uleb128 0x2117
 8876 0292 19       		.uleb128 0x19
 8877 0293 00       		.byte	0
 8878 0294 00       		.byte	0
 8879 0295 2F       		.uleb128 0x2f
 8880 0296 0B       		.uleb128 0xb
 8881 0297 01       		.byte	0x1
 8882 0298 55       		.uleb128 0x55
 8883 0299 17       		.uleb128 0x17
 8884 029a 00       		.byte	0
 8885 029b 00       		.byte	0
 8886 029c 30       		.uleb128 0x30
 8887 029d 0B       		.uleb128 0xb
 8888 029e 01       		.byte	0x1
 8889 029f 55       		.uleb128 0x55
 8890 02a0 17       		.uleb128 0x17
 8891 02a1 01       		.uleb128 0x1
 8892 02a2 13       		.uleb128 0x13
 8893 02a3 00       		.byte	0
 8894 02a4 00       		.byte	0
 8895 02a5 31       		.uleb128 0x31
 8896 02a6 34       		.uleb128 0x34
 8897 02a7 00       		.byte	0
 8898 02a8 31       		.uleb128 0x31
 8899 02a9 13       		.uleb128 0x13
 8900 02aa 02       		.uleb128 0x2
 8901 02ab 18       		.uleb128 0x18
 8902 02ac 00       		.byte	0
 8903 02ad 00       		.byte	0
 8904 02ae 32       		.uleb128 0x32
 8905 02af 34       		.uleb128 0x34
 8906 02b0 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 264


 8907 02b1 03       		.uleb128 0x3
 8908 02b2 0E       		.uleb128 0xe
 8909 02b3 3A       		.uleb128 0x3a
 8910 02b4 0B       		.uleb128 0xb
 8911 02b5 3B       		.uleb128 0x3b
 8912 02b6 05       		.uleb128 0x5
 8913 02b7 49       		.uleb128 0x49
 8914 02b8 13       		.uleb128 0x13
 8915 02b9 3F       		.uleb128 0x3f
 8916 02ba 19       		.uleb128 0x19
 8917 02bb 3C       		.uleb128 0x3c
 8918 02bc 19       		.uleb128 0x19
 8919 02bd 00       		.byte	0
 8920 02be 00       		.byte	0
 8921 02bf 33       		.uleb128 0x33
 8922 02c0 34       		.uleb128 0x34
 8923 02c1 00       		.byte	0
 8924 02c2 03       		.uleb128 0x3
 8925 02c3 0E       		.uleb128 0xe
 8926 02c4 3A       		.uleb128 0x3a
 8927 02c5 0B       		.uleb128 0xb
 8928 02c6 3B       		.uleb128 0x3b
 8929 02c7 05       		.uleb128 0x5
 8930 02c8 49       		.uleb128 0x49
 8931 02c9 13       		.uleb128 0x13
 8932 02ca 3F       		.uleb128 0x3f
 8933 02cb 19       		.uleb128 0x19
 8934 02cc 02       		.uleb128 0x2
 8935 02cd 18       		.uleb128 0x18
 8936 02ce 00       		.byte	0
 8937 02cf 00       		.byte	0
 8938 02d0 34       		.uleb128 0x34
 8939 02d1 2E       		.uleb128 0x2e
 8940 02d2 00       		.byte	0
 8941 02d3 3F       		.uleb128 0x3f
 8942 02d4 19       		.uleb128 0x19
 8943 02d5 3C       		.uleb128 0x3c
 8944 02d6 19       		.uleb128 0x19
 8945 02d7 6E       		.uleb128 0x6e
 8946 02d8 0E       		.uleb128 0xe
 8947 02d9 03       		.uleb128 0x3
 8948 02da 0E       		.uleb128 0xe
 8949 02db 3A       		.uleb128 0x3a
 8950 02dc 0B       		.uleb128 0xb
 8951 02dd 3B       		.uleb128 0x3b
 8952 02de 0B       		.uleb128 0xb
 8953 02df 00       		.byte	0
 8954 02e0 00       		.byte	0
 8955 02e1 35       		.uleb128 0x35
 8956 02e2 2E       		.uleb128 0x2e
 8957 02e3 00       		.byte	0
 8958 02e4 3F       		.uleb128 0x3f
 8959 02e5 19       		.uleb128 0x19
 8960 02e6 3C       		.uleb128 0x3c
 8961 02e7 19       		.uleb128 0x19
 8962 02e8 6E       		.uleb128 0x6e
 8963 02e9 0E       		.uleb128 0xe
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 265


 8964 02ea 03       		.uleb128 0x3
 8965 02eb 0E       		.uleb128 0xe
 8966 02ec 3A       		.uleb128 0x3a
 8967 02ed 0B       		.uleb128 0xb
 8968 02ee 3B       		.uleb128 0x3b
 8969 02ef 05       		.uleb128 0x5
 8970 02f0 00       		.byte	0
 8971 02f1 00       		.byte	0
 8972 02f2 00       		.byte	0
 8973              		.section	.debug_loc,"",%progbits
 8974              	.Ldebug_loc0:
 8975              	.LLST0:
 8976 0000 00000000 		.4byte	.LVL0
 8977 0004 14000000 		.4byte	.LVL1
 8978 0008 0100     		.2byte	0x1
 8979 000a 50       		.byte	0x50
 8980 000b 14000000 		.4byte	.LVL1
 8981 000f 16000000 		.4byte	.LVL2
 8982 0013 0400     		.2byte	0x4
 8983 0015 F3       		.byte	0xf3
 8984 0016 01       		.uleb128 0x1
 8985 0017 50       		.byte	0x50
 8986 0018 9F       		.byte	0x9f
 8987 0019 16000000 		.4byte	.LVL2
 8988 001d 18000000 		.4byte	.LVL3
 8989 0021 0100     		.2byte	0x1
 8990 0023 50       		.byte	0x50
 8991 0024 18000000 		.4byte	.LVL3
 8992 0028 1A000000 		.4byte	.LVL4
 8993 002c 0400     		.2byte	0x4
 8994 002e F3       		.byte	0xf3
 8995 002f 01       		.uleb128 0x1
 8996 0030 50       		.byte	0x50
 8997 0031 9F       		.byte	0x9f
 8998 0032 1A000000 		.4byte	.LVL4
 8999 0036 1C000000 		.4byte	.LVL5
 9000 003a 0100     		.2byte	0x1
 9001 003c 50       		.byte	0x50
 9002 003d 1C000000 		.4byte	.LVL5
 9003 0041 1E000000 		.4byte	.LVL6
 9004 0045 0400     		.2byte	0x4
 9005 0047 F3       		.byte	0xf3
 9006 0048 01       		.uleb128 0x1
 9007 0049 50       		.byte	0x50
 9008 004a 9F       		.byte	0x9f
 9009 004b 1E000000 		.4byte	.LVL6
 9010 004f 20000000 		.4byte	.LVL7
 9011 0053 0100     		.2byte	0x1
 9012 0055 50       		.byte	0x50
 9013 0056 20000000 		.4byte	.LVL7
 9014 005a 2C000000 		.4byte	.LFE79
 9015 005e 0400     		.2byte	0x4
 9016 0060 F3       		.byte	0xf3
 9017 0061 01       		.uleb128 0x1
 9018 0062 50       		.byte	0x50
 9019 0063 9F       		.byte	0x9f
 9020 0064 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 266


 9021 0068 00000000 		.4byte	0
 9022              	.LLST1:
 9023 006c 00000000 		.4byte	.LVL0
 9024 0070 20000000 		.4byte	.LVL7
 9025 0074 0200     		.2byte	0x2
 9026 0076 30       		.byte	0x30
 9027 0077 9F       		.byte	0x9f
 9028 0078 20000000 		.4byte	.LVL7
 9029 007c 2C000000 		.4byte	.LFE79
 9030 0080 0100     		.2byte	0x1
 9031 0082 50       		.byte	0x50
 9032 0083 00000000 		.4byte	0
 9033 0087 00000000 		.4byte	0
 9034              	.LLST2:
 9035 008b 00000000 		.4byte	.LVL0
 9036 008f 14000000 		.4byte	.LVL1
 9037 0093 0100     		.2byte	0x1
 9038 0095 50       		.byte	0x50
 9039 0096 14000000 		.4byte	.LVL1
 9040 009a 16000000 		.4byte	.LVL2
 9041 009e 0400     		.2byte	0x4
 9042 00a0 F3       		.byte	0xf3
 9043 00a1 01       		.uleb128 0x1
 9044 00a2 50       		.byte	0x50
 9045 00a3 9F       		.byte	0x9f
 9046 00a4 16000000 		.4byte	.LVL2
 9047 00a8 18000000 		.4byte	.LVL3
 9048 00ac 0100     		.2byte	0x1
 9049 00ae 50       		.byte	0x50
 9050 00af 18000000 		.4byte	.LVL3
 9051 00b3 1A000000 		.4byte	.LVL4
 9052 00b7 0400     		.2byte	0x4
 9053 00b9 F3       		.byte	0xf3
 9054 00ba 01       		.uleb128 0x1
 9055 00bb 50       		.byte	0x50
 9056 00bc 9F       		.byte	0x9f
 9057 00bd 1A000000 		.4byte	.LVL4
 9058 00c1 1C000000 		.4byte	.LVL5
 9059 00c5 0100     		.2byte	0x1
 9060 00c7 50       		.byte	0x50
 9061 00c8 1C000000 		.4byte	.LVL5
 9062 00cc 1E000000 		.4byte	.LVL6
 9063 00d0 0400     		.2byte	0x4
 9064 00d2 F3       		.byte	0xf3
 9065 00d3 01       		.uleb128 0x1
 9066 00d4 50       		.byte	0x50
 9067 00d5 9F       		.byte	0x9f
 9068 00d6 1E000000 		.4byte	.LVL6
 9069 00da 20000000 		.4byte	.LVL7
 9070 00de 0100     		.2byte	0x1
 9071 00e0 50       		.byte	0x50
 9072 00e1 20000000 		.4byte	.LVL7
 9073 00e5 2C000000 		.4byte	.LFE79
 9074 00e9 0400     		.2byte	0x4
 9075 00eb F3       		.byte	0xf3
 9076 00ec 01       		.uleb128 0x1
 9077 00ed 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 267


 9078 00ee 9F       		.byte	0x9f
 9079 00ef 00000000 		.4byte	0
 9080 00f3 00000000 		.4byte	0
 9081              	.LLST3:
 9082 00f7 00000000 		.4byte	.LVL8
 9083 00fb 06000000 		.4byte	.LVL10
 9084 00ff 0100     		.2byte	0x1
 9085 0101 50       		.byte	0x50
 9086 0102 06000000 		.4byte	.LVL10
 9087 0106 12000000 		.4byte	.LVL13
 9088 010a 0100     		.2byte	0x1
 9089 010c 50       		.byte	0x50
 9090 010d 00000000 		.4byte	0
 9091 0111 00000000 		.4byte	0
 9092              	.LLST4:
 9093 0115 00000000 		.4byte	.LVL8
 9094 0119 04000000 		.4byte	.LVL9
 9095 011d 0200     		.2byte	0x2
 9096 011f 30       		.byte	0x30
 9097 0120 9F       		.byte	0x9f
 9098 0121 04000000 		.4byte	.LVL9
 9099 0125 0E000000 		.4byte	.LVL12
 9100 0129 0100     		.2byte	0x1
 9101 012b 53       		.byte	0x53
 9102 012c 0E000000 		.4byte	.LVL12
 9103 0130 14000000 		.4byte	.LFE104
 9104 0134 0500     		.2byte	0x5
 9105 0136 73       		.byte	0x73
 9106 0137 00       		.sleb128 0
 9107 0138 32       		.byte	0x32
 9108 0139 25       		.byte	0x25
 9109 013a 9F       		.byte	0x9f
 9110 013b 00000000 		.4byte	0
 9111 013f 00000000 		.4byte	0
 9112              	.LLST5:
 9113 0143 1A000000 		.4byte	.LVL14
 9114 0147 1C000000 		.4byte	.LVL15
 9115 014b 0100     		.2byte	0x1
 9116 014d 52       		.byte	0x52
 9117 014e 00000000 		.4byte	0
 9118 0152 00000000 		.4byte	0
 9119              	.LLST6:
 9120 0156 00000000 		.4byte	.LVL16
 9121 015a 06000000 		.4byte	.LVL17
 9122 015e 0100     		.2byte	0x1
 9123 0160 50       		.byte	0x50
 9124 0161 06000000 		.4byte	.LVL17
 9125 0165 12000000 		.4byte	.LFE106
 9126 0169 0100     		.2byte	0x1
 9127 016b 54       		.byte	0x54
 9128 016c 00000000 		.4byte	0
 9129 0170 00000000 		.4byte	0
 9130              	.LLST7:
 9131 0174 00000000 		.4byte	.LVL20
 9132 0178 1A000000 		.4byte	.LVL23
 9133 017c 0100     		.2byte	0x1
 9134 017e 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 268


 9135 017f 1A000000 		.4byte	.LVL23
 9136 0183 9C000000 		.4byte	.LFE69
 9137 0187 0100     		.2byte	0x1
 9138 0189 59       		.byte	0x59
 9139 018a 00000000 		.4byte	0
 9140 018e 00000000 		.4byte	0
 9141              	.LLST8:
 9142 0192 00000000 		.4byte	.LVL20
 9143 0196 18000000 		.4byte	.LVL22
 9144 019a 0100     		.2byte	0x1
 9145 019c 51       		.byte	0x51
 9146 019d 18000000 		.4byte	.LVL22
 9147 01a1 62000000 		.4byte	.LVL33
 9148 01a5 0100     		.2byte	0x1
 9149 01a7 55       		.byte	0x55
 9150 01a8 62000000 		.4byte	.LVL33
 9151 01ac 9C000000 		.4byte	.LFE69
 9152 01b0 0400     		.2byte	0x4
 9153 01b2 F3       		.byte	0xf3
 9154 01b3 01       		.uleb128 0x1
 9155 01b4 51       		.byte	0x51
 9156 01b5 9F       		.byte	0x9f
 9157 01b6 00000000 		.4byte	0
 9158 01ba 00000000 		.4byte	0
 9159              	.LLST9:
 9160 01be 00000000 		.4byte	.LVL20
 9161 01c2 16000000 		.4byte	.LVL21
 9162 01c6 0100     		.2byte	0x1
 9163 01c8 52       		.byte	0x52
 9164 01c9 16000000 		.4byte	.LVL21
 9165 01cd 2A000000 		.4byte	.LVL25
 9166 01d1 0100     		.2byte	0x1
 9167 01d3 57       		.byte	0x57
 9168 01d4 2A000000 		.4byte	.LVL25
 9169 01d8 32000000 		.4byte	.LVL27
 9170 01dc 0700     		.2byte	0x7
 9171 01de 72       		.byte	0x72
 9172 01df 81808080 		.sleb128 -1073741823
 9172      7C
 9173 01e4 9F       		.byte	0x9f
 9174 01e5 32000000 		.4byte	.LVL27
 9175 01e9 9C000000 		.4byte	.LFE69
 9176 01ed 0400     		.2byte	0x4
 9177 01ef F3       		.byte	0xf3
 9178 01f0 01       		.uleb128 0x1
 9179 01f1 52       		.byte	0x52
 9180 01f2 9F       		.byte	0x9f
 9181 01f3 00000000 		.4byte	0
 9182 01f7 00000000 		.4byte	0
 9183              	.LLST10:
 9184 01fb 00000000 		.4byte	.LVL20
 9185 01ff 1D000000 		.4byte	.LVL24-1
 9186 0203 0100     		.2byte	0x1
 9187 0205 53       		.byte	0x53
 9188 0206 1D000000 		.4byte	.LVL24-1
 9189 020a 9C000000 		.4byte	.LFE69
 9190 020e 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 269


 9191 0210 5A       		.byte	0x5a
 9192 0211 00000000 		.4byte	0
 9193 0215 00000000 		.4byte	0
 9194              	.LLST11:
 9195 0219 00000000 		.4byte	.LVL20
 9196 021d 5C000000 		.4byte	.LVL32
 9197 0221 0200     		.2byte	0x2
 9198 0223 91       		.byte	0x91
 9199 0224 00       		.sleb128 0
 9200 0225 5C000000 		.4byte	.LVL32
 9201 0229 78000000 		.4byte	.LVL36
 9202 022d 0100     		.2byte	0x1
 9203 022f 56       		.byte	0x56
 9204 0230 00000000 		.4byte	0
 9205 0234 00000000 		.4byte	0
 9206              	.LLST12:
 9207 0238 32000000 		.4byte	.LVL27
 9208 023c 42000000 		.4byte	.LVL29
 9209 0240 0100     		.2byte	0x1
 9210 0242 53       		.byte	0x53
 9211 0243 44000000 		.4byte	.LVL30
 9212 0247 4A000000 		.4byte	.LVL31
 9213 024b 0100     		.2byte	0x1
 9214 024d 53       		.byte	0x53
 9215 024e 00000000 		.4byte	0
 9216 0252 00000000 		.4byte	0
 9217              	.LLST13:
 9218 0256 02000000 		.4byte	.LVL38
 9219 025a 06000000 		.4byte	.LVL39
 9220 025e 0200     		.2byte	0x2
 9221 0260 30       		.byte	0x30
 9222 0261 9F       		.byte	0x9f
 9223 0262 06000000 		.4byte	.LVL39
 9224 0266 1C000000 		.4byte	.LVL42
 9225 026a 0100     		.2byte	0x1
 9226 026c 54       		.byte	0x54
 9227 026d 00000000 		.4byte	0
 9228 0271 00000000 		.4byte	0
 9229              	.LLST14:
 9230 0275 00000000 		.4byte	.LVL48
 9231 0279 07000000 		.4byte	.LVL49-1
 9232 027d 0100     		.2byte	0x1
 9233 027f 50       		.byte	0x50
 9234 0280 07000000 		.4byte	.LVL49-1
 9235 0284 A2000000 		.4byte	.LVL53
 9236 0288 0100     		.2byte	0x1
 9237 028a 55       		.byte	0x55
 9238 028b A2000000 		.4byte	.LVL53
 9239 028f AC000000 		.4byte	.LFE70
 9240 0293 0400     		.2byte	0x4
 9241 0295 F3       		.byte	0xf3
 9242 0296 01       		.uleb128 0x1
 9243 0297 50       		.byte	0x50
 9244 0298 9F       		.byte	0x9f
 9245 0299 00000000 		.4byte	0
 9246 029d 00000000 		.4byte	0
 9247              	.LLST15:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 270


 9248 02a1 10000000 		.4byte	.LVL55
 9249 02a5 34000000 		.4byte	.LVL58
 9250 02a9 0100     		.2byte	0x1
 9251 02ab 55       		.byte	0x55
 9252 02ac 00000000 		.4byte	0
 9253 02b0 00000000 		.4byte	0
 9254              	.LLST16:
 9255 02b4 00000000 		.4byte	.LVL59
 9256 02b8 02000000 		.4byte	.LVL60
 9257 02bc 0100     		.2byte	0x1
 9258 02be 50       		.byte	0x50
 9259 02bf 02000000 		.4byte	.LVL60
 9260 02c3 08000000 		.4byte	.LFE101
 9261 02c7 0400     		.2byte	0x4
 9262 02c9 F3       		.byte	0xf3
 9263 02ca 01       		.uleb128 0x1
 9264 02cb 50       		.byte	0x50
 9265 02cc 9F       		.byte	0x9f
 9266 02cd 00000000 		.4byte	0
 9267 02d1 00000000 		.4byte	0
 9268              	.LLST17:
 9269 02d5 00000000 		.4byte	.LVL62
 9270 02d9 10000000 		.4byte	.LVL64
 9271 02dd 0100     		.2byte	0x1
 9272 02df 50       		.byte	0x50
 9273 02e0 10000000 		.4byte	.LVL64
 9274 02e4 4A000000 		.4byte	.LVL68
 9275 02e8 0100     		.2byte	0x1
 9276 02ea 54       		.byte	0x54
 9277 02eb 4A000000 		.4byte	.LVL68
 9278 02ef 84000000 		.4byte	.LFE121
 9279 02f3 0400     		.2byte	0x4
 9280 02f5 F3       		.byte	0xf3
 9281 02f6 01       		.uleb128 0x1
 9282 02f7 50       		.byte	0x50
 9283 02f8 9F       		.byte	0x9f
 9284 02f9 00000000 		.4byte	0
 9285 02fd 00000000 		.4byte	0
 9286              	.LLST18:
 9287 0301 00000000 		.4byte	.LVL62
 9288 0305 15000000 		.4byte	.LVL65-1
 9289 0309 0100     		.2byte	0x1
 9290 030b 51       		.byte	0x51
 9291 030c 15000000 		.4byte	.LVL65-1
 9292 0310 80000000 		.4byte	.LVL73
 9293 0314 0100     		.2byte	0x1
 9294 0316 56       		.byte	0x56
 9295 0317 80000000 		.4byte	.LVL73
 9296 031b 84000000 		.4byte	.LFE121
 9297 031f 0400     		.2byte	0x4
 9298 0321 F3       		.byte	0xf3
 9299 0322 01       		.uleb128 0x1
 9300 0323 51       		.byte	0x51
 9301 0324 9F       		.byte	0x9f
 9302 0325 00000000 		.4byte	0
 9303 0329 00000000 		.4byte	0
 9304              	.LLST19:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 271


 9305 032d 4A000000 		.4byte	.LVL68
 9306 0331 80000000 		.4byte	.LVL73
 9307 0335 0100     		.2byte	0x1
 9308 0337 54       		.byte	0x54
 9309 0338 00000000 		.4byte	0
 9310 033c 00000000 		.4byte	0
 9311              	.LLST20:
 9312 0340 0C000000 		.4byte	.LVL63
 9313 0344 6A000000 		.4byte	.LVL71
 9314 0348 0100     		.2byte	0x1
 9315 034a 55       		.byte	0x55
 9316 034b 00000000 		.4byte	0
 9317 034f 00000000 		.4byte	0
 9318              	.LLST21:
 9319 0353 00000000 		.4byte	.LVL74
 9320 0357 10000000 		.4byte	.LVL75
 9321 035b 0100     		.2byte	0x1
 9322 035d 50       		.byte	0x50
 9323 035e 10000000 		.4byte	.LVL75
 9324 0362 62000000 		.4byte	.LFE68
 9325 0366 0100     		.2byte	0x1
 9326 0368 56       		.byte	0x56
 9327 0369 00000000 		.4byte	0
 9328 036d 00000000 		.4byte	0
 9329              	.LLST22:
 9330 0371 00000000 		.4byte	.LVL74
 9331 0375 13000000 		.4byte	.LVL76-1
 9332 0379 0100     		.2byte	0x1
 9333 037b 51       		.byte	0x51
 9334 037c 13000000 		.4byte	.LVL76-1
 9335 0380 62000000 		.4byte	.LFE68
 9336 0384 0100     		.2byte	0x1
 9337 0386 57       		.byte	0x57
 9338 0387 00000000 		.4byte	0
 9339 038b 00000000 		.4byte	0
 9340              	.LLST23:
 9341 038f 00000000 		.4byte	.LVL74
 9342 0393 13000000 		.4byte	.LVL76-1
 9343 0397 0100     		.2byte	0x1
 9344 0399 52       		.byte	0x52
 9345 039a 13000000 		.4byte	.LVL76-1
 9346 039e 62000000 		.4byte	.LFE68
 9347 03a2 0400     		.2byte	0x4
 9348 03a4 F3       		.byte	0xf3
 9349 03a5 01       		.uleb128 0x1
 9350 03a6 52       		.byte	0x52
 9351 03a7 9F       		.byte	0x9f
 9352 03a8 00000000 		.4byte	0
 9353 03ac 00000000 		.4byte	0
 9354              	.LLST24:
 9355 03b0 00000000 		.4byte	.LVL74
 9356 03b4 13000000 		.4byte	.LVL76-1
 9357 03b8 0100     		.2byte	0x1
 9358 03ba 53       		.byte	0x53
 9359 03bb 13000000 		.4byte	.LVL76-1
 9360 03bf 62000000 		.4byte	.LFE68
 9361 03c3 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 272


 9362 03c5 58       		.byte	0x58
 9363 03c6 00000000 		.4byte	0
 9364 03ca 00000000 		.4byte	0
 9365              	.LLST25:
 9366 03ce 1E000000 		.4byte	.LVL78
 9367 03d2 2A000000 		.4byte	.LVL79
 9368 03d6 0100     		.2byte	0x1
 9369 03d8 50       		.byte	0x50
 9370 03d9 2A000000 		.4byte	.LVL79
 9371 03dd 30000000 		.4byte	.LVL81
 9372 03e1 0100     		.2byte	0x1
 9373 03e3 54       		.byte	0x54
 9374 03e4 32000000 		.4byte	.LVL82
 9375 03e8 62000000 		.4byte	.LFE68
 9376 03ec 0100     		.2byte	0x1
 9377 03ee 54       		.byte	0x54
 9378 03ef 00000000 		.4byte	0
 9379 03f3 00000000 		.4byte	0
 9380              	.LLST26:
 9381 03f7 54000000 		.4byte	.LVL84
 9382 03fb 58000000 		.4byte	.LVL85
 9383 03ff 0200     		.2byte	0x2
 9384 0401 31       		.byte	0x31
 9385 0402 9F       		.byte	0x9f
 9386 0403 5C000000 		.4byte	.LVL86
 9387 0407 62000000 		.4byte	.LFE68
 9388 040b 0100     		.2byte	0x1
 9389 040d 50       		.byte	0x50
 9390 040e 00000000 		.4byte	0
 9391 0412 00000000 		.4byte	0
 9392              	.LLST27:
 9393 0416 14000000 		.4byte	.LVL76
 9394 041a 1A000000 		.4byte	.LVL77
 9395 041e 0100     		.2byte	0x1
 9396 0420 50       		.byte	0x50
 9397 0421 1A000000 		.4byte	.LVL77
 9398 0425 30000000 		.4byte	.LVL81
 9399 0429 0100     		.2byte	0x1
 9400 042b 59       		.byte	0x59
 9401 042c 30000000 		.4byte	.LVL81
 9402 0430 32000000 		.4byte	.LVL82
 9403 0434 0100     		.2byte	0x1
 9404 0436 50       		.byte	0x50
 9405 0437 00000000 		.4byte	0
 9406 043b 00000000 		.4byte	0
 9407              	.LLST28:
 9408 043f 00000000 		.4byte	.LVL87
 9409 0443 07000000 		.4byte	.LVL88-1
 9410 0447 0100     		.2byte	0x1
 9411 0449 50       		.byte	0x50
 9412 044a 07000000 		.4byte	.LVL88-1
 9413 044e 10000000 		.4byte	.LVL89
 9414 0452 0100     		.2byte	0x1
 9415 0454 54       		.byte	0x54
 9416 0455 00000000 		.4byte	0
 9417 0459 00000000 		.4byte	0
 9418              	.LLST29:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 273


 9419 045d 10000000 		.4byte	.LVL89
 9420 0461 B2000000 		.4byte	.LVL96
 9421 0465 0100     		.2byte	0x1
 9422 0467 54       		.byte	0x54
 9423 0468 00000000 		.4byte	0
 9424 046c 00000000 		.4byte	0
 9425              	.LLST30:
 9426 0470 00000000 		.4byte	.LVL97
 9427 0474 11000000 		.4byte	.LVL99-1
 9428 0478 0100     		.2byte	0x1
 9429 047a 50       		.byte	0x50
 9430 047b 11000000 		.4byte	.LVL99-1
 9431 047f 4C000000 		.4byte	.LVL105
 9432 0483 0100     		.2byte	0x1
 9433 0485 54       		.byte	0x54
 9434 0486 4C000000 		.4byte	.LVL105
 9435 048a 4E000000 		.4byte	.LVL106
 9436 048e 0100     		.2byte	0x1
 9437 0490 50       		.byte	0x50
 9438 0491 4E000000 		.4byte	.LVL106
 9439 0495 50000000 		.4byte	.LVL107
 9440 0499 0400     		.2byte	0x4
 9441 049b F3       		.byte	0xf3
 9442 049c 01       		.uleb128 0x1
 9443 049d 50       		.byte	0x50
 9444 049e 9F       		.byte	0x9f
 9445 049f 50000000 		.4byte	.LVL107
 9446 04a3 68000000 		.4byte	.LVL114
 9447 04a7 0100     		.2byte	0x1
 9448 04a9 54       		.byte	0x54
 9449 04aa 68000000 		.4byte	.LVL114
 9450 04ae 70000000 		.4byte	.LFE74
 9451 04b2 0400     		.2byte	0x4
 9452 04b4 F3       		.byte	0xf3
 9453 04b5 01       		.uleb128 0x1
 9454 04b6 50       		.byte	0x50
 9455 04b7 9F       		.byte	0x9f
 9456 04b8 00000000 		.4byte	0
 9457 04bc 00000000 		.4byte	0
 9458              	.LLST31:
 9459 04c0 14000000 		.4byte	.LVL100
 9460 04c4 4C000000 		.4byte	.LVL105
 9461 04c8 0100     		.2byte	0x1
 9462 04ca 55       		.byte	0x55
 9463 04cb 50000000 		.4byte	.LVL107
 9464 04cf 68000000 		.4byte	.LVL114
 9465 04d3 0100     		.2byte	0x1
 9466 04d5 55       		.byte	0x55
 9467 04d6 00000000 		.4byte	0
 9468 04da 00000000 		.4byte	0
 9469              	.LLST32:
 9470 04de 18000000 		.4byte	.LVL101
 9471 04e2 4C000000 		.4byte	.LVL105
 9472 04e6 0100     		.2byte	0x1
 9473 04e8 56       		.byte	0x56
 9474 04e9 50000000 		.4byte	.LVL107
 9475 04ed 68000000 		.4byte	.LVL114
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 274


 9476 04f1 0100     		.2byte	0x1
 9477 04f3 56       		.byte	0x56
 9478 04f4 00000000 		.4byte	0
 9479 04f8 00000000 		.4byte	0
 9480              	.LLST33:
 9481 04fc 1C000000 		.4byte	.LVL102
 9482 0500 4C000000 		.4byte	.LVL105
 9483 0504 0100     		.2byte	0x1
 9484 0506 57       		.byte	0x57
 9485 0507 50000000 		.4byte	.LVL107
 9486 050b 68000000 		.4byte	.LVL114
 9487 050f 0100     		.2byte	0x1
 9488 0511 57       		.byte	0x57
 9489 0512 00000000 		.4byte	0
 9490 0516 00000000 		.4byte	0
 9491              	.LLST34:
 9492 051a 02000000 		.4byte	.LVL98
 9493 051e 11000000 		.4byte	.LVL99-1
 9494 0522 0100     		.2byte	0x1
 9495 0524 50       		.byte	0x50
 9496 0525 11000000 		.4byte	.LVL99-1
 9497 0529 4C000000 		.4byte	.LVL105
 9498 052d 0100     		.2byte	0x1
 9499 052f 54       		.byte	0x54
 9500 0530 4C000000 		.4byte	.LVL105
 9501 0534 4E000000 		.4byte	.LVL106
 9502 0538 0100     		.2byte	0x1
 9503 053a 50       		.byte	0x50
 9504 053b 4E000000 		.4byte	.LVL106
 9505 053f 50000000 		.4byte	.LVL107
 9506 0543 0400     		.2byte	0x4
 9507 0545 F3       		.byte	0xf3
 9508 0546 01       		.uleb128 0x1
 9509 0547 50       		.byte	0x50
 9510 0548 9F       		.byte	0x9f
 9511 0549 50000000 		.4byte	.LVL107
 9512 054d 68000000 		.4byte	.LVL114
 9513 0551 0100     		.2byte	0x1
 9514 0553 54       		.byte	0x54
 9515 0554 68000000 		.4byte	.LVL114
 9516 0558 70000000 		.4byte	.LFE74
 9517 055c 0400     		.2byte	0x4
 9518 055e F3       		.byte	0xf3
 9519 055f 01       		.uleb128 0x1
 9520 0560 50       		.byte	0x50
 9521 0561 9F       		.byte	0x9f
 9522 0562 00000000 		.4byte	0
 9523 0566 00000000 		.4byte	0
 9524              	.LLST35:
 9525 056a 00000000 		.4byte	.LVL115
 9526 056e 07000000 		.4byte	.LVL116-1
 9527 0572 0100     		.2byte	0x1
 9528 0574 50       		.byte	0x50
 9529 0575 07000000 		.4byte	.LVL116-1
 9530 0579 10000000 		.4byte	.LVL117
 9531 057d 0100     		.2byte	0x1
 9532 057f 54       		.byte	0x54
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 275


 9533 0580 10000000 		.4byte	.LVL117
 9534 0584 20000000 		.4byte	.LFE75
 9535 0588 0400     		.2byte	0x4
 9536 058a F3       		.byte	0xf3
 9537 058b 01       		.uleb128 0x1
 9538 058c 50       		.byte	0x50
 9539 058d 9F       		.byte	0x9f
 9540 058e 00000000 		.4byte	0
 9541 0592 00000000 		.4byte	0
 9542              	.LLST36:
 9543 0596 10000000 		.4byte	.LVL117
 9544 059a 12000000 		.4byte	.LVL118
 9545 059e 0100     		.2byte	0x1
 9546 05a0 54       		.byte	0x54
 9547 05a1 00000000 		.4byte	0
 9548 05a5 00000000 		.4byte	0
 9549              	.LLST37:
 9550 05a9 12000000 		.4byte	.LVL118
 9551 05ad 1A000000 		.4byte	.LVL120
 9552 05b1 0100     		.2byte	0x1
 9553 05b3 54       		.byte	0x54
 9554 05b4 1A000000 		.4byte	.LVL120
 9555 05b8 20000000 		.4byte	.LFE75
 9556 05bc 0100     		.2byte	0x1
 9557 05be 50       		.byte	0x50
 9558 05bf 00000000 		.4byte	0
 9559 05c3 00000000 		.4byte	0
 9560              	.LLST38:
 9561 05c7 00000000 		.4byte	.LVL121
 9562 05cb 1C000000 		.4byte	.LVL122
 9563 05cf 0100     		.2byte	0x1
 9564 05d1 50       		.byte	0x50
 9565 05d2 1C000000 		.4byte	.LVL122
 9566 05d6 28000000 		.4byte	.LFE76
 9567 05da 0400     		.2byte	0x4
 9568 05dc F3       		.byte	0xf3
 9569 05dd 01       		.uleb128 0x1
 9570 05de 50       		.byte	0x50
 9571 05df 9F       		.byte	0x9f
 9572 05e0 00000000 		.4byte	0
 9573 05e4 00000000 		.4byte	0
 9574              	.LLST39:
 9575 05e8 1C000000 		.4byte	.LVL122
 9576 05ec 1E000000 		.4byte	.LVL123
 9577 05f0 0100     		.2byte	0x1
 9578 05f2 50       		.byte	0x50
 9579 05f3 00000000 		.4byte	0
 9580 05f7 00000000 		.4byte	0
 9581              	.LLST40:
 9582 05fb 1E000000 		.4byte	.LVL123
 9583 05ff 22000000 		.4byte	.LVL124
 9584 0603 0100     		.2byte	0x1
 9585 0605 53       		.byte	0x53
 9586 0606 00000000 		.4byte	0
 9587 060a 00000000 		.4byte	0
 9588              	.LLST41:
 9589 060e 00000000 		.4byte	.LVL125
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 276


 9590 0612 0F000000 		.4byte	.LVL128-1
 9591 0616 0100     		.2byte	0x1
 9592 0618 50       		.byte	0x50
 9593 0619 0F000000 		.4byte	.LVL128-1
 9594 061d 18000000 		.4byte	.LVL129
 9595 0621 0100     		.2byte	0x1
 9596 0623 54       		.byte	0x54
 9597 0624 00000000 		.4byte	0
 9598 0628 00000000 		.4byte	0
 9599              	.LLST42:
 9600 062c 00000000 		.4byte	.LVL125
 9601 0630 0C000000 		.4byte	.LVL127
 9602 0634 0100     		.2byte	0x1
 9603 0636 51       		.byte	0x51
 9604 0637 0C000000 		.4byte	.LVL127
 9605 063b 66000000 		.4byte	.LVL134
 9606 063f 0100     		.2byte	0x1
 9607 0641 55       		.byte	0x55
 9608 0642 66000000 		.4byte	.LVL134
 9609 0646 7F000000 		.4byte	.LVL135-1
 9610 064a 0300     		.2byte	0x3
 9611 064c 74       		.byte	0x74
 9612 064d C000     		.sleb128 64
 9613 064f 00000000 		.4byte	0
 9614 0653 00000000 		.4byte	0
 9615              	.LLST43:
 9616 0657 18000000 		.4byte	.LVL129
 9617 065b D2000000 		.4byte	.LVL140
 9618 065f 0100     		.2byte	0x1
 9619 0661 54       		.byte	0x54
 9620 0662 00000000 		.4byte	0
 9621 0666 00000000 		.4byte	0
 9622              	.LLST44:
 9623 066a 1A000000 		.4byte	.LVL130
 9624 066e 5E000000 		.4byte	.LVL133
 9625 0672 0100     		.2byte	0x1
 9626 0674 53       		.byte	0x53
 9627 0675 00000000 		.4byte	0
 9628 0679 00000000 		.4byte	0
 9629              	.LLST45:
 9630 067d 54000000 		.4byte	.LVL132
 9631 0681 88000000 		.4byte	.LVL136
 9632 0685 0100     		.2byte	0x1
 9633 0687 56       		.byte	0x56
 9634 0688 00000000 		.4byte	0
 9635 068c 00000000 		.4byte	0
 9636              	.LLST46:
 9637 0690 06000000 		.4byte	.LVL126
 9638 0694 52000000 		.4byte	.LVL131
 9639 0698 0200     		.2byte	0x2
 9640 069a 30       		.byte	0x30
 9641 069b 9F       		.byte	0x9f
 9642 069c 52000000 		.4byte	.LVL131
 9643 06a0 CC000000 		.4byte	.LVL138
 9644 06a4 0100     		.2byte	0x1
 9645 06a6 57       		.byte	0x57
 9646 06a7 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 277


 9647 06ab 00000000 		.4byte	0
 9648              	.LLST47:
 9649 06af 00000000 		.4byte	.LVL141
 9650 06b3 13000000 		.4byte	.LVL142-1
 9651 06b7 0100     		.2byte	0x1
 9652 06b9 50       		.byte	0x50
 9653 06ba 13000000 		.4byte	.LVL142-1
 9654 06be 6C000000 		.4byte	.LVL147
 9655 06c2 0100     		.2byte	0x1
 9656 06c4 54       		.byte	0x54
 9657 06c5 6C000000 		.4byte	.LVL147
 9658 06c9 78000000 		.4byte	.LFE80
 9659 06cd 0100     		.2byte	0x1
 9660 06cf 50       		.byte	0x50
 9661 06d0 00000000 		.4byte	0
 9662 06d4 00000000 		.4byte	0
 9663              	.LLST49:
 9664 06d8 00000000 		.4byte	.LVL148
 9665 06dc 1B000000 		.4byte	.LVL150-1
 9666 06e0 0100     		.2byte	0x1
 9667 06e2 50       		.byte	0x50
 9668 06e3 1B000000 		.4byte	.LVL150-1
 9669 06e7 80000000 		.4byte	.LVL158
 9670 06eb 0100     		.2byte	0x1
 9671 06ed 54       		.byte	0x54
 9672 06ee 80000000 		.4byte	.LVL158
 9673 06f2 88000000 		.4byte	.LFE81
 9674 06f6 0400     		.2byte	0x4
 9675 06f8 F3       		.byte	0xf3
 9676 06f9 01       		.uleb128 0x1
 9677 06fa 50       		.byte	0x50
 9678 06fb 9F       		.byte	0x9f
 9679 06fc 00000000 		.4byte	0
 9680 0700 00000000 		.4byte	0
 9681              	.LLST50:
 9682 0704 04000000 		.4byte	.LVL149
 9683 0708 3A000000 		.4byte	.LVL151
 9684 070c 0200     		.2byte	0x2
 9685 070e 30       		.byte	0x30
 9686 070f 9F       		.byte	0x9f
 9687 0710 3A000000 		.4byte	.LVL151
 9688 0714 68000000 		.4byte	.LVL154
 9689 0718 0100     		.2byte	0x1
 9690 071a 56       		.byte	0x56
 9691 071b 68000000 		.4byte	.LVL154
 9692 071f 78000000 		.4byte	.LVL156
 9693 0723 0200     		.2byte	0x2
 9694 0725 30       		.byte	0x30
 9695 0726 9F       		.byte	0x9f
 9696 0727 78000000 		.4byte	.LVL156
 9697 072b 80000000 		.4byte	.LVL158
 9698 072f 0100     		.2byte	0x1
 9699 0731 56       		.byte	0x56
 9700 0732 80000000 		.4byte	.LVL158
 9701 0736 88000000 		.4byte	.LFE81
 9702 073a 0100     		.2byte	0x1
 9703 073c 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 278


 9704 073d 00000000 		.4byte	0
 9705 0741 00000000 		.4byte	0
 9706              	.LLST51:
 9707 0745 04000000 		.4byte	.LVL149
 9708 0749 1B000000 		.4byte	.LVL150-1
 9709 074d 0100     		.2byte	0x1
 9710 074f 50       		.byte	0x50
 9711 0750 1B000000 		.4byte	.LVL150-1
 9712 0754 80000000 		.4byte	.LVL158
 9713 0758 0100     		.2byte	0x1
 9714 075a 54       		.byte	0x54
 9715 075b 80000000 		.4byte	.LVL158
 9716 075f 88000000 		.4byte	.LFE81
 9717 0763 0400     		.2byte	0x4
 9718 0765 F3       		.byte	0xf3
 9719 0766 01       		.uleb128 0x1
 9720 0767 50       		.byte	0x50
 9721 0768 9F       		.byte	0x9f
 9722 0769 00000000 		.4byte	0
 9723 076d 00000000 		.4byte	0
 9724              	.LLST52:
 9725 0771 78000000 		.4byte	.LVL156
 9726 0775 7C000000 		.4byte	.LVL157
 9727 0779 0100     		.2byte	0x1
 9728 077b 55       		.byte	0x55
 9729 077c 00000000 		.4byte	0
 9730 0780 00000000 		.4byte	0
 9731              	.LLST53:
 9732 0784 16000000 		.4byte	.LVL159
 9733 0788 41000000 		.4byte	.LVL160-1
 9734 078c 0100     		.2byte	0x1
 9735 078e 50       		.byte	0x50
 9736 078f 00000000 		.4byte	0
 9737 0793 00000000 		.4byte	0
 9738              	.LLST54:
 9739 0797 00000000 		.4byte	.LVL165
 9740 079b 0A000000 		.4byte	.LVL166
 9741 079f 0100     		.2byte	0x1
 9742 07a1 50       		.byte	0x50
 9743 07a2 00000000 		.4byte	0
 9744 07a6 00000000 		.4byte	0
 9745              	.LLST55:
 9746 07aa 44000000 		.4byte	.LVL173
 9747 07ae 4A000000 		.4byte	.LVL175
 9748 07b2 0100     		.2byte	0x1
 9749 07b4 54       		.byte	0x54
 9750 07b5 68000000 		.4byte	.LVL177
 9751 07b9 BC000000 		.4byte	.LVL182
 9752 07bd 0100     		.2byte	0x1
 9753 07bf 54       		.byte	0x54
 9754 07c0 00000000 		.4byte	0
 9755 07c4 00000000 		.4byte	0
 9756              	.LLST56:
 9757 07c8 6A000000 		.4byte	.LVL178
 9758 07cc 7B000000 		.4byte	.LVL179-1
 9759 07d0 0100     		.2byte	0x1
 9760 07d2 53       		.byte	0x53
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 279


 9761 07d3 00000000 		.4byte	0
 9762 07d7 00000000 		.4byte	0
 9763              	.LLST57:
 9764 07db 04000000 		.4byte	.LVL167
 9765 07df 44000000 		.4byte	.LVL173
 9766 07e3 0200     		.2byte	0x2
 9767 07e5 30       		.byte	0x30
 9768 07e6 9F       		.byte	0x9f
 9769 07e7 44000000 		.4byte	.LVL173
 9770 07eb 48000000 		.4byte	.LVL174
 9771 07ef 0100     		.2byte	0x1
 9772 07f1 58       		.byte	0x58
 9773 07f2 4A000000 		.4byte	.LVL175
 9774 07f6 4E000000 		.4byte	.LVL176
 9775 07fa 0200     		.2byte	0x2
 9776 07fc 30       		.byte	0x30
 9777 07fd 9F       		.byte	0x9f
 9778 07fe 4E000000 		.4byte	.LVL176
 9779 0802 E0000000 		.4byte	.LVL184
 9780 0806 0100     		.2byte	0x1
 9781 0808 58       		.byte	0x58
 9782 0809 E0000000 		.4byte	.LVL184
 9783 080d F2000000 		.4byte	.LVL185
 9784 0811 0200     		.2byte	0x2
 9785 0813 30       		.byte	0x30
 9786 0814 9F       		.byte	0x9f
 9787 0815 F2000000 		.4byte	.LVL185
 9788 0819 FC000000 		.4byte	.LVL187
 9789 081d 0100     		.2byte	0x1
 9790 081f 58       		.byte	0x58
 9791 0820 FC000000 		.4byte	.LVL187
 9792 0824 00010000 		.4byte	.LFE91
 9793 0828 0100     		.2byte	0x1
 9794 082a 50       		.byte	0x50
 9795 082b 00000000 		.4byte	0
 9796 082f 00000000 		.4byte	0
 9797              	.LLST58:
 9798 0833 16000000 		.4byte	.LVL168
 9799 0837 E0000000 		.4byte	.LVL184
 9800 083b 0100     		.2byte	0x1
 9801 083d 57       		.byte	0x57
 9802 083e F2000000 		.4byte	.LVL185
 9803 0842 F6000000 		.4byte	.LVL186
 9804 0846 0100     		.2byte	0x1
 9805 0848 57       		.byte	0x57
 9806 0849 00000000 		.4byte	0
 9807 084d 00000000 		.4byte	0
 9808              	.LLST59:
 9809 0851 1E000000 		.4byte	.LVL169
 9810 0855 2C000000 		.4byte	.LVL170
 9811 0859 0100     		.2byte	0x1
 9812 085b 52       		.byte	0x52
 9813 085c 2C000000 		.4byte	.LVL170
 9814 0860 32000000 		.4byte	.LVL171
 9815 0864 0500     		.2byte	0x5
 9816 0866 03       		.byte	0x3
 9817 0867 D0000000 		.4byte	pxOverflowDelayedTaskList
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 280


 9818 086b 00000000 		.4byte	0
 9819 086f 00000000 		.4byte	0
 9820              	.LLST60:
 9821 0873 02000000 		.4byte	.LVL188
 9822 0877 26000000 		.4byte	.LVL190
 9823 087b 0200     		.2byte	0x2
 9824 087d 30       		.byte	0x30
 9825 087e 9F       		.byte	0x9f
 9826 087f 26000000 		.4byte	.LVL190
 9827 0883 74000000 		.4byte	.LVL195
 9828 0887 0100     		.2byte	0x1
 9829 0889 55       		.byte	0x55
 9830 088a 74000000 		.4byte	.LVL195
 9831 088e 76000000 		.4byte	.LVL196
 9832 0892 0200     		.2byte	0x2
 9833 0894 30       		.byte	0x30
 9834 0895 9F       		.byte	0x9f
 9835 0896 76000000 		.4byte	.LVL196
 9836 089a C2000000 		.4byte	.LVL204
 9837 089e 0100     		.2byte	0x1
 9838 08a0 55       		.byte	0x55
 9839 08a1 C2000000 		.4byte	.LVL204
 9840 08a5 C6000000 		.4byte	.LVL205
 9841 08a9 0200     		.2byte	0x2
 9842 08ab 30       		.byte	0x30
 9843 08ac 9F       		.byte	0x9f
 9844 08ad C6000000 		.4byte	.LVL205
 9845 08b1 C8000000 		.4byte	.LVL206
 9846 08b5 0100     		.2byte	0x1
 9847 08b7 55       		.byte	0x55
 9848 08b8 00000000 		.4byte	0
 9849 08bc 00000000 		.4byte	0
 9850              	.LLST61:
 9851 08c0 02000000 		.4byte	.LVL188
 9852 08c4 AE000000 		.4byte	.LVL202
 9853 08c8 0200     		.2byte	0x2
 9854 08ca 30       		.byte	0x30
 9855 08cb 9F       		.byte	0x9f
 9856 08cc AE000000 		.4byte	.LVL202
 9857 08d0 C2000000 		.4byte	.LVL204
 9858 08d4 0200     		.2byte	0x2
 9859 08d6 31       		.byte	0x31
 9860 08d7 9F       		.byte	0x9f
 9861 08d8 C2000000 		.4byte	.LVL204
 9862 08dc C8000000 		.4byte	.LVL206
 9863 08e0 0200     		.2byte	0x2
 9864 08e2 30       		.byte	0x30
 9865 08e3 9F       		.byte	0x9f
 9866 08e4 C8000000 		.4byte	.LVL206
 9867 08e8 D0000000 		.4byte	.LVL208
 9868 08ec 0100     		.2byte	0x1
 9869 08ee 54       		.byte	0x54
 9870 08ef D0000000 		.4byte	.LVL208
 9871 08f3 D8000000 		.4byte	.LFE85
 9872 08f7 0100     		.2byte	0x1
 9873 08f9 50       		.byte	0x50
 9874 08fa 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 281


 9875 08fe 00000000 		.4byte	0
 9876              	.LLST62:
 9877 0902 8A000000 		.4byte	.LVL198
 9878 0906 9A000000 		.4byte	.LVL200
 9879 090a 0100     		.2byte	0x1
 9880 090c 54       		.byte	0x54
 9881 090d 9A000000 		.4byte	.LVL200
 9882 0911 9C000000 		.4byte	.LVL201
 9883 0915 0300     		.2byte	0x3
 9884 0917 74       		.byte	0x74
 9885 0918 7F       		.sleb128 -1
 9886 0919 9F       		.byte	0x9f
 9887 091a 9C000000 		.4byte	.LVL201
 9888 091e C0000000 		.4byte	.LVL203
 9889 0922 0100     		.2byte	0x1
 9890 0924 54       		.byte	0x54
 9891 0925 C6000000 		.4byte	.LVL205
 9892 0929 C8000000 		.4byte	.LVL206
 9893 092d 0100     		.2byte	0x1
 9894 092f 54       		.byte	0x54
 9895 0930 00000000 		.4byte	0
 9896 0934 00000000 		.4byte	0
 9897              	.LLST63:
 9898 0938 00000000 		.4byte	.LVL209
 9899 093c 09000000 		.4byte	.LVL211-1
 9900 0940 0100     		.2byte	0x1
 9901 0942 50       		.byte	0x50
 9902 0943 09000000 		.4byte	.LVL211-1
 9903 0947 62000000 		.4byte	.LVL218
 9904 094b 0100     		.2byte	0x1
 9905 094d 55       		.byte	0x55
 9906 094e 62000000 		.4byte	.LVL218
 9907 0952 6C000000 		.4byte	.LFE72
 9908 0956 0400     		.2byte	0x4
 9909 0958 F3       		.byte	0xf3
 9910 0959 01       		.uleb128 0x1
 9911 095a 50       		.byte	0x50
 9912 095b 9F       		.byte	0x9f
 9913 095c 00000000 		.4byte	0
 9914 0960 00000000 		.4byte	0
 9915              	.LLST64:
 9916 0964 00000000 		.4byte	.LVL209
 9917 0968 09000000 		.4byte	.LVL211-1
 9918 096c 0100     		.2byte	0x1
 9919 096e 51       		.byte	0x51
 9920 096f 09000000 		.4byte	.LVL211-1
 9921 0973 62000000 		.4byte	.LVL218
 9922 0977 0100     		.2byte	0x1
 9923 0979 54       		.byte	0x54
 9924 097a 62000000 		.4byte	.LVL218
 9925 097e 6C000000 		.4byte	.LFE72
 9926 0982 0400     		.2byte	0x4
 9927 0984 F3       		.byte	0xf3
 9928 0985 01       		.uleb128 0x1
 9929 0986 51       		.byte	0x51
 9930 0987 9F       		.byte	0x9f
 9931 0988 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 282


 9932 098c 00000000 		.4byte	0
 9933              	.LLST65:
 9934 0990 14000000 		.4byte	.LVL213
 9935 0994 49000000 		.4byte	.LVL216-1
 9936 0998 0100     		.2byte	0x1
 9937 099a 53       		.byte	0x53
 9938 099b 00000000 		.4byte	0
 9939 099f 00000000 		.4byte	0
 9940              	.LLST66:
 9941 09a3 06000000 		.4byte	.LVL210
 9942 09a7 3E000000 		.4byte	.LVL214
 9943 09ab 0200     		.2byte	0x2
 9944 09ad 30       		.byte	0x30
 9945 09ae 9F       		.byte	0x9f
 9946 09af 3E000000 		.4byte	.LVL214
 9947 09b3 49000000 		.4byte	.LVL216-1
 9948 09b7 0100     		.2byte	0x1
 9949 09b9 52       		.byte	0x52
 9950 09ba 00000000 		.4byte	0
 9951 09be 00000000 		.4byte	0
 9952              	.LLST67:
 9953 09c2 10000000 		.4byte	.LVL212
 9954 09c6 46000000 		.4byte	.LVL215
 9955 09ca 0100     		.2byte	0x1
 9956 09cc 50       		.byte	0x50
 9957 09cd 00000000 		.4byte	0
 9958 09d1 00000000 		.4byte	0
 9959              	.LLST68:
 9960 09d5 00000000 		.4byte	.LVL219
 9961 09d9 09000000 		.4byte	.LVL221-1
 9962 09dd 0100     		.2byte	0x1
 9963 09df 50       		.byte	0x50
 9964 09e0 09000000 		.4byte	.LVL221-1
 9965 09e4 18000000 		.4byte	.LVL224
 9966 09e8 0100     		.2byte	0x1
 9967 09ea 54       		.byte	0x54
 9968 09eb 18000000 		.4byte	.LVL224
 9969 09ef 1A000000 		.4byte	.LVL225
 9970 09f3 0100     		.2byte	0x1
 9971 09f5 50       		.byte	0x50
 9972 09f6 1A000000 		.4byte	.LVL225
 9973 09fa 34000000 		.4byte	.LFE73
 9974 09fe 0400     		.2byte	0x4
 9975 0a00 F3       		.byte	0xf3
 9976 0a01 01       		.uleb128 0x1
 9977 0a02 50       		.byte	0x50
 9978 0a03 9F       		.byte	0x9f
 9979 0a04 00000000 		.4byte	0
 9980 0a08 00000000 		.4byte	0
 9981              	.LLST69:
 9982 0a0c 02000000 		.4byte	.LVL220
 9983 0a10 16000000 		.4byte	.LVL223
 9984 0a14 0200     		.2byte	0x2
 9985 0a16 30       		.byte	0x30
 9986 0a17 9F       		.byte	0x9f
 9987 0a18 16000000 		.4byte	.LVL223
 9988 0a1c 18000000 		.4byte	.LVL224
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 283


 9989 0a20 0100     		.2byte	0x1
 9990 0a22 50       		.byte	0x50
 9991 0a23 18000000 		.4byte	.LVL224
 9992 0a27 1A000000 		.4byte	.LVL225
 9993 0a2b 0200     		.2byte	0x2
 9994 0a2d 30       		.byte	0x30
 9995 0a2e 9F       		.byte	0x9f
 9996 0a2f 1A000000 		.4byte	.LVL225
 9997 0a33 34000000 		.4byte	.LFE73
 9998 0a37 0100     		.2byte	0x1
 9999 0a39 50       		.byte	0x50
 10000 0a3a 00000000 		.4byte	0
 10001 0a3e 00000000 		.4byte	0
 10002              	.LLST70:
 10003 0a42 00000000 		.4byte	.LVL226
 10004 0a46 07000000 		.4byte	.LVL228-1
 10005 0a4a 0100     		.2byte	0x1
 10006 0a4c 50       		.byte	0x50
 10007 0a4d 07000000 		.4byte	.LVL228-1
 10008 0a51 10000000 		.4byte	.LVL229
 10009 0a55 0100     		.2byte	0x1
 10010 0a57 54       		.byte	0x54
 10011 0a58 10000000 		.4byte	.LVL229
 10012 0a5c 20000000 		.4byte	.LFE90
 10013 0a60 0400     		.2byte	0x4
 10014 0a62 F3       		.byte	0xf3
 10015 0a63 01       		.uleb128 0x1
 10016 0a64 50       		.byte	0x50
 10017 0a65 9F       		.byte	0x9f
 10018 0a66 00000000 		.4byte	0
 10019 0a6a 00000000 		.4byte	0
 10020              	.LLST71:
 10021 0a6e 04000000 		.4byte	.LVL227
 10022 0a72 18000000 		.4byte	.LVL230
 10023 0a76 0200     		.2byte	0x2
 10024 0a78 30       		.byte	0x30
 10025 0a79 9F       		.byte	0x9f
 10026 0a7a 18000000 		.4byte	.LVL230
 10027 0a7e 20000000 		.4byte	.LFE90
 10028 0a82 0100     		.2byte	0x1
 10029 0a84 50       		.byte	0x50
 10030 0a85 00000000 		.4byte	0
 10031 0a89 00000000 		.4byte	0
 10032              	.LLST72:
 10033 0a8d 2A000000 		.4byte	.LVL233
 10034 0a91 5C000000 		.4byte	.LVL234
 10035 0a95 0100     		.2byte	0x1
 10036 0a97 53       		.byte	0x53
 10037 0a98 00000000 		.4byte	0
 10038 0a9c 00000000 		.4byte	0
 10039              	.LLST73:
 10040 0aa0 20000000 		.4byte	.LVL231
 10041 0aa4 24000000 		.4byte	.LVL232
 10042 0aa8 0100     		.2byte	0x1
 10043 0aaa 53       		.byte	0x53
 10044 0aab 00000000 		.4byte	0
 10045 0aaf 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 284


 10046              	.LLST74:
 10047 0ab3 2A000000 		.4byte	.LVL233
 10048 0ab7 5C000000 		.4byte	.LVL234
 10049 0abb 0B00     		.2byte	0xb
 10050 0abd 73       		.byte	0x73
 10051 0abe 00       		.sleb128 0
 10052 0abf 44       		.byte	0x44
 10053 0ac0 1E       		.byte	0x1e
 10054 0ac1 03       		.byte	0x3
 10055 0ac2 30000000 		.4byte	pxReadyTasksLists
 10056 0ac6 22       		.byte	0x22
 10057 0ac7 9F       		.byte	0x9f
 10058 0ac8 00000000 		.4byte	0
 10059 0acc 00000000 		.4byte	0
 10060              	.LLST75:
 10061 0ad0 00000000 		.4byte	.LVL235
 10062 0ad4 07000000 		.4byte	.LVL236-1
 10063 0ad8 0100     		.2byte	0x1
 10064 0ada 50       		.byte	0x50
 10065 0adb 07000000 		.4byte	.LVL236-1
 10066 0adf 10000000 		.4byte	.LVL237
 10067 0ae3 0100     		.2byte	0x1
 10068 0ae5 54       		.byte	0x54
 10069 0ae6 00000000 		.4byte	0
 10070 0aea 00000000 		.4byte	0
 10071              	.LLST76:
 10072 0aee 10000000 		.4byte	.LVL237
 10073 0af2 B8000000 		.4byte	.LVL248
 10074 0af6 0100     		.2byte	0x1
 10075 0af8 54       		.byte	0x54
 10076 0af9 00000000 		.4byte	0
 10077 0afd 00000000 		.4byte	0
 10078              	.LLST77:
 10079 0b01 00000000 		.4byte	.LVL249
 10080 0b05 0F000000 		.4byte	.LVL251-1
 10081 0b09 0100     		.2byte	0x1
 10082 0b0b 50       		.byte	0x50
 10083 0b0c 0F000000 		.4byte	.LVL251-1
 10084 0b10 20000000 		.4byte	.LFE93
 10085 0b14 0400     		.2byte	0x4
 10086 0b16 F3       		.byte	0xf3
 10087 0b17 01       		.uleb128 0x1
 10088 0b18 50       		.byte	0x50
 10089 0b19 9F       		.byte	0x9f
 10090 0b1a 00000000 		.4byte	0
 10091 0b1e 00000000 		.4byte	0
 10092              	.LLST78:
 10093 0b22 00000000 		.4byte	.LVL249
 10094 0b26 0A000000 		.4byte	.LVL250
 10095 0b2a 0100     		.2byte	0x1
 10096 0b2c 51       		.byte	0x51
 10097 0b2d 0A000000 		.4byte	.LVL250
 10098 0b31 1A000000 		.4byte	.LVL253
 10099 0b35 0100     		.2byte	0x1
 10100 0b37 54       		.byte	0x54
 10101 0b38 1A000000 		.4byte	.LVL253
 10102 0b3c 20000000 		.4byte	.LFE93
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 285


 10103 0b40 0400     		.2byte	0x4
 10104 0b42 F3       		.byte	0xf3
 10105 0b43 01       		.uleb128 0x1
 10106 0b44 51       		.byte	0x51
 10107 0b45 9F       		.byte	0x9f
 10108 0b46 00000000 		.4byte	0
 10109 0b4a 00000000 		.4byte	0
 10110              	.LLST79:
 10111 0b4e 00000000 		.4byte	.LVL254
 10112 0b52 19000000 		.4byte	.LVL257-1
 10113 0b56 0100     		.2byte	0x1
 10114 0b58 50       		.byte	0x50
 10115 0b59 19000000 		.4byte	.LVL257-1
 10116 0b5d 28000000 		.4byte	.LFE94
 10117 0b61 0400     		.2byte	0x4
 10118 0b63 F3       		.byte	0xf3
 10119 0b64 01       		.uleb128 0x1
 10120 0b65 50       		.byte	0x50
 10121 0b66 9F       		.byte	0x9f
 10122 0b67 00000000 		.4byte	0
 10123 0b6b 00000000 		.4byte	0
 10124              	.LLST80:
 10125 0b6f 00000000 		.4byte	.LVL254
 10126 0b73 0E000000 		.4byte	.LVL256
 10127 0b77 0100     		.2byte	0x1
 10128 0b79 51       		.byte	0x51
 10129 0b7a 0E000000 		.4byte	.LVL256
 10130 0b7e 28000000 		.4byte	.LFE94
 10131 0b82 0400     		.2byte	0x4
 10132 0b84 F3       		.byte	0xf3
 10133 0b85 01       		.uleb128 0x1
 10134 0b86 51       		.byte	0x51
 10135 0b87 9F       		.byte	0x9f
 10136 0b88 00000000 		.4byte	0
 10137 0b8c 00000000 		.4byte	0
 10138              	.LLST81:
 10139 0b90 00000000 		.4byte	.LVL254
 10140 0b94 0A000000 		.4byte	.LVL255
 10141 0b98 0100     		.2byte	0x1
 10142 0b9a 52       		.byte	0x52
 10143 0b9b 0A000000 		.4byte	.LVL255
 10144 0b9f 24000000 		.4byte	.LVL259
 10145 0ba3 0100     		.2byte	0x1
 10146 0ba5 54       		.byte	0x54
 10147 0ba6 24000000 		.4byte	.LVL259
 10148 0baa 28000000 		.4byte	.LFE94
 10149 0bae 0400     		.2byte	0x4
 10150 0bb0 F3       		.byte	0xf3
 10151 0bb1 01       		.uleb128 0x1
 10152 0bb2 52       		.byte	0x52
 10153 0bb3 9F       		.byte	0x9f
 10154 0bb4 00000000 		.4byte	0
 10155 0bb8 00000000 		.4byte	0
 10156              	.LLST82:
 10157 0bbc 00000000 		.4byte	.LVL260
 10158 0bc0 0C000000 		.4byte	.LVL262
 10159 0bc4 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 286


 10160 0bc6 50       		.byte	0x50
 10161 0bc7 0C000000 		.4byte	.LVL262
 10162 0bcb 74000000 		.4byte	.LFE95
 10163 0bcf 0400     		.2byte	0x4
 10164 0bd1 F3       		.byte	0xf3
 10165 0bd2 01       		.uleb128 0x1
 10166 0bd3 50       		.byte	0x50
 10167 0bd4 9F       		.byte	0x9f
 10168 0bd5 00000000 		.4byte	0
 10169 0bd9 00000000 		.4byte	0
 10170              	.LLST83:
 10171 0bdd 06000000 		.4byte	.LVL261
 10172 0be1 6A000000 		.4byte	.LVL270
 10173 0be5 0100     		.2byte	0x1
 10174 0be7 54       		.byte	0x54
 10175 0be8 00000000 		.4byte	0
 10176 0bec 00000000 		.4byte	0
 10177              	.LLST84:
 10178 0bf0 5C000000 		.4byte	.LVL267
 10179 0bf4 66000000 		.4byte	.LVL268
 10180 0bf8 0200     		.2byte	0x2
 10181 0bfa 31       		.byte	0x31
 10182 0bfb 9F       		.byte	0x9f
 10183 0bfc 68000000 		.4byte	.LVL269
 10184 0c00 74000000 		.4byte	.LFE95
 10185 0c04 0100     		.2byte	0x1
 10186 0c06 50       		.byte	0x50
 10187 0c07 00000000 		.4byte	0
 10188 0c0b 00000000 		.4byte	0
 10189              	.LLST85:
 10190 0c0f 00000000 		.4byte	.LVL271
 10191 0c13 0D000000 		.4byte	.LVL274-1
 10192 0c17 0100     		.2byte	0x1
 10193 0c19 50       		.byte	0x50
 10194 0c1a 0D000000 		.4byte	.LVL274-1
 10195 0c1e 54000000 		.4byte	.LFE96
 10196 0c22 0400     		.2byte	0x4
 10197 0c24 F3       		.byte	0xf3
 10198 0c25 01       		.uleb128 0x1
 10199 0c26 50       		.byte	0x50
 10200 0c27 9F       		.byte	0x9f
 10201 0c28 00000000 		.4byte	0
 10202 0c2c 00000000 		.4byte	0
 10203              	.LLST86:
 10204 0c30 00000000 		.4byte	.LVL271
 10205 0c34 06000000 		.4byte	.LVL272
 10206 0c38 0100     		.2byte	0x1
 10207 0c3a 51       		.byte	0x51
 10208 0c3b 06000000 		.4byte	.LVL272
 10209 0c3f 54000000 		.4byte	.LFE96
 10210 0c43 0400     		.2byte	0x4
 10211 0c45 F3       		.byte	0xf3
 10212 0c46 01       		.uleb128 0x1
 10213 0c47 51       		.byte	0x51
 10214 0c48 9F       		.byte	0x9f
 10215 0c49 00000000 		.4byte	0
 10216 0c4d 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 287


 10217              	.LLST87:
 10218 0c51 0A000000 		.4byte	.LVL273
 10219 0c55 50000000 		.4byte	.LVL277
 10220 0c59 0100     		.2byte	0x1
 10221 0c5b 55       		.byte	0x55
 10222 0c5c 00000000 		.4byte	0
 10223 0c60 00000000 		.4byte	0
 10224              	.LLST88:
 10225 0c64 00000000 		.4byte	.LVL278
 10226 0c68 07000000 		.4byte	.LVL279-1
 10227 0c6c 0100     		.2byte	0x1
 10228 0c6e 50       		.byte	0x50
 10229 0c6f 07000000 		.4byte	.LVL279-1
 10230 0c73 1C000000 		.4byte	.LVL281
 10231 0c77 0100     		.2byte	0x1
 10232 0c79 54       		.byte	0x54
 10233 0c7a 1C000000 		.4byte	.LVL281
 10234 0c7e 20000000 		.4byte	.LFE97
 10235 0c82 0400     		.2byte	0x4
 10236 0c84 F3       		.byte	0xf3
 10237 0c85 01       		.uleb128 0x1
 10238 0c86 50       		.byte	0x50
 10239 0c87 9F       		.byte	0x9f
 10240 0c88 00000000 		.4byte	0
 10241 0c8c 00000000 		.4byte	0
 10242              	.LLST89:
 10243 0c90 00000000 		.4byte	.LVL283
 10244 0c94 09000000 		.4byte	.LVL284-1
 10245 0c98 0100     		.2byte	0x1
 10246 0c9a 50       		.byte	0x50
 10247 0c9b 09000000 		.4byte	.LVL284-1
 10248 0c9f 3C000000 		.4byte	.LVL289
 10249 0ca3 0100     		.2byte	0x1
 10250 0ca5 54       		.byte	0x54
 10251 0ca6 3C000000 		.4byte	.LVL289
 10252 0caa 3E000000 		.4byte	.LVL290
 10253 0cae 0400     		.2byte	0x4
 10254 0cb0 F3       		.byte	0xf3
 10255 0cb1 01       		.uleb128 0x1
 10256 0cb2 50       		.byte	0x50
 10257 0cb3 9F       		.byte	0x9f
 10258 0cb4 3E000000 		.4byte	.LVL290
 10259 0cb8 44000000 		.4byte	.LVL292
 10260 0cbc 0100     		.2byte	0x1
 10261 0cbe 54       		.byte	0x54
 10262 0cbf 44000000 		.4byte	.LVL292
 10263 0cc3 46000000 		.4byte	.LVL293
 10264 0cc7 0400     		.2byte	0x4
 10265 0cc9 F3       		.byte	0xf3
 10266 0cca 01       		.uleb128 0x1
 10267 0ccb 50       		.byte	0x50
 10268 0ccc 9F       		.byte	0x9f
 10269 0ccd 46000000 		.4byte	.LVL293
 10270 0cd1 48000000 		.4byte	.LVL294
 10271 0cd5 0100     		.2byte	0x1
 10272 0cd7 54       		.byte	0x54
 10273 0cd8 48000000 		.4byte	.LVL294
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 288


 10274 0cdc 4A000000 		.4byte	.LVL295
 10275 0ce0 0400     		.2byte	0x4
 10276 0ce2 F3       		.byte	0xf3
 10277 0ce3 01       		.uleb128 0x1
 10278 0ce4 50       		.byte	0x50
 10279 0ce5 9F       		.byte	0x9f
 10280 0ce6 4A000000 		.4byte	.LVL295
 10281 0cea 4C000000 		.4byte	.LVL296
 10282 0cee 0100     		.2byte	0x1
 10283 0cf0 54       		.byte	0x54
 10284 0cf1 4C000000 		.4byte	.LVL296
 10285 0cf5 58000000 		.4byte	.LFE99
 10286 0cf9 0400     		.2byte	0x4
 10287 0cfb F3       		.byte	0xf3
 10288 0cfc 01       		.uleb128 0x1
 10289 0cfd 50       		.byte	0x50
 10290 0cfe 9F       		.byte	0x9f
 10291 0cff 00000000 		.4byte	0
 10292 0d03 00000000 		.4byte	0
 10293              	.LLST90:
 10294 0d07 00000000 		.4byte	.LVL283
 10295 0d0b 09000000 		.4byte	.LVL284-1
 10296 0d0f 0100     		.2byte	0x1
 10297 0d11 51       		.byte	0x51
 10298 0d12 09000000 		.4byte	.LVL284-1
 10299 0d16 54000000 		.4byte	.LVL298
 10300 0d1a 0100     		.2byte	0x1
 10301 0d1c 55       		.byte	0x55
 10302 0d1d 54000000 		.4byte	.LVL298
 10303 0d21 58000000 		.4byte	.LFE99
 10304 0d25 0400     		.2byte	0x4
 10305 0d27 F3       		.byte	0xf3
 10306 0d28 01       		.uleb128 0x1
 10307 0d29 51       		.byte	0x51
 10308 0d2a 9F       		.byte	0x9f
 10309 0d2b 00000000 		.4byte	0
 10310 0d2f 00000000 		.4byte	0
 10311              	.LLST91:
 10312 0d33 3A000000 		.4byte	.LVL288
 10313 0d37 3E000000 		.4byte	.LVL290
 10314 0d3b 0200     		.2byte	0x2
 10315 0d3d 30       		.byte	0x30
 10316 0d3e 9F       		.byte	0x9f
 10317 0d3f 42000000 		.4byte	.LVL291
 10318 0d43 46000000 		.4byte	.LVL293
 10319 0d47 0200     		.2byte	0x2
 10320 0d49 31       		.byte	0x31
 10321 0d4a 9F       		.byte	0x9f
 10322 0d4b 4C000000 		.4byte	.LVL296
 10323 0d4f 54000000 		.4byte	.LVL298
 10324 0d53 0100     		.2byte	0x1
 10325 0d55 54       		.byte	0x54
 10326 0d56 54000000 		.4byte	.LVL298
 10327 0d5a 58000000 		.4byte	.LFE99
 10328 0d5e 0100     		.2byte	0x1
 10329 0d60 50       		.byte	0x50
 10330 0d61 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 289


 10331 0d65 00000000 		.4byte	0
 10332              	.LLST92:
 10333 0d69 10000000 		.4byte	.LVL285
 10334 0d6d 39000000 		.4byte	.LVL288-1
 10335 0d71 0100     		.2byte	0x1
 10336 0d73 51       		.byte	0x51
 10337 0d74 3E000000 		.4byte	.LVL290
 10338 0d78 4C000000 		.4byte	.LVL296
 10339 0d7c 0100     		.2byte	0x1
 10340 0d7e 51       		.byte	0x51
 10341 0d7f 00000000 		.4byte	0
 10342 0d83 00000000 		.4byte	0
 10343              	.LLST93:
 10344 0d87 14000000 		.4byte	.LVL286
 10345 0d8b 36000000 		.4byte	.LVL287
 10346 0d8f 0100     		.2byte	0x1
 10347 0d91 50       		.byte	0x50
 10348 0d92 36000000 		.4byte	.LVL287
 10349 0d96 39000000 		.4byte	.LVL288-1
 10350 0d9a 0600     		.2byte	0x6
 10351 0d9c 71       		.byte	0x71
 10352 0d9d 00       		.sleb128 0
 10353 0d9e 72       		.byte	0x72
 10354 0d9f 00       		.sleb128 0
 10355 0da0 1C       		.byte	0x1c
 10356 0da1 9F       		.byte	0x9f
 10357 0da2 3E000000 		.4byte	.LVL290
 10358 0da6 4C000000 		.4byte	.LVL296
 10359 0daa 0100     		.2byte	0x1
 10360 0dac 50       		.byte	0x50
 10361 0dad 00000000 		.4byte	0
 10362 0db1 00000000 		.4byte	0
 10363              	.LLST94:
 10364 0db5 00000000 		.4byte	.LVL299
 10365 0db9 0C000000 		.4byte	.LVL300
 10366 0dbd 0100     		.2byte	0x1
 10367 0dbf 50       		.byte	0x50
 10368 0dc0 00000000 		.4byte	0
 10369 0dc4 00000000 		.4byte	0
 10370              	.LLST95:
 10371 0dc8 0C000000 		.4byte	.LVL300
 10372 0dcc 11000000 		.4byte	.LVL301-1
 10373 0dd0 0100     		.2byte	0x1
 10374 0dd2 53       		.byte	0x53
 10375 0dd3 00000000 		.4byte	0
 10376 0dd7 00000000 		.4byte	0
 10377              	.LLST96:
 10378 0ddb 0C000000 		.4byte	.LVL300
 10379 0ddf 11000000 		.4byte	.LVL301-1
 10380 0de3 0200     		.2byte	0x2
 10381 0de5 73       		.byte	0x73
 10382 0de6 30       		.sleb128 48
 10383 0de7 00000000 		.4byte	0
 10384 0deb 00000000 		.4byte	0
 10385              	.LLST97:
 10386 0def 00000000 		.4byte	.LVL303
 10387 0df3 2C000000 		.4byte	.LVL304
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 290


 10388 0df7 0100     		.2byte	0x1
 10389 0df9 50       		.byte	0x50
 10390 0dfa 2C000000 		.4byte	.LVL304
 10391 0dfe 43000000 		.4byte	.LVL305-1
 10392 0e02 0100     		.2byte	0x1
 10393 0e04 53       		.byte	0x53
 10394 0e05 43000000 		.4byte	.LVL305-1
 10395 0e09 68000000 		.4byte	.LVL306
 10396 0e0d 0100     		.2byte	0x1
 10397 0e0f 54       		.byte	0x54
 10398 0e10 68000000 		.4byte	.LVL306
 10399 0e14 8A000000 		.4byte	.LVL308
 10400 0e18 0300     		.2byte	0x3
 10401 0e1a 75       		.byte	0x75
 10402 0e1b 7C       		.sleb128 -4
 10403 0e1c 9F       		.byte	0x9f
 10404 0e1d 8A000000 		.4byte	.LVL308
 10405 0e21 98000000 		.4byte	.LVL309
 10406 0e25 0100     		.2byte	0x1
 10407 0e27 53       		.byte	0x53
 10408 0e28 98000000 		.4byte	.LVL309
 10409 0e2c A8000000 		.4byte	.LVL310
 10410 0e30 0100     		.2byte	0x1
 10411 0e32 50       		.byte	0x50
 10412 0e33 A8000000 		.4byte	.LVL310
 10413 0e37 AA000000 		.4byte	.LVL311
 10414 0e3b 0400     		.2byte	0x4
 10415 0e3d F3       		.byte	0xf3
 10416 0e3e 01       		.uleb128 0x1
 10417 0e3f 50       		.byte	0x50
 10418 0e40 9F       		.byte	0x9f
 10419 0e41 AA000000 		.4byte	.LVL311
 10420 0e45 AC000000 		.4byte	.LVL312
 10421 0e49 0100     		.2byte	0x1
 10422 0e4b 50       		.byte	0x50
 10423 0e4c AC000000 		.4byte	.LVL312
 10424 0e50 AE000000 		.4byte	.LVL313
 10425 0e54 0400     		.2byte	0x4
 10426 0e56 F3       		.byte	0xf3
 10427 0e57 01       		.uleb128 0x1
 10428 0e58 50       		.byte	0x50
 10429 0e59 9F       		.byte	0x9f
 10430 0e5a AE000000 		.4byte	.LVL313
 10431 0e5e B0000000 		.4byte	.LVL314
 10432 0e62 0100     		.2byte	0x1
 10433 0e64 50       		.byte	0x50
 10434 0e65 B0000000 		.4byte	.LVL314
 10435 0e69 BC000000 		.4byte	.LFE109
 10436 0e6d 0400     		.2byte	0x4
 10437 0e6f F3       		.byte	0xf3
 10438 0e70 01       		.uleb128 0x1
 10439 0e71 50       		.byte	0x50
 10440 0e72 9F       		.byte	0x9f
 10441 0e73 00000000 		.4byte	0
 10442 0e77 00000000 		.4byte	0
 10443              	.LLST98:
 10444 0e7b 00000000 		.4byte	.LVL303
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 291


 10445 0e7f 2C000000 		.4byte	.LVL304
 10446 0e83 0100     		.2byte	0x1
 10447 0e85 50       		.byte	0x50
 10448 0e86 2C000000 		.4byte	.LVL304
 10449 0e8a 43000000 		.4byte	.LVL305-1
 10450 0e8e 0100     		.2byte	0x1
 10451 0e90 53       		.byte	0x53
 10452 0e91 43000000 		.4byte	.LVL305-1
 10453 0e95 68000000 		.4byte	.LVL306
 10454 0e99 0100     		.2byte	0x1
 10455 0e9b 54       		.byte	0x54
 10456 0e9c 68000000 		.4byte	.LVL306
 10457 0ea0 8A000000 		.4byte	.LVL308
 10458 0ea4 0300     		.2byte	0x3
 10459 0ea6 75       		.byte	0x75
 10460 0ea7 7C       		.sleb128 -4
 10461 0ea8 9F       		.byte	0x9f
 10462 0ea9 8A000000 		.4byte	.LVL308
 10463 0ead 98000000 		.4byte	.LVL309
 10464 0eb1 0100     		.2byte	0x1
 10465 0eb3 53       		.byte	0x53
 10466 0eb4 98000000 		.4byte	.LVL309
 10467 0eb8 A8000000 		.4byte	.LVL310
 10468 0ebc 0100     		.2byte	0x1
 10469 0ebe 50       		.byte	0x50
 10470 0ebf A8000000 		.4byte	.LVL310
 10471 0ec3 AA000000 		.4byte	.LVL311
 10472 0ec7 0400     		.2byte	0x4
 10473 0ec9 F3       		.byte	0xf3
 10474 0eca 01       		.uleb128 0x1
 10475 0ecb 50       		.byte	0x50
 10476 0ecc 9F       		.byte	0x9f
 10477 0ecd AA000000 		.4byte	.LVL311
 10478 0ed1 AC000000 		.4byte	.LVL312
 10479 0ed5 0100     		.2byte	0x1
 10480 0ed7 50       		.byte	0x50
 10481 0ed8 AC000000 		.4byte	.LVL312
 10482 0edc AE000000 		.4byte	.LVL313
 10483 0ee0 0400     		.2byte	0x4
 10484 0ee2 F3       		.byte	0xf3
 10485 0ee3 01       		.uleb128 0x1
 10486 0ee4 50       		.byte	0x50
 10487 0ee5 9F       		.byte	0x9f
 10488 0ee6 AE000000 		.4byte	.LVL313
 10489 0eea B0000000 		.4byte	.LVL314
 10490 0eee 0100     		.2byte	0x1
 10491 0ef0 50       		.byte	0x50
 10492 0ef1 B0000000 		.4byte	.LVL314
 10493 0ef5 BC000000 		.4byte	.LFE109
 10494 0ef9 0400     		.2byte	0x4
 10495 0efb F3       		.byte	0xf3
 10496 0efc 01       		.uleb128 0x1
 10497 0efd 50       		.byte	0x50
 10498 0efe 9F       		.byte	0x9f
 10499 0eff 00000000 		.4byte	0
 10500 0f03 00000000 		.4byte	0
 10501              	.LLST99:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 292


 10502 0f07 00000000 		.4byte	.LVL303
 10503 0f0b AC000000 		.4byte	.LVL312
 10504 0f0f 0200     		.2byte	0x2
 10505 0f11 30       		.byte	0x30
 10506 0f12 9F       		.byte	0x9f
 10507 0f13 AC000000 		.4byte	.LVL312
 10508 0f17 AE000000 		.4byte	.LVL313
 10509 0f1b 0100     		.2byte	0x1
 10510 0f1d 50       		.byte	0x50
 10511 0f1e AE000000 		.4byte	.LVL313
 10512 0f22 B0000000 		.4byte	.LVL314
 10513 0f26 0200     		.2byte	0x2
 10514 0f28 30       		.byte	0x30
 10515 0f29 9F       		.byte	0x9f
 10516 0f2a B0000000 		.4byte	.LVL314
 10517 0f2e BC000000 		.4byte	.LFE109
 10518 0f32 0100     		.2byte	0x1
 10519 0f34 50       		.byte	0x50
 10520 0f35 00000000 		.4byte	0
 10521 0f39 00000000 		.4byte	0
 10522              	.LLST100:
 10523 0f3d 00000000 		.4byte	.LVL315
 10524 0f41 10000000 		.4byte	.LVL316
 10525 0f45 0100     		.2byte	0x1
 10526 0f47 50       		.byte	0x50
 10527 0f48 10000000 		.4byte	.LVL316
 10528 0f4c 21000000 		.4byte	.LVL317-1
 10529 0f50 0100     		.2byte	0x1
 10530 0f52 53       		.byte	0x53
 10531 0f53 21000000 		.4byte	.LVL317-1
 10532 0f57 52000000 		.4byte	.LVL318
 10533 0f5b 0100     		.2byte	0x1
 10534 0f5d 54       		.byte	0x54
 10535 0f5e 52000000 		.4byte	.LVL318
 10536 0f62 76000000 		.4byte	.LVL320
 10537 0f66 0300     		.2byte	0x3
 10538 0f68 75       		.byte	0x75
 10539 0f69 7C       		.sleb128 -4
 10540 0f6a 9F       		.byte	0x9f
 10541 0f6b 76000000 		.4byte	.LVL320
 10542 0f6f 78000000 		.4byte	.LVL321
 10543 0f73 0100     		.2byte	0x1
 10544 0f75 50       		.byte	0x50
 10545 0f76 78000000 		.4byte	.LVL321
 10546 0f7a 7A000000 		.4byte	.LVL322
 10547 0f7e 0400     		.2byte	0x4
 10548 0f80 F3       		.byte	0xf3
 10549 0f81 01       		.uleb128 0x1
 10550 0f82 50       		.byte	0x50
 10551 0f83 9F       		.byte	0x9f
 10552 0f84 7A000000 		.4byte	.LVL322
 10553 0f88 82000000 		.4byte	.LVL325
 10554 0f8c 0100     		.2byte	0x1
 10555 0f8e 53       		.byte	0x53
 10556 0f8f 82000000 		.4byte	.LVL325
 10557 0f93 88000000 		.4byte	.LFE110
 10558 0f97 0400     		.2byte	0x4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 293


 10559 0f99 F3       		.byte	0xf3
 10560 0f9a 01       		.uleb128 0x1
 10561 0f9b 50       		.byte	0x50
 10562 0f9c 9F       		.byte	0x9f
 10563 0f9d 00000000 		.4byte	0
 10564 0fa1 00000000 		.4byte	0
 10565              	.LLST101:
 10566 0fa5 00000000 		.4byte	.LVL315
 10567 0fa9 10000000 		.4byte	.LVL316
 10568 0fad 0100     		.2byte	0x1
 10569 0faf 50       		.byte	0x50
 10570 0fb0 10000000 		.4byte	.LVL316
 10571 0fb4 21000000 		.4byte	.LVL317-1
 10572 0fb8 0100     		.2byte	0x1
 10573 0fba 53       		.byte	0x53
 10574 0fbb 21000000 		.4byte	.LVL317-1
 10575 0fbf 52000000 		.4byte	.LVL318
 10576 0fc3 0100     		.2byte	0x1
 10577 0fc5 54       		.byte	0x54
 10578 0fc6 52000000 		.4byte	.LVL318
 10579 0fca 76000000 		.4byte	.LVL320
 10580 0fce 0300     		.2byte	0x3
 10581 0fd0 75       		.byte	0x75
 10582 0fd1 7C       		.sleb128 -4
 10583 0fd2 9F       		.byte	0x9f
 10584 0fd3 76000000 		.4byte	.LVL320
 10585 0fd7 78000000 		.4byte	.LVL321
 10586 0fdb 0100     		.2byte	0x1
 10587 0fdd 50       		.byte	0x50
 10588 0fde 78000000 		.4byte	.LVL321
 10589 0fe2 7A000000 		.4byte	.LVL322
 10590 0fe6 0400     		.2byte	0x4
 10591 0fe8 F3       		.byte	0xf3
 10592 0fe9 01       		.uleb128 0x1
 10593 0fea 50       		.byte	0x50
 10594 0feb 9F       		.byte	0x9f
 10595 0fec 7A000000 		.4byte	.LVL322
 10596 0ff0 82000000 		.4byte	.LVL325
 10597 0ff4 0100     		.2byte	0x1
 10598 0ff6 53       		.byte	0x53
 10599 0ff7 82000000 		.4byte	.LVL325
 10600 0ffb 88000000 		.4byte	.LFE110
 10601 0fff 0400     		.2byte	0x4
 10602 1001 F3       		.byte	0xf3
 10603 1002 01       		.uleb128 0x1
 10604 1003 50       		.byte	0x50
 10605 1004 9F       		.byte	0x9f
 10606 1005 00000000 		.4byte	0
 10607 1009 00000000 		.4byte	0
 10608              	.LLST102:
 10609 100d 00000000 		.4byte	.LVL315
 10610 1011 72000000 		.4byte	.LVL319
 10611 1015 0200     		.2byte	0x2
 10612 1017 30       		.byte	0x30
 10613 1018 9F       		.byte	0x9f
 10614 1019 72000000 		.4byte	.LVL319
 10615 101d 76000000 		.4byte	.LVL320
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 294


 10616 1021 0200     		.2byte	0x2
 10617 1023 31       		.byte	0x31
 10618 1024 9F       		.byte	0x9f
 10619 1025 76000000 		.4byte	.LVL320
 10620 1029 78000000 		.4byte	.LVL321
 10621 102d 0200     		.2byte	0x2
 10622 102f 30       		.byte	0x30
 10623 1030 9F       		.byte	0x9f
 10624 1031 78000000 		.4byte	.LVL321
 10625 1035 7A000000 		.4byte	.LVL322
 10626 1039 0100     		.2byte	0x1
 10627 103b 50       		.byte	0x50
 10628 103c 7A000000 		.4byte	.LVL322
 10629 1040 80000000 		.4byte	.LVL324
 10630 1044 0200     		.2byte	0x2
 10631 1046 30       		.byte	0x30
 10632 1047 9F       		.byte	0x9f
 10633 1048 80000000 		.4byte	.LVL324
 10634 104c 88000000 		.4byte	.LFE110
 10635 1050 0100     		.2byte	0x1
 10636 1052 50       		.byte	0x50
 10637 1053 00000000 		.4byte	0
 10638 1057 00000000 		.4byte	0
 10639              	.LLST103:
 10640 105b 00000000 		.4byte	.LVL326
 10641 105f 18000000 		.4byte	.LVL329
 10642 1063 0100     		.2byte	0x1
 10643 1065 50       		.byte	0x50
 10644 1066 18000000 		.4byte	.LVL329
 10645 106a 43000000 		.4byte	.LVL333-1
 10646 106e 0100     		.2byte	0x1
 10647 1070 53       		.byte	0x53
 10648 1071 43000000 		.4byte	.LVL333-1
 10649 1075 80000000 		.4byte	.LVL334
 10650 1079 0100     		.2byte	0x1
 10651 107b 54       		.byte	0x54
 10652 107c 80000000 		.4byte	.LVL334
 10653 1080 82000000 		.4byte	.LVL335
 10654 1084 0400     		.2byte	0x4
 10655 1086 F3       		.byte	0xf3
 10656 1087 01       		.uleb128 0x1
 10657 1088 50       		.byte	0x50
 10658 1089 9F       		.byte	0x9f
 10659 108a 82000000 		.4byte	.LVL335
 10660 108e 8C000000 		.4byte	.LFE111
 10661 1092 0100     		.2byte	0x1
 10662 1094 50       		.byte	0x50
 10663 1095 00000000 		.4byte	0
 10664 1099 00000000 		.4byte	0
 10665              	.LLST104:
 10666 109d 00000000 		.4byte	.LVL326
 10667 10a1 12000000 		.4byte	.LVL328
 10668 10a5 0100     		.2byte	0x1
 10669 10a7 51       		.byte	0x51
 10670 10a8 12000000 		.4byte	.LVL328
 10671 10ac 82000000 		.4byte	.LVL335
 10672 10b0 0400     		.2byte	0x4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 295


 10673 10b2 F3       		.byte	0xf3
 10674 10b3 01       		.uleb128 0x1
 10675 10b4 51       		.byte	0x51
 10676 10b5 9F       		.byte	0x9f
 10677 10b6 82000000 		.4byte	.LVL335
 10678 10ba 8C000000 		.4byte	.LFE111
 10679 10be 0100     		.2byte	0x1
 10680 10c0 51       		.byte	0x51
 10681 10c1 00000000 		.4byte	0
 10682 10c5 00000000 		.4byte	0
 10683              	.LLST105:
 10684 10c9 00000000 		.4byte	.LVL326
 10685 10cd 18000000 		.4byte	.LVL329
 10686 10d1 0100     		.2byte	0x1
 10687 10d3 50       		.byte	0x50
 10688 10d4 18000000 		.4byte	.LVL329
 10689 10d8 43000000 		.4byte	.LVL333-1
 10690 10dc 0100     		.2byte	0x1
 10691 10de 53       		.byte	0x53
 10692 10df 43000000 		.4byte	.LVL333-1
 10693 10e3 80000000 		.4byte	.LVL334
 10694 10e7 0100     		.2byte	0x1
 10695 10e9 54       		.byte	0x54
 10696 10ea 80000000 		.4byte	.LVL334
 10697 10ee 82000000 		.4byte	.LVL335
 10698 10f2 0400     		.2byte	0x4
 10699 10f4 F3       		.byte	0xf3
 10700 10f5 01       		.uleb128 0x1
 10701 10f6 50       		.byte	0x50
 10702 10f7 9F       		.byte	0x9f
 10703 10f8 82000000 		.4byte	.LVL335
 10704 10fc 8C000000 		.4byte	.LFE111
 10705 1100 0100     		.2byte	0x1
 10706 1102 50       		.byte	0x50
 10707 1103 00000000 		.4byte	0
 10708 1107 00000000 		.4byte	0
 10709              	.LLST106:
 10710 110b 1C000000 		.4byte	.LVL330
 10711 110f 30000000 		.4byte	.LVL332
 10712 1113 0100     		.2byte	0x1
 10713 1115 51       		.byte	0x51
 10714 1116 00000000 		.4byte	0
 10715 111a 00000000 		.4byte	0
 10716              	.LLST107:
 10717 111e 10000000 		.4byte	.LVL327
 10718 1122 28000000 		.4byte	.LVL331
 10719 1126 0100     		.2byte	0x1
 10720 1128 52       		.byte	0x52
 10721 1129 28000000 		.4byte	.LVL331
 10722 112d 43000000 		.4byte	.LVL333-1
 10723 1131 0200     		.2byte	0x2
 10724 1133 73       		.byte	0x73
 10725 1134 2C       		.sleb128 44
 10726 1135 00000000 		.4byte	0
 10727 1139 00000000 		.4byte	0
 10728              	.LLST108:
 10729 113d 00000000 		.4byte	.LVL337
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 296


 10730 1141 09000000 		.4byte	.LVL338-1
 10731 1145 0100     		.2byte	0x1
 10732 1147 50       		.byte	0x50
 10733 1148 09000000 		.4byte	.LVL338-1
 10734 114c 78000000 		.4byte	.LVL344
 10735 1150 0100     		.2byte	0x1
 10736 1152 55       		.byte	0x55
 10737 1153 78000000 		.4byte	.LVL344
 10738 1157 80000000 		.4byte	.LFE114
 10739 115b 0400     		.2byte	0x4
 10740 115d F3       		.byte	0xf3
 10741 115e 01       		.uleb128 0x1
 10742 115f 50       		.byte	0x50
 10743 1160 9F       		.byte	0x9f
 10744 1161 00000000 		.4byte	0
 10745 1165 00000000 		.4byte	0
 10746              	.LLST109:
 10747 1169 00000000 		.4byte	.LVL337
 10748 116d 09000000 		.4byte	.LVL338-1
 10749 1171 0100     		.2byte	0x1
 10750 1173 51       		.byte	0x51
 10751 1174 09000000 		.4byte	.LVL338-1
 10752 1178 4A000000 		.4byte	.LVL342
 10753 117c 0100     		.2byte	0x1
 10754 117e 54       		.byte	0x54
 10755 117f 4A000000 		.4byte	.LVL342
 10756 1183 80000000 		.4byte	.LFE114
 10757 1187 0400     		.2byte	0x4
 10758 1189 F3       		.byte	0xf3
 10759 118a 01       		.uleb128 0x1
 10760 118b 51       		.byte	0x51
 10761 118c 9F       		.byte	0x9f
 10762 118d 00000000 		.4byte	0
 10763 1191 00000000 		.4byte	0
 10764              	.LLST110:
 10765 1195 4A000000 		.4byte	.LVL342
 10766 1199 78000000 		.4byte	.LVL344
 10767 119d 0100     		.2byte	0x1
 10768 119f 54       		.byte	0x54
 10769 11a0 78000000 		.4byte	.LVL344
 10770 11a4 80000000 		.4byte	.LFE114
 10771 11a8 0100     		.2byte	0x1
 10772 11aa 50       		.byte	0x50
 10773 11ab 00000000 		.4byte	0
 10774 11af 00000000 		.4byte	0
 10775              	.LLST111:
 10776 11b3 00000000 		.4byte	.LVL345
 10777 11b7 0D000000 		.4byte	.LVL346-1
 10778 11bb 0100     		.2byte	0x1
 10779 11bd 50       		.byte	0x50
 10780 11be 0D000000 		.4byte	.LVL346-1
 10781 11c2 9C000000 		.4byte	.LVL356
 10782 11c6 0100     		.2byte	0x1
 10783 11c8 57       		.byte	0x57
 10784 11c9 9C000000 		.4byte	.LVL356
 10785 11cd A4000000 		.4byte	.LFE115
 10786 11d1 0400     		.2byte	0x4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 297


 10787 11d3 F3       		.byte	0xf3
 10788 11d4 01       		.uleb128 0x1
 10789 11d5 50       		.byte	0x50
 10790 11d6 9F       		.byte	0x9f
 10791 11d7 00000000 		.4byte	0
 10792 11db 00000000 		.4byte	0
 10793              	.LLST112:
 10794 11df 00000000 		.4byte	.LVL345
 10795 11e3 0D000000 		.4byte	.LVL346-1
 10796 11e7 0100     		.2byte	0x1
 10797 11e9 51       		.byte	0x51
 10798 11ea 0D000000 		.4byte	.LVL346-1
 10799 11ee 80000000 		.4byte	.LVL350
 10800 11f2 0100     		.2byte	0x1
 10801 11f4 55       		.byte	0x55
 10802 11f5 80000000 		.4byte	.LVL350
 10803 11f9 86000000 		.4byte	.LVL353
 10804 11fd 0400     		.2byte	0x4
 10805 11ff F3       		.byte	0xf3
 10806 1200 01       		.uleb128 0x1
 10807 1201 51       		.byte	0x51
 10808 1202 9F       		.byte	0x9f
 10809 1203 86000000 		.4byte	.LVL353
 10810 1207 88000000 		.4byte	.LVL354
 10811 120b 0100     		.2byte	0x1
 10812 120d 55       		.byte	0x55
 10813 120e 88000000 		.4byte	.LVL354
 10814 1212 A4000000 		.4byte	.LFE115
 10815 1216 0400     		.2byte	0x4
 10816 1218 F3       		.byte	0xf3
 10817 1219 01       		.uleb128 0x1
 10818 121a 51       		.byte	0x51
 10819 121b 9F       		.byte	0x9f
 10820 121c 00000000 		.4byte	0
 10821 1220 00000000 		.4byte	0
 10822              	.LLST113:
 10823 1224 00000000 		.4byte	.LVL345
 10824 1228 0D000000 		.4byte	.LVL346-1
 10825 122c 0100     		.2byte	0x1
 10826 122e 52       		.byte	0x52
 10827 122f 0D000000 		.4byte	.LVL346-1
 10828 1233 84000000 		.4byte	.LVL352
 10829 1237 0100     		.2byte	0x1
 10830 1239 54       		.byte	0x54
 10831 123a 84000000 		.4byte	.LVL352
 10832 123e 86000000 		.4byte	.LVL353
 10833 1242 0400     		.2byte	0x4
 10834 1244 F3       		.byte	0xf3
 10835 1245 01       		.uleb128 0x1
 10836 1246 52       		.byte	0x52
 10837 1247 9F       		.byte	0x9f
 10838 1248 86000000 		.4byte	.LVL353
 10839 124c 88000000 		.4byte	.LVL354
 10840 1250 0100     		.2byte	0x1
 10841 1252 54       		.byte	0x54
 10842 1253 88000000 		.4byte	.LVL354
 10843 1257 A4000000 		.4byte	.LFE115
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 298


 10844 125b 0400     		.2byte	0x4
 10845 125d F3       		.byte	0xf3
 10846 125e 01       		.uleb128 0x1
 10847 125f 52       		.byte	0x52
 10848 1260 9F       		.byte	0x9f
 10849 1261 00000000 		.4byte	0
 10850 1265 00000000 		.4byte	0
 10851              	.LLST114:
 10852 1269 00000000 		.4byte	.LVL345
 10853 126d 0D000000 		.4byte	.LVL346-1
 10854 1271 0100     		.2byte	0x1
 10855 1273 53       		.byte	0x53
 10856 1274 0D000000 		.4byte	.LVL346-1
 10857 1278 9C000000 		.4byte	.LVL356
 10858 127c 0100     		.2byte	0x1
 10859 127e 56       		.byte	0x56
 10860 127f 9C000000 		.4byte	.LVL356
 10861 1283 A4000000 		.4byte	.LFE115
 10862 1287 0400     		.2byte	0x4
 10863 1289 F3       		.byte	0xf3
 10864 128a 01       		.uleb128 0x1
 10865 128b 53       		.byte	0x53
 10866 128c 9F       		.byte	0x9f
 10867 128d 00000000 		.4byte	0
 10868 1291 00000000 		.4byte	0
 10869              	.LLST115:
 10870 1295 82000000 		.4byte	.LVL351
 10871 1299 86000000 		.4byte	.LVL353
 10872 129d 0200     		.2byte	0x2
 10873 129f 31       		.byte	0x31
 10874 12a0 9F       		.byte	0x9f
 10875 12a1 88000000 		.4byte	.LVL354
 10876 12a5 9C000000 		.4byte	.LVL356
 10877 12a9 0100     		.2byte	0x1
 10878 12ab 54       		.byte	0x54
 10879 12ac 9C000000 		.4byte	.LVL356
 10880 12b0 A4000000 		.4byte	.LFE115
 10881 12b4 0100     		.2byte	0x1
 10882 12b6 50       		.byte	0x50
 10883 12b7 00000000 		.4byte	0
 10884 12bb 00000000 		.4byte	0
 10885              	.LLST116:
 10886 12bf 00000000 		.4byte	.LVL357
 10887 12c3 0D000000 		.4byte	.LVL359-1
 10888 12c7 0100     		.2byte	0x1
 10889 12c9 50       		.byte	0x50
 10890 12ca 0D000000 		.4byte	.LVL359-1
 10891 12ce AE000000 		.4byte	.LVL368
 10892 12d2 0100     		.2byte	0x1
 10893 12d4 54       		.byte	0x54
 10894 12d5 AE000000 		.4byte	.LVL368
 10895 12d9 B8000000 		.4byte	.LFE116
 10896 12dd 0400     		.2byte	0x4
 10897 12df F3       		.byte	0xf3
 10898 12e0 01       		.uleb128 0x1
 10899 12e1 50       		.byte	0x50
 10900 12e2 9F       		.byte	0x9f
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 299


 10901 12e3 00000000 		.4byte	0
 10902 12e7 00000000 		.4byte	0
 10903              	.LLST117:
 10904 12eb 00000000 		.4byte	.LVL357
 10905 12ef 0D000000 		.4byte	.LVL359-1
 10906 12f3 0100     		.2byte	0x1
 10907 12f5 51       		.byte	0x51
 10908 12f6 0D000000 		.4byte	.LVL359-1
 10909 12fa 32000000 		.4byte	.LVL361
 10910 12fe 0100     		.2byte	0x1
 10911 1300 57       		.byte	0x57
 10912 1301 32000000 		.4byte	.LVL361
 10913 1305 38000000 		.4byte	.LVL362
 10914 1309 0400     		.2byte	0x4
 10915 130b F3       		.byte	0xf3
 10916 130c 01       		.uleb128 0x1
 10917 130d 51       		.byte	0x51
 10918 130e 9F       		.byte	0x9f
 10919 130f 38000000 		.4byte	.LVL362
 10920 1313 58000000 		.4byte	.LVL363
 10921 1317 0100     		.2byte	0x1
 10922 1319 57       		.byte	0x57
 10923 131a 58000000 		.4byte	.LVL363
 10924 131e B8000000 		.4byte	.LFE116
 10925 1322 0400     		.2byte	0x4
 10926 1324 F3       		.byte	0xf3
 10927 1325 01       		.uleb128 0x1
 10928 1326 51       		.byte	0x51
 10929 1327 9F       		.byte	0x9f
 10930 1328 00000000 		.4byte	0
 10931 132c 00000000 		.4byte	0
 10932              	.LLST118:
 10933 1330 00000000 		.4byte	.LVL357
 10934 1334 0D000000 		.4byte	.LVL359-1
 10935 1338 0100     		.2byte	0x1
 10936 133a 52       		.byte	0x52
 10937 133b 0D000000 		.4byte	.LVL359-1
 10938 133f B8000000 		.4byte	.LFE116
 10939 1343 0400     		.2byte	0x4
 10940 1345 F3       		.byte	0xf3
 10941 1346 01       		.uleb128 0x1
 10942 1347 52       		.byte	0x52
 10943 1348 9F       		.byte	0x9f
 10944 1349 00000000 		.4byte	0
 10945 134d 00000000 		.4byte	0
 10946              	.LLST119:
 10947 1351 00000000 		.4byte	.LVL357
 10948 1355 0D000000 		.4byte	.LVL359-1
 10949 1359 0100     		.2byte	0x1
 10950 135b 53       		.byte	0x53
 10951 135c 0D000000 		.4byte	.LVL359-1
 10952 1360 6E000000 		.4byte	.LVL365
 10953 1364 0100     		.2byte	0x1
 10954 1366 56       		.byte	0x56
 10955 1367 6E000000 		.4byte	.LVL365
 10956 136b B8000000 		.4byte	.LFE116
 10957 136f 0400     		.2byte	0x4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 300


 10958 1371 F3       		.byte	0xf3
 10959 1372 01       		.uleb128 0x1
 10960 1373 53       		.byte	0x53
 10961 1374 9F       		.byte	0x9f
 10962 1375 00000000 		.4byte	0
 10963 1379 00000000 		.4byte	0
 10964              	.LLST120:
 10965 137d 0A000000 		.4byte	.LVL358
 10966 1381 0D000000 		.4byte	.LVL359-1
 10967 1385 0100     		.2byte	0x1
 10968 1387 50       		.byte	0x50
 10969 1388 0D000000 		.4byte	.LVL359-1
 10970 138c AE000000 		.4byte	.LVL368
 10971 1390 0100     		.2byte	0x1
 10972 1392 54       		.byte	0x54
 10973 1393 AE000000 		.4byte	.LVL368
 10974 1397 B8000000 		.4byte	.LFE116
 10975 139b 0400     		.2byte	0x4
 10976 139d F3       		.byte	0xf3
 10977 139e 01       		.uleb128 0x1
 10978 139f 50       		.byte	0x50
 10979 13a0 9F       		.byte	0x9f
 10980 13a1 00000000 		.4byte	0
 10981 13a5 00000000 		.4byte	0
 10982              	.LLST121:
 10983 13a9 0A000000 		.4byte	.LVL358
 10984 13ad 58000000 		.4byte	.LVL363
 10985 13b1 0200     		.2byte	0x2
 10986 13b3 31       		.byte	0x31
 10987 13b4 9F       		.byte	0x9f
 10988 13b5 58000000 		.4byte	.LVL363
 10989 13b9 AE000000 		.4byte	.LVL368
 10990 13bd 0100     		.2byte	0x1
 10991 13bf 55       		.byte	0x55
 10992 13c0 AE000000 		.4byte	.LVL368
 10993 13c4 B8000000 		.4byte	.LFE116
 10994 13c8 0100     		.2byte	0x1
 10995 13ca 50       		.byte	0x50
 10996 13cb 00000000 		.4byte	0
 10997 13cf 00000000 		.4byte	0
 10998              	.LLST122:
 10999 13d3 1A000000 		.4byte	.LVL360
 11000 13d7 63000000 		.4byte	.LVL364-1
 11001 13db 0100     		.2byte	0x1
 11002 13dd 53       		.byte	0x53
 11003 13de 00000000 		.4byte	0
 11004 13e2 00000000 		.4byte	0
 11005              	.LLST123:
 11006 13e6 00000000 		.4byte	.LVL369
 11007 13ea 72000000 		.4byte	.LVL378
 11008 13ee 0100     		.2byte	0x1
 11009 13f0 50       		.byte	0x50
 11010 13f1 72000000 		.4byte	.LVL378
 11011 13f5 9C000000 		.4byte	.LVL381
 11012 13f9 0100     		.2byte	0x1
 11013 13fb 56       		.byte	0x56
 11014 13fc 9C000000 		.4byte	.LVL381
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 301


 11015 1400 A2000000 		.4byte	.LVL382
 11016 1404 0100     		.2byte	0x1
 11017 1406 50       		.byte	0x50
 11018 1407 A2000000 		.4byte	.LVL382
 11019 140b C6000000 		.4byte	.LVL384
 11020 140f 0100     		.2byte	0x1
 11021 1411 56       		.byte	0x56
 11022 1412 C6000000 		.4byte	.LVL384
 11023 1416 D8000000 		.4byte	.LFE117
 11024 141a 0400     		.2byte	0x4
 11025 141c F3       		.byte	0xf3
 11026 141d 01       		.uleb128 0x1
 11027 141e 50       		.byte	0x50
 11028 141f 9F       		.byte	0x9f
 11029 1420 00000000 		.4byte	0
 11030 1424 00000000 		.4byte	0
 11031              	.LLST124:
 11032 1428 00000000 		.4byte	.LVL369
 11033 142c 3A000000 		.4byte	.LVL374
 11034 1430 0100     		.2byte	0x1
 11035 1432 51       		.byte	0x51
 11036 1433 3A000000 		.4byte	.LVL374
 11037 1437 40000000 		.4byte	.LVL375
 11038 143b 0400     		.2byte	0x4
 11039 143d F3       		.byte	0xf3
 11040 143e 01       		.uleb128 0x1
 11041 143f 51       		.byte	0x51
 11042 1440 9F       		.byte	0x9f
 11043 1441 40000000 		.4byte	.LVL375
 11044 1445 60000000 		.4byte	.LVL376
 11045 1449 0100     		.2byte	0x1
 11046 144b 51       		.byte	0x51
 11047 144c 60000000 		.4byte	.LVL376
 11048 1450 D8000000 		.4byte	.LFE117
 11049 1454 0400     		.2byte	0x4
 11050 1456 F3       		.byte	0xf3
 11051 1457 01       		.uleb128 0x1
 11052 1458 51       		.byte	0x51
 11053 1459 9F       		.byte	0x9f
 11054 145a 00000000 		.4byte	0
 11055 145e 00000000 		.4byte	0
 11056              	.LLST125:
 11057 1462 00000000 		.4byte	.LVL369
 11058 1466 2A000000 		.4byte	.LVL373
 11059 146a 0100     		.2byte	0x1
 11060 146c 52       		.byte	0x52
 11061 146d 2A000000 		.4byte	.LVL373
 11062 1471 D8000000 		.4byte	.LFE117
 11063 1475 0400     		.2byte	0x4
 11064 1477 F3       		.byte	0xf3
 11065 1478 01       		.uleb128 0x1
 11066 1479 52       		.byte	0x52
 11067 147a 9F       		.byte	0x9f
 11068 147b 00000000 		.4byte	0
 11069 147f 00000000 		.4byte	0
 11070              	.LLST126:
 11071 1483 00000000 		.4byte	.LVL369
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 302


 11072 1487 20000000 		.4byte	.LVL371
 11073 148b 0100     		.2byte	0x1
 11074 148d 53       		.byte	0x53
 11075 148e 20000000 		.4byte	.LVL371
 11076 1492 D8000000 		.4byte	.LFE117
 11077 1496 0400     		.2byte	0x4
 11078 1498 F3       		.byte	0xf3
 11079 1499 01       		.uleb128 0x1
 11080 149a 53       		.byte	0x53
 11081 149b 9F       		.byte	0x9f
 11082 149c 00000000 		.4byte	0
 11083 14a0 00000000 		.4byte	0
 11084              	.LLST127:
 11085 14a4 00000000 		.4byte	.LVL369
 11086 14a8 CE000000 		.4byte	.LVL386
 11087 14ac 0200     		.2byte	0x2
 11088 14ae 91       		.byte	0x91
 11089 14af 00       		.sleb128 0
 11090 14b0 CE000000 		.4byte	.LVL386
 11091 14b4 D8000000 		.4byte	.LFE117
 11092 14b8 0200     		.2byte	0x2
 11093 14ba 7D       		.byte	0x7d
 11094 14bb 00       		.sleb128 0
 11095 14bc 00000000 		.4byte	0
 11096 14c0 00000000 		.4byte	0
 11097              	.LLST128:
 11098 14c4 02000000 		.4byte	.LVL370
 11099 14c8 72000000 		.4byte	.LVL378
 11100 14cc 0100     		.2byte	0x1
 11101 14ce 50       		.byte	0x50
 11102 14cf 72000000 		.4byte	.LVL378
 11103 14d3 9C000000 		.4byte	.LVL381
 11104 14d7 0100     		.2byte	0x1
 11105 14d9 56       		.byte	0x56
 11106 14da 9C000000 		.4byte	.LVL381
 11107 14de A2000000 		.4byte	.LVL382
 11108 14e2 0100     		.2byte	0x1
 11109 14e4 50       		.byte	0x50
 11110 14e5 A2000000 		.4byte	.LVL382
 11111 14e9 C6000000 		.4byte	.LVL384
 11112 14ed 0100     		.2byte	0x1
 11113 14ef 56       		.byte	0x56
 11114 14f0 C6000000 		.4byte	.LVL384
 11115 14f4 D8000000 		.4byte	.LFE117
 11116 14f8 0400     		.2byte	0x4
 11117 14fa F3       		.byte	0xf3
 11118 14fb 01       		.uleb128 0x1
 11119 14fc 50       		.byte	0x50
 11120 14fd 9F       		.byte	0x9f
 11121 14fe 00000000 		.4byte	0
 11122 1502 00000000 		.4byte	0
 11123              	.LLST129:
 11124 1506 22000000 		.4byte	.LVL372
 11125 150a 68000000 		.4byte	.LVL377
 11126 150e 0100     		.2byte	0x1
 11127 1510 53       		.byte	0x53
 11128 1511 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 303


 11129 1515 00000000 		.4byte	0
 11130              	.LLST130:
 11131 1519 02000000 		.4byte	.LVL370
 11132 151d 60000000 		.4byte	.LVL376
 11133 1521 0200     		.2byte	0x2
 11134 1523 31       		.byte	0x31
 11135 1524 9F       		.byte	0x9f
 11136 1525 60000000 		.4byte	.LVL376
 11137 1529 CE000000 		.4byte	.LVL386
 11138 152d 0100     		.2byte	0x1
 11139 152f 54       		.byte	0x54
 11140 1530 CE000000 		.4byte	.LVL386
 11141 1534 D8000000 		.4byte	.LFE117
 11142 1538 0100     		.2byte	0x1
 11143 153a 50       		.byte	0x50
 11144 153b 00000000 		.4byte	0
 11145 153f 00000000 		.4byte	0
 11146              	.LLST131:
 11147 1543 C6000000 		.4byte	.LVL384
 11148 1547 CA000000 		.4byte	.LVL385
 11149 154b 0100     		.2byte	0x1
 11150 154d 55       		.byte	0x55
 11151 154e 00000000 		.4byte	0
 11152 1552 00000000 		.4byte	0
 11153              	.LLST132:
 11154 1556 00000000 		.4byte	.LVL387
 11155 155a 3C000000 		.4byte	.LVL391
 11156 155e 0100     		.2byte	0x1
 11157 1560 50       		.byte	0x50
 11158 1561 3C000000 		.4byte	.LVL391
 11159 1565 66000000 		.4byte	.LVL394
 11160 1569 0100     		.2byte	0x1
 11161 156b 54       		.byte	0x54
 11162 156c 66000000 		.4byte	.LVL394
 11163 1570 6C000000 		.4byte	.LVL396
 11164 1574 0100     		.2byte	0x1
 11165 1576 50       		.byte	0x50
 11166 1577 6C000000 		.4byte	.LVL396
 11167 157b 8C000000 		.4byte	.LVL398
 11168 157f 0100     		.2byte	0x1
 11169 1581 54       		.byte	0x54
 11170 1582 8C000000 		.4byte	.LVL398
 11171 1586 9C000000 		.4byte	.LFE118
 11172 158a 0400     		.2byte	0x4
 11173 158c F3       		.byte	0xf3
 11174 158d 01       		.uleb128 0x1
 11175 158e 50       		.byte	0x50
 11176 158f 9F       		.byte	0x9f
 11177 1590 00000000 		.4byte	0
 11178 1594 00000000 		.4byte	0
 11179              	.LLST133:
 11180 1598 00000000 		.4byte	.LVL387
 11181 159c 3F000000 		.4byte	.LVL392-1
 11182 15a0 0100     		.2byte	0x1
 11183 15a2 51       		.byte	0x51
 11184 15a3 3F000000 		.4byte	.LVL392-1
 11185 15a7 66000000 		.4byte	.LVL394
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 304


 11186 15ab 0100     		.2byte	0x1
 11187 15ad 56       		.byte	0x56
 11188 15ae 66000000 		.4byte	.LVL394
 11189 15b2 6A000000 		.4byte	.LVL395
 11190 15b6 0100     		.2byte	0x1
 11191 15b8 51       		.byte	0x51
 11192 15b9 6A000000 		.4byte	.LVL395
 11193 15bd 8C000000 		.4byte	.LVL398
 11194 15c1 0100     		.2byte	0x1
 11195 15c3 56       		.byte	0x56
 11196 15c4 8C000000 		.4byte	.LVL398
 11197 15c8 9C000000 		.4byte	.LFE118
 11198 15cc 0400     		.2byte	0x4
 11199 15ce F3       		.byte	0xf3
 11200 15cf 01       		.uleb128 0x1
 11201 15d0 51       		.byte	0x51
 11202 15d1 9F       		.byte	0x9f
 11203 15d2 00000000 		.4byte	0
 11204 15d6 00000000 		.4byte	0
 11205              	.LLST134:
 11206 15da 02000000 		.4byte	.LVL388
 11207 15de 3C000000 		.4byte	.LVL391
 11208 15e2 0100     		.2byte	0x1
 11209 15e4 50       		.byte	0x50
 11210 15e5 3C000000 		.4byte	.LVL391
 11211 15e9 66000000 		.4byte	.LVL394
 11212 15ed 0100     		.2byte	0x1
 11213 15ef 54       		.byte	0x54
 11214 15f0 66000000 		.4byte	.LVL394
 11215 15f4 6C000000 		.4byte	.LVL396
 11216 15f8 0100     		.2byte	0x1
 11217 15fa 50       		.byte	0x50
 11218 15fb 6C000000 		.4byte	.LVL396
 11219 15ff 8C000000 		.4byte	.LVL398
 11220 1603 0100     		.2byte	0x1
 11221 1605 54       		.byte	0x54
 11222 1606 8C000000 		.4byte	.LVL398
 11223 160a 9C000000 		.4byte	.LFE118
 11224 160e 0400     		.2byte	0x4
 11225 1610 F3       		.byte	0xf3
 11226 1611 01       		.uleb128 0x1
 11227 1612 50       		.byte	0x50
 11228 1613 9F       		.byte	0x9f
 11229 1614 00000000 		.4byte	0
 11230 1618 00000000 		.4byte	0
 11231              	.LLST135:
 11232 161c 1C000000 		.4byte	.LVL389
 11233 1620 32000000 		.4byte	.LVL390
 11234 1624 0100     		.2byte	0x1
 11235 1626 53       		.byte	0x53
 11236 1627 00000000 		.4byte	0
 11237 162b 00000000 		.4byte	0
 11238              	.LLST136:
 11239 162f 8C000000 		.4byte	.LVL398
 11240 1633 90000000 		.4byte	.LVL399
 11241 1637 0100     		.2byte	0x1
 11242 1639 55       		.byte	0x55
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 305


 11243 163a 00000000 		.4byte	0
 11244 163e 00000000 		.4byte	0
 11245              	.LLST137:
 11246 1642 00000000 		.4byte	.LVL400
 11247 1646 0C000000 		.4byte	.LVL401
 11248 164a 0100     		.2byte	0x1
 11249 164c 50       		.byte	0x50
 11250 164d 00000000 		.4byte	0
 11251 1651 00000000 		.4byte	0
 11252              	.LLST138:
 11253 1655 0C000000 		.4byte	.LVL401
 11254 1659 22000000 		.4byte	.LVL404
 11255 165d 0100     		.2byte	0x1
 11256 165f 54       		.byte	0x54
 11257 1660 24000000 		.4byte	.LVL405
 11258 1664 26000000 		.4byte	.LVL406
 11259 1668 0100     		.2byte	0x1
 11260 166a 54       		.byte	0x54
 11261 166b 00000000 		.4byte	0
 11262 166f 00000000 		.4byte	0
 11263              	.LLST139:
 11264 1673 20000000 		.4byte	.LVL403
 11265 1677 24000000 		.4byte	.LVL405
 11266 167b 0200     		.2byte	0x2
 11267 167d 31       		.byte	0x31
 11268 167e 9F       		.byte	0x9f
 11269 167f 26000000 		.4byte	.LVL406
 11270 1683 2E000000 		.4byte	.LVL408
 11271 1687 0100     		.2byte	0x1
 11272 1689 54       		.byte	0x54
 11273 168a 2E000000 		.4byte	.LVL408
 11274 168e 34000000 		.4byte	.LFE119
 11275 1692 0100     		.2byte	0x1
 11276 1694 50       		.byte	0x50
 11277 1695 00000000 		.4byte	0
 11278 1699 00000000 		.4byte	0
 11279              	.LLST140:
 11280 169d 00000000 		.4byte	.LVL409
 11281 16a1 0E000000 		.4byte	.LVL410
 11282 16a5 0100     		.2byte	0x1
 11283 16a7 50       		.byte	0x50
 11284 16a8 00000000 		.4byte	0
 11285 16ac 00000000 		.4byte	0
 11286              	.LLST141:
 11287 16b0 00000000 		.4byte	.LVL409
 11288 16b4 11000000 		.4byte	.LVL411-1
 11289 16b8 0100     		.2byte	0x1
 11290 16ba 51       		.byte	0x51
 11291 16bb 11000000 		.4byte	.LVL411-1
 11292 16bf 2A000000 		.4byte	.LVL414
 11293 16c3 0100     		.2byte	0x1
 11294 16c5 56       		.byte	0x56
 11295 16c6 2A000000 		.4byte	.LVL414
 11296 16ca 30000000 		.4byte	.LFE120
 11297 16ce 0400     		.2byte	0x4
 11298 16d0 F3       		.byte	0xf3
 11299 16d1 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 306


 11300 16d2 51       		.byte	0x51
 11301 16d3 9F       		.byte	0x9f
 11302 16d4 00000000 		.4byte	0
 11303 16d8 00000000 		.4byte	0
 11304              	.LLST142:
 11305 16dc 0E000000 		.4byte	.LVL410
 11306 16e0 2A000000 		.4byte	.LVL414
 11307 16e4 0100     		.2byte	0x1
 11308 16e6 54       		.byte	0x54
 11309 16e7 00000000 		.4byte	0
 11310 16eb 00000000 		.4byte	0
 11311              	.LLST143:
 11312 16ef 1A000000 		.4byte	.LVL412
 11313 16f3 2A000000 		.4byte	.LVL414
 11314 16f7 0100     		.2byte	0x1
 11315 16f9 55       		.byte	0x55
 11316 16fa 2A000000 		.4byte	.LVL414
 11317 16fe 30000000 		.4byte	.LFE120
 11318 1702 0100     		.2byte	0x1
 11319 1704 50       		.byte	0x50
 11320 1705 00000000 		.4byte	0
 11321 1709 00000000 		.4byte	0
 11322              		.section	.debug_aranges,"",%progbits
 11323 0000 C4010000 		.4byte	0x1c4
 11324 0004 0200     		.2byte	0x2
 11325 0006 00000000 		.4byte	.Ldebug_info0
 11326 000a 04       		.byte	0x4
 11327 000b 00       		.byte	0
 11328 000c 0000     		.2byte	0
 11329 000e 0000     		.2byte	0
 11330 0010 00000000 		.4byte	.LFB79
 11331 0014 2C000000 		.4byte	.LFE79-.LFB79
 11332 0018 00000000 		.4byte	.LFB104
 11333 001c 14000000 		.4byte	.LFE104-.LFB104
 11334 0020 00000000 		.4byte	.LFB107
 11335 0024 24000000 		.4byte	.LFE107-.LFB107
 11336 0028 00000000 		.4byte	.LFB106
 11337 002c 12000000 		.4byte	.LFE106-.LFB106
 11338 0030 00000000 		.4byte	.LFB69
 11339 0034 9C000000 		.4byte	.LFE69-.LFB69
 11340 0038 00000000 		.4byte	.LFB102
 11341 003c 58000000 		.4byte	.LFE102-.LFB102
 11342 0040 00000000 		.4byte	.LFB70
 11343 0044 AC000000 		.4byte	.LFE70-.LFB70
 11344 0048 00000000 		.4byte	.LFB103
 11345 004c 44000000 		.4byte	.LFE103-.LFB103
 11346 0050 00000000 		.4byte	.LFB101
 11347 0054 08000000 		.4byte	.LFE101-.LFB101
 11348 0058 00000000 		.4byte	.LFB121
 11349 005c 84000000 		.4byte	.LFE121-.LFB121
 11350 0060 00000000 		.4byte	.LFB68
 11351 0064 62000000 		.4byte	.LFE68-.LFB68
 11352 0068 00000000 		.4byte	.LFB71
 11353 006c BC000000 		.4byte	.LFE71-.LFB71
 11354 0070 00000000 		.4byte	.LFB74
 11355 0074 70000000 		.4byte	.LFE74-.LFB74
 11356 0078 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 307


 11357 007c 20000000 		.4byte	.LFE75-.LFB75
 11358 0080 00000000 		.4byte	.LFB76
 11359 0084 28000000 		.4byte	.LFE76-.LFB76
 11360 0088 00000000 		.4byte	.LFB77
 11361 008c E0000000 		.4byte	.LFE77-.LFB77
 11362 0090 00000000 		.4byte	.LFB80
 11363 0094 78000000 		.4byte	.LFE80-.LFB80
 11364 0098 00000000 		.4byte	.LFB81
 11365 009c 88000000 		.4byte	.LFE81-.LFB81
 11366 00a0 00000000 		.4byte	.LFB82
 11367 00a4 58000000 		.4byte	.LFE82-.LFB82
 11368 00a8 00000000 		.4byte	.LFB83
 11369 00ac 24000000 		.4byte	.LFE83-.LFB83
 11370 00b0 00000000 		.4byte	.LFB84
 11371 00b4 14000000 		.4byte	.LFE84-.LFB84
 11372 00b8 00000000 		.4byte	.LFB86
 11373 00bc 0C000000 		.4byte	.LFE86-.LFB86
 11374 00c0 00000000 		.4byte	.LFB87
 11375 00c4 0C000000 		.4byte	.LFE87-.LFB87
 11376 00c8 00000000 		.4byte	.LFB88
 11377 00cc 0C000000 		.4byte	.LFE88-.LFB88
 11378 00d0 00000000 		.4byte	.LFB89
 11379 00d4 14000000 		.4byte	.LFE89-.LFB89
 11380 00d8 00000000 		.4byte	.LFB91
 11381 00dc 00010000 		.4byte	.LFE91-.LFB91
 11382 00e0 00000000 		.4byte	.LFB85
 11383 00e4 D8000000 		.4byte	.LFE85-.LFB85
 11384 00e8 00000000 		.4byte	.LFB72
 11385 00ec 6C000000 		.4byte	.LFE72-.LFB72
 11386 00f0 00000000 		.4byte	.LFB73
 11387 00f4 34000000 		.4byte	.LFE73-.LFB73
 11388 00f8 00000000 		.4byte	.LFB90
 11389 00fc 20000000 		.4byte	.LFE90-.LFB90
 11390 0100 00000000 		.4byte	.LFB92
 11391 0104 70000000 		.4byte	.LFE92-.LFB92
 11392 0108 00000000 		.4byte	.LFB78
 11393 010c C0000000 		.4byte	.LFE78-.LFB78
 11394 0110 00000000 		.4byte	.LFB93
 11395 0114 20000000 		.4byte	.LFE93-.LFB93
 11396 0118 00000000 		.4byte	.LFB94
 11397 011c 28000000 		.4byte	.LFE94-.LFB94
 11398 0120 00000000 		.4byte	.LFB95
 11399 0124 74000000 		.4byte	.LFE95-.LFB95
 11400 0128 00000000 		.4byte	.LFB96
 11401 012c 54000000 		.4byte	.LFE96-.LFB96
 11402 0130 00000000 		.4byte	.LFB97
 11403 0134 20000000 		.4byte	.LFE97-.LFB97
 11404 0138 00000000 		.4byte	.LFB98
 11405 013c 14000000 		.4byte	.LFE98-.LFB98
 11406 0140 00000000 		.4byte	.LFB99
 11407 0144 58000000 		.4byte	.LFE99-.LFB99
 11408 0148 00000000 		.4byte	.LFB100
 11409 014c 10000000 		.4byte	.LFE100-.LFB100
 11410 0150 00000000 		.4byte	.LFB105
 11411 0154 18000000 		.4byte	.LFE105-.LFB105
 11412 0158 00000000 		.4byte	.LFB108
 11413 015c 0C000000 		.4byte	.LFE108-.LFB108
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 308


 11414 0160 00000000 		.4byte	.LFB109
 11415 0164 BC000000 		.4byte	.LFE109-.LFB109
 11416 0168 00000000 		.4byte	.LFB110
 11417 016c 88000000 		.4byte	.LFE110-.LFB110
 11418 0170 00000000 		.4byte	.LFB111
 11419 0174 8C000000 		.4byte	.LFE111-.LFB111
 11420 0178 00000000 		.4byte	.LFB112
 11421 017c 20000000 		.4byte	.LFE112-.LFB112
 11422 0180 00000000 		.4byte	.LFB113
 11423 0184 20000000 		.4byte	.LFE113-.LFB113
 11424 0188 00000000 		.4byte	.LFB114
 11425 018c 80000000 		.4byte	.LFE114-.LFB114
 11426 0190 00000000 		.4byte	.LFB115
 11427 0194 A4000000 		.4byte	.LFE115-.LFB115
 11428 0198 00000000 		.4byte	.LFB116
 11429 019c B8000000 		.4byte	.LFE116-.LFB116
 11430 01a0 00000000 		.4byte	.LFB117
 11431 01a4 D8000000 		.4byte	.LFE117-.LFB117
 11432 01a8 00000000 		.4byte	.LFB118
 11433 01ac 9C000000 		.4byte	.LFE118-.LFB118
 11434 01b0 00000000 		.4byte	.LFB119
 11435 01b4 34000000 		.4byte	.LFE119-.LFB119
 11436 01b8 00000000 		.4byte	.LFB120
 11437 01bc 30000000 		.4byte	.LFE120-.LFB120
 11438 01c0 00000000 		.4byte	0
 11439 01c4 00000000 		.4byte	0
 11440              		.section	.debug_ranges,"",%progbits
 11441              	.Ldebug_ranges0:
 11442 0000 0E000000 		.4byte	.LBB40
 11443 0004 3E000000 		.4byte	.LBE40
 11444 0008 44000000 		.4byte	.LBB42
 11445 000c E0000000 		.4byte	.LBE42
 11446 0010 F2000000 		.4byte	.LBB43
 11447 0014 F6000000 		.4byte	.LBE43
 11448 0018 00000000 		.4byte	0
 11449 001c 00000000 		.4byte	0
 11450 0020 0A000000 		.4byte	.LBB45
 11451 0024 20000000 		.4byte	.LBE45
 11452 0028 24000000 		.4byte	.LBB46
 11453 002c 2C000000 		.4byte	.LBE46
 11454 0030 34000000 		.4byte	.LBB47
 11455 0034 4A000000 		.4byte	.LBE47
 11456 0038 00000000 		.4byte	0
 11457 003c 00000000 		.4byte	0
 11458 0040 00000000 		.4byte	.LFB79
 11459 0044 2C000000 		.4byte	.LFE79
 11460 0048 00000000 		.4byte	.LFB104
 11461 004c 14000000 		.4byte	.LFE104
 11462 0050 00000000 		.4byte	.LFB107
 11463 0054 24000000 		.4byte	.LFE107
 11464 0058 00000000 		.4byte	.LFB106
 11465 005c 12000000 		.4byte	.LFE106
 11466 0060 00000000 		.4byte	.LFB69
 11467 0064 9C000000 		.4byte	.LFE69
 11468 0068 00000000 		.4byte	.LFB102
 11469 006c 58000000 		.4byte	.LFE102
 11470 0070 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 309


 11471 0074 AC000000 		.4byte	.LFE70
 11472 0078 00000000 		.4byte	.LFB103
 11473 007c 44000000 		.4byte	.LFE103
 11474 0080 00000000 		.4byte	.LFB101
 11475 0084 08000000 		.4byte	.LFE101
 11476 0088 00000000 		.4byte	.LFB121
 11477 008c 84000000 		.4byte	.LFE121
 11478 0090 00000000 		.4byte	.LFB68
 11479 0094 62000000 		.4byte	.LFE68
 11480 0098 00000000 		.4byte	.LFB71
 11481 009c BC000000 		.4byte	.LFE71
 11482 00a0 00000000 		.4byte	.LFB74
 11483 00a4 70000000 		.4byte	.LFE74
 11484 00a8 00000000 		.4byte	.LFB75
 11485 00ac 20000000 		.4byte	.LFE75
 11486 00b0 00000000 		.4byte	.LFB76
 11487 00b4 28000000 		.4byte	.LFE76
 11488 00b8 00000000 		.4byte	.LFB77
 11489 00bc E0000000 		.4byte	.LFE77
 11490 00c0 00000000 		.4byte	.LFB80
 11491 00c4 78000000 		.4byte	.LFE80
 11492 00c8 00000000 		.4byte	.LFB81
 11493 00cc 88000000 		.4byte	.LFE81
 11494 00d0 00000000 		.4byte	.LFB82
 11495 00d4 58000000 		.4byte	.LFE82
 11496 00d8 00000000 		.4byte	.LFB83
 11497 00dc 24000000 		.4byte	.LFE83
 11498 00e0 00000000 		.4byte	.LFB84
 11499 00e4 14000000 		.4byte	.LFE84
 11500 00e8 00000000 		.4byte	.LFB86
 11501 00ec 0C000000 		.4byte	.LFE86
 11502 00f0 00000000 		.4byte	.LFB87
 11503 00f4 0C000000 		.4byte	.LFE87
 11504 00f8 00000000 		.4byte	.LFB88
 11505 00fc 0C000000 		.4byte	.LFE88
 11506 0100 00000000 		.4byte	.LFB89
 11507 0104 14000000 		.4byte	.LFE89
 11508 0108 00000000 		.4byte	.LFB91
 11509 010c 00010000 		.4byte	.LFE91
 11510 0110 00000000 		.4byte	.LFB85
 11511 0114 D8000000 		.4byte	.LFE85
 11512 0118 00000000 		.4byte	.LFB72
 11513 011c 6C000000 		.4byte	.LFE72
 11514 0120 00000000 		.4byte	.LFB73
 11515 0124 34000000 		.4byte	.LFE73
 11516 0128 00000000 		.4byte	.LFB90
 11517 012c 20000000 		.4byte	.LFE90
 11518 0130 00000000 		.4byte	.LFB92
 11519 0134 70000000 		.4byte	.LFE92
 11520 0138 00000000 		.4byte	.LFB78
 11521 013c C0000000 		.4byte	.LFE78
 11522 0140 00000000 		.4byte	.LFB93
 11523 0144 20000000 		.4byte	.LFE93
 11524 0148 00000000 		.4byte	.LFB94
 11525 014c 28000000 		.4byte	.LFE94
 11526 0150 00000000 		.4byte	.LFB95
 11527 0154 74000000 		.4byte	.LFE95
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 310


 11528 0158 00000000 		.4byte	.LFB96
 11529 015c 54000000 		.4byte	.LFE96
 11530 0160 00000000 		.4byte	.LFB97
 11531 0164 20000000 		.4byte	.LFE97
 11532 0168 00000000 		.4byte	.LFB98
 11533 016c 14000000 		.4byte	.LFE98
 11534 0170 00000000 		.4byte	.LFB99
 11535 0174 58000000 		.4byte	.LFE99
 11536 0178 00000000 		.4byte	.LFB100
 11537 017c 10000000 		.4byte	.LFE100
 11538 0180 00000000 		.4byte	.LFB105
 11539 0184 18000000 		.4byte	.LFE105
 11540 0188 00000000 		.4byte	.LFB108
 11541 018c 0C000000 		.4byte	.LFE108
 11542 0190 00000000 		.4byte	.LFB109
 11543 0194 BC000000 		.4byte	.LFE109
 11544 0198 00000000 		.4byte	.LFB110
 11545 019c 88000000 		.4byte	.LFE110
 11546 01a0 00000000 		.4byte	.LFB111
 11547 01a4 8C000000 		.4byte	.LFE111
 11548 01a8 00000000 		.4byte	.LFB112
 11549 01ac 20000000 		.4byte	.LFE112
 11550 01b0 00000000 		.4byte	.LFB113
 11551 01b4 20000000 		.4byte	.LFE113
 11552 01b8 00000000 		.4byte	.LFB114
 11553 01bc 80000000 		.4byte	.LFE114
 11554 01c0 00000000 		.4byte	.LFB115
 11555 01c4 A4000000 		.4byte	.LFE115
 11556 01c8 00000000 		.4byte	.LFB116
 11557 01cc B8000000 		.4byte	.LFE116
 11558 01d0 00000000 		.4byte	.LFB117
 11559 01d4 D8000000 		.4byte	.LFE117
 11560 01d8 00000000 		.4byte	.LFB118
 11561 01dc 9C000000 		.4byte	.LFE118
 11562 01e0 00000000 		.4byte	.LFB119
 11563 01e4 34000000 		.4byte	.LFE119
 11564 01e8 00000000 		.4byte	.LFB120
 11565 01ec 30000000 		.4byte	.LFE120
 11566 01f0 00000000 		.4byte	0
 11567 01f4 00000000 		.4byte	0
 11568              		.section	.debug_line,"",%progbits
 11569              	.Ldebug_line0:
 11570 0000 EA0A0000 		.section	.debug_str,"MS",%progbits,1
 11570      0200BF02 
 11570      00000201 
 11570      FB0E0D00 
 11570      01010101 
 11571              	.LASF57:
 11572 0000 65537573 		.ascii	"eSuspended\000"
 11572      70656E64 
 11572      656400
 11573              	.LASF110:
 11574 000b 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11574      426C6F63 
 11574      6B496E64 
 11574      6566696E 
 11574      6974656C 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 311


 11575              	.LASF86:
 11576 0021 75635265 		.ascii	"ucReturn\000"
 11576      7475726E 
 11576      00
 11577              	.LASF78:
 11578 002a 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11578      6967696E 
 11578      616C4241 
 11578      53455052 
 11578      4900
 11579              	.LASF138:
 11580 003c 78546963 		.ascii	"xTicks\000"
 11580      6B7300
 11581              	.LASF159:
 11582 0043 76546173 		.ascii	"vTaskSuspend\000"
 11582      6B537573 
 11582      70656E64 
 11582      00
 11583              	.LASF4:
 11584 0050 73697A65 		.ascii	"size_t\000"
 11584      5F7400
 11585              	.LASF40:
 11586 0057 4D696E69 		.ascii	"MiniListItem_t\000"
 11586      4C697374 
 11586      4974656D 
 11586      5F7400
 11587              	.LASF70:
 11588 0066 54696D65 		.ascii	"TimeOut_t\000"
 11588      4F75745F 
 11588      7400
 11589              	.LASF218:
 11590 0070 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11590      7272656E 
 11590      744E756D 
 11590      6265724F 
 11590      66546173 
 11591              	.LASF199:
 11592 0087 756C5661 		.ascii	"ulValue\000"
 11592      6C756500 
 11593              	.LASF187:
 11594 008f 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11594      736B5265 
 11594      73657445 
 11594      76656E74 
 11594      4974656D 
 11595              	.LASF223:
 11596 00a9 78596965 		.ascii	"xYieldPending\000"
 11596      6C645065 
 11596      6E64696E 
 11596      6700
 11597              	.LASF5:
 11598 00b7 5F5F7569 		.ascii	"__uint8_t\000"
 11598      6E74385F 
 11598      7400
 11599              	.LASF203:
 11600 00c1 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11600      6B47656E 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 312


 11600      65726963 
 11600      4E6F7469 
 11600      66794672 
 11601              	.LASF217:
 11602 00db 78537573 		.ascii	"xSuspendedTaskList\000"
 11602      70656E64 
 11602      65645461 
 11602      736B4C69 
 11602      737400
 11603              	.LASF152:
 11604 00ee 76546173 		.ascii	"vTaskDelay\000"
 11604      6B44656C 
 11604      617900
 11605              	.LASF206:
 11606 00f9 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11606      6B4E6F74 
 11606      69667953 
 11606      74617465 
 11606      436C6561 
 11607              	.LASF79:
 11608 010f 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11608      77424153 
 11608      45505249 
 11608      00
 11609              	.LASF56:
 11610 011c 65426C6F 		.ascii	"eBlocked\000"
 11610      636B6564 
 11610      00
 11611              	.LASF111:
 11612 0125 7854696D 		.ascii	"xTimeToWake\000"
 11612      65546F57 
 11612      616B6500 
 11613              	.LASF146:
 11614 0131 78416C72 		.ascii	"xAlreadyYielded\000"
 11614      65616479 
 11614      5969656C 
 11614      64656400 
 11615              	.LASF169:
 11616 0141 70785469 		.ascii	"pxTimeOut\000"
 11616      6D654F75 
 11616      7400
 11617              	.LASF37:
 11618 014b 784C6973 		.ascii	"xListEnd\000"
 11618      74456E64 
 11618      00
 11619              	.LASF229:
 11620 0154 49544D5F 		.ascii	"ITM_RxBuffer\000"
 11620      52784275 
 11620      66666572 
 11620      00
 11621              	.LASF67:
 11622 0161 7854494D 		.ascii	"xTIME_OUT\000"
 11622      455F4F55 
 11622      5400
 11623              	.LASF39:
 11624 016b 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11624      495F4C49 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 313


 11624      53545F49 
 11624      54454D00 
 11625              	.LASF181:
 11626 017b 70784D75 		.ascii	"pxMutexHolderTCB\000"
 11626      74657848 
 11626      6F6C6465 
 11626      72544342 
 11626      00
 11627              	.LASF1:
 11628 018c 6C6F6E67 		.ascii	"long long int\000"
 11628      206C6F6E 
 11628      6720696E 
 11628      7400
 11629              	.LASF3:
 11630 019a 7369676E 		.ascii	"signed char\000"
 11630      65642063 
 11630      68617200 
 11631              	.LASF175:
 11632 01a6 76546173 		.ascii	"vTaskMissedYield\000"
 11632      6B4D6973 
 11632      73656459 
 11632      69656C64 
 11632      00
 11633              	.LASF129:
 11634 01b7 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11634      696F7269 
 11634      74795573 
 11634      65644F6E 
 11634      456E7472 
 11635              	.LASF109:
 11636 01cd 78546963 		.ascii	"xTicksToWait\000"
 11636      6B73546F 
 11636      57616974 
 11636      00
 11637              	.LASF226:
 11638 01da 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11638      74546173 
 11638      6B556E62 
 11638      6C6F636B 
 11638      54696D65 
 11639              	.LASF191:
 11640 01ef 78436C65 		.ascii	"xClearCountOnExit\000"
 11640      6172436F 
 11640      756E744F 
 11640      6E457869 
 11640      7400
 11641              	.LASF14:
 11642 0201 6C6F6E67 		.ascii	"long long unsigned int\000"
 11642      206C6F6E 
 11642      6720756E 
 11642      7369676E 
 11642      65642069 
 11643              	.LASF45:
 11644 0218 78537461 		.ascii	"xStateListItem\000"
 11644      74654C69 
 11644      73744974 
 11644      656D00
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 314


 11645              	.LASF200:
 11646 0227 65416374 		.ascii	"eAction\000"
 11646      696F6E00 
 11647              	.LASF143:
 11648 022f 78537769 		.ascii	"xSwitchRequired\000"
 11648      74636852 
 11648      65717569 
 11648      72656400 
 11649              	.LASF11:
 11650 023f 6C6F6E67 		.ascii	"long int\000"
 11650      20696E74 
 11650      00
 11651              	.LASF43:
 11652 0248 74736B54 		.ascii	"tskTaskControlBlock\000"
 11652      61736B43 
 11652      6F6E7472 
 11652      6F6C426C 
 11652      6F636B00 
 11653              	.LASF215:
 11654 025c 78546173 		.ascii	"xTasksWaitingTermination\000"
 11654      6B735761 
 11654      6974696E 
 11654      67546572 
 11654      6D696E61 
 11655              	.LASF102:
 11656 0275 70784E65 		.ascii	"pxNewTCB\000"
 11656      77544342 
 11656      00
 11657              	.LASF62:
 11658 027e 65536574 		.ascii	"eSetBits\000"
 11658      42697473 
 11658      00
 11659              	.LASF208:
 11660 0287 756C4269 		.ascii	"ulBitsToClear\000"
 11660      7473546F 
 11660      436C6561 
 11660      7200
 11661              	.LASF202:
 11662 0295 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11662      6967696E 
 11662      616C4E6F 
 11662      74696679 
 11662      53746174 
 11663              	.LASF139:
 11664 02ab 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11664      6B476574 
 11664      5469636B 
 11664      436F756E 
 11664      7446726F 
 11665              	.LASF42:
 11666 02c4 5461736B 		.ascii	"TaskHandle_t\000"
 11666      48616E64 
 11666      6C655F74 
 11666      00
 11667              	.LASF27:
 11668 02d1 5469636B 		.ascii	"TickType_t\000"
 11668      54797065 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 315


 11668      5F7400
 11669              	.LASF7:
 11670 02dc 73686F72 		.ascii	"short int\000"
 11670      7420696E 
 11670      7400
 11671              	.LASF75:
 11672 02e6 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11672      72795265 
 11672      67696F6E 
 11672      5F7400
 11673              	.LASF142:
 11674 02f5 78546173 		.ascii	"xTaskIncrementTick\000"
 11674      6B496E63 
 11674      72656D65 
 11674      6E745469 
 11674      636B00
 11675              	.LASF18:
 11676 0308 75696E74 		.ascii	"uint16_t\000"
 11676      31365F74 
 11676      00
 11677              	.LASF177:
 11678 0311 70756345 		.ascii	"pucEndOfStack\000"
 11678      6E644F66 
 11678      53746163 
 11678      6B00
 11679              	.LASF25:
 11680 031f 42617365 		.ascii	"BaseType_t\000"
 11680      54797065 
 11680      5F7400
 11681              	.LASF117:
 11682 032a 65526574 		.ascii	"eReturn\000"
 11682      75726E00 
 11683              	.LASF237:
 11684 0332 764C6973 		.ascii	"vListInsertEnd\000"
 11684      74496E73 
 11684      65727445 
 11684      6E6400
 11685              	.LASF201:
 11686 0341 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11686      72657669 
 11686      6F75734E 
 11686      6F746966 
 11686      69636174 
 11687              	.LASF118:
 11688 035e 70785374 		.ascii	"pxStateList\000"
 11688      6174654C 
 11688      69737400 
 11689              	.LASF94:
 11690 036a 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11690      65736574 
 11690      4E657874 
 11690      5461736B 
 11690      556E626C 
 11691              	.LASF8:
 11692 0386 5F5F7569 		.ascii	"__uint16_t\000"
 11692      6E743136 
 11692      5F7400
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 316


 11693              	.LASF113:
 11694 0391 75735374 		.ascii	"usStackDepth\000"
 11694      61636B44 
 11694      65707468 
 11694      00
 11695              	.LASF141:
 11696 039e 78546173 		.ascii	"xTaskToQuery\000"
 11696      6B546F51 
 11696      75657279 
 11696      00
 11697              	.LASF126:
 11698 03ab 76546173 		.ascii	"vTaskPrioritySet\000"
 11698      6B507269 
 11698      6F726974 
 11698      79536574 
 11698      00
 11699              	.LASF68:
 11700 03bc 784F7665 		.ascii	"xOverflowCount\000"
 11700      72666C6F 
 11700      77436F75 
 11700      6E7400
 11701              	.LASF135:
 11702 03cb 76546173 		.ascii	"vTaskStartScheduler\000"
 11702      6B537461 
 11702      72745363 
 11702      68656475 
 11702      6C657200 
 11703              	.LASF246:
 11704 03df 433A5C55 		.ascii	"C:\\Users\\vincent\\Documents\\PSoC Creator\\Reform"
 11704      73657273 
 11704      5C76696E 
 11704      63656E74 
 11704      5C446F63 
 11705 040d 6174576F 		.ascii	"atWorkspace\\Project1A.cydsn\000"
 11705      726B7370 
 11705      6163655C 
 11705      50726F6A 
 11705      65637431 
 11706              	.LASF241:
 11707 0429 7076506F 		.ascii	"pvPortMalloc\000"
 11707      72744D61 
 11707      6C6C6F63 
 11707      00
 11708              	.LASF161:
 11709 0436 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11709      6B506C61 
 11709      63654F6E 
 11709      4576656E 
 11709      744C6973 
 11710              	.LASF53:
 11711 044c 75634E6F 		.ascii	"ucNotifyState\000"
 11711      74696679 
 11711      53746174 
 11711      6500
 11712              	.LASF99:
 11713 045a 756C5374 		.ascii	"ulStackDepth\000"
 11713      61636B44 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 317


 11713      65707468 
 11713      00
 11714              	.LASF12:
 11715 0467 5F5F7569 		.ascii	"__uint32_t\000"
 11715      6E743332 
 11715      5F7400
 11716              	.LASF228:
 11717 0472 75785363 		.ascii	"uxSchedulerSuspended\000"
 11717      68656475 
 11717      6C657253 
 11717      75737065 
 11717      6E646564 
 11718              	.LASF133:
 11719 0487 78546173 		.ascii	"xTaskResumeFromISR\000"
 11719      6B526573 
 11719      756D6546 
 11719      726F6D49 
 11719      535200
 11720              	.LASF245:
 11721 049a 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS\\tasks.c\000"
 11721      2E5C4672 
 11721      65655254 
 11721      4F535C74 
 11721      61736B73 
 11722              	.LASF87:
 11723 04b1 78526574 		.ascii	"xReturn\000"
 11723      75726E00 
 11724              	.LASF112:
 11725 04b9 78436F6E 		.ascii	"xConstTickCount\000"
 11725      73745469 
 11725      636B436F 
 11725      756E7400 
 11726              	.LASF154:
 11727 04c9 78546173 		.ascii	"xTaskCatchUpTicks\000"
 11727      6B436174 
 11727      63685570 
 11727      5469636B 
 11727      7300
 11728              	.LASF163:
 11729 04db 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11729      6B506C61 
 11729      63654F6E 
 11729      556E6F72 
 11729      64657265 
 11730              	.LASF101:
 11731 04fa 70784372 		.ascii	"pxCreatedTask\000"
 11731      65617465 
 11731      64546173 
 11731      6B00
 11732              	.LASF35:
 11733 0508 75784E75 		.ascii	"uxNumberOfItems\000"
 11733      6D626572 
 11733      4F664974 
 11733      656D7300 
 11734              	.LASF13:
 11735 0518 6C6F6E67 		.ascii	"long unsigned int\000"
 11735      20756E73 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 318


 11735      69676E65 
 11735      6420696E 
 11735      7400
 11736              	.LASF55:
 11737 052a 65526561 		.ascii	"eReady\000"
 11737      647900
 11738              	.LASF198:
 11739 0531 78546173 		.ascii	"xTaskToNotify\000"
 11739      6B546F4E 
 11739      6F746966 
 11739      7900
 11740              	.LASF44:
 11741 053f 7078546F 		.ascii	"pxTopOfStack\000"
 11741      704F6653 
 11741      7461636B 
 11741      00
 11742              	.LASF100:
 11743 054c 70765061 		.ascii	"pvParameters\000"
 11743      72616D65 
 11743      74657273 
 11743      00
 11744              	.LASF204:
 11745 0559 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11745      67686572 
 11745      5072696F 
 11745      72697479 
 11745      5461736B 
 11746              	.LASF76:
 11747 0573 74736B54 		.ascii	"tskTCB\000"
 11747      434200
 11748              	.LASF158:
 11749 057a 7078436F 		.ascii	"pxConstList\000"
 11749      6E73744C 
 11749      69737400 
 11750              	.LASF9:
 11751 0586 73686F72 		.ascii	"short unsigned int\000"
 11751      7420756E 
 11751      7369676E 
 11751      65642069 
 11751      6E7400
 11752              	.LASF24:
 11753 0599 53746163 		.ascii	"StackType_t\000"
 11753      6B547970 
 11753      655F7400 
 11754              	.LASF88:
 11755 05a5 70785443 		.ascii	"pxTCB\000"
 11755      4200
 11756              	.LASF130:
 11757 05ab 78596965 		.ascii	"xYieldRequired\000"
 11757      6C645265 
 11757      71756972 
 11757      656400
 11758              	.LASF194:
 11759 05ba 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11759      7473546F 
 11759      436C6561 
 11759      724F6E45 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 319


 11759      6E747279 
 11760              	.LASF222:
 11761 05cf 7850656E 		.ascii	"xPendedTicks\000"
 11761      64656454 
 11761      69636B73 
 11761      00
 11762              	.LASF105:
 11763 05dc 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11763      64644E65 
 11763      77546173 
 11763      6B546F52 
 11763      65616479 
 11764              	.LASF131:
 11765 05f5 76546173 		.ascii	"vTaskResume\000"
 11765      6B526573 
 11765      756D6500 
 11766              	.LASF119:
 11767 0601 70784465 		.ascii	"pxDelayedList\000"
 11767      6C617965 
 11767      644C6973 
 11767      7400
 11768              	.LASF230:
 11769 060f 70784375 		.ascii	"pxCurrentTCB\000"
 11769      7272656E 
 11769      74544342 
 11769      00
 11770              	.LASF122:
 11771 061c 75785265 		.ascii	"uxReturn\000"
 11771      7475726E 
 11771      00
 11772              	.LASF212:
 11773 0625 70784465 		.ascii	"pxDelayedTaskList\000"
 11773      6C617965 
 11773      64546173 
 11773      6B4C6973 
 11773      7400
 11774              	.LASF137:
 11775 0637 78546173 		.ascii	"xTaskGetTickCount\000"
 11775      6B476574 
 11775      5469636B 
 11775      436F756E 
 11775      7400
 11776              	.LASF162:
 11777 0649 70784576 		.ascii	"pxEventList\000"
 11777      656E744C 
 11777      69737400 
 11778              	.LASF81:
 11779 0655 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 11779      74526169 
 11779      73654241 
 11779      53455052 
 11779      4900
 11780              	.LASF41:
 11781 0667 4C697374 		.ascii	"List_t\000"
 11781      5F7400
 11782              	.LASF207:
 11783 066e 756C5461 		.ascii	"ulTaskNotifyValueClear\000"
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 320


 11783      736B4E6F 
 11783      74696679 
 11783      56616C75 
 11783      65436C65 
 11784              	.LASF92:
 11785 0685 70756353 		.ascii	"pucStackByte\000"
 11785      7461636B 
 11785      42797465 
 11785      00
 11786              	.LASF95:
 11787 0692 70727644 		.ascii	"prvDeleteTCB\000"
 11787      656C6574 
 11787      65544342 
 11787      00
 11788              	.LASF107:
 11789 069f 70727649 		.ascii	"prvIdleTask\000"
 11789      646C6554 
 11789      61736B00 
 11790              	.LASF173:
 11791 06ab 78456C61 		.ascii	"xElapsedTime\000"
 11791      70736564 
 11791      54696D65 
 11791      00
 11792              	.LASF156:
 11793 06b8 76546173 		.ascii	"vTaskSwitchContext\000"
 11793      6B537769 
 11793      74636843 
 11793      6F6E7465 
 11793      787400
 11794              	.LASF63:
 11795 06cb 65496E63 		.ascii	"eIncrement\000"
 11795      72656D65 
 11795      6E7400
 11796              	.LASF180:
 11797 06d6 70784D75 		.ascii	"pxMutexHolder\000"
 11797      74657848 
 11797      6F6C6465 
 11797      7200
 11798              	.LASF48:
 11799 06e4 70785374 		.ascii	"pxStack\000"
 11799      61636B00 
 11800              	.LASF233:
 11801 06ec 764C6973 		.ascii	"vListInitialiseItem\000"
 11801      74496E69 
 11801      7469616C 
 11801      69736549 
 11801      74656D00 
 11802              	.LASF213:
 11803 0700 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11803      6572666C 
 11803      6F774465 
 11803      6C617965 
 11803      64546173 
 11804              	.LASF15:
 11805 071a 73697A65 		.ascii	"sizetype\000"
 11805      74797065 
 11805      00
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 321


 11806              	.LASF184:
 11807 0723 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11807      67686573 
 11807      74507269 
 11807      6F726974 
 11807      79576169 
 11808              	.LASF2:
 11809 0740 6C6F6E67 		.ascii	"long double\000"
 11809      20646F75 
 11809      626C6500 
 11810              	.LASF103:
 11811 074c 78526567 		.ascii	"xRegions\000"
 11811      696F6E73 
 11811      00
 11812              	.LASF205:
 11813 0755 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11813      6B4E6F74 
 11813      69667947 
 11813      69766546 
 11813      726F6D49 
 11814              	.LASF214:
 11815 076c 7850656E 		.ascii	"xPendingReadyList\000"
 11815      64696E67 
 11815      52656164 
 11815      794C6973 
 11815      7400
 11816              	.LASF115:
 11817 077e 78546173 		.ascii	"xTaskCreate\000"
 11817      6B437265 
 11817      61746500 
 11818              	.LASF160:
 11819 078a 78546173 		.ascii	"xTaskToSuspend\000"
 11819      6B546F53 
 11819      75737065 
 11819      6E6400
 11820              	.LASF178:
 11821 0799 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11821      6B476574 
 11821      43757272 
 11821      656E7454 
 11821      61736B48 
 11822              	.LASF97:
 11823 07b3 70785461 		.ascii	"pxTaskCode\000"
 11823      736B436F 
 11823      646500
 11824              	.LASF242:
 11825 07be 78506F72 		.ascii	"xPortStartScheduler\000"
 11825      74537461 
 11825      72745363 
 11825      68656475 
 11825      6C657200 
 11826              	.LASF82:
 11827 07d2 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11827      72745261 
 11827      69736542 
 11827      41534550 
 11827      524900
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 322


 11828              	.LASF46:
 11829 07e5 78457665 		.ascii	"xEventListItem\000"
 11829      6E744C69 
 11829      73744974 
 11829      656D00
 11830              	.LASF93:
 11831 07f4 756C436F 		.ascii	"ulCount\000"
 11831      756E7400 
 11832              	.LASF64:
 11833 07fc 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11833      56616C75 
 11833      65576974 
 11833      684F7665 
 11833      72777269 
 11834              	.LASF243:
 11835 0813 76506F72 		.ascii	"vPortEndScheduler\000"
 11835      74456E64 
 11835      53636865 
 11835      64756C65 
 11835      7200
 11836              	.LASF155:
 11837 0825 78546963 		.ascii	"xTicksToCatchUp\000"
 11837      6B73546F 
 11837      43617463 
 11837      68557000 
 11838              	.LASF220:
 11839 0835 7578546F 		.ascii	"uxTopReadyPriority\000"
 11839      70526561 
 11839      64795072 
 11839      696F7269 
 11839      747900
 11840              	.LASF149:
 11841 0848 70785072 		.ascii	"pxPreviousWakeTime\000"
 11841      6576696F 
 11841      75735761 
 11841      6B655469 
 11841      6D6500
 11842              	.LASF73:
 11843 085b 756C4C65 		.ascii	"ulLengthInBytes\000"
 11843      6E677468 
 11843      496E4279 
 11843      74657300 
 11844              	.LASF80:
 11845 086b 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11845      74536574 
 11845      42415345 
 11845      50524900 
 11846              	.LASF38:
 11847 087b 4C697374 		.ascii	"ListItem_t\000"
 11847      4974656D 
 11847      5F7400
 11848              	.LASF183:
 11849 0886 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11849      6B507269 
 11849      6F726974 
 11849      79446973 
 11849      696E6865 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 323


 11850              	.LASF157:
 11851 08aa 7578546F 		.ascii	"uxTopPriority\000"
 11851      70507269 
 11851      6F726974 
 11851      7900
 11852              	.LASF196:
 11853 08b8 70756C4E 		.ascii	"pulNotificationValue\000"
 11853      6F746966 
 11853      69636174 
 11853      696F6E56 
 11853      616C7565 
 11854              	.LASF30:
 11855 08cd 70785072 		.ascii	"pxPrevious\000"
 11855      6576696F 
 11855      757300
 11856              	.LASF114:
 11857 08d8 78546173 		.ascii	"xTaskToDelete\000"
 11857      6B546F44 
 11857      656C6574 
 11857      6500
 11858              	.LASF127:
 11859 08e6 75784E65 		.ascii	"uxNewPriority\000"
 11859      77507269 
 11859      6F726974 
 11859      7900
 11860              	.LASF21:
 11861 08f4 666C6F61 		.ascii	"float\000"
 11861      7400
 11862              	.LASF147:
 11863 08fa 7850656E 		.ascii	"xPendedCounts\000"
 11863      64656443 
 11863      6F756E74 
 11863      7300
 11864              	.LASF36:
 11865 0908 7078496E 		.ascii	"pxIndex\000"
 11865      64657800 
 11866              	.LASF32:
 11867 0910 7076436F 		.ascii	"pvContainer\000"
 11867      6E746169 
 11867      6E657200 
 11868              	.LASF58:
 11869 091c 6544656C 		.ascii	"eDeleted\000"
 11869      65746564 
 11869      00
 11870              	.LASF116:
 11871 0925 65546173 		.ascii	"eTaskGetState\000"
 11871      6B476574 
 11871      53746174 
 11871      6500
 11872              	.LASF71:
 11873 0933 784D454D 		.ascii	"xMEMORY_REGION\000"
 11873      4F52595F 
 11873      52454749 
 11873      4F4E00
 11874              	.LASF148:
 11875 0942 76546173 		.ascii	"vTaskDelayUntil\000"
 11875      6B44656C 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 324


 11875      6179556E 
 11875      74696C00 
 11876              	.LASF90:
 11877 0952 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11877      61736B43 
 11877      6865636B 
 11877      46726565 
 11877      53746163 
 11878              	.LASF19:
 11879 096d 696E7433 		.ascii	"int32_t\000"
 11879      325F7400 
 11880              	.LASF6:
 11881 0975 756E7369 		.ascii	"unsigned char\000"
 11881      676E6564 
 11881      20636861 
 11881      7200
 11882              	.LASF52:
 11883 0983 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11883      74696669 
 11883      65645661 
 11883      6C756500 
 11884              	.LASF128:
 11885 0993 75784375 		.ascii	"uxCurrentBasePriority\000"
 11885      7272656E 
 11885      74426173 
 11885      65507269 
 11885      6F726974 
 11886              	.LASF77:
 11887 09a9 5443425F 		.ascii	"TCB_t\000"
 11887      7400
 11888              	.LASF165:
 11889 09af 7078556E 		.ascii	"pxUnblockedTCB\000"
 11889      626C6F63 
 11889      6B656454 
 11889      434200
 11890              	.LASF85:
 11891 09be 756C4269 		.ascii	"ulBitmap\000"
 11891      746D6170 
 11891      00
 11892              	.LASF120:
 11893 09c7 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 11893      6572666C 
 11893      6F776564 
 11893      44656C61 
 11893      7965644C 
 11894              	.LASF221:
 11895 09df 78536368 		.ascii	"xSchedulerRunning\000"
 11895      6564756C 
 11895      65725275 
 11895      6E6E696E 
 11895      6700
 11896              	.LASF136:
 11897 09f1 76546173 		.ascii	"vTaskEndScheduler\000"
 11897      6B456E64 
 11897      53636865 
 11897      64756C65 
 11897      7200
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 325


 11898              	.LASF132:
 11899 0a03 78546173 		.ascii	"xTaskToResume\000"
 11899      6B546F52 
 11899      6573756D 
 11899      6500
 11900              	.LASF145:
 11901 0a11 78546173 		.ascii	"xTaskResumeAll\000"
 11901      6B526573 
 11901      756D6541 
 11901      6C6C00
 11902              	.LASF23:
 11903 0a20 5461736B 		.ascii	"TaskFunction_t\000"
 11903      46756E63 
 11903      74696F6E 
 11903      5F7400
 11904              	.LASF34:
 11905 0a2f 784C4953 		.ascii	"xLIST\000"
 11905      5400
 11906              	.LASF123:
 11907 0a35 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11907      736B5072 
 11907      696F7269 
 11907      74794765 
 11907      7446726F 
 11908              	.LASF244:
 11909 0a4e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11909      43313120 
 11909      352E342E 
 11909      31203230 
 11909      31363036 
 11910 0a81 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 11910      20726576 
 11910      6973696F 
 11910      6E203233 
 11910      37373135 
 11911 0ab4 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11911      66756E63 
 11911      74696F6E 
 11911      2D736563 
 11911      74696F6E 
 11912              	.LASF50:
 11913 0adc 75784261 		.ascii	"uxBasePriority\000"
 11913      73655072 
 11913      696F7269 
 11913      747900
 11914              	.LASF186:
 11915 0aeb 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11915      6C794F6E 
 11915      654D7574 
 11915      65784865 
 11915      6C6400
 11916              	.LASF96:
 11917 0afe 70727649 		.ascii	"prvInitialiseNewTask\000"
 11917      6E697469 
 11917      616C6973 
 11917      654E6577 
 11917      5461736B 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 326


 11918              	.LASF231:
 11919 0b13 76506F72 		.ascii	"vPortFree\000"
 11919      74467265 
 11919      6500
 11920              	.LASF134:
 11921 0b1d 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11921      76656449 
 11921      6E746572 
 11921      72757074 
 11921      53746174 
 11922              	.LASF151:
 11923 0b34 7853686F 		.ascii	"xShouldDelay\000"
 11923      756C6444 
 11923      656C6179 
 11923      00
 11924              	.LASF54:
 11925 0b41 6552756E 		.ascii	"eRunning\000"
 11925      6E696E67 
 11925      00
 11926              	.LASF106:
 11927 0b4a 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11927      6865636B 
 11927      5461736B 
 11927      73576169 
 11927      74696E67 
 11928              	.LASF91:
 11929 0b6a 78546173 		.ascii	"xTask\000"
 11929      6B00
 11930              	.LASF74:
 11931 0b70 756C5061 		.ascii	"ulParameters\000"
 11931      72616D65 
 11931      74657273 
 11931      00
 11932              	.LASF240:
 11933 0b7d 764C6973 		.ascii	"vListInsert\000"
 11933      74496E73 
 11933      65727400 
 11934              	.LASF174:
 11935 0b89 76546173 		.ascii	"vTaskSuspendAll\000"
 11935      6B537573 
 11935      70656E64 
 11935      416C6C00 
 11936              	.LASF51:
 11937 0b99 75784D75 		.ascii	"uxMutexesHeld\000"
 11937      74657865 
 11937      7348656C 
 11937      6400
 11938              	.LASF84:
 11939 0ba7 756C4E65 		.ascii	"ulNewMaskValue\000"
 11939      774D6173 
 11939      6B56616C 
 11939      756500
 11940              	.LASF108:
 11941 0bb6 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11941      64644375 
 11941      7272656E 
 11941      74546173 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 327


 11941      6B546F44 
 11942              	.LASF16:
 11943 0bd5 63686172 		.ascii	"char\000"
 11943      00
 11944              	.LASF140:
 11945 0bda 70635461 		.ascii	"pcTaskGetName\000"
 11945      736B4765 
 11945      744E616D 
 11945      6500
 11946              	.LASF238:
 11947 0be8 76506F72 		.ascii	"vPortExitCritical\000"
 11947      74457869 
 11947      74437269 
 11947      74696361 
 11947      6C00
 11948              	.LASF164:
 11949 0bfa 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11949      6B52656D 
 11949      6F766546 
 11949      726F6D45 
 11949      76656E74 
 11950              	.LASF189:
 11951 0c13 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11951      736B496E 
 11951      6372656D 
 11951      656E744D 
 11951      75746578 
 11952              	.LASF0:
 11953 0c31 756E7369 		.ascii	"unsigned int\000"
 11953      676E6564 
 11953      20696E74 
 11953      00
 11954              	.LASF216:
 11955 0c3e 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11955      6C657465 
 11955      64546173 
 11955      6B735761 
 11955      6974696E 
 11956              	.LASF125:
 11957 0c5b 76546173 		.ascii	"vTaskDelete\000"
 11957      6B44656C 
 11957      65746500 
 11958              	.LASF124:
 11959 0c67 75785361 		.ascii	"uxSavedInterruptState\000"
 11959      76656449 
 11959      6E746572 
 11959      72757074 
 11959      53746174 
 11960              	.LASF10:
 11961 0c7d 5F5F696E 		.ascii	"__int32_t\000"
 11961      7433325F 
 11961      7400
 11962              	.LASF171:
 11963 0c87 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11963      6B436865 
 11963      636B466F 
 11963      7254696D 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 328


 11963      654F7574 
 11964              	.LASF239:
 11965 0c9c 75784C69 		.ascii	"uxListRemove\000"
 11965      73745265 
 11965      6D6F7665 
 11965      00
 11966              	.LASF167:
 11967 0ca9 70784576 		.ascii	"pxEventListItem\000"
 11967      656E744C 
 11967      69737449 
 11967      74656D00 
 11968              	.LASF225:
 11969 0cb9 75785461 		.ascii	"uxTaskNumber\000"
 11969      736B4E75 
 11969      6D626572 
 11969      00
 11970              	.LASF144:
 11971 0cc6 70785465 		.ascii	"pxTemp\000"
 11971      6D7000
 11972              	.LASF179:
 11973 0ccd 78546173 		.ascii	"xTaskPriorityInherit\000"
 11973      6B507269 
 11973      6F726974 
 11973      79496E68 
 11973      65726974 
 11974              	.LASF227:
 11975 0ce2 7849646C 		.ascii	"xIdleTaskHandle\000"
 11975      65546173 
 11975      6B48616E 
 11975      646C6500 
 11976              	.LASF33:
 11977 0cf2 784C4953 		.ascii	"xLIST_ITEM\000"
 11977      545F4954 
 11977      454D00
 11978              	.LASF209:
 11979 0cfd 70785265 		.ascii	"pxReadyTasksLists\000"
 11979      61647954 
 11979      61736B73 
 11979      4C697374 
 11979      7300
 11980              	.LASF188:
 11981 0d0f 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11981      736B4765 
 11981      744E756D 
 11981      6265724F 
 11981      66546173 
 11982              	.LASF236:
 11983 0d26 76506F72 		.ascii	"vPortEnterCritical\000"
 11983      74456E74 
 11983      65724372 
 11983      69746963 
 11983      616C00
 11984              	.LASF210:
 11985 0d39 7844656C 		.ascii	"xDelayedTaskList1\000"
 11985      61796564 
 11985      5461736B 
 11985      4C697374 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 329


 11985      3100
 11986              	.LASF211:
 11987 0d4b 7844656C 		.ascii	"xDelayedTaskList2\000"
 11987      61796564 
 11987      5461736B 
 11987      4C697374 
 11987      3200
 11988              	.LASF224:
 11989 0d5d 784E756D 		.ascii	"xNumOfOverflows\000"
 11989      4F664F76 
 11989      6572666C 
 11989      6F777300 
 11990              	.LASF197:
 11991 0d6d 78546173 		.ascii	"xTaskGenericNotify\000"
 11991      6B47656E 
 11991      65726963 
 11991      4E6F7469 
 11991      667900
 11992              	.LASF219:
 11993 0d80 78546963 		.ascii	"xTickCount\000"
 11993      6B436F75 
 11993      6E7400
 11994              	.LASF170:
 11995 0d8b 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11995      6B496E74 
 11995      65726E61 
 11995      6C536574 
 11995      54696D65 
 11996              	.LASF31:
 11997 0da8 70764F77 		.ascii	"pvOwner\000"
 11997      6E657200 
 11998              	.LASF28:
 11999 0db0 78497465 		.ascii	"xItemValue\000"
 11999      6D56616C 
 11999      756500
 12000              	.LASF232:
 12001 0dbb 6D656D73 		.ascii	"memset\000"
 12001      657400
 12002              	.LASF83:
 12003 0dc2 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 12003      7274436F 
 12003      756E744C 
 12003      65616469 
 12003      6E675A65 
 12004              	.LASF153:
 12005 0dda 78546963 		.ascii	"xTicksToDelay\000"
 12005      6B73546F 
 12005      44656C61 
 12005      7900
 12006              	.LASF234:
 12007 0de8 7078506F 		.ascii	"pxPortInitialiseStack\000"
 12007      7274496E 
 12007      69746961 
 12007      6C697365 
 12007      53746163 
 12008              	.LASF150:
 12009 0dfe 7854696D 		.ascii	"xTimeIncrement\000"
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 330


 12009      65496E63 
 12009      72656D65 
 12009      6E7400
 12010              	.LASF65:
 12011 0e0d 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 12011      56616C75 
 12011      65576974 
 12011      686F7574 
 12011      4F766572 
 12012              	.LASF59:
 12013 0e27 65496E76 		.ascii	"eInvalid\000"
 12013      616C6964 
 12013      00
 12014              	.LASF49:
 12015 0e30 70635461 		.ascii	"pcTaskName\000"
 12015      736B4E61 
 12015      6D6500
 12016              	.LASF17:
 12017 0e3b 75696E74 		.ascii	"uint8_t\000"
 12017      385F7400 
 12018              	.LASF172:
 12019 0e43 70785469 		.ascii	"pxTicksToWait\000"
 12019      636B7354 
 12019      6F576169 
 12019      7400
 12020              	.LASF89:
 12021 0e51 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 12021      61736B49 
 12021      73546173 
 12021      6B537573 
 12021      70656E64 
 12022              	.LASF61:
 12023 0e68 654E6F41 		.ascii	"eNoAction\000"
 12023      6374696F 
 12023      6E00
 12024              	.LASF29:
 12025 0e72 70784E65 		.ascii	"pxNext\000"
 12025      787400
 12026              	.LASF60:
 12027 0e79 65546173 		.ascii	"eTaskState\000"
 12027      6B537461 
 12027      746500
 12028              	.LASF235:
 12029 0e84 764C6973 		.ascii	"vListInitialise\000"
 12029      74496E69 
 12029      7469616C 
 12029      69736500 
 12030              	.LASF66:
 12031 0e94 654E6F74 		.ascii	"eNotifyAction\000"
 12031      69667941 
 12031      6374696F 
 12031      6E00
 12032              	.LASF193:
 12033 0ea2 78546173 		.ascii	"xTaskNotifyWait\000"
 12033      6B4E6F74 
 12033      69667957 
 12033      61697400 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 331


 12034              	.LASF192:
 12035 0eb2 756C5265 		.ascii	"ulReturn\000"
 12035      7475726E 
 12035      00
 12036              	.LASF69:
 12037 0ebb 7854696D 		.ascii	"xTimeOnEntering\000"
 12037      654F6E45 
 12037      6E746572 
 12037      696E6700 
 12038              	.LASF190:
 12039 0ecb 756C5461 		.ascii	"ulTaskNotifyTake\000"
 12039      736B4E6F 
 12039      74696679 
 12039      54616B65 
 12039      00
 12040              	.LASF182:
 12041 0edc 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 12041      6B507269 
 12041      6F726974 
 12041      79446973 
 12041      696E6865 
 12042              	.LASF47:
 12043 0ef4 75785072 		.ascii	"uxPriority\000"
 12043      696F7269 
 12043      747900
 12044              	.LASF176:
 12045 0eff 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 12045      736B4765 
 12045      74537461 
 12045      636B4869 
 12045      67685761 
 12046              	.LASF185:
 12047 0f1b 75785072 		.ascii	"uxPriorityToUse\000"
 12047      696F7269 
 12047      7479546F 
 12047      55736500 
 12048              	.LASF98:
 12049 0f2b 70634E61 		.ascii	"pcName\000"
 12049      6D6500
 12050              	.LASF121:
 12051 0f32 75785461 		.ascii	"uxTaskPriorityGet\000"
 12051      736B5072 
 12051      696F7269 
 12051      74794765 
 12051      7400
 12052              	.LASF168:
 12053 0f44 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12053      6B536574 
 12053      54696D65 
 12053      4F757453 
 12053      74617465 
 12054              	.LASF195:
 12055 0f59 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 12055      7473546F 
 12055      436C6561 
 12055      724F6E45 
 12055      78697400 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\cc3bJNCi.s 			page 332


 12056              	.LASF26:
 12057 0f6d 55426173 		.ascii	"UBaseType_t\000"
 12057      65547970 
 12057      655F7400 
 12058              	.LASF22:
 12059 0f79 646F7562 		.ascii	"double\000"
 12059      6C6500
 12060              	.LASF20:
 12061 0f80 75696E74 		.ascii	"uint32_t\000"
 12061      33325F74 
 12061      00
 12062              	.LASF166:
 12063 0f89 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 12063      6B52656D 
 12063      6F766546 
 12063      726F6D55 
 12063      6E6F7264 
 12064              	.LASF72:
 12065 0fab 70764261 		.ascii	"pvBaseAddress\000"
 12065      73654164 
 12065      64726573 
 12065      7300
 12066              	.LASF104:
 12067 0fb9 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12067      6E697469 
 12067      616C6973 
 12067      65546173 
 12067      6B4C6973 
 12068              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
