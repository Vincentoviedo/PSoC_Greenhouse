ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvGetDisinheritPriorityAfterTimeout, %function
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB88:
  26              		.file 1 "..\\..\\FreeRTOS\\queue.c"
   1:..\..\FreeRTOS/queue.c **** /*
   2:..\..\FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.3.1
   3:..\..\FreeRTOS/queue.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS/queue.c ****  *
   5:..\..\FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS/queue.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS/queue.c ****  *
  12:..\..\FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS/queue.c ****  *
  15:..\..\FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS/queue.c ****  *
  22:..\..\FreeRTOS/queue.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS/queue.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS/queue.c ****  *
  25:..\..\FreeRTOS/queue.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS/queue.c ****  */
  27:..\..\FreeRTOS/queue.c **** 
  28:..\..\FreeRTOS/queue.c **** #include <stdlib.h>
  29:..\..\FreeRTOS/queue.c **** #include <string.h>
  30:..\..\FreeRTOS/queue.c **** 
  31:..\..\FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 2


  32:..\..\FreeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:..\..\FreeRTOS/queue.c **** task.h is included from an application file. */
  34:..\..\FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\..\FreeRTOS/queue.c **** 
  36:..\..\FreeRTOS/queue.c **** #include "FreeRTOS.h"
  37:..\..\FreeRTOS/queue.c **** #include "task.h"
  38:..\..\FreeRTOS/queue.c **** #include "queue.h"
  39:..\..\FreeRTOS/queue.c **** 
  40:..\..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:..\..\FreeRTOS/queue.c **** 	#include "croutine.h"
  42:..\..\FreeRTOS/queue.c **** #endif
  43:..\..\FreeRTOS/queue.c **** 
  44:..\..\FreeRTOS/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:..\..\FreeRTOS/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:..\..\FreeRTOS/queue.c **** for the header files above, but not in this file, in order to generate the
  47:..\..\FreeRTOS/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:..\..\FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:..\..\FreeRTOS/queue.c **** 
  50:..\..\FreeRTOS/queue.c **** 
  51:..\..\FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:..\..\FreeRTOS/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:..\..\FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:..\..\FreeRTOS/queue.c **** 
  55:..\..\FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:..\..\FreeRTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:..\..\FreeRTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:..\..\FreeRTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:..\..\FreeRTOS/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:..\..\FreeRTOS/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:..\..\FreeRTOS/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:..\..\FreeRTOS/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:..\..\FreeRTOS/queue.c **** being used for. */
  64:..\..\FreeRTOS/queue.c **** #define uxQueueType						pcHead
  65:..\..\FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:..\..\FreeRTOS/queue.c **** 
  67:..\..\FreeRTOS/queue.c **** typedef struct QueuePointers
  68:..\..\FreeRTOS/queue.c **** {
  69:..\..\FreeRTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:..\..\FreeRTOS/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:..\..\FreeRTOS/queue.c **** } QueuePointers_t;
  72:..\..\FreeRTOS/queue.c **** 
  73:..\..\FreeRTOS/queue.c **** typedef struct SemaphoreData
  74:..\..\FreeRTOS/queue.c **** {
  75:..\..\FreeRTOS/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:..\..\FreeRTOS/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:..\..\FreeRTOS/queue.c **** } SemaphoreData_t;
  78:..\..\FreeRTOS/queue.c **** 
  79:..\..\FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:..\..\FreeRTOS/queue.c **** zero. */
  81:..\..\FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:..\..\FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:..\..\FreeRTOS/queue.c **** 
  84:..\..\FreeRTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:..\..\FreeRTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:..\..\FreeRTOS/queue.c **** 	performed just because a higher priority task has been woken. */
  87:..\..\FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:..\..\FreeRTOS/queue.c **** #else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 3


  89:..\..\FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:..\..\FreeRTOS/queue.c **** #endif
  91:..\..\FreeRTOS/queue.c **** 
  92:..\..\FreeRTOS/queue.c **** /*
  93:..\..\FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  94:..\..\FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:..\..\FreeRTOS/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:..\..\FreeRTOS/queue.c ****  */
  97:..\..\FreeRTOS/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:..\..\FreeRTOS/queue.c **** {
  99:..\..\FreeRTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:..\..\FreeRTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:..\..\FreeRTOS/queue.c **** 
 102:..\..\FreeRTOS/queue.c **** 	union
 103:..\..\FreeRTOS/queue.c **** 	{
 104:..\..\FreeRTOS/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:..\..\FreeRTOS/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:..\..\FreeRTOS/queue.c **** 	} u;
 107:..\..\FreeRTOS/queue.c **** 
 108:..\..\FreeRTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:..\..\FreeRTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:..\..\FreeRTOS/queue.c **** 
 111:..\..\FreeRTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:..\..\FreeRTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:..\..\FreeRTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:..\..\FreeRTOS/queue.c **** 
 115:..\..\FreeRTOS/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:..\..\FreeRTOS/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:..\..\FreeRTOS/queue.c **** 
 118:..\..\FreeRTOS/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:..\..\FreeRTOS/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:..\..\FreeRTOS/queue.c **** 	#endif
 121:..\..\FreeRTOS/queue.c **** 
 122:..\..\FreeRTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:..\..\FreeRTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:..\..\FreeRTOS/queue.c **** 	#endif
 125:..\..\FreeRTOS/queue.c **** 
 126:..\..\FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:..\..\FreeRTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 128:..\..\FreeRTOS/queue.c **** 		uint8_t ucQueueType;
 129:..\..\FreeRTOS/queue.c **** 	#endif
 130:..\..\FreeRTOS/queue.c **** 
 131:..\..\FreeRTOS/queue.c **** } xQUEUE;
 132:..\..\FreeRTOS/queue.c **** 
 133:..\..\FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:..\..\FreeRTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:..\..\FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 136:..\..\FreeRTOS/queue.c **** 
 137:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 138:..\..\FreeRTOS/queue.c **** 
 139:..\..\FreeRTOS/queue.c **** /*
 140:..\..\FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:..\..\FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:..\..\FreeRTOS/queue.c ****  */
 143:..\..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:..\..\FreeRTOS/queue.c **** 
 145:..\..\FreeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 4


 146:..\..\FreeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:..\..\FreeRTOS/queue.c **** 	more user friendly. */
 148:..\..\FreeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:..\..\FreeRTOS/queue.c **** 	{
 150:..\..\FreeRTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:..\..\FreeRTOS/queue.c **** 		QueueHandle_t xHandle;
 152:..\..\FreeRTOS/queue.c **** 	} xQueueRegistryItem;
 153:..\..\FreeRTOS/queue.c **** 
 154:..\..\FreeRTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:..\..\FreeRTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:..\..\FreeRTOS/queue.c **** 	debuggers. */
 157:..\..\FreeRTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:..\..\FreeRTOS/queue.c **** 
 159:..\..\FreeRTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:..\..\FreeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:..\..\FreeRTOS/queue.c **** 	array position being vacant. */
 162:..\..\FreeRTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:..\..\FreeRTOS/queue.c **** 
 164:..\..\FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:..\..\FreeRTOS/queue.c **** 
 166:..\..\FreeRTOS/queue.c **** /*
 167:..\..\FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:..\..\FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:..\..\FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:..\..\FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:..\..\FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:..\..\FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:..\..\FreeRTOS/queue.c ****  */
 174:..\..\FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:..\..\FreeRTOS/queue.c **** 
 176:..\..\FreeRTOS/queue.c **** /*
 177:..\..\FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:..\..\FreeRTOS/queue.c ****  *
 179:..\..\FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:..\..\FreeRTOS/queue.c ****  */
 181:..\..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:..\..\FreeRTOS/queue.c **** 
 183:..\..\FreeRTOS/queue.c **** /*
 184:..\..\FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:..\..\FreeRTOS/queue.c ****  *
 186:..\..\FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:..\..\FreeRTOS/queue.c ****  */
 188:..\..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:..\..\FreeRTOS/queue.c **** 
 190:..\..\FreeRTOS/queue.c **** /*
 191:..\..\FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:..\..\FreeRTOS/queue.c ****  * back of the queue.
 193:..\..\FreeRTOS/queue.c ****  */
 194:..\..\FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:..\..\FreeRTOS/queue.c **** 
 196:..\..\FreeRTOS/queue.c **** /*
 197:..\..\FreeRTOS/queue.c ****  * Copies an item out of a queue.
 198:..\..\FreeRTOS/queue.c ****  */
 199:..\..\FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:..\..\FreeRTOS/queue.c **** 
 201:..\..\FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:..\..\FreeRTOS/queue.c **** 	/*
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 5


 203:..\..\FreeRTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:..\..\FreeRTOS/queue.c **** 	 * the queue set that the queue contains data.
 205:..\..\FreeRTOS/queue.c **** 	 */
 206:..\..\FreeRTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 207:..\..\FreeRTOS/queue.c **** #endif
 208:..\..\FreeRTOS/queue.c **** 
 209:..\..\FreeRTOS/queue.c **** /*
 210:..\..\FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:..\..\FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 212:..\..\FreeRTOS/queue.c ****  */
 213:..\..\FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:..\..\FreeRTOS/queue.c **** 
 215:..\..\FreeRTOS/queue.c **** /*
 216:..\..\FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:..\..\FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:..\..\FreeRTOS/queue.c ****  * as a mutex.
 219:..\..\FreeRTOS/queue.c ****  */
 220:..\..\FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:..\..\FreeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:..\..\FreeRTOS/queue.c **** #endif
 223:..\..\FreeRTOS/queue.c **** 
 224:..\..\FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:..\..\FreeRTOS/queue.c **** 	/*
 226:..\..\FreeRTOS/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:..\..\FreeRTOS/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:..\..\FreeRTOS/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:..\..\FreeRTOS/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:..\..\FreeRTOS/queue.c **** 	 * that priority.
 231:..\..\FreeRTOS/queue.c **** 	 */
 232:..\..\FreeRTOS/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:..\..\FreeRTOS/queue.c **** #endif
 234:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 235:..\..\FreeRTOS/queue.c **** 
 236:..\..\FreeRTOS/queue.c **** /*
 237:..\..\FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:..\..\FreeRTOS/queue.c ****  * accessing the queue event lists.
 239:..\..\FreeRTOS/queue.c ****  */
 240:..\..\FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 241:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();									\
 242:..\..\FreeRTOS/queue.c **** 	{														\
 243:..\..\FreeRTOS/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:..\..\FreeRTOS/queue.c **** 		{													\
 245:..\..\FreeRTOS/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:..\..\FreeRTOS/queue.c **** 		}													\
 247:..\..\FreeRTOS/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:..\..\FreeRTOS/queue.c **** 		{													\
 249:..\..\FreeRTOS/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:..\..\FreeRTOS/queue.c **** 		}													\
 251:..\..\FreeRTOS/queue.c **** 	}														\
 252:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL()
 253:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 254:..\..\FreeRTOS/queue.c **** 
 255:..\..\FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:..\..\FreeRTOS/queue.c **** {
 257:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
 258:..\..\FreeRTOS/queue.c **** 
 259:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 6


 260:..\..\FreeRTOS/queue.c **** 
 261:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 262:..\..\FreeRTOS/queue.c **** 	{
 263:..\..\FreeRTOS/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:..\..\FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:..\..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:..\..\FreeRTOS/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:..\..\FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:..\..\FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:..\..\FreeRTOS/queue.c **** 
 270:..\..\FreeRTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 271:..\..\FreeRTOS/queue.c **** 		{
 272:..\..\FreeRTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:..\..\FreeRTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:..\..\FreeRTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:..\..\FreeRTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:..\..\FreeRTOS/queue.c **** 			it will be possible to write to it. */
 277:..\..\FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:..\..\FreeRTOS/queue.c **** 			{
 279:..\..\FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:..\..\FreeRTOS/queue.c **** 				{
 281:..\..\FreeRTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:..\..\FreeRTOS/queue.c **** 				}
 283:..\..\FreeRTOS/queue.c **** 				else
 284:..\..\FreeRTOS/queue.c **** 				{
 285:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:..\..\FreeRTOS/queue.c **** 				}
 287:..\..\FreeRTOS/queue.c **** 			}
 288:..\..\FreeRTOS/queue.c **** 			else
 289:..\..\FreeRTOS/queue.c **** 			{
 290:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:..\..\FreeRTOS/queue.c **** 			}
 292:..\..\FreeRTOS/queue.c **** 		}
 293:..\..\FreeRTOS/queue.c **** 		else
 294:..\..\FreeRTOS/queue.c **** 		{
 295:..\..\FreeRTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:..\..\FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:..\..\FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:..\..\FreeRTOS/queue.c **** 		}
 299:..\..\FreeRTOS/queue.c **** 	}
 300:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 301:..\..\FreeRTOS/queue.c **** 
 302:..\..\FreeRTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:..\..\FreeRTOS/queue.c **** 	versions. */
 304:..\..\FreeRTOS/queue.c **** 	return pdPASS;
 305:..\..\FreeRTOS/queue.c **** }
 306:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 307:..\..\FreeRTOS/queue.c **** 
 308:..\..\FreeRTOS/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:..\..\FreeRTOS/queue.c **** 
 310:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:..\..\FreeRTOS/queue.c **** 	{
 312:..\..\FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 313:..\..\FreeRTOS/queue.c **** 
 314:..\..\FreeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:..\..\FreeRTOS/queue.c **** 
 316:..\..\FreeRTOS/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 7


 317:..\..\FreeRTOS/queue.c **** 		supplied. */
 318:..\..\FreeRTOS/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:..\..\FreeRTOS/queue.c **** 
 320:..\..\FreeRTOS/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:..\..\FreeRTOS/queue.c **** 		should not be provided if the item size is 0. */
 322:..\..\FreeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:..\..\FreeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:..\..\FreeRTOS/queue.c **** 
 325:..\..\FreeRTOS/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:..\..\FreeRTOS/queue.c **** 		{
 327:..\..\FreeRTOS/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:..\..\FreeRTOS/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:..\..\FreeRTOS/queue.c **** 			the real queue and semaphore structures. */
 330:..\..\FreeRTOS/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:..\..\FreeRTOS/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:..\..\FreeRTOS/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:..\..\FreeRTOS/queue.c **** 		}
 334:..\..\FreeRTOS/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:..\..\FreeRTOS/queue.c **** 
 336:..\..\FreeRTOS/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:..\..\FreeRTOS/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:..\..\FreeRTOS/queue.c **** 		but is already set. */
 339:..\..\FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:..\..\FreeRTOS/queue.c **** 
 341:..\..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 342:..\..\FreeRTOS/queue.c **** 		{
 343:..\..\FreeRTOS/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:..\..\FreeRTOS/queue.c **** 			{
 345:..\..\FreeRTOS/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:..\..\FreeRTOS/queue.c **** 				note this queue was allocated statically in case the queue is
 347:..\..\FreeRTOS/queue.c **** 				later deleted. */
 348:..\..\FreeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:..\..\FreeRTOS/queue.c **** 			}
 350:..\..\FreeRTOS/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:..\..\FreeRTOS/queue.c **** 
 352:..\..\FreeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:..\..\FreeRTOS/queue.c **** 		}
 354:..\..\FreeRTOS/queue.c **** 		else
 355:..\..\FreeRTOS/queue.c **** 		{
 356:..\..\FreeRTOS/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:..\..\FreeRTOS/queue.c **** 		}
 359:..\..\FreeRTOS/queue.c **** 
 360:..\..\FreeRTOS/queue.c **** 		return pxNewQueue;
 361:..\..\FreeRTOS/queue.c **** 	}
 362:..\..\FreeRTOS/queue.c **** 
 363:..\..\FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 365:..\..\FreeRTOS/queue.c **** 
 366:..\..\FreeRTOS/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:..\..\FreeRTOS/queue.c **** 
 368:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:..\..\FreeRTOS/queue.c **** 	{
 370:..\..\FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 371:..\..\FreeRTOS/queue.c **** 	size_t xQueueSizeInBytes;
 372:..\..\FreeRTOS/queue.c **** 	uint8_t *pucQueueStorage;
 373:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 8


 374:..\..\FreeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:..\..\FreeRTOS/queue.c **** 
 376:..\..\FreeRTOS/queue.c **** 		/* Allocate enough space to hold the maximum number of items that
 377:..\..\FreeRTOS/queue.c **** 		can be in the queue at any time.  It is valid for uxItemSize to be
 378:..\..\FreeRTOS/queue.c **** 		zero in the case the queue is used as a semaphore. */
 379:..\..\FreeRTOS/queue.c **** 		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as th
 380:..\..\FreeRTOS/queue.c **** 
 381:..\..\FreeRTOS/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 382:..\..\FreeRTOS/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 383:..\..\FreeRTOS/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 384:..\..\FreeRTOS/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 385:..\..\FreeRTOS/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 386:..\..\FreeRTOS/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 387:..\..\FreeRTOS/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 388:..\..\FreeRTOS/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 389:..\..\FreeRTOS/queue.c **** 		two bytes). */
 390:..\..\FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 391:..\..\FreeRTOS/queue.c **** 
 392:..\..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 393:..\..\FreeRTOS/queue.c **** 		{
 394:..\..\FreeRTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 395:..\..\FreeRTOS/queue.c **** 			storage area. */
 396:..\..\FreeRTOS/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 397:..\..\FreeRTOS/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 398:..\..\FreeRTOS/queue.c **** 
 399:..\..\FreeRTOS/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 400:..\..\FreeRTOS/queue.c **** 			{
 401:..\..\FreeRTOS/queue.c **** 				/* Queues can be created either statically or dynamically, so
 402:..\..\FreeRTOS/queue.c **** 				note this task was created dynamically in case it is later
 403:..\..\FreeRTOS/queue.c **** 				deleted. */
 404:..\..\FreeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 405:..\..\FreeRTOS/queue.c **** 			}
 406:..\..\FreeRTOS/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 407:..\..\FreeRTOS/queue.c **** 
 408:..\..\FreeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 409:..\..\FreeRTOS/queue.c **** 		}
 410:..\..\FreeRTOS/queue.c **** 		else
 411:..\..\FreeRTOS/queue.c **** 		{
 412:..\..\FreeRTOS/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 413:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 414:..\..\FreeRTOS/queue.c **** 		}
 415:..\..\FreeRTOS/queue.c **** 
 416:..\..\FreeRTOS/queue.c **** 		return pxNewQueue;
 417:..\..\FreeRTOS/queue.c **** 	}
 418:..\..\FreeRTOS/queue.c **** 
 419:..\..\FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 420:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 421:..\..\FreeRTOS/queue.c **** 
 422:..\..\FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 423:..\..\FreeRTOS/queue.c **** {
 424:..\..\FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 425:..\..\FreeRTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 426:..\..\FreeRTOS/queue.c **** 	( void ) ucQueueType;
 427:..\..\FreeRTOS/queue.c **** 
 428:..\..\FreeRTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 429:..\..\FreeRTOS/queue.c **** 	{
 430:..\..\FreeRTOS/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 9


 431:..\..\FreeRTOS/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 432:..\..\FreeRTOS/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 433:..\..\FreeRTOS/queue.c **** 		value that is known to be within the memory map. */
 434:..\..\FreeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 435:..\..\FreeRTOS/queue.c **** 	}
 436:..\..\FreeRTOS/queue.c **** 	else
 437:..\..\FreeRTOS/queue.c **** 	{
 438:..\..\FreeRTOS/queue.c **** 		/* Set the head to the start of the queue storage area. */
 439:..\..\FreeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 440:..\..\FreeRTOS/queue.c **** 	}
 441:..\..\FreeRTOS/queue.c **** 
 442:..\..\FreeRTOS/queue.c **** 	/* Initialise the queue members as described where the queue type is
 443:..\..\FreeRTOS/queue.c **** 	defined. */
 444:..\..\FreeRTOS/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 445:..\..\FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 446:..\..\FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 447:..\..\FreeRTOS/queue.c **** 
 448:..\..\FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 449:..\..\FreeRTOS/queue.c **** 	{
 450:..\..\FreeRTOS/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 451:..\..\FreeRTOS/queue.c **** 	}
 452:..\..\FreeRTOS/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 453:..\..\FreeRTOS/queue.c **** 
 454:..\..\FreeRTOS/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 455:..\..\FreeRTOS/queue.c **** 	{
 456:..\..\FreeRTOS/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 457:..\..\FreeRTOS/queue.c **** 	}
 458:..\..\FreeRTOS/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 459:..\..\FreeRTOS/queue.c **** 
 460:..\..\FreeRTOS/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 461:..\..\FreeRTOS/queue.c **** }
 462:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 463:..\..\FreeRTOS/queue.c **** 
 464:..\..\FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 465:..\..\FreeRTOS/queue.c **** 
 466:..\..\FreeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 467:..\..\FreeRTOS/queue.c **** 	{
 468:..\..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 469:..\..\FreeRTOS/queue.c **** 		{
 470:..\..\FreeRTOS/queue.c **** 			/* The queue create function will set all the queue structure members
 471:..\..\FreeRTOS/queue.c **** 			correctly for a generic queue, but this function is creating a
 472:..\..\FreeRTOS/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 473:..\..\FreeRTOS/queue.c **** 			in particular the information required for priority inheritance. */
 474:..\..\FreeRTOS/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 475:..\..\FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 476:..\..\FreeRTOS/queue.c **** 
 477:..\..\FreeRTOS/queue.c **** 			/* In case this is a recursive mutex. */
 478:..\..\FreeRTOS/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 479:..\..\FreeRTOS/queue.c **** 
 480:..\..\FreeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 481:..\..\FreeRTOS/queue.c **** 
 482:..\..\FreeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 483:..\..\FreeRTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 484:..\..\FreeRTOS/queue.c **** 		}
 485:..\..\FreeRTOS/queue.c **** 		else
 486:..\..\FreeRTOS/queue.c **** 		{
 487:..\..\FreeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 10


 488:..\..\FreeRTOS/queue.c **** 		}
 489:..\..\FreeRTOS/queue.c **** 	}
 490:..\..\FreeRTOS/queue.c **** 
 491:..\..\FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 492:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 493:..\..\FreeRTOS/queue.c **** 
 494:..\..\FreeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 495:..\..\FreeRTOS/queue.c **** 
 496:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 497:..\..\FreeRTOS/queue.c **** 	{
 498:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xNewQueue;
 499:..\..\FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 500:..\..\FreeRTOS/queue.c **** 
 501:..\..\FreeRTOS/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 502:..\..\FreeRTOS/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 503:..\..\FreeRTOS/queue.c **** 
 504:..\..\FreeRTOS/queue.c **** 		return xNewQueue;
 505:..\..\FreeRTOS/queue.c **** 	}
 506:..\..\FreeRTOS/queue.c **** 
 507:..\..\FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 508:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 509:..\..\FreeRTOS/queue.c **** 
 510:..\..\FreeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 511:..\..\FreeRTOS/queue.c **** 
 512:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 513:..\..\FreeRTOS/queue.c **** 	{
 514:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xNewQueue;
 515:..\..\FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 516:..\..\FreeRTOS/queue.c **** 
 517:..\..\FreeRTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 518:..\..\FreeRTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 519:..\..\FreeRTOS/queue.c **** 		( void ) ucQueueType;
 520:..\..\FreeRTOS/queue.c **** 
 521:..\..\FreeRTOS/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 522:..\..\FreeRTOS/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 523:..\..\FreeRTOS/queue.c **** 
 524:..\..\FreeRTOS/queue.c **** 		return xNewQueue;
 525:..\..\FreeRTOS/queue.c **** 	}
 526:..\..\FreeRTOS/queue.c **** 
 527:..\..\FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 528:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 529:..\..\FreeRTOS/queue.c **** 
 530:..\..\FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 531:..\..\FreeRTOS/queue.c **** 
 532:..\..\FreeRTOS/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 533:..\..\FreeRTOS/queue.c **** 	{
 534:..\..\FreeRTOS/queue.c **** 	TaskHandle_t pxReturn;
 535:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 536:..\..\FreeRTOS/queue.c **** 
 537:..\..\FreeRTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 538:..\..\FreeRTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 539:..\..\FreeRTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 540:..\..\FreeRTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 541:..\..\FreeRTOS/queue.c **** 		following critical section exiting and the function returning. */
 542:..\..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 543:..\..\FreeRTOS/queue.c **** 		{
 544:..\..\FreeRTOS/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 11


 545:..\..\FreeRTOS/queue.c **** 			{
 546:..\..\FreeRTOS/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 547:..\..\FreeRTOS/queue.c **** 			}
 548:..\..\FreeRTOS/queue.c **** 			else
 549:..\..\FreeRTOS/queue.c **** 			{
 550:..\..\FreeRTOS/queue.c **** 				pxReturn = NULL;
 551:..\..\FreeRTOS/queue.c **** 			}
 552:..\..\FreeRTOS/queue.c **** 		}
 553:..\..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 554:..\..\FreeRTOS/queue.c **** 
 555:..\..\FreeRTOS/queue.c **** 		return pxReturn;
 556:..\..\FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 557:..\..\FreeRTOS/queue.c **** 
 558:..\..\FreeRTOS/queue.c **** #endif
 559:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 560:..\..\FreeRTOS/queue.c **** 
 561:..\..\FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 562:..\..\FreeRTOS/queue.c **** 
 563:..\..\FreeRTOS/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 564:..\..\FreeRTOS/queue.c **** 	{
 565:..\..\FreeRTOS/queue.c **** 	TaskHandle_t pxReturn;
 566:..\..\FreeRTOS/queue.c **** 
 567:..\..\FreeRTOS/queue.c **** 		configASSERT( xSemaphore );
 568:..\..\FreeRTOS/queue.c **** 
 569:..\..\FreeRTOS/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 570:..\..\FreeRTOS/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 571:..\..\FreeRTOS/queue.c **** 		not required here. */
 572:..\..\FreeRTOS/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 573:..\..\FreeRTOS/queue.c **** 		{
 574:..\..\FreeRTOS/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 575:..\..\FreeRTOS/queue.c **** 		}
 576:..\..\FreeRTOS/queue.c **** 		else
 577:..\..\FreeRTOS/queue.c **** 		{
 578:..\..\FreeRTOS/queue.c **** 			pxReturn = NULL;
 579:..\..\FreeRTOS/queue.c **** 		}
 580:..\..\FreeRTOS/queue.c **** 
 581:..\..\FreeRTOS/queue.c **** 		return pxReturn;
 582:..\..\FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 583:..\..\FreeRTOS/queue.c **** 
 584:..\..\FreeRTOS/queue.c **** #endif
 585:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 586:..\..\FreeRTOS/queue.c **** 
 587:..\..\FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 588:..\..\FreeRTOS/queue.c **** 
 589:..\..\FreeRTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 590:..\..\FreeRTOS/queue.c **** 	{
 591:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 592:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 593:..\..\FreeRTOS/queue.c **** 
 594:..\..\FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 595:..\..\FreeRTOS/queue.c **** 
 596:..\..\FreeRTOS/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 597:..\..\FreeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 598:..\..\FreeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 599:..\..\FreeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 600:..\..\FreeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 601:..\..\FreeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 12


 602:..\..\FreeRTOS/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 603:..\..\FreeRTOS/queue.c **** 		{
 604:..\..\FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 605:..\..\FreeRTOS/queue.c **** 
 606:..\..\FreeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 607:..\..\FreeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 608:..\..\FreeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 609:..\..\FreeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 610:..\..\FreeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 611:..\..\FreeRTOS/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 612:..\..\FreeRTOS/queue.c **** 
 613:..\..\FreeRTOS/queue.c **** 			/* Has the recursive call count unwound to 0? */
 614:..\..\FreeRTOS/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 615:..\..\FreeRTOS/queue.c **** 			{
 616:..\..\FreeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 617:..\..\FreeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
 618:..\..\FreeRTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 619:..\..\FreeRTOS/queue.c **** 			}
 620:..\..\FreeRTOS/queue.c **** 			else
 621:..\..\FreeRTOS/queue.c **** 			{
 622:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 623:..\..\FreeRTOS/queue.c **** 			}
 624:..\..\FreeRTOS/queue.c **** 
 625:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
 626:..\..\FreeRTOS/queue.c **** 		}
 627:..\..\FreeRTOS/queue.c **** 		else
 628:..\..\FreeRTOS/queue.c **** 		{
 629:..\..\FreeRTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 630:..\..\FreeRTOS/queue.c **** 			holder. */
 631:..\..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 632:..\..\FreeRTOS/queue.c **** 
 633:..\..\FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 634:..\..\FreeRTOS/queue.c **** 		}
 635:..\..\FreeRTOS/queue.c **** 
 636:..\..\FreeRTOS/queue.c **** 		return xReturn;
 637:..\..\FreeRTOS/queue.c **** 	}
 638:..\..\FreeRTOS/queue.c **** 
 639:..\..\FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 640:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 641:..\..\FreeRTOS/queue.c **** 
 642:..\..\FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 643:..\..\FreeRTOS/queue.c **** 
 644:..\..\FreeRTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 645:..\..\FreeRTOS/queue.c **** 	{
 646:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 647:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 648:..\..\FreeRTOS/queue.c **** 
 649:..\..\FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 650:..\..\FreeRTOS/queue.c **** 
 651:..\..\FreeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 652:..\..\FreeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 653:..\..\FreeRTOS/queue.c **** 
 654:..\..\FreeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 655:..\..\FreeRTOS/queue.c **** 
 656:..\..\FreeRTOS/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 657:..\..\FreeRTOS/queue.c **** 		{
 658:..\..\FreeRTOS/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 13


 659:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
 660:..\..\FreeRTOS/queue.c **** 		}
 661:..\..\FreeRTOS/queue.c **** 		else
 662:..\..\FreeRTOS/queue.c **** 		{
 663:..\..\FreeRTOS/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 664:..\..\FreeRTOS/queue.c **** 
 665:..\..\FreeRTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 666:..\..\FreeRTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 667:..\..\FreeRTOS/queue.c **** 			before reaching here. */
 668:..\..\FreeRTOS/queue.c **** 			if( xReturn != pdFAIL )
 669:..\..\FreeRTOS/queue.c **** 			{
 670:..\..\FreeRTOS/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 671:..\..\FreeRTOS/queue.c **** 			}
 672:..\..\FreeRTOS/queue.c **** 			else
 673:..\..\FreeRTOS/queue.c **** 			{
 674:..\..\FreeRTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 675:..\..\FreeRTOS/queue.c **** 			}
 676:..\..\FreeRTOS/queue.c **** 		}
 677:..\..\FreeRTOS/queue.c **** 
 678:..\..\FreeRTOS/queue.c **** 		return xReturn;
 679:..\..\FreeRTOS/queue.c **** 	}
 680:..\..\FreeRTOS/queue.c **** 
 681:..\..\FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 682:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 683:..\..\FreeRTOS/queue.c **** 
 684:..\..\FreeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 685:..\..\FreeRTOS/queue.c **** 
 686:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 687:..\..\FreeRTOS/queue.c **** 	{
 688:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 689:..\..\FreeRTOS/queue.c **** 
 690:..\..\FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 691:..\..\FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 692:..\..\FreeRTOS/queue.c **** 
 693:..\..\FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 694:..\..\FreeRTOS/queue.c **** 
 695:..\..\FreeRTOS/queue.c **** 		if( xHandle != NULL )
 696:..\..\FreeRTOS/queue.c **** 		{
 697:..\..\FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 698:..\..\FreeRTOS/queue.c **** 
 699:..\..\FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 700:..\..\FreeRTOS/queue.c **** 		}
 701:..\..\FreeRTOS/queue.c **** 		else
 702:..\..\FreeRTOS/queue.c **** 		{
 703:..\..\FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 704:..\..\FreeRTOS/queue.c **** 		}
 705:..\..\FreeRTOS/queue.c **** 
 706:..\..\FreeRTOS/queue.c **** 		return xHandle;
 707:..\..\FreeRTOS/queue.c **** 	}
 708:..\..\FreeRTOS/queue.c **** 
 709:..\..\FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 710:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 711:..\..\FreeRTOS/queue.c **** 
 712:..\..\FreeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 713:..\..\FreeRTOS/queue.c **** 
 714:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 715:..\..\FreeRTOS/queue.c **** 	{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 14


 716:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 717:..\..\FreeRTOS/queue.c **** 
 718:..\..\FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 719:..\..\FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 720:..\..\FreeRTOS/queue.c **** 
 721:..\..\FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 722:..\..\FreeRTOS/queue.c **** 
 723:..\..\FreeRTOS/queue.c **** 		if( xHandle != NULL )
 724:..\..\FreeRTOS/queue.c **** 		{
 725:..\..\FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 726:..\..\FreeRTOS/queue.c **** 
 727:..\..\FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 728:..\..\FreeRTOS/queue.c **** 		}
 729:..\..\FreeRTOS/queue.c **** 		else
 730:..\..\FreeRTOS/queue.c **** 		{
 731:..\..\FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 732:..\..\FreeRTOS/queue.c **** 		}
 733:..\..\FreeRTOS/queue.c **** 
 734:..\..\FreeRTOS/queue.c **** 		return xHandle;
 735:..\..\FreeRTOS/queue.c **** 	}
 736:..\..\FreeRTOS/queue.c **** 
 737:..\..\FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 738:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 739:..\..\FreeRTOS/queue.c **** 
 740:..\..\FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 741:..\..\FreeRTOS/queue.c **** {
 742:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 743:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 744:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
 745:..\..\FreeRTOS/queue.c **** 
 746:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 747:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 748:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 749:..\..\FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 750:..\..\FreeRTOS/queue.c **** 	{
 751:..\..\FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 752:..\..\FreeRTOS/queue.c **** 	}
 753:..\..\FreeRTOS/queue.c **** 	#endif
 754:..\..\FreeRTOS/queue.c **** 
 755:..\..\FreeRTOS/queue.c **** 
 756:..\..\FreeRTOS/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 757:..\..\FreeRTOS/queue.c **** 	allow return statements within the function itself.  This is done in the
 758:..\..\FreeRTOS/queue.c **** 	interest of execution time efficiency. */
 759:..\..\FreeRTOS/queue.c **** 	for( ;; )
 760:..\..\FreeRTOS/queue.c **** 	{
 761:..\..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 762:..\..\FreeRTOS/queue.c **** 		{
 763:..\..\FreeRTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 764:..\..\FreeRTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 765:..\..\FreeRTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 766:..\..\FreeRTOS/queue.c **** 			queue is full. */
 767:..\..\FreeRTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 768:..\..\FreeRTOS/queue.c **** 			{
 769:..\..\FreeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 770:..\..\FreeRTOS/queue.c **** 
 771:..\..\FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 772:..\..\FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 15


 773:..\..\FreeRTOS/queue.c **** 				const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 774:..\..\FreeRTOS/queue.c **** 
 775:..\..\FreeRTOS/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 776:..\..\FreeRTOS/queue.c **** 
 777:..\..\FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 778:..\..\FreeRTOS/queue.c **** 					{
 779:..\..\FreeRTOS/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 780:..\..\FreeRTOS/queue.c **** 						{
 781:..\..\FreeRTOS/queue.c **** 							/* Do not notify the queue set as an existing item
 782:..\..\FreeRTOS/queue.c **** 							was overwritten in the queue so the number of items
 783:..\..\FreeRTOS/queue.c **** 							in the queue has not changed. */
 784:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 785:..\..\FreeRTOS/queue.c **** 						}
 786:..\..\FreeRTOS/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 787:..\..\FreeRTOS/queue.c **** 						{
 788:..\..\FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 789:..\..\FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 790:..\..\FreeRTOS/queue.c **** 							unblock. A context switch is required. */
 791:..\..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 792:..\..\FreeRTOS/queue.c **** 						}
 793:..\..\FreeRTOS/queue.c **** 						else
 794:..\..\FreeRTOS/queue.c **** 						{
 795:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 796:..\..\FreeRTOS/queue.c **** 						}
 797:..\..\FreeRTOS/queue.c **** 					}
 798:..\..\FreeRTOS/queue.c **** 					else
 799:..\..\FreeRTOS/queue.c **** 					{
 800:..\..\FreeRTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
 801:..\..\FreeRTOS/queue.c **** 						queue then unblock it now. */
 802:..\..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 803:..\..\FreeRTOS/queue.c **** 						{
 804:..\..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805:..\..\FreeRTOS/queue.c **** 							{
 806:..\..\FreeRTOS/queue.c **** 								/* The unblocked task has a priority higher than
 807:..\..\FreeRTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 808:..\..\FreeRTOS/queue.c **** 								do this from within the critical section - the
 809:..\..\FreeRTOS/queue.c **** 								kernel takes care of that. */
 810:..\..\FreeRTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 811:..\..\FreeRTOS/queue.c **** 							}
 812:..\..\FreeRTOS/queue.c **** 							else
 813:..\..\FreeRTOS/queue.c **** 							{
 814:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 815:..\..\FreeRTOS/queue.c **** 							}
 816:..\..\FreeRTOS/queue.c **** 						}
 817:..\..\FreeRTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 818:..\..\FreeRTOS/queue.c **** 						{
 819:..\..\FreeRTOS/queue.c **** 							/* This path is a special case that will only get
 820:..\..\FreeRTOS/queue.c **** 							executed if the task was holding multiple mutexes
 821:..\..\FreeRTOS/queue.c **** 							and the mutexes were given back in an order that is
 822:..\..\FreeRTOS/queue.c **** 							different to that in which they were taken. */
 823:..\..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 824:..\..\FreeRTOS/queue.c **** 						}
 825:..\..\FreeRTOS/queue.c **** 						else
 826:..\..\FreeRTOS/queue.c **** 						{
 827:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 828:..\..\FreeRTOS/queue.c **** 						}
 829:..\..\FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 16


 830:..\..\FreeRTOS/queue.c **** 				}
 831:..\..\FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 832:..\..\FreeRTOS/queue.c **** 				{
 833:..\..\FreeRTOS/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 834:..\..\FreeRTOS/queue.c **** 
 835:..\..\FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 836:..\..\FreeRTOS/queue.c **** 					queue then unblock it now. */
 837:..\..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 838:..\..\FreeRTOS/queue.c **** 					{
 839:..\..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 840:..\..\FreeRTOS/queue.c **** 						{
 841:..\..\FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 842:..\..\FreeRTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 843:..\..\FreeRTOS/queue.c **** 							this from within the critical section - the kernel
 844:..\..\FreeRTOS/queue.c **** 							takes care of that. */
 845:..\..\FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 846:..\..\FreeRTOS/queue.c **** 						}
 847:..\..\FreeRTOS/queue.c **** 						else
 848:..\..\FreeRTOS/queue.c **** 						{
 849:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 850:..\..\FreeRTOS/queue.c **** 						}
 851:..\..\FreeRTOS/queue.c **** 					}
 852:..\..\FreeRTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 853:..\..\FreeRTOS/queue.c **** 					{
 854:..\..\FreeRTOS/queue.c **** 						/* This path is a special case that will only get
 855:..\..\FreeRTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 856:..\..\FreeRTOS/queue.c **** 						the mutexes were given back in an order that is
 857:..\..\FreeRTOS/queue.c **** 						different to that in which they were taken. */
 858:..\..\FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 859:..\..\FreeRTOS/queue.c **** 					}
 860:..\..\FreeRTOS/queue.c **** 					else
 861:..\..\FreeRTOS/queue.c **** 					{
 862:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 863:..\..\FreeRTOS/queue.c **** 					}
 864:..\..\FreeRTOS/queue.c **** 				}
 865:..\..\FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 866:..\..\FreeRTOS/queue.c **** 
 867:..\..\FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 868:..\..\FreeRTOS/queue.c **** 				return pdPASS;
 869:..\..\FreeRTOS/queue.c **** 			}
 870:..\..\FreeRTOS/queue.c **** 			else
 871:..\..\FreeRTOS/queue.c **** 			{
 872:..\..\FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 873:..\..\FreeRTOS/queue.c **** 				{
 874:..\..\FreeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 875:..\..\FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 876:..\..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 877:..\..\FreeRTOS/queue.c **** 
 878:..\..\FreeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 879:..\..\FreeRTOS/queue.c **** 					the function. */
 880:..\..\FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 881:..\..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 882:..\..\FreeRTOS/queue.c **** 				}
 883:..\..\FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 884:..\..\FreeRTOS/queue.c **** 				{
 885:..\..\FreeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 886:..\..\FreeRTOS/queue.c **** 					configure the timeout structure. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 17


 887:..\..\FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 888:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 889:..\..\FreeRTOS/queue.c **** 				}
 890:..\..\FreeRTOS/queue.c **** 				else
 891:..\..\FreeRTOS/queue.c **** 				{
 892:..\..\FreeRTOS/queue.c **** 					/* Entry time was already set. */
 893:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 894:..\..\FreeRTOS/queue.c **** 				}
 895:..\..\FreeRTOS/queue.c **** 			}
 896:..\..\FreeRTOS/queue.c **** 		}
 897:..\..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 898:..\..\FreeRTOS/queue.c **** 
 899:..\..\FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 900:..\..\FreeRTOS/queue.c **** 		now the critical section has been exited. */
 901:..\..\FreeRTOS/queue.c **** 
 902:..\..\FreeRTOS/queue.c **** 		vTaskSuspendAll();
 903:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 904:..\..\FreeRTOS/queue.c **** 
 905:..\..\FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 906:..\..\FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 907:..\..\FreeRTOS/queue.c **** 		{
 908:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 909:..\..\FreeRTOS/queue.c **** 			{
 910:..\..\FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 911:..\..\FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 912:..\..\FreeRTOS/queue.c **** 
 913:..\..\FreeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 914:..\..\FreeRTOS/queue.c **** 				event list.  It is possible that interrupts occurring now
 915:..\..\FreeRTOS/queue.c **** 				remove this task from the event list again - but as the
 916:..\..\FreeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 917:..\..\FreeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 918:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 919:..\..\FreeRTOS/queue.c **** 
 920:..\..\FreeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 921:..\..\FreeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 922:..\..\FreeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 923:..\..\FreeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 924:..\..\FreeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 925:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 926:..\..\FreeRTOS/queue.c **** 				{
 927:..\..\FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 928:..\..\FreeRTOS/queue.c **** 				}
 929:..\..\FreeRTOS/queue.c **** 			}
 930:..\..\FreeRTOS/queue.c **** 			else
 931:..\..\FreeRTOS/queue.c **** 			{
 932:..\..\FreeRTOS/queue.c **** 				/* Try again. */
 933:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 934:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 935:..\..\FreeRTOS/queue.c **** 			}
 936:..\..\FreeRTOS/queue.c **** 		}
 937:..\..\FreeRTOS/queue.c **** 		else
 938:..\..\FreeRTOS/queue.c **** 		{
 939:..\..\FreeRTOS/queue.c **** 			/* The timeout has expired. */
 940:..\..\FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 941:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 942:..\..\FreeRTOS/queue.c **** 
 943:..\..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 18


 944:..\..\FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 945:..\..\FreeRTOS/queue.c **** 		}
 946:..\..\FreeRTOS/queue.c **** 	} /*lint -restore */
 947:..\..\FreeRTOS/queue.c **** }
 948:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 949:..\..\FreeRTOS/queue.c **** 
 950:..\..\FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 951:..\..\FreeRTOS/queue.c **** {
 952:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 953:..\..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 954:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
 955:..\..\FreeRTOS/queue.c **** 
 956:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 957:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 958:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 959:..\..\FreeRTOS/queue.c **** 
 960:..\..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 961:..\..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 962:..\..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 963:..\..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 964:..\..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 965:..\..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 966:..\..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 967:..\..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
 968:..\..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 969:..\..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 970:..\..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 971:..\..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 972:..\..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 973:..\..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 974:..\..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 975:..\..\FreeRTOS/queue.c **** 
 976:..\..\FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 977:..\..\FreeRTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 978:..\..\FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 979:..\..\FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 980:..\..\FreeRTOS/queue.c **** 	post). */
 981:..\..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 982:..\..\FreeRTOS/queue.c **** 	{
 983:..\..\FreeRTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 984:..\..\FreeRTOS/queue.c **** 		{
 985:..\..\FreeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 986:..\..\FreeRTOS/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 987:..\..\FreeRTOS/queue.c **** 
 988:..\..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 989:..\..\FreeRTOS/queue.c **** 
 990:..\..\FreeRTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 991:..\..\FreeRTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 992:..\..\FreeRTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 993:..\..\FreeRTOS/queue.c **** 			called here even though the disinherit function does not check if
 994:..\..\FreeRTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 995:..\..\FreeRTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 996:..\..\FreeRTOS/queue.c **** 
 997:..\..\FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 998:..\..\FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
 999:..\..\FreeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
1000:..\..\FreeRTOS/queue.c **** 			{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 19


1001:..\..\FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1002:..\..\FreeRTOS/queue.c **** 				{
1003:..\..\FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1004:..\..\FreeRTOS/queue.c **** 					{
1005:..\..\FreeRTOS/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
1006:..\..\FreeRTOS/queue.c **** 						{
1007:..\..\FreeRTOS/queue.c **** 							/* Do not notify the queue set as an existing item
1008:..\..\FreeRTOS/queue.c **** 							was overwritten in the queue so the number of items
1009:..\..\FreeRTOS/queue.c **** 							in the queue has not changed. */
1010:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1011:..\..\FreeRTOS/queue.c **** 						}
1012:..\..\FreeRTOS/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1013:..\..\FreeRTOS/queue.c **** 						{
1014:..\..\FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
1015:..\..\FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
1016:..\..\FreeRTOS/queue.c **** 							unblock.  A context switch is required. */
1017:..\..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1018:..\..\FreeRTOS/queue.c **** 							{
1019:..\..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1020:..\..\FreeRTOS/queue.c **** 							}
1021:..\..\FreeRTOS/queue.c **** 							else
1022:..\..\FreeRTOS/queue.c **** 							{
1023:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1024:..\..\FreeRTOS/queue.c **** 							}
1025:..\..\FreeRTOS/queue.c **** 						}
1026:..\..\FreeRTOS/queue.c **** 						else
1027:..\..\FreeRTOS/queue.c **** 						{
1028:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1029:..\..\FreeRTOS/queue.c **** 						}
1030:..\..\FreeRTOS/queue.c **** 					}
1031:..\..\FreeRTOS/queue.c **** 					else
1032:..\..\FreeRTOS/queue.c **** 					{
1033:..\..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1034:..\..\FreeRTOS/queue.c **** 						{
1035:..\..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1036:..\..\FreeRTOS/queue.c **** 							{
1037:..\..\FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1038:..\..\FreeRTOS/queue.c **** 								record that a context switch is required. */
1039:..\..\FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1040:..\..\FreeRTOS/queue.c **** 								{
1041:..\..\FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1042:..\..\FreeRTOS/queue.c **** 								}
1043:..\..\FreeRTOS/queue.c **** 								else
1044:..\..\FreeRTOS/queue.c **** 								{
1045:..\..\FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1046:..\..\FreeRTOS/queue.c **** 								}
1047:..\..\FreeRTOS/queue.c **** 							}
1048:..\..\FreeRTOS/queue.c **** 							else
1049:..\..\FreeRTOS/queue.c **** 							{
1050:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1051:..\..\FreeRTOS/queue.c **** 							}
1052:..\..\FreeRTOS/queue.c **** 						}
1053:..\..\FreeRTOS/queue.c **** 						else
1054:..\..\FreeRTOS/queue.c **** 						{
1055:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1056:..\..\FreeRTOS/queue.c **** 						}
1057:..\..\FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 20


1058:..\..\FreeRTOS/queue.c **** 				}
1059:..\..\FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1060:..\..\FreeRTOS/queue.c **** 				{
1061:..\..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1062:..\..\FreeRTOS/queue.c **** 					{
1063:..\..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1064:..\..\FreeRTOS/queue.c **** 						{
1065:..\..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1066:..\..\FreeRTOS/queue.c **** 							context	switch is required. */
1067:..\..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1068:..\..\FreeRTOS/queue.c **** 							{
1069:..\..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1070:..\..\FreeRTOS/queue.c **** 							}
1071:..\..\FreeRTOS/queue.c **** 							else
1072:..\..\FreeRTOS/queue.c **** 							{
1073:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1074:..\..\FreeRTOS/queue.c **** 							}
1075:..\..\FreeRTOS/queue.c **** 						}
1076:..\..\FreeRTOS/queue.c **** 						else
1077:..\..\FreeRTOS/queue.c **** 						{
1078:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1079:..\..\FreeRTOS/queue.c **** 						}
1080:..\..\FreeRTOS/queue.c **** 					}
1081:..\..\FreeRTOS/queue.c **** 					else
1082:..\..\FreeRTOS/queue.c **** 					{
1083:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1084:..\..\FreeRTOS/queue.c **** 					}
1085:..\..\FreeRTOS/queue.c **** 					
1086:..\..\FreeRTOS/queue.c **** 					/* Not used in this path. */
1087:..\..\FreeRTOS/queue.c **** 					( void ) uxPreviousMessagesWaiting;
1088:..\..\FreeRTOS/queue.c **** 				}
1089:..\..\FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1090:..\..\FreeRTOS/queue.c **** 			}
1091:..\..\FreeRTOS/queue.c **** 			else
1092:..\..\FreeRTOS/queue.c **** 			{
1093:..\..\FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1094:..\..\FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1095:..\..\FreeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1096:..\..\FreeRTOS/queue.c **** 			}
1097:..\..\FreeRTOS/queue.c **** 
1098:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1099:..\..\FreeRTOS/queue.c **** 		}
1100:..\..\FreeRTOS/queue.c **** 		else
1101:..\..\FreeRTOS/queue.c **** 		{
1102:..\..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1103:..\..\FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1104:..\..\FreeRTOS/queue.c **** 		}
1105:..\..\FreeRTOS/queue.c **** 	}
1106:..\..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1107:..\..\FreeRTOS/queue.c **** 
1108:..\..\FreeRTOS/queue.c **** 	return xReturn;
1109:..\..\FreeRTOS/queue.c **** }
1110:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1111:..\..\FreeRTOS/queue.c **** 
1112:..\..\FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1113:..\..\FreeRTOS/queue.c **** {
1114:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 21


1115:..\..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1116:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1117:..\..\FreeRTOS/queue.c **** 
1118:..\..\FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1119:..\..\FreeRTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1120:..\..\FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1121:..\..\FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1122:..\..\FreeRTOS/queue.c **** 	post). */
1123:..\..\FreeRTOS/queue.c **** 
1124:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1125:..\..\FreeRTOS/queue.c **** 
1126:..\..\FreeRTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1127:..\..\FreeRTOS/queue.c **** 	if the item size is not 0. */
1128:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1129:..\..\FreeRTOS/queue.c **** 
1130:..\..\FreeRTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1131:..\..\FreeRTOS/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1132:..\..\FreeRTOS/queue.c **** 	interrupts, only tasks. */
1133:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1134:..\..\FreeRTOS/queue.c **** 
1135:..\..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1136:..\..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1137:..\..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1138:..\..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1139:..\..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1140:..\..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1141:..\..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1142:..\..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1143:..\..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1144:..\..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1145:..\..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1146:..\..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1147:..\..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1148:..\..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1149:..\..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1150:..\..\FreeRTOS/queue.c **** 
1151:..\..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1152:..\..\FreeRTOS/queue.c **** 	{
1153:..\..\FreeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1154:..\..\FreeRTOS/queue.c **** 
1155:..\..\FreeRTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1156:..\..\FreeRTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1157:..\..\FreeRTOS/queue.c **** 		space'. */
1158:..\..\FreeRTOS/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1159:..\..\FreeRTOS/queue.c **** 		{
1160:..\..\FreeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1161:..\..\FreeRTOS/queue.c **** 
1162:..\..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1163:..\..\FreeRTOS/queue.c **** 
1164:..\..\FreeRTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1165:..\..\FreeRTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1166:..\..\FreeRTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1167:..\..\FreeRTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1168:..\..\FreeRTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1169:..\..\FreeRTOS/queue.c **** 			messages (semaphores) available. */
1170:..\..\FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1171:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 22


1172:..\..\FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1173:..\..\FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1174:..\..\FreeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
1175:..\..\FreeRTOS/queue.c **** 			{
1176:..\..\FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1177:..\..\FreeRTOS/queue.c **** 				{
1178:..\..\FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1179:..\..\FreeRTOS/queue.c **** 					{
1180:..\..\FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1181:..\..\FreeRTOS/queue.c **** 						{
1182:..\..\FreeRTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1183:..\..\FreeRTOS/queue.c **** 							posting	to the queue set caused a higher priority
1184:..\..\FreeRTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1185:..\..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1186:..\..\FreeRTOS/queue.c **** 							{
1187:..\..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1188:..\..\FreeRTOS/queue.c **** 							}
1189:..\..\FreeRTOS/queue.c **** 							else
1190:..\..\FreeRTOS/queue.c **** 							{
1191:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1192:..\..\FreeRTOS/queue.c **** 							}
1193:..\..\FreeRTOS/queue.c **** 						}
1194:..\..\FreeRTOS/queue.c **** 						else
1195:..\..\FreeRTOS/queue.c **** 						{
1196:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1197:..\..\FreeRTOS/queue.c **** 						}
1198:..\..\FreeRTOS/queue.c **** 					}
1199:..\..\FreeRTOS/queue.c **** 					else
1200:..\..\FreeRTOS/queue.c **** 					{
1201:..\..\FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1202:..\..\FreeRTOS/queue.c **** 						{
1203:..\..\FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1204:..\..\FreeRTOS/queue.c **** 							{
1205:..\..\FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1206:..\..\FreeRTOS/queue.c **** 								record that a context switch is required. */
1207:..\..\FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1208:..\..\FreeRTOS/queue.c **** 								{
1209:..\..\FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1210:..\..\FreeRTOS/queue.c **** 								}
1211:..\..\FreeRTOS/queue.c **** 								else
1212:..\..\FreeRTOS/queue.c **** 								{
1213:..\..\FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1214:..\..\FreeRTOS/queue.c **** 								}
1215:..\..\FreeRTOS/queue.c **** 							}
1216:..\..\FreeRTOS/queue.c **** 							else
1217:..\..\FreeRTOS/queue.c **** 							{
1218:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1219:..\..\FreeRTOS/queue.c **** 							}
1220:..\..\FreeRTOS/queue.c **** 						}
1221:..\..\FreeRTOS/queue.c **** 						else
1222:..\..\FreeRTOS/queue.c **** 						{
1223:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1224:..\..\FreeRTOS/queue.c **** 						}
1225:..\..\FreeRTOS/queue.c **** 					}
1226:..\..\FreeRTOS/queue.c **** 				}
1227:..\..\FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1228:..\..\FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 23


1229:..\..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1230:..\..\FreeRTOS/queue.c **** 					{
1231:..\..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1232:..\..\FreeRTOS/queue.c **** 						{
1233:..\..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1234:..\..\FreeRTOS/queue.c **** 							context	switch is required. */
1235:..\..\FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1236:..\..\FreeRTOS/queue.c **** 							{
1237:..\..\FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1238:..\..\FreeRTOS/queue.c **** 							}
1239:..\..\FreeRTOS/queue.c **** 							else
1240:..\..\FreeRTOS/queue.c **** 							{
1241:..\..\FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1242:..\..\FreeRTOS/queue.c **** 							}
1243:..\..\FreeRTOS/queue.c **** 						}
1244:..\..\FreeRTOS/queue.c **** 						else
1245:..\..\FreeRTOS/queue.c **** 						{
1246:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1247:..\..\FreeRTOS/queue.c **** 						}
1248:..\..\FreeRTOS/queue.c **** 					}
1249:..\..\FreeRTOS/queue.c **** 					else
1250:..\..\FreeRTOS/queue.c **** 					{
1251:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1252:..\..\FreeRTOS/queue.c **** 					}
1253:..\..\FreeRTOS/queue.c **** 				}
1254:..\..\FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1255:..\..\FreeRTOS/queue.c **** 			}
1256:..\..\FreeRTOS/queue.c **** 			else
1257:..\..\FreeRTOS/queue.c **** 			{
1258:..\..\FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1259:..\..\FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1260:..\..\FreeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1261:..\..\FreeRTOS/queue.c **** 			}
1262:..\..\FreeRTOS/queue.c **** 
1263:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1264:..\..\FreeRTOS/queue.c **** 		}
1265:..\..\FreeRTOS/queue.c **** 		else
1266:..\..\FreeRTOS/queue.c **** 		{
1267:..\..\FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1268:..\..\FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1269:..\..\FreeRTOS/queue.c **** 		}
1270:..\..\FreeRTOS/queue.c **** 	}
1271:..\..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1272:..\..\FreeRTOS/queue.c **** 
1273:..\..\FreeRTOS/queue.c **** 	return xReturn;
1274:..\..\FreeRTOS/queue.c **** }
1275:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1276:..\..\FreeRTOS/queue.c **** 
1277:..\..\FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1278:..\..\FreeRTOS/queue.c **** {
1279:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1280:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1281:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1282:..\..\FreeRTOS/queue.c **** 
1283:..\..\FreeRTOS/queue.c **** 	/* Check the pointer is not NULL. */
1284:..\..\FreeRTOS/queue.c **** 	configASSERT( ( pxQueue ) );
1285:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 24


1286:..\..\FreeRTOS/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1287:..\..\FreeRTOS/queue.c **** 	is zero (so no data is copied into the buffer. */
1288:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1289:..\..\FreeRTOS/queue.c **** 
1290:..\..\FreeRTOS/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1291:..\..\FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1292:..\..\FreeRTOS/queue.c **** 	{
1293:..\..\FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1294:..\..\FreeRTOS/queue.c **** 	}
1295:..\..\FreeRTOS/queue.c **** 	#endif
1296:..\..\FreeRTOS/queue.c **** 
1297:..\..\FreeRTOS/queue.c **** 
1298:..\..\FreeRTOS/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1299:..\..\FreeRTOS/queue.c **** 	allow return statements within the function itself.  This is done in the
1300:..\..\FreeRTOS/queue.c **** 	interest of execution time efficiency. */
1301:..\..\FreeRTOS/queue.c **** 	for( ;; )
1302:..\..\FreeRTOS/queue.c **** 	{
1303:..\..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1304:..\..\FreeRTOS/queue.c **** 		{
1305:..\..\FreeRTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1306:..\..\FreeRTOS/queue.c **** 
1307:..\..\FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1308:..\..\FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1309:..\..\FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1310:..\..\FreeRTOS/queue.c **** 			{
1311:..\..\FreeRTOS/queue.c **** 				/* Data available, remove one item. */
1312:..\..\FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1313:..\..\FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1314:..\..\FreeRTOS/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1315:..\..\FreeRTOS/queue.c **** 
1316:..\..\FreeRTOS/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1317:..\..\FreeRTOS/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1318:..\..\FreeRTOS/queue.c **** 				task. */
1319:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1320:..\..\FreeRTOS/queue.c **** 				{
1321:..\..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1322:..\..\FreeRTOS/queue.c **** 					{
1323:..\..\FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1324:..\..\FreeRTOS/queue.c **** 					}
1325:..\..\FreeRTOS/queue.c **** 					else
1326:..\..\FreeRTOS/queue.c **** 					{
1327:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1328:..\..\FreeRTOS/queue.c **** 					}
1329:..\..\FreeRTOS/queue.c **** 				}
1330:..\..\FreeRTOS/queue.c **** 				else
1331:..\..\FreeRTOS/queue.c **** 				{
1332:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1333:..\..\FreeRTOS/queue.c **** 				}
1334:..\..\FreeRTOS/queue.c **** 
1335:..\..\FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1336:..\..\FreeRTOS/queue.c **** 				return pdPASS;
1337:..\..\FreeRTOS/queue.c **** 			}
1338:..\..\FreeRTOS/queue.c **** 			else
1339:..\..\FreeRTOS/queue.c **** 			{
1340:..\..\FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1341:..\..\FreeRTOS/queue.c **** 				{
1342:..\..\FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 25


1343:..\..\FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1344:..\..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1345:..\..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1346:..\..\FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1347:..\..\FreeRTOS/queue.c **** 				}
1348:..\..\FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1349:..\..\FreeRTOS/queue.c **** 				{
1350:..\..\FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1351:..\..\FreeRTOS/queue.c **** 					configure the timeout structure. */
1352:..\..\FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1353:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1354:..\..\FreeRTOS/queue.c **** 				}
1355:..\..\FreeRTOS/queue.c **** 				else
1356:..\..\FreeRTOS/queue.c **** 				{
1357:..\..\FreeRTOS/queue.c **** 					/* Entry time was already set. */
1358:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1359:..\..\FreeRTOS/queue.c **** 				}
1360:..\..\FreeRTOS/queue.c **** 			}
1361:..\..\FreeRTOS/queue.c **** 		}
1362:..\..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1363:..\..\FreeRTOS/queue.c **** 
1364:..\..\FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1365:..\..\FreeRTOS/queue.c **** 		now the critical section has been exited. */
1366:..\..\FreeRTOS/queue.c **** 
1367:..\..\FreeRTOS/queue.c **** 		vTaskSuspendAll();
1368:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1369:..\..\FreeRTOS/queue.c **** 
1370:..\..\FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1371:..\..\FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1372:..\..\FreeRTOS/queue.c **** 		{
1373:..\..\FreeRTOS/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1374:..\..\FreeRTOS/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1375:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1376:..\..\FreeRTOS/queue.c **** 			{
1377:..\..\FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1378:..\..\FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1379:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1380:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1381:..\..\FreeRTOS/queue.c **** 				{
1382:..\..\FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1383:..\..\FreeRTOS/queue.c **** 				}
1384:..\..\FreeRTOS/queue.c **** 				else
1385:..\..\FreeRTOS/queue.c **** 				{
1386:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1387:..\..\FreeRTOS/queue.c **** 				}
1388:..\..\FreeRTOS/queue.c **** 			}
1389:..\..\FreeRTOS/queue.c **** 			else
1390:..\..\FreeRTOS/queue.c **** 			{
1391:..\..\FreeRTOS/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1392:..\..\FreeRTOS/queue.c **** 				data. */
1393:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1394:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1395:..\..\FreeRTOS/queue.c **** 			}
1396:..\..\FreeRTOS/queue.c **** 		}
1397:..\..\FreeRTOS/queue.c **** 		else
1398:..\..\FreeRTOS/queue.c **** 		{
1399:..\..\FreeRTOS/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 26


1400:..\..\FreeRTOS/queue.c **** 			back and attempt to read the data. */
1401:..\..\FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1402:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1403:..\..\FreeRTOS/queue.c **** 
1404:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1405:..\..\FreeRTOS/queue.c **** 			{
1406:..\..\FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1407:..\..\FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1408:..\..\FreeRTOS/queue.c **** 			}
1409:..\..\FreeRTOS/queue.c **** 			else
1410:..\..\FreeRTOS/queue.c **** 			{
1411:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1412:..\..\FreeRTOS/queue.c **** 			}
1413:..\..\FreeRTOS/queue.c **** 		}
1414:..\..\FreeRTOS/queue.c **** 	} /*lint -restore */
1415:..\..\FreeRTOS/queue.c **** }
1416:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1417:..\..\FreeRTOS/queue.c **** 
1418:..\..\FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1419:..\..\FreeRTOS/queue.c **** {
1420:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1421:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1422:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1423:..\..\FreeRTOS/queue.c **** 
1424:..\..\FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
1425:..\..\FreeRTOS/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1426:..\..\FreeRTOS/queue.c **** #endif
1427:..\..\FreeRTOS/queue.c **** 
1428:..\..\FreeRTOS/queue.c **** 	/* Check the queue pointer is not NULL. */
1429:..\..\FreeRTOS/queue.c **** 	configASSERT( ( pxQueue ) );
1430:..\..\FreeRTOS/queue.c **** 
1431:..\..\FreeRTOS/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1432:..\..\FreeRTOS/queue.c **** 	0. */
1433:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1434:..\..\FreeRTOS/queue.c **** 
1435:..\..\FreeRTOS/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1436:..\..\FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1437:..\..\FreeRTOS/queue.c **** 	{
1438:..\..\FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1439:..\..\FreeRTOS/queue.c **** 	}
1440:..\..\FreeRTOS/queue.c **** 	#endif
1441:..\..\FreeRTOS/queue.c **** 
1442:..\..\FreeRTOS/queue.c **** 
1443:..\..\FreeRTOS/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1444:..\..\FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1445:..\..\FreeRTOS/queue.c **** 	of execution time efficiency. */
1446:..\..\FreeRTOS/queue.c **** 	for( ;; )
1447:..\..\FreeRTOS/queue.c **** 	{
1448:..\..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1449:..\..\FreeRTOS/queue.c **** 		{
1450:..\..\FreeRTOS/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1451:..\..\FreeRTOS/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1452:..\..\FreeRTOS/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1453:..\..\FreeRTOS/queue.c **** 
1454:..\..\FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1455:..\..\FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1456:..\..\FreeRTOS/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 27


1457:..\..\FreeRTOS/queue.c **** 			{
1458:..\..\FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1459:..\..\FreeRTOS/queue.c **** 
1460:..\..\FreeRTOS/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1461:..\..\FreeRTOS/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1462:..\..\FreeRTOS/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1463:..\..\FreeRTOS/queue.c **** 
1464:..\..\FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1465:..\..\FreeRTOS/queue.c **** 				{
1466:..\..\FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1467:..\..\FreeRTOS/queue.c **** 					{
1468:..\..\FreeRTOS/queue.c **** 						/* Record the information required to implement
1469:..\..\FreeRTOS/queue.c **** 						priority inheritance should it become necessary. */
1470:..\..\FreeRTOS/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1471:..\..\FreeRTOS/queue.c **** 					}
1472:..\..\FreeRTOS/queue.c **** 					else
1473:..\..\FreeRTOS/queue.c **** 					{
1474:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1475:..\..\FreeRTOS/queue.c **** 					}
1476:..\..\FreeRTOS/queue.c **** 				}
1477:..\..\FreeRTOS/queue.c **** 				#endif /* configUSE_MUTEXES */
1478:..\..\FreeRTOS/queue.c **** 
1479:..\..\FreeRTOS/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1480:..\..\FreeRTOS/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1481:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1482:..\..\FreeRTOS/queue.c **** 				{
1483:..\..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1484:..\..\FreeRTOS/queue.c **** 					{
1485:..\..\FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1486:..\..\FreeRTOS/queue.c **** 					}
1487:..\..\FreeRTOS/queue.c **** 					else
1488:..\..\FreeRTOS/queue.c **** 					{
1489:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1490:..\..\FreeRTOS/queue.c **** 					}
1491:..\..\FreeRTOS/queue.c **** 				}
1492:..\..\FreeRTOS/queue.c **** 				else
1493:..\..\FreeRTOS/queue.c **** 				{
1494:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1495:..\..\FreeRTOS/queue.c **** 				}
1496:..\..\FreeRTOS/queue.c **** 
1497:..\..\FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1498:..\..\FreeRTOS/queue.c **** 				return pdPASS;
1499:..\..\FreeRTOS/queue.c **** 			}
1500:..\..\FreeRTOS/queue.c **** 			else
1501:..\..\FreeRTOS/queue.c **** 			{
1502:..\..\FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1503:..\..\FreeRTOS/queue.c **** 				{
1504:..\..\FreeRTOS/queue.c **** 					/* For inheritance to have occurred there must have been an
1505:..\..\FreeRTOS/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1506:..\..\FreeRTOS/queue.c **** 					if it were 0 the function would have exited. */
1507:..\..\FreeRTOS/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1508:..\..\FreeRTOS/queue.c **** 					{
1509:..\..\FreeRTOS/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1510:..\..\FreeRTOS/queue.c **** 					}
1511:..\..\FreeRTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1512:..\..\FreeRTOS/queue.c **** 
1513:..\..\FreeRTOS/queue.c **** 					/* The semaphore count was 0 and no block time is specified
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 28


1514:..\..\FreeRTOS/queue.c **** 					(or the block time has expired) so exit now. */
1515:..\..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1516:..\..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1517:..\..\FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1518:..\..\FreeRTOS/queue.c **** 				}
1519:..\..\FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1520:..\..\FreeRTOS/queue.c **** 				{
1521:..\..\FreeRTOS/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1522:..\..\FreeRTOS/queue.c **** 					so configure the timeout structure ready to block. */
1523:..\..\FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1524:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1525:..\..\FreeRTOS/queue.c **** 				}
1526:..\..\FreeRTOS/queue.c **** 				else
1527:..\..\FreeRTOS/queue.c **** 				{
1528:..\..\FreeRTOS/queue.c **** 					/* Entry time was already set. */
1529:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1530:..\..\FreeRTOS/queue.c **** 				}
1531:..\..\FreeRTOS/queue.c **** 			}
1532:..\..\FreeRTOS/queue.c **** 		}
1533:..\..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1534:..\..\FreeRTOS/queue.c **** 
1535:..\..\FreeRTOS/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1536:..\..\FreeRTOS/queue.c **** 		now the critical section has been exited. */
1537:..\..\FreeRTOS/queue.c **** 
1538:..\..\FreeRTOS/queue.c **** 		vTaskSuspendAll();
1539:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1540:..\..\FreeRTOS/queue.c **** 
1541:..\..\FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1542:..\..\FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1543:..\..\FreeRTOS/queue.c **** 		{
1544:..\..\FreeRTOS/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1545:..\..\FreeRTOS/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1546:..\..\FreeRTOS/queue.c **** 			become available.  As semaphores are implemented with queues the
1547:..\..\FreeRTOS/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1548:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1549:..\..\FreeRTOS/queue.c **** 			{
1550:..\..\FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1551:..\..\FreeRTOS/queue.c **** 
1552:..\..\FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1553:..\..\FreeRTOS/queue.c **** 				{
1554:..\..\FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1555:..\..\FreeRTOS/queue.c **** 					{
1556:..\..\FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
1557:..\..\FreeRTOS/queue.c **** 						{
1558:..\..\FreeRTOS/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1559:..\..\FreeRTOS/queue.c **** 						}
1560:..\..\FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
1561:..\..\FreeRTOS/queue.c **** 					}
1562:..\..\FreeRTOS/queue.c **** 					else
1563:..\..\FreeRTOS/queue.c **** 					{
1564:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1565:..\..\FreeRTOS/queue.c **** 					}
1566:..\..\FreeRTOS/queue.c **** 				}
1567:..\..\FreeRTOS/queue.c **** 				#endif
1568:..\..\FreeRTOS/queue.c **** 
1569:..\..\FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1570:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 29


1571:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1572:..\..\FreeRTOS/queue.c **** 				{
1573:..\..\FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1574:..\..\FreeRTOS/queue.c **** 				}
1575:..\..\FreeRTOS/queue.c **** 				else
1576:..\..\FreeRTOS/queue.c **** 				{
1577:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1578:..\..\FreeRTOS/queue.c **** 				}
1579:..\..\FreeRTOS/queue.c **** 			}
1580:..\..\FreeRTOS/queue.c **** 			else
1581:..\..\FreeRTOS/queue.c **** 			{
1582:..\..\FreeRTOS/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1583:..\..\FreeRTOS/queue.c **** 				attempt to take the semaphore again. */
1584:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1585:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1586:..\..\FreeRTOS/queue.c **** 			}
1587:..\..\FreeRTOS/queue.c **** 		}
1588:..\..\FreeRTOS/queue.c **** 		else
1589:..\..\FreeRTOS/queue.c **** 		{
1590:..\..\FreeRTOS/queue.c **** 			/* Timed out. */
1591:..\..\FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1592:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1593:..\..\FreeRTOS/queue.c **** 
1594:..\..\FreeRTOS/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1595:..\..\FreeRTOS/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1596:..\..\FreeRTOS/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1597:..\..\FreeRTOS/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1598:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1599:..\..\FreeRTOS/queue.c **** 			{
1600:..\..\FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1601:..\..\FreeRTOS/queue.c **** 				{
1602:..\..\FreeRTOS/queue.c **** 					/* xInheritanceOccurred could only have be set if
1603:..\..\FreeRTOS/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1604:..\..\FreeRTOS/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1605:..\..\FreeRTOS/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1606:..\..\FreeRTOS/queue.c **** 					{
1607:..\..\FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
1608:..\..\FreeRTOS/queue.c **** 						{
1609:..\..\FreeRTOS/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1610:..\..\FreeRTOS/queue.c **** 
1611:..\..\FreeRTOS/queue.c **** 							/* This task blocking on the mutex caused another
1612:..\..\FreeRTOS/queue.c **** 							task to inherit this task's priority.  Now this task
1613:..\..\FreeRTOS/queue.c **** 							has timed out the priority should be disinherited
1614:..\..\FreeRTOS/queue.c **** 							again, but only as low as the next highest priority
1615:..\..\FreeRTOS/queue.c **** 							task that is waiting for the same mutex. */
1616:..\..\FreeRTOS/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1617:..\..\FreeRTOS/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1618:..\..\FreeRTOS/queue.c **** 						}
1619:..\..\FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
1620:..\..\FreeRTOS/queue.c **** 					}
1621:..\..\FreeRTOS/queue.c **** 				}
1622:..\..\FreeRTOS/queue.c **** 				#endif /* configUSE_MUTEXES */
1623:..\..\FreeRTOS/queue.c **** 
1624:..\..\FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1625:..\..\FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1626:..\..\FreeRTOS/queue.c **** 			}
1627:..\..\FreeRTOS/queue.c **** 			else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 30


1628:..\..\FreeRTOS/queue.c **** 			{
1629:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1630:..\..\FreeRTOS/queue.c **** 			}
1631:..\..\FreeRTOS/queue.c **** 		}
1632:..\..\FreeRTOS/queue.c **** 	} /*lint -restore */
1633:..\..\FreeRTOS/queue.c **** }
1634:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1635:..\..\FreeRTOS/queue.c **** 
1636:..\..\FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1637:..\..\FreeRTOS/queue.c **** {
1638:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1639:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1640:..\..\FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1641:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1642:..\..\FreeRTOS/queue.c **** 
1643:..\..\FreeRTOS/queue.c **** 	/* Check the pointer is not NULL. */
1644:..\..\FreeRTOS/queue.c **** 	configASSERT( ( pxQueue ) );
1645:..\..\FreeRTOS/queue.c **** 
1646:..\..\FreeRTOS/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1647:..\..\FreeRTOS/queue.c **** 	is zero (so no data is copied into the buffer. */
1648:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1649:..\..\FreeRTOS/queue.c **** 
1650:..\..\FreeRTOS/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1651:..\..\FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1652:..\..\FreeRTOS/queue.c **** 	{
1653:..\..\FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1654:..\..\FreeRTOS/queue.c **** 	}
1655:..\..\FreeRTOS/queue.c **** 	#endif
1656:..\..\FreeRTOS/queue.c **** 
1657:..\..\FreeRTOS/queue.c **** 
1658:..\..\FreeRTOS/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1659:..\..\FreeRTOS/queue.c **** 	allow return statements within the function itself.  This is done in the
1660:..\..\FreeRTOS/queue.c **** 	interest of execution time efficiency. */
1661:..\..\FreeRTOS/queue.c **** 	for( ;; )
1662:..\..\FreeRTOS/queue.c **** 	{
1663:..\..\FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1664:..\..\FreeRTOS/queue.c **** 		{
1665:..\..\FreeRTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1666:..\..\FreeRTOS/queue.c **** 
1667:..\..\FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1668:..\..\FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1669:..\..\FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1670:..\..\FreeRTOS/queue.c **** 			{
1671:..\..\FreeRTOS/queue.c **** 				/* Remember the read position so it can be reset after the data
1672:..\..\FreeRTOS/queue.c **** 				is read from the queue as this function is only peeking the
1673:..\..\FreeRTOS/queue.c **** 				data, not removing it. */
1674:..\..\FreeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1675:..\..\FreeRTOS/queue.c **** 
1676:..\..\FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1677:..\..\FreeRTOS/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1678:..\..\FreeRTOS/queue.c **** 
1679:..\..\FreeRTOS/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1680:..\..\FreeRTOS/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1681:..\..\FreeRTOS/queue.c **** 
1682:..\..\FreeRTOS/queue.c **** 				/* The data is being left in the queue, so see if there are
1683:..\..\FreeRTOS/queue.c **** 				any other tasks waiting for the data. */
1684:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 31


1685:..\..\FreeRTOS/queue.c **** 				{
1686:..\..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1687:..\..\FreeRTOS/queue.c **** 					{
1688:..\..\FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than this task. */
1689:..\..\FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1690:..\..\FreeRTOS/queue.c **** 					}
1691:..\..\FreeRTOS/queue.c **** 					else
1692:..\..\FreeRTOS/queue.c **** 					{
1693:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1694:..\..\FreeRTOS/queue.c **** 					}
1695:..\..\FreeRTOS/queue.c **** 				}
1696:..\..\FreeRTOS/queue.c **** 				else
1697:..\..\FreeRTOS/queue.c **** 				{
1698:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1699:..\..\FreeRTOS/queue.c **** 				}
1700:..\..\FreeRTOS/queue.c **** 
1701:..\..\FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1702:..\..\FreeRTOS/queue.c **** 				return pdPASS;
1703:..\..\FreeRTOS/queue.c **** 			}
1704:..\..\FreeRTOS/queue.c **** 			else
1705:..\..\FreeRTOS/queue.c **** 			{
1706:..\..\FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1707:..\..\FreeRTOS/queue.c **** 				{
1708:..\..\FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1709:..\..\FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1710:..\..\FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1711:..\..\FreeRTOS/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1712:..\..\FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1713:..\..\FreeRTOS/queue.c **** 				}
1714:..\..\FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1715:..\..\FreeRTOS/queue.c **** 				{
1716:..\..\FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1717:..\..\FreeRTOS/queue.c **** 					configure the timeout structure ready to enter the blocked
1718:..\..\FreeRTOS/queue.c **** 					state. */
1719:..\..\FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1720:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1721:..\..\FreeRTOS/queue.c **** 				}
1722:..\..\FreeRTOS/queue.c **** 				else
1723:..\..\FreeRTOS/queue.c **** 				{
1724:..\..\FreeRTOS/queue.c **** 					/* Entry time was already set. */
1725:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1726:..\..\FreeRTOS/queue.c **** 				}
1727:..\..\FreeRTOS/queue.c **** 			}
1728:..\..\FreeRTOS/queue.c **** 		}
1729:..\..\FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1730:..\..\FreeRTOS/queue.c **** 
1731:..\..\FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1732:..\..\FreeRTOS/queue.c **** 		now the critical section has been exited. */
1733:..\..\FreeRTOS/queue.c **** 
1734:..\..\FreeRTOS/queue.c **** 		vTaskSuspendAll();
1735:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1736:..\..\FreeRTOS/queue.c **** 
1737:..\..\FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1738:..\..\FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1739:..\..\FreeRTOS/queue.c **** 		{
1740:..\..\FreeRTOS/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1741:..\..\FreeRTOS/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 32


1742:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1743:..\..\FreeRTOS/queue.c **** 			{
1744:..\..\FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1745:..\..\FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1746:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1747:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1748:..\..\FreeRTOS/queue.c **** 				{
1749:..\..\FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1750:..\..\FreeRTOS/queue.c **** 				}
1751:..\..\FreeRTOS/queue.c **** 				else
1752:..\..\FreeRTOS/queue.c **** 				{
1753:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1754:..\..\FreeRTOS/queue.c **** 				}
1755:..\..\FreeRTOS/queue.c **** 			}
1756:..\..\FreeRTOS/queue.c **** 			else
1757:..\..\FreeRTOS/queue.c **** 			{
1758:..\..\FreeRTOS/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1759:..\..\FreeRTOS/queue.c **** 				state, instead return to try and obtain the data. */
1760:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1761:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1762:..\..\FreeRTOS/queue.c **** 			}
1763:..\..\FreeRTOS/queue.c **** 		}
1764:..\..\FreeRTOS/queue.c **** 		else
1765:..\..\FreeRTOS/queue.c **** 		{
1766:..\..\FreeRTOS/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1767:..\..\FreeRTOS/queue.c **** 			exit, otherwise go back and try to read the data again. */
1768:..\..\FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1769:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1770:..\..\FreeRTOS/queue.c **** 
1771:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1772:..\..\FreeRTOS/queue.c **** 			{
1773:..\..\FreeRTOS/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1774:..\..\FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1775:..\..\FreeRTOS/queue.c **** 			}
1776:..\..\FreeRTOS/queue.c **** 			else
1777:..\..\FreeRTOS/queue.c **** 			{
1778:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1779:..\..\FreeRTOS/queue.c **** 			}
1780:..\..\FreeRTOS/queue.c **** 		}
1781:..\..\FreeRTOS/queue.c **** 	} /*lint -restore */
1782:..\..\FreeRTOS/queue.c **** }
1783:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1784:..\..\FreeRTOS/queue.c **** 
1785:..\..\FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1786:..\..\FreeRTOS/queue.c **** {
1787:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
1788:..\..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1789:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1790:..\..\FreeRTOS/queue.c **** 
1791:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1792:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1793:..\..\FreeRTOS/queue.c **** 
1794:..\..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1795:..\..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1796:..\..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1797:..\..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1798:..\..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 33


1799:..\..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1800:..\..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1801:..\..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1802:..\..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1803:..\..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1804:..\..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1805:..\..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1806:..\..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1807:..\..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1808:..\..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1809:..\..\FreeRTOS/queue.c **** 
1810:..\..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1811:..\..\FreeRTOS/queue.c **** 	{
1812:..\..\FreeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1813:..\..\FreeRTOS/queue.c **** 
1814:..\..\FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1815:..\..\FreeRTOS/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1816:..\..\FreeRTOS/queue.c **** 		{
1817:..\..\FreeRTOS/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1818:..\..\FreeRTOS/queue.c **** 
1819:..\..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1820:..\..\FreeRTOS/queue.c **** 
1821:..\..\FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1822:..\..\FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1823:..\..\FreeRTOS/queue.c **** 
1824:..\..\FreeRTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1825:..\..\FreeRTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1826:..\..\FreeRTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1827:..\..\FreeRTOS/queue.c **** 			locked. */
1828:..\..\FreeRTOS/queue.c **** 			if( cRxLock == queueUNLOCKED )
1829:..\..\FreeRTOS/queue.c **** 			{
1830:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1831:..\..\FreeRTOS/queue.c **** 				{
1832:..\..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1833:..\..\FreeRTOS/queue.c **** 					{
1834:..\..\FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1835:..\..\FreeRTOS/queue.c **** 						force a context switch. */
1836:..\..\FreeRTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1837:..\..\FreeRTOS/queue.c **** 						{
1838:..\..\FreeRTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1839:..\..\FreeRTOS/queue.c **** 						}
1840:..\..\FreeRTOS/queue.c **** 						else
1841:..\..\FreeRTOS/queue.c **** 						{
1842:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:..\..\FreeRTOS/queue.c **** 						}
1844:..\..\FreeRTOS/queue.c **** 					}
1845:..\..\FreeRTOS/queue.c **** 					else
1846:..\..\FreeRTOS/queue.c **** 					{
1847:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1848:..\..\FreeRTOS/queue.c **** 					}
1849:..\..\FreeRTOS/queue.c **** 				}
1850:..\..\FreeRTOS/queue.c **** 				else
1851:..\..\FreeRTOS/queue.c **** 				{
1852:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1853:..\..\FreeRTOS/queue.c **** 				}
1854:..\..\FreeRTOS/queue.c **** 			}
1855:..\..\FreeRTOS/queue.c **** 			else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 34


1856:..\..\FreeRTOS/queue.c **** 			{
1857:..\..\FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1858:..\..\FreeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1859:..\..\FreeRTOS/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1860:..\..\FreeRTOS/queue.c **** 			}
1861:..\..\FreeRTOS/queue.c **** 
1862:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1863:..\..\FreeRTOS/queue.c **** 		}
1864:..\..\FreeRTOS/queue.c **** 		else
1865:..\..\FreeRTOS/queue.c **** 		{
1866:..\..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1867:..\..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1868:..\..\FreeRTOS/queue.c **** 		}
1869:..\..\FreeRTOS/queue.c **** 	}
1870:..\..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1871:..\..\FreeRTOS/queue.c **** 
1872:..\..\FreeRTOS/queue.c **** 	return xReturn;
1873:..\..\FreeRTOS/queue.c **** }
1874:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1875:..\..\FreeRTOS/queue.c **** 
1876:..\..\FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1877:..\..\FreeRTOS/queue.c **** {
1878:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
1879:..\..\FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1880:..\..\FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1881:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1882:..\..\FreeRTOS/queue.c **** 
1883:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1884:..\..\FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1885:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1886:..\..\FreeRTOS/queue.c **** 
1887:..\..\FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1888:..\..\FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1889:..\..\FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1890:..\..\FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1891:..\..\FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1892:..\..\FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1893:..\..\FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1894:..\..\FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1895:..\..\FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1896:..\..\FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1897:..\..\FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1898:..\..\FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1899:..\..\FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1900:..\..\FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1901:..\..\FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1902:..\..\FreeRTOS/queue.c **** 
1903:..\..\FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1904:..\..\FreeRTOS/queue.c **** 	{
1905:..\..\FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1906:..\..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1907:..\..\FreeRTOS/queue.c **** 		{
1908:..\..\FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1909:..\..\FreeRTOS/queue.c **** 
1910:..\..\FreeRTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1911:..\..\FreeRTOS/queue.c **** 			actually being removed from the queue. */
1912:..\..\FreeRTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 35


1913:..\..\FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1914:..\..\FreeRTOS/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1915:..\..\FreeRTOS/queue.c **** 
1916:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
1917:..\..\FreeRTOS/queue.c **** 		}
1918:..\..\FreeRTOS/queue.c **** 		else
1919:..\..\FreeRTOS/queue.c **** 		{
1920:..\..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1921:..\..\FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1922:..\..\FreeRTOS/queue.c **** 		}
1923:..\..\FreeRTOS/queue.c **** 	}
1924:..\..\FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1925:..\..\FreeRTOS/queue.c **** 
1926:..\..\FreeRTOS/queue.c **** 	return xReturn;
1927:..\..\FreeRTOS/queue.c **** }
1928:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1929:..\..\FreeRTOS/queue.c **** 
1930:..\..\FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1931:..\..\FreeRTOS/queue.c **** {
1932:..\..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
1933:..\..\FreeRTOS/queue.c **** 
1934:..\..\FreeRTOS/queue.c **** 	configASSERT( xQueue );
1935:..\..\FreeRTOS/queue.c **** 
1936:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1937:..\..\FreeRTOS/queue.c **** 	{
1938:..\..\FreeRTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1939:..\..\FreeRTOS/queue.c **** 	}
1940:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1941:..\..\FreeRTOS/queue.c **** 
1942:..\..\FreeRTOS/queue.c **** 	return uxReturn;
1943:..\..\FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1944:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1945:..\..\FreeRTOS/queue.c **** 
1946:..\..\FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1947:..\..\FreeRTOS/queue.c **** {
1948:..\..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
1949:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1950:..\..\FreeRTOS/queue.c **** 
1951:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1952:..\..\FreeRTOS/queue.c **** 
1953:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1954:..\..\FreeRTOS/queue.c **** 	{
1955:..\..\FreeRTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1956:..\..\FreeRTOS/queue.c **** 	}
1957:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1958:..\..\FreeRTOS/queue.c **** 
1959:..\..\FreeRTOS/queue.c **** 	return uxReturn;
1960:..\..\FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1961:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1962:..\..\FreeRTOS/queue.c **** 
1963:..\..\FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1964:..\..\FreeRTOS/queue.c **** {
1965:..\..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
1966:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1967:..\..\FreeRTOS/queue.c **** 
1968:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1969:..\..\FreeRTOS/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 36


1970:..\..\FreeRTOS/queue.c **** 
1971:..\..\FreeRTOS/queue.c **** 	return uxReturn;
1972:..\..\FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1973:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1974:..\..\FreeRTOS/queue.c **** 
1975:..\..\FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1976:..\..\FreeRTOS/queue.c **** {
1977:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
1978:..\..\FreeRTOS/queue.c **** 
1979:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1980:..\..\FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1981:..\..\FreeRTOS/queue.c **** 
1982:..\..\FreeRTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1983:..\..\FreeRTOS/queue.c **** 	{
1984:..\..\FreeRTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1985:..\..\FreeRTOS/queue.c **** 	}
1986:..\..\FreeRTOS/queue.c **** 	#endif
1987:..\..\FreeRTOS/queue.c **** 
1988:..\..\FreeRTOS/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1989:..\..\FreeRTOS/queue.c **** 	{
1990:..\..\FreeRTOS/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1991:..\..\FreeRTOS/queue.c **** 		again. */
1992:..\..\FreeRTOS/queue.c **** 		vPortFree( pxQueue );
1993:..\..\FreeRTOS/queue.c **** 	}
1994:..\..\FreeRTOS/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1995:..\..\FreeRTOS/queue.c **** 	{
1996:..\..\FreeRTOS/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1997:..\..\FreeRTOS/queue.c **** 		check before attempting to free the memory. */
1998:..\..\FreeRTOS/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1999:..\..\FreeRTOS/queue.c **** 		{
2000:..\..\FreeRTOS/queue.c **** 			vPortFree( pxQueue );
2001:..\..\FreeRTOS/queue.c **** 		}
2002:..\..\FreeRTOS/queue.c **** 		else
2003:..\..\FreeRTOS/queue.c **** 		{
2004:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2005:..\..\FreeRTOS/queue.c **** 		}
2006:..\..\FreeRTOS/queue.c **** 	}
2007:..\..\FreeRTOS/queue.c **** 	#else
2008:..\..\FreeRTOS/queue.c **** 	{
2009:..\..\FreeRTOS/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2010:..\..\FreeRTOS/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2011:..\..\FreeRTOS/queue.c **** 		( void ) pxQueue;
2012:..\..\FreeRTOS/queue.c **** 	}
2013:..\..\FreeRTOS/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2014:..\..\FreeRTOS/queue.c **** }
2015:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2016:..\..\FreeRTOS/queue.c **** 
2017:..\..\FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:..\..\FreeRTOS/queue.c **** 
2019:..\..\FreeRTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2020:..\..\FreeRTOS/queue.c **** 	{
2021:..\..\FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2022:..\..\FreeRTOS/queue.c **** 	}
2023:..\..\FreeRTOS/queue.c **** 
2024:..\..\FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2026:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 37


2027:..\..\FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2028:..\..\FreeRTOS/queue.c **** 
2029:..\..\FreeRTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2030:..\..\FreeRTOS/queue.c **** 	{
2031:..\..\FreeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2032:..\..\FreeRTOS/queue.c **** 	}
2033:..\..\FreeRTOS/queue.c **** 
2034:..\..\FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2035:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2036:..\..\FreeRTOS/queue.c **** 
2037:..\..\FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2038:..\..\FreeRTOS/queue.c **** 
2039:..\..\FreeRTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2040:..\..\FreeRTOS/queue.c **** 	{
2041:..\..\FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2042:..\..\FreeRTOS/queue.c **** 	}
2043:..\..\FreeRTOS/queue.c **** 
2044:..\..\FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2045:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2046:..\..\FreeRTOS/queue.c **** 
2047:..\..\FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
2048:..\..\FreeRTOS/queue.c **** 
2049:..\..\FreeRTOS/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2050:..\..\FreeRTOS/queue.c **** 	{
  27              		.loc 1 2050 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2051:..\..\FreeRTOS/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2052:..\..\FreeRTOS/queue.c **** 
2053:..\..\FreeRTOS/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2054:..\..\FreeRTOS/queue.c **** 		priority, but the waiting task times out, then the holder should
2055:..\..\FreeRTOS/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2056:..\..\FreeRTOS/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2057:..\..\FreeRTOS/queue.c **** 		return the priority of the highest priority task that is waiting for the
2058:..\..\FreeRTOS/queue.c **** 		mutex. */
2059:..\..\FreeRTOS/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  33              		.loc 1 2059 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 23B1     		cbz	r3, .L3
2060:..\..\FreeRTOS/queue.c **** 		{
2061:..\..\FreeRTOS/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
  36              		.loc 1 2061 0
  37 0004 036B     		ldr	r3, [r0, #48]
  38 0006 1868     		ldr	r0, [r3]
  39              	.LVL1:
  40 0008 C0F10500 		rsb	r0, r0, #5
  41              	.LVL2:
  42 000c 7047     		bx	lr
  43              	.LVL3:
  44              	.L3:
2062:..\..\FreeRTOS/queue.c **** 		}
2063:..\..\FreeRTOS/queue.c **** 		else
2064:..\..\FreeRTOS/queue.c **** 		{
2065:..\..\FreeRTOS/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 38


  45              		.loc 1 2065 0
  46 000e 0020     		movs	r0, #0
  47              	.LVL4:
2066:..\..\FreeRTOS/queue.c **** 		}
2067:..\..\FreeRTOS/queue.c **** 
2068:..\..\FreeRTOS/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2069:..\..\FreeRTOS/queue.c **** 	}
  48              		.loc 1 2069 0
  49 0010 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE88:
  52              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
  53 0012 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
  54              		.align	2
  55              		.thumb
  56              		.thumb_func
  57              		.type	prvIsQueueFull, %function
  58              	prvIsQueueFull:
  59              	.LFB94:
2070:..\..\FreeRTOS/queue.c **** 
2071:..\..\FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2072:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2073:..\..\FreeRTOS/queue.c **** 
2074:..\..\FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2075:..\..\FreeRTOS/queue.c **** {
2076:..\..\FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
2077:..\..\FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
2078:..\..\FreeRTOS/queue.c **** 
2079:..\..\FreeRTOS/queue.c **** 	/* This function is called from a critical section. */
2080:..\..\FreeRTOS/queue.c **** 
2081:..\..\FreeRTOS/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2082:..\..\FreeRTOS/queue.c **** 
2083:..\..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2084:..\..\FreeRTOS/queue.c **** 	{
2085:..\..\FreeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2086:..\..\FreeRTOS/queue.c **** 		{
2087:..\..\FreeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2088:..\..\FreeRTOS/queue.c **** 			{
2089:..\..\FreeRTOS/queue.c **** 				/* The mutex is no longer being held. */
2090:..\..\FreeRTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2091:..\..\FreeRTOS/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2092:..\..\FreeRTOS/queue.c **** 			}
2093:..\..\FreeRTOS/queue.c **** 			else
2094:..\..\FreeRTOS/queue.c **** 			{
2095:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2096:..\..\FreeRTOS/queue.c **** 			}
2097:..\..\FreeRTOS/queue.c **** 		}
2098:..\..\FreeRTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
2099:..\..\FreeRTOS/queue.c **** 	}
2100:..\..\FreeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2101:..\..\FreeRTOS/queue.c **** 	{
2102:..\..\FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2103:..\..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2104:..\..\FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2105:..\..\FreeRTOS/queue.c **** 		{
2106:..\..\FreeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2107:..\..\FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 39


2108:..\..\FreeRTOS/queue.c **** 		else
2109:..\..\FreeRTOS/queue.c **** 		{
2110:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2111:..\..\FreeRTOS/queue.c **** 		}
2112:..\..\FreeRTOS/queue.c **** 	}
2113:..\..\FreeRTOS/queue.c **** 	else
2114:..\..\FreeRTOS/queue.c **** 	{
2115:..\..\FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2116:..\..\FreeRTOS/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2117:..\..\FreeRTOS/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2118:..\..\FreeRTOS/queue.c **** 		{
2119:..\..\FreeRTOS/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2120:..\..\FreeRTOS/queue.c **** 		}
2121:..\..\FreeRTOS/queue.c **** 		else
2122:..\..\FreeRTOS/queue.c **** 		{
2123:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:..\..\FreeRTOS/queue.c **** 		}
2125:..\..\FreeRTOS/queue.c **** 
2126:..\..\FreeRTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
2127:..\..\FreeRTOS/queue.c **** 		{
2128:..\..\FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2129:..\..\FreeRTOS/queue.c **** 			{
2130:..\..\FreeRTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
2131:..\..\FreeRTOS/queue.c **** 				one from the recorded number of items in the queue so when
2132:..\..\FreeRTOS/queue.c **** 				one is added again below the number of recorded items remains
2133:..\..\FreeRTOS/queue.c **** 				correct. */
2134:..\..\FreeRTOS/queue.c **** 				--uxMessagesWaiting;
2135:..\..\FreeRTOS/queue.c **** 			}
2136:..\..\FreeRTOS/queue.c **** 			else
2137:..\..\FreeRTOS/queue.c **** 			{
2138:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2139:..\..\FreeRTOS/queue.c **** 			}
2140:..\..\FreeRTOS/queue.c **** 		}
2141:..\..\FreeRTOS/queue.c **** 		else
2142:..\..\FreeRTOS/queue.c **** 		{
2143:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2144:..\..\FreeRTOS/queue.c **** 		}
2145:..\..\FreeRTOS/queue.c **** 	}
2146:..\..\FreeRTOS/queue.c **** 
2147:..\..\FreeRTOS/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2148:..\..\FreeRTOS/queue.c **** 
2149:..\..\FreeRTOS/queue.c **** 	return xReturn;
2150:..\..\FreeRTOS/queue.c **** }
2151:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2152:..\..\FreeRTOS/queue.c **** 
2153:..\..\FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2154:..\..\FreeRTOS/queue.c **** {
2155:..\..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2156:..\..\FreeRTOS/queue.c **** 	{
2157:..\..\FreeRTOS/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2158:..\..\FreeRTOS/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2159:..\..\FreeRTOS/queue.c **** 		{
2160:..\..\FreeRTOS/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2161:..\..\FreeRTOS/queue.c **** 		}
2162:..\..\FreeRTOS/queue.c **** 		else
2163:..\..\FreeRTOS/queue.c **** 		{
2164:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 40


2165:..\..\FreeRTOS/queue.c **** 		}
2166:..\..\FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2167:..\..\FreeRTOS/queue.c **** 	}
2168:..\..\FreeRTOS/queue.c **** }
2169:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2170:..\..\FreeRTOS/queue.c **** 
2171:..\..\FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2172:..\..\FreeRTOS/queue.c **** {
2173:..\..\FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2174:..\..\FreeRTOS/queue.c **** 
2175:..\..\FreeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2176:..\..\FreeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2177:..\..\FreeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2178:..\..\FreeRTOS/queue.c **** 	updated. */
2179:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
2180:..\..\FreeRTOS/queue.c **** 	{
2181:..\..\FreeRTOS/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2182:..\..\FreeRTOS/queue.c **** 
2183:..\..\FreeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
2184:..\..\FreeRTOS/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2185:..\..\FreeRTOS/queue.c **** 		{
2186:..\..\FreeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2187:..\..\FreeRTOS/queue.c **** 			blocked waiting for data to become available? */
2188:..\..\FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2189:..\..\FreeRTOS/queue.c **** 			{
2190:..\..\FreeRTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2191:..\..\FreeRTOS/queue.c **** 				{
2192:..\..\FreeRTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2193:..\..\FreeRTOS/queue.c **** 					{
2194:..\..\FreeRTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
2195:..\..\FreeRTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
2196:..\..\FreeRTOS/queue.c **** 						A context switch is required. */
2197:..\..\FreeRTOS/queue.c **** 						vTaskMissedYield();
2198:..\..\FreeRTOS/queue.c **** 					}
2199:..\..\FreeRTOS/queue.c **** 					else
2200:..\..\FreeRTOS/queue.c **** 					{
2201:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2202:..\..\FreeRTOS/queue.c **** 					}
2203:..\..\FreeRTOS/queue.c **** 				}
2204:..\..\FreeRTOS/queue.c **** 				else
2205:..\..\FreeRTOS/queue.c **** 				{
2206:..\..\FreeRTOS/queue.c **** 					/* Tasks that are removed from the event list will get
2207:..\..\FreeRTOS/queue.c **** 					added to the pending ready list as the scheduler is still
2208:..\..\FreeRTOS/queue.c **** 					suspended. */
2209:..\..\FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2210:..\..\FreeRTOS/queue.c **** 					{
2211:..\..\FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2212:..\..\FreeRTOS/queue.c **** 						{
2213:..\..\FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
2214:..\..\FreeRTOS/queue.c **** 							context	switch is required. */
2215:..\..\FreeRTOS/queue.c **** 							vTaskMissedYield();
2216:..\..\FreeRTOS/queue.c **** 						}
2217:..\..\FreeRTOS/queue.c **** 						else
2218:..\..\FreeRTOS/queue.c **** 						{
2219:..\..\FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2220:..\..\FreeRTOS/queue.c **** 						}
2221:..\..\FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 41


2222:..\..\FreeRTOS/queue.c **** 					else
2223:..\..\FreeRTOS/queue.c **** 					{
2224:..\..\FreeRTOS/queue.c **** 						break;
2225:..\..\FreeRTOS/queue.c **** 					}
2226:..\..\FreeRTOS/queue.c **** 				}
2227:..\..\FreeRTOS/queue.c **** 			}
2228:..\..\FreeRTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2229:..\..\FreeRTOS/queue.c **** 			{
2230:..\..\FreeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
2231:..\..\FreeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2232:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2233:..\..\FreeRTOS/queue.c **** 				{
2234:..\..\FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2235:..\..\FreeRTOS/queue.c **** 					{
2236:..\..\FreeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that
2237:..\..\FreeRTOS/queue.c **** 						a context switch is required. */
2238:..\..\FreeRTOS/queue.c **** 						vTaskMissedYield();
2239:..\..\FreeRTOS/queue.c **** 					}
2240:..\..\FreeRTOS/queue.c **** 					else
2241:..\..\FreeRTOS/queue.c **** 					{
2242:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2243:..\..\FreeRTOS/queue.c **** 					}
2244:..\..\FreeRTOS/queue.c **** 				}
2245:..\..\FreeRTOS/queue.c **** 				else
2246:..\..\FreeRTOS/queue.c **** 				{
2247:..\..\FreeRTOS/queue.c **** 					break;
2248:..\..\FreeRTOS/queue.c **** 				}
2249:..\..\FreeRTOS/queue.c **** 			}
2250:..\..\FreeRTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2251:..\..\FreeRTOS/queue.c **** 
2252:..\..\FreeRTOS/queue.c **** 			--cTxLock;
2253:..\..\FreeRTOS/queue.c **** 		}
2254:..\..\FreeRTOS/queue.c **** 
2255:..\..\FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2256:..\..\FreeRTOS/queue.c **** 	}
2257:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2258:..\..\FreeRTOS/queue.c **** 
2259:..\..\FreeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
2260:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
2261:..\..\FreeRTOS/queue.c **** 	{
2262:..\..\FreeRTOS/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2263:..\..\FreeRTOS/queue.c **** 
2264:..\..\FreeRTOS/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2265:..\..\FreeRTOS/queue.c **** 		{
2266:..\..\FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2267:..\..\FreeRTOS/queue.c **** 			{
2268:..\..\FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2269:..\..\FreeRTOS/queue.c **** 				{
2270:..\..\FreeRTOS/queue.c **** 					vTaskMissedYield();
2271:..\..\FreeRTOS/queue.c **** 				}
2272:..\..\FreeRTOS/queue.c **** 				else
2273:..\..\FreeRTOS/queue.c **** 				{
2274:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2275:..\..\FreeRTOS/queue.c **** 				}
2276:..\..\FreeRTOS/queue.c **** 
2277:..\..\FreeRTOS/queue.c **** 				--cRxLock;
2278:..\..\FreeRTOS/queue.c **** 			}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 42


2279:..\..\FreeRTOS/queue.c **** 			else
2280:..\..\FreeRTOS/queue.c **** 			{
2281:..\..\FreeRTOS/queue.c **** 				break;
2282:..\..\FreeRTOS/queue.c **** 			}
2283:..\..\FreeRTOS/queue.c **** 		}
2284:..\..\FreeRTOS/queue.c **** 
2285:..\..\FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2286:..\..\FreeRTOS/queue.c **** 	}
2287:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2288:..\..\FreeRTOS/queue.c **** }
2289:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2290:..\..\FreeRTOS/queue.c **** 
2291:..\..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2292:..\..\FreeRTOS/queue.c **** {
2293:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
2294:..\..\FreeRTOS/queue.c **** 
2295:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
2296:..\..\FreeRTOS/queue.c **** 	{
2297:..\..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2298:..\..\FreeRTOS/queue.c **** 		{
2299:..\..\FreeRTOS/queue.c **** 			xReturn = pdTRUE;
2300:..\..\FreeRTOS/queue.c **** 		}
2301:..\..\FreeRTOS/queue.c **** 		else
2302:..\..\FreeRTOS/queue.c **** 		{
2303:..\..\FreeRTOS/queue.c **** 			xReturn = pdFALSE;
2304:..\..\FreeRTOS/queue.c **** 		}
2305:..\..\FreeRTOS/queue.c **** 	}
2306:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2307:..\..\FreeRTOS/queue.c **** 
2308:..\..\FreeRTOS/queue.c **** 	return xReturn;
2309:..\..\FreeRTOS/queue.c **** }
2310:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2311:..\..\FreeRTOS/queue.c **** 
2312:..\..\FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2313:..\..\FreeRTOS/queue.c **** {
2314:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
2315:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
2316:..\..\FreeRTOS/queue.c **** 
2317:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
2318:..\..\FreeRTOS/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2319:..\..\FreeRTOS/queue.c **** 	{
2320:..\..\FreeRTOS/queue.c **** 		xReturn = pdTRUE;
2321:..\..\FreeRTOS/queue.c **** 	}
2322:..\..\FreeRTOS/queue.c **** 	else
2323:..\..\FreeRTOS/queue.c **** 	{
2324:..\..\FreeRTOS/queue.c **** 		xReturn = pdFALSE;
2325:..\..\FreeRTOS/queue.c **** 	}
2326:..\..\FreeRTOS/queue.c **** 
2327:..\..\FreeRTOS/queue.c **** 	return xReturn;
2328:..\..\FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2329:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2330:..\..\FreeRTOS/queue.c **** 
2331:..\..\FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2332:..\..\FreeRTOS/queue.c **** {
  60              		.loc 1 2332 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 43


  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL5:
  65 0000 10B5     		push	{r4, lr}
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0002 0446     		mov	r4, r0
2333:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
2334:..\..\FreeRTOS/queue.c **** 
2335:..\..\FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
  70              		.loc 1 2335 0
  71 0004 FFF7FEFF 		bl	vPortEnterCritical
  72              	.LVL6:
2336:..\..\FreeRTOS/queue.c **** 	{
2337:..\..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  73              		.loc 1 2337 0
  74 0008 A26B     		ldr	r2, [r4, #56]
  75 000a E36B     		ldr	r3, [r4, #60]
  76 000c 9A42     		cmp	r2, r3
  77 000e 01D1     		bne	.L6
2338:..\..\FreeRTOS/queue.c **** 		{
2339:..\..\FreeRTOS/queue.c **** 			xReturn = pdTRUE;
  78              		.loc 1 2339 0
  79 0010 0124     		movs	r4, #1
  80              	.LVL7:
  81 0012 00E0     		b	.L5
  82              	.LVL8:
  83              	.L6:
2340:..\..\FreeRTOS/queue.c **** 		}
2341:..\..\FreeRTOS/queue.c **** 		else
2342:..\..\FreeRTOS/queue.c **** 		{
2343:..\..\FreeRTOS/queue.c **** 			xReturn = pdFALSE;
  84              		.loc 1 2343 0
  85 0014 0024     		movs	r4, #0
  86              	.LVL9:
  87              	.L5:
2344:..\..\FreeRTOS/queue.c **** 		}
2345:..\..\FreeRTOS/queue.c **** 	}
2346:..\..\FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
  88              		.loc 1 2346 0
  89 0016 FFF7FEFF 		bl	vPortExitCritical
  90              	.LVL10:
2347:..\..\FreeRTOS/queue.c **** 
2348:..\..\FreeRTOS/queue.c **** 	return xReturn;
2349:..\..\FreeRTOS/queue.c **** }
  91              		.loc 1 2349 0
  92 001a 2046     		mov	r0, r4
  93 001c 10BD     		pop	{r4, pc}
  94              		.cfi_endproc
  95              	.LFE94:
  96              		.size	prvIsQueueFull, .-prvIsQueueFull
  97 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  98              		.align	2
  99              		.thumb
 100              		.thumb_func
 101              		.type	prvIsQueueEmpty, %function
 102              	prvIsQueueEmpty:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 44


 103              	.LFB92:
2292:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 104              		.loc 1 2292 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL11:
 109 0000 10B5     		push	{r4, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 4, -8
 112              		.cfi_offset 14, -4
 113 0002 0446     		mov	r4, r0
2295:..\..\FreeRTOS/queue.c **** 	{
 114              		.loc 1 2295 0
 115 0004 FFF7FEFF 		bl	vPortEnterCritical
 116              	.LVL12:
2297:..\..\FreeRTOS/queue.c **** 		{
 117              		.loc 1 2297 0
 118 0008 A36B     		ldr	r3, [r4, #56]
 119 000a 0BB9     		cbnz	r3, .L10
2299:..\..\FreeRTOS/queue.c **** 		}
 120              		.loc 1 2299 0
 121 000c 0124     		movs	r4, #1
 122              	.LVL13:
 123 000e 00E0     		b	.L9
 124              	.LVL14:
 125              	.L10:
2303:..\..\FreeRTOS/queue.c **** 		}
 126              		.loc 1 2303 0
 127 0010 0024     		movs	r4, #0
 128              	.LVL15:
 129              	.L9:
2306:..\..\FreeRTOS/queue.c **** 
 130              		.loc 1 2306 0
 131 0012 FFF7FEFF 		bl	vPortExitCritical
 132              	.LVL16:
2309:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 133              		.loc 1 2309 0
 134 0016 2046     		mov	r0, r4
 135 0018 10BD     		pop	{r4, pc}
 136              		.cfi_endproc
 137              	.LFE92:
 138              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 139 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 140              		.align	2
 141              		.thumb
 142              		.thumb_func
 143              		.type	prvCopyDataToQueue, %function
 144              	prvCopyDataToQueue:
 145              	.LFB89:
2075:..\..\FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 146              		.loc 1 2075 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              	.LVL17:
 151 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 45


 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 4, -16
 154              		.cfi_offset 5, -12
 155              		.cfi_offset 6, -8
 156              		.cfi_offset 14, -4
 157 0002 0446     		mov	r4, r0
 158 0004 1646     		mov	r6, r2
 159              	.LVL18:
2081:..\..\FreeRTOS/queue.c **** 
 160              		.loc 1 2081 0
 161 0006 856B     		ldr	r5, [r0, #56]
 162              	.LVL19:
2083:..\..\FreeRTOS/queue.c **** 	{
 163              		.loc 1 2083 0
 164 0008 026C     		ldr	r2, [r0, #64]
 165              	.LVL20:
 166 000a 3AB9     		cbnz	r2, .L13
2087:..\..\FreeRTOS/queue.c **** 			{
 167              		.loc 1 2087 0
 168 000c 0368     		ldr	r3, [r0]
 169 000e 43BB     		cbnz	r3, .L17
2090:..\..\FreeRTOS/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 170              		.loc 1 2090 0
 171 0010 8068     		ldr	r0, [r0, #8]
 172              	.LVL21:
 173 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 174              	.LVL22:
2091:..\..\FreeRTOS/queue.c **** 			}
 175              		.loc 1 2091 0
 176 0016 0023     		movs	r3, #0
 177 0018 A360     		str	r3, [r4, #8]
 178 001a 29E0     		b	.L14
 179              	.LVL23:
 180              	.L13:
2100:..\..\FreeRTOS/queue.c **** 	{
 181              		.loc 1 2100 0
 182 001c 6EB9     		cbnz	r6, .L15
2102:..\..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 183              		.loc 1 2102 0
 184 001e 4068     		ldr	r0, [r0, #4]
 185              	.LVL24:
 186 0020 FFF7FEFF 		bl	memcpy
 187              	.LVL25:
2103:..\..\FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 188              		.loc 1 2103 0
 189 0024 6268     		ldr	r2, [r4, #4]
 190 0026 236C     		ldr	r3, [r4, #64]
 191 0028 1344     		add	r3, r3, r2
 192 002a 6360     		str	r3, [r4, #4]
2104:..\..\FreeRTOS/queue.c **** 		{
 193              		.loc 1 2104 0
 194 002c A268     		ldr	r2, [r4, #8]
 195 002e 9342     		cmp	r3, r2
 196 0030 19D3     		bcc	.L18
2106:..\..\FreeRTOS/queue.c **** 		}
 197              		.loc 1 2106 0
 198 0032 2368     		ldr	r3, [r4]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 46


 199 0034 6360     		str	r3, [r4, #4]
2076:..\..\FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 200              		.loc 1 2076 0
 201 0036 0020     		movs	r0, #0
 202 0038 1AE0     		b	.L14
 203              	.LVL26:
 204              	.L15:
2115:..\..\FreeRTOS/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 205              		.loc 1 2115 0
 206 003a C068     		ldr	r0, [r0, #12]
 207              	.LVL27:
 208 003c FFF7FEFF 		bl	memcpy
 209              	.LVL28:
2116:..\..\FreeRTOS/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 210              		.loc 1 2116 0
 211 0040 236C     		ldr	r3, [r4, #64]
 212 0042 5B42     		negs	r3, r3
 213 0044 E268     		ldr	r2, [r4, #12]
 214 0046 1A44     		add	r2, r2, r3
 215 0048 E260     		str	r2, [r4, #12]
2117:..\..\FreeRTOS/queue.c **** 		{
 216              		.loc 1 2117 0
 217 004a 2168     		ldr	r1, [r4]
 218 004c 8A42     		cmp	r2, r1
 219 004e 02D2     		bcs	.L16
2119:..\..\FreeRTOS/queue.c **** 		}
 220              		.loc 1 2119 0
 221 0050 A268     		ldr	r2, [r4, #8]
 222 0052 1344     		add	r3, r3, r2
 223 0054 E360     		str	r3, [r4, #12]
 224              	.L16:
2126:..\..\FreeRTOS/queue.c **** 		{
 225              		.loc 1 2126 0
 226 0056 022E     		cmp	r6, #2
 227 0058 07D1     		bne	.L19
2128:..\..\FreeRTOS/queue.c **** 			{
 228              		.loc 1 2128 0
 229 005a 45B1     		cbz	r5, .L20
2134:..\..\FreeRTOS/queue.c **** 			}
 230              		.loc 1 2134 0
 231 005c 013D     		subs	r5, r5, #1
 232              	.LVL29:
2076:..\..\FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 233              		.loc 1 2076 0
 234 005e 0020     		movs	r0, #0
 235 0060 06E0     		b	.L14
 236              	.LVL30:
 237              	.L17:
 238 0062 0020     		movs	r0, #0
 239              	.LVL31:
 240 0064 04E0     		b	.L14
 241              	.LVL32:
 242              	.L18:
 243 0066 0020     		movs	r0, #0
 244 0068 02E0     		b	.L14
 245              	.L19:
 246 006a 0020     		movs	r0, #0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 47


 247 006c 00E0     		b	.L14
 248              	.L20:
 249 006e 0020     		movs	r0, #0
 250              	.LVL33:
 251              	.L14:
2147:..\..\FreeRTOS/queue.c **** 
 252              		.loc 1 2147 0
 253 0070 0135     		adds	r5, r5, #1
 254              	.LVL34:
 255 0072 A563     		str	r5, [r4, #56]
2150:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 256              		.loc 1 2150 0
 257 0074 70BD     		pop	{r4, r5, r6, pc}
 258              		.cfi_endproc
 259              	.LFE89:
 260              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 261 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 262              		.align	2
 263              		.thumb
 264              		.thumb_func
 265              		.type	prvCopyDataFromQueue, %function
 266              	prvCopyDataFromQueue:
 267              	.LFB90:
2154:..\..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 268              		.loc 1 2154 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              	.LVL35:
2155:..\..\FreeRTOS/queue.c **** 	{
 273              		.loc 1 2155 0
 274 0000 026C     		ldr	r2, [r0, #64]
 275 0002 72B1     		cbz	r2, .L26
2154:..\..\FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 276              		.loc 1 2154 0
 277 0004 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
2157:..\..\FreeRTOS/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 281              		.loc 1 2157 0
 282 0006 C368     		ldr	r3, [r0, #12]
 283 0008 1344     		add	r3, r3, r2
 284 000a C360     		str	r3, [r0, #12]
2158:..\..\FreeRTOS/queue.c **** 		{
 285              		.loc 1 2158 0
 286 000c 8468     		ldr	r4, [r0, #8]
 287 000e A342     		cmp	r3, r4
 288 0010 01D3     		bcc	.L24
2160:..\..\FreeRTOS/queue.c **** 		}
 289              		.loc 1 2160 0
 290 0012 0368     		ldr	r3, [r0]
 291 0014 C360     		str	r3, [r0, #12]
 292              	.L24:
 293 0016 0C46     		mov	r4, r1
2166:..\..\FreeRTOS/queue.c **** 	}
 294              		.loc 1 2166 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 48


 295 0018 C168     		ldr	r1, [r0, #12]
 296              	.LVL36:
 297 001a 2046     		mov	r0, r4
 298              	.LVL37:
 299 001c FFF7FEFF 		bl	memcpy
 300              	.LVL38:
 301 0020 10BD     		pop	{r4, pc}
 302              	.LVL39:
 303              	.L26:
 304              		.cfi_def_cfa_offset 0
 305              		.cfi_restore 4
 306              		.cfi_restore 14
 307 0022 7047     		bx	lr
 308              		.cfi_endproc
 309              	.LFE90:
 310              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 311              		.section	.text.prvUnlockQueue,"ax",%progbits
 312              		.align	2
 313              		.thumb
 314              		.thumb_func
 315              		.type	prvUnlockQueue, %function
 316              	prvUnlockQueue:
 317              	.LFB91:
2172:..\..\FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 318              		.loc 1 2172 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL40:
 323 0000 38B5     		push	{r3, r4, r5, lr}
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 3, -16
 326              		.cfi_offset 4, -12
 327              		.cfi_offset 5, -8
 328              		.cfi_offset 14, -4
 329 0002 0546     		mov	r5, r0
2179:..\..\FreeRTOS/queue.c **** 	{
 330              		.loc 1 2179 0
 331 0004 FFF7FEFF 		bl	vPortEnterCritical
 332              	.LVL41:
 333              	.LBB23:
2181:..\..\FreeRTOS/queue.c **** 
 334              		.loc 1 2181 0
 335 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 336 000c 64B2     		sxtb	r4, r4
 337              	.LVL42:
2184:..\..\FreeRTOS/queue.c **** 		{
 338              		.loc 1 2184 0
 339 000e 0AE0     		b	.L28
 340              	.L31:
2232:..\..\FreeRTOS/queue.c **** 				{
 341              		.loc 1 2232 0
 342 0010 6B6A     		ldr	r3, [r5, #36]
 343 0012 53B1     		cbz	r3, .L29
2234:..\..\FreeRTOS/queue.c **** 					{
 344              		.loc 1 2234 0
 345 0014 05F12400 		add	r0, r5, #36
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 49


 346 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 347              	.LVL43:
 348 001c 08B1     		cbz	r0, .L30
2238:..\..\FreeRTOS/queue.c **** 					}
 349              		.loc 1 2238 0
 350 001e FFF7FEFF 		bl	vTaskMissedYield
 351              	.LVL44:
 352              	.L30:
2252:..\..\FreeRTOS/queue.c **** 		}
 353              		.loc 1 2252 0
 354 0022 013C     		subs	r4, r4, #1
 355              	.LVL45:
 356 0024 64B2     		sxtb	r4, r4
 357              	.LVL46:
 358              	.L28:
2184:..\..\FreeRTOS/queue.c **** 		{
 359              		.loc 1 2184 0
 360 0026 002C     		cmp	r4, #0
 361 0028 F2DC     		bgt	.L31
 362              	.L29:
2255:..\..\FreeRTOS/queue.c **** 	}
 363              		.loc 1 2255 0
 364 002a FF23     		movs	r3, #255
 365 002c 85F84530 		strb	r3, [r5, #69]
 366              	.LBE23:
2257:..\..\FreeRTOS/queue.c **** 
 367              		.loc 1 2257 0
 368 0030 FFF7FEFF 		bl	vPortExitCritical
 369              	.LVL47:
2260:..\..\FreeRTOS/queue.c **** 	{
 370              		.loc 1 2260 0
 371 0034 FFF7FEFF 		bl	vPortEnterCritical
 372              	.LVL48:
 373              	.LBB24:
2262:..\..\FreeRTOS/queue.c **** 
 374              		.loc 1 2262 0
 375 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 376              	.LVL49:
 377 003c 64B2     		sxtb	r4, r4
 378              	.LVL50:
2264:..\..\FreeRTOS/queue.c **** 		{
 379              		.loc 1 2264 0
 380 003e 0AE0     		b	.L32
 381              	.L35:
2266:..\..\FreeRTOS/queue.c **** 			{
 382              		.loc 1 2266 0
 383 0040 2B69     		ldr	r3, [r5, #16]
 384 0042 53B1     		cbz	r3, .L33
2268:..\..\FreeRTOS/queue.c **** 				{
 385              		.loc 1 2268 0
 386 0044 05F11000 		add	r0, r5, #16
 387 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 388              	.LVL51:
 389 004c 08B1     		cbz	r0, .L34
2270:..\..\FreeRTOS/queue.c **** 				}
 390              		.loc 1 2270 0
 391 004e FFF7FEFF 		bl	vTaskMissedYield
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 50


 392              	.LVL52:
 393              	.L34:
2277:..\..\FreeRTOS/queue.c **** 			}
 394              		.loc 1 2277 0
 395 0052 013C     		subs	r4, r4, #1
 396              	.LVL53:
 397 0054 64B2     		sxtb	r4, r4
 398              	.LVL54:
 399              	.L32:
2264:..\..\FreeRTOS/queue.c **** 		{
 400              		.loc 1 2264 0
 401 0056 002C     		cmp	r4, #0
 402 0058 F2DC     		bgt	.L35
 403              	.L33:
2285:..\..\FreeRTOS/queue.c **** 	}
 404              		.loc 1 2285 0
 405 005a FF23     		movs	r3, #255
 406 005c 85F84430 		strb	r3, [r5, #68]
 407              	.LBE24:
2287:..\..\FreeRTOS/queue.c **** }
 408              		.loc 1 2287 0
 409 0060 FFF7FEFF 		bl	vPortExitCritical
 410              	.LVL55:
 411 0064 38BD     		pop	{r3, r4, r5, pc}
 412              		.cfi_endproc
 413              	.LFE91:
 414              		.size	prvUnlockQueue, .-prvUnlockQueue
 415 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 416              		.align	2
 417              		.global	xQueueGenericReset
 418              		.thumb
 419              		.thumb_func
 420              		.type	xQueueGenericReset, %function
 421              	xQueueGenericReset:
 422              	.LFB68:
 256:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
 423              		.loc 1 256 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              	.LVL56:
 428 0000 38B5     		push	{r3, r4, r5, lr}
 429              		.cfi_def_cfa_offset 16
 430              		.cfi_offset 3, -16
 431              		.cfi_offset 4, -12
 432              		.cfi_offset 5, -8
 433              		.cfi_offset 14, -4
 434 0002 0446     		mov	r4, r0
 435 0004 0D46     		mov	r5, r1
 436              	.LVL57:
 261:..\..\FreeRTOS/queue.c **** 	{
 437              		.loc 1 261 0
 438 0006 FFF7FEFF 		bl	vPortEnterCritical
 439              	.LVL58:
 263:..\..\FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 440              		.loc 1 263 0
 441 000a 2168     		ldr	r1, [r4]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 51


 442 000c E26B     		ldr	r2, [r4, #60]
 443 000e 236C     		ldr	r3, [r4, #64]
 444 0010 03FB0210 		mla	r0, r3, r2, r1
 445 0014 A060     		str	r0, [r4, #8]
 264:..\..\FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 446              		.loc 1 264 0
 447 0016 0020     		movs	r0, #0
 448 0018 A063     		str	r0, [r4, #56]
 265:..\..\FreeRTOS/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 449              		.loc 1 265 0
 450 001a 6160     		str	r1, [r4, #4]
 266:..\..\FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 451              		.loc 1 266 0
 452 001c 013A     		subs	r2, r2, #1
 453 001e 02FB0313 		mla	r3, r2, r3, r1
 454 0022 E360     		str	r3, [r4, #12]
 267:..\..\FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 455              		.loc 1 267 0
 456 0024 FF23     		movs	r3, #255
 457 0026 84F84430 		strb	r3, [r4, #68]
 268:..\..\FreeRTOS/queue.c **** 
 458              		.loc 1 268 0
 459 002a 84F84530 		strb	r3, [r4, #69]
 270:..\..\FreeRTOS/queue.c **** 		{
 460              		.loc 1 270 0
 461 002e 7DB9     		cbnz	r5, .L38
 277:..\..\FreeRTOS/queue.c **** 			{
 462              		.loc 1 277 0
 463 0030 2369     		ldr	r3, [r4, #16]
 464 0032 ABB1     		cbz	r3, .L39
 279:..\..\FreeRTOS/queue.c **** 				{
 465              		.loc 1 279 0
 466 0034 04F11000 		add	r0, r4, #16
 467 0038 FFF7FEFF 		bl	xTaskRemoveFromEventList
 468              	.LVL59:
 469 003c 80B1     		cbz	r0, .L39
 281:..\..\FreeRTOS/queue.c **** 				}
 470              		.loc 1 281 0
 471 003e 4FF08052 		mov	r2, #268435456
 472 0042 094B     		ldr	r3, .L41
 473 0044 1A60     		str	r2, [r3]
 474              		.syntax unified
 475              	@ 281 "..\..\FreeRTOS\queue.c" 1
 476 0046 BFF34F8F 		dsb
 477              	@ 0 "" 2
 478              	@ 281 "..\..\FreeRTOS\queue.c" 1
 479 004a BFF36F8F 		isb
 480              	@ 0 "" 2
 481              		.thumb
 482              		.syntax unified
 483 004e 07E0     		b	.L39
 484              	.L38:
 296:..\..\FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 485              		.loc 1 296 0
 486 0050 04F11000 		add	r0, r4, #16
 487 0054 FFF7FEFF 		bl	vListInitialise
 488              	.LVL60:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 52


 297:..\..\FreeRTOS/queue.c **** 		}
 489              		.loc 1 297 0
 490 0058 04F12400 		add	r0, r4, #36
 491 005c FFF7FEFF 		bl	vListInitialise
 492              	.LVL61:
 493              	.L39:
 300:..\..\FreeRTOS/queue.c **** 
 494              		.loc 1 300 0
 495 0060 FFF7FEFF 		bl	vPortExitCritical
 496              	.LVL62:
 305:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 497              		.loc 1 305 0
 498 0064 0120     		movs	r0, #1
 499 0066 38BD     		pop	{r3, r4, r5, pc}
 500              	.LVL63:
 501              	.L42:
 502              		.align	2
 503              	.L41:
 504 0068 04ED00E0 		.word	-536810236
 505              		.cfi_endproc
 506              	.LFE68:
 507              		.size	xQueueGenericReset, .-xQueueGenericReset
 508              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 509              		.align	2
 510              		.thumb
 511              		.thumb_func
 512              		.type	prvInitialiseNewQueue, %function
 513              	prvInitialiseNewQueue:
 514              	.LFB70:
 423:..\..\FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 515              		.loc 1 423 0
 516              		.cfi_startproc
 517              		@ args = 4, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              	.LVL64:
 520 0000 10B5     		push	{r4, lr}
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 4, -8
 523              		.cfi_offset 14, -4
 524 0002 029B     		ldr	r3, [sp, #8]
 525              	.LVL65:
 428:..\..\FreeRTOS/queue.c **** 	{
 526              		.loc 1 428 0
 527 0004 0C46     		mov	r4, r1
 528 0006 09B9     		cbnz	r1, .L44
 434:..\..\FreeRTOS/queue.c **** 	}
 529              		.loc 1 434 0
 530 0008 1B60     		str	r3, [r3]
 531 000a 00E0     		b	.L45
 532              	.L44:
 439:..\..\FreeRTOS/queue.c **** 	}
 533              		.loc 1 439 0
 534 000c 1A60     		str	r2, [r3]
 535              	.L45:
 444:..\..\FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 536              		.loc 1 444 0
 537 000e D863     		str	r0, [r3, #60]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 53


 445:..\..\FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 538              		.loc 1 445 0
 539 0010 1C64     		str	r4, [r3, #64]
 446:..\..\FreeRTOS/queue.c **** 
 540              		.loc 1 446 0
 541 0012 0121     		movs	r1, #1
 542              	.LVL66:
 543 0014 1846     		mov	r0, r3
 544              	.LVL67:
 545 0016 FFF7FEFF 		bl	xQueueGenericReset
 546              	.LVL68:
 547 001a 10BD     		pop	{r4, pc}
 548              		.cfi_endproc
 549              	.LFE70:
 550              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 551              		.section	.text.xQueueGenericCreate,"ax",%progbits
 552              		.align	2
 553              		.global	xQueueGenericCreate
 554              		.thumb
 555              		.thumb_func
 556              		.type	xQueueGenericCreate, %function
 557              	xQueueGenericCreate:
 558              	.LFB69:
 369:..\..\FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 559              		.loc 1 369 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              	.LVL69:
 564 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 565              		.cfi_def_cfa_offset 20
 566              		.cfi_offset 4, -20
 567              		.cfi_offset 5, -16
 568              		.cfi_offset 6, -12
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 83B0     		sub	sp, sp, #12
 572              		.cfi_def_cfa_offset 32
 573 0004 0546     		mov	r5, r0
 574 0006 0E46     		mov	r6, r1
 575 0008 1746     		mov	r7, r2
 379:..\..\FreeRTOS/queue.c **** 
 576              		.loc 1 379 0
 577 000a 01FB00F0 		mul	r0, r1, r0
 578              	.LVL70:
 390:..\..\FreeRTOS/queue.c **** 
 579              		.loc 1 390 0
 580 000e 4830     		adds	r0, r0, #72
 581              	.LVL71:
 582 0010 FFF7FEFF 		bl	pvPortMalloc
 583              	.LVL72:
 392:..\..\FreeRTOS/queue.c **** 		{
 584              		.loc 1 392 0
 585 0014 0446     		mov	r4, r0
 586 0016 38B1     		cbz	r0, .L48
 587              	.LVL73:
 408:..\..\FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 54


 588              		.loc 1 408 0
 589 0018 0090     		str	r0, [sp]
 590 001a 3B46     		mov	r3, r7
 591 001c 00F14802 		add	r2, r0, #72
 592              	.LVL74:
 593 0020 3146     		mov	r1, r6
 594 0022 2846     		mov	r0, r5
 595              	.LVL75:
 596 0024 FFF7FEFF 		bl	prvInitialiseNewQueue
 597              	.LVL76:
 598              	.L48:
 417:..\..\FreeRTOS/queue.c **** 
 599              		.loc 1 417 0
 600 0028 2046     		mov	r0, r4
 601 002a 03B0     		add	sp, sp, #12
 602              		.cfi_def_cfa_offset 20
 603              		@ sp needed
 604 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 605              		.cfi_endproc
 606              	.LFE69:
 607              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 608 002e 00BF     		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 609              		.align	2
 610              		.global	xQueueCreateCountingSemaphore
 611              		.thumb
 612              		.thumb_func
 613              		.type	xQueueCreateCountingSemaphore, %function
 614              	xQueueCreateCountingSemaphore:
 615              	.LFB75:
 715:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 616              		.loc 1 715 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              	.LVL77:
 621 0000 10B5     		push	{r4, lr}
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 4, -8
 624              		.cfi_offset 14, -4
 625 0002 0C46     		mov	r4, r1
 721:..\..\FreeRTOS/queue.c **** 
 626              		.loc 1 721 0
 627 0004 0222     		movs	r2, #2
 628 0006 0021     		movs	r1, #0
 629              	.LVL78:
 630 0008 FFF7FEFF 		bl	xQueueGenericCreate
 631              	.LVL79:
 723:..\..\FreeRTOS/queue.c **** 		{
 632              		.loc 1 723 0
 633 000c 0346     		mov	r3, r0
 634 000e 00B1     		cbz	r0, .L51
 725:..\..\FreeRTOS/queue.c **** 
 635              		.loc 1 725 0
 636 0010 8463     		str	r4, [r0, #56]
 637              	.L51:
 735:..\..\FreeRTOS/queue.c **** 
 638              		.loc 1 735 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 55


 639 0012 1846     		mov	r0, r3
 640              	.LVL80:
 641 0014 10BD     		pop	{r4, pc}
 642              		.cfi_endproc
 643              	.LFE75:
 644              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 645 0016 00BF     		.section	.text.xQueueGenericSend,"ax",%progbits
 646              		.align	2
 647              		.global	xQueueGenericSend
 648              		.thumb
 649              		.thumb_func
 650              		.type	xQueueGenericSend, %function
 651              	xQueueGenericSend:
 652              	.LFB76:
 741:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 653              		.loc 1 741 0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 16
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              	.LVL81:
 658 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 659              		.cfi_def_cfa_offset 20
 660              		.cfi_offset 4, -20
 661              		.cfi_offset 5, -16
 662              		.cfi_offset 6, -12
 663              		.cfi_offset 7, -8
 664              		.cfi_offset 14, -4
 665 0002 85B0     		sub	sp, sp, #20
 666              		.cfi_def_cfa_offset 40
 667 0004 0446     		mov	r4, r0
 668 0006 0F46     		mov	r7, r1
 669 0008 0192     		str	r2, [sp, #4]
 670 000a 1E46     		mov	r6, r3
 671              	.LVL82:
 742:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 672              		.loc 1 742 0
 673 000c 0025     		movs	r5, #0
 674              	.LVL83:
 675              	.L54:
 761:..\..\FreeRTOS/queue.c **** 		{
 676              		.loc 1 761 0
 677 000e FFF7FEFF 		bl	vPortEnterCritical
 678              	.LVL84:
 767:..\..\FreeRTOS/queue.c **** 			{
 679              		.loc 1 767 0
 680 0012 A26B     		ldr	r2, [r4, #56]
 681 0014 E36B     		ldr	r3, [r4, #60]
 682 0016 9A42     		cmp	r2, r3
 683 0018 01D3     		bcc	.L55
 767:..\..\FreeRTOS/queue.c **** 			{
 684              		.loc 1 767 0 is_stmt 0 discriminator 1
 685 001a 022E     		cmp	r6, #2
 686 001c 21D1     		bne	.L56
 687              	.L55:
 833:..\..\FreeRTOS/queue.c **** 
 688              		.loc 1 833 0 is_stmt 1
 689 001e 3246     		mov	r2, r6
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 56


 690 0020 3946     		mov	r1, r7
 691 0022 2046     		mov	r0, r4
 692 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 693              	.LVL85:
 837:..\..\FreeRTOS/queue.c **** 					{
 694              		.loc 1 837 0
 695 0028 636A     		ldr	r3, [r4, #36]
 696 002a 6BB1     		cbz	r3, .L57
 839:..\..\FreeRTOS/queue.c **** 						{
 697              		.loc 1 839 0
 698 002c 04F12400 		add	r0, r4, #36
 699              	.LVL86:
 700 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 701              	.LVL87:
 702 0034 88B1     		cbz	r0, .L58
 845:..\..\FreeRTOS/queue.c **** 						}
 703              		.loc 1 845 0
 704 0036 4FF08052 		mov	r2, #268435456
 705 003a 324B     		ldr	r3, .L68
 706 003c 1A60     		str	r2, [r3]
 707              		.syntax unified
 708              	@ 845 "..\..\FreeRTOS\queue.c" 1
 709 003e BFF34F8F 		dsb
 710              	@ 0 "" 2
 711              	@ 845 "..\..\FreeRTOS\queue.c" 1
 712 0042 BFF36F8F 		isb
 713              	@ 0 "" 2
 714              		.thumb
 715              		.syntax unified
 716 0046 08E0     		b	.L58
 717              	.LVL88:
 718              	.L57:
 852:..\..\FreeRTOS/queue.c **** 					{
 719              		.loc 1 852 0
 720 0048 38B1     		cbz	r0, .L58
 858:..\..\FreeRTOS/queue.c **** 					}
 721              		.loc 1 858 0
 722 004a 4FF08052 		mov	r2, #268435456
 723 004e 2D4B     		ldr	r3, .L68
 724 0050 1A60     		str	r2, [r3]
 725              		.syntax unified
 726              	@ 858 "..\..\FreeRTOS\queue.c" 1
 727 0052 BFF34F8F 		dsb
 728              	@ 0 "" 2
 729              	@ 858 "..\..\FreeRTOS\queue.c" 1
 730 0056 BFF36F8F 		isb
 731              	@ 0 "" 2
 732              	.LVL89:
 733              		.thumb
 734              		.syntax unified
 735              	.L58:
 867:..\..\FreeRTOS/queue.c **** 				return pdPASS;
 736              		.loc 1 867 0
 737 005a FFF7FEFF 		bl	vPortExitCritical
 738              	.LVL90:
 868:..\..\FreeRTOS/queue.c **** 			}
 739              		.loc 1 868 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 57


 740 005e 0120     		movs	r0, #1
 741 0060 4EE0     		b	.L59
 742              	.L56:
 872:..\..\FreeRTOS/queue.c **** 				{
 743              		.loc 1 872 0
 744 0062 019B     		ldr	r3, [sp, #4]
 745 0064 1BB9     		cbnz	r3, .L60
 876:..\..\FreeRTOS/queue.c **** 
 746              		.loc 1 876 0
 747 0066 FFF7FEFF 		bl	vPortExitCritical
 748              	.LVL91:
 881:..\..\FreeRTOS/queue.c **** 				}
 749              		.loc 1 881 0
 750 006a 0020     		movs	r0, #0
 751 006c 48E0     		b	.L59
 752              	.L60:
 883:..\..\FreeRTOS/queue.c **** 				{
 753              		.loc 1 883 0
 754 006e 1DB9     		cbnz	r5, .L61
 887:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 755              		.loc 1 887 0
 756 0070 02A8     		add	r0, sp, #8
 757 0072 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 758              	.LVL92:
 888:..\..\FreeRTOS/queue.c **** 				}
 759              		.loc 1 888 0
 760 0076 0125     		movs	r5, #1
 761              	.LVL93:
 762              	.L61:
 897:..\..\FreeRTOS/queue.c **** 
 763              		.loc 1 897 0
 764 0078 FFF7FEFF 		bl	vPortExitCritical
 765              	.LVL94:
 902:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 766              		.loc 1 902 0
 767 007c FFF7FEFF 		bl	vTaskSuspendAll
 768              	.LVL95:
 903:..\..\FreeRTOS/queue.c **** 
 769              		.loc 1 903 0
 770 0080 FFF7FEFF 		bl	vPortEnterCritical
 771              	.LVL96:
 772 0084 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 773 0088 5BB2     		sxtb	r3, r3
 774 008a B3F1FF3F 		cmp	r3, #-1
 775 008e 02D1     		bne	.L62
 903:..\..\FreeRTOS/queue.c **** 
 776              		.loc 1 903 0 is_stmt 0 discriminator 1
 777 0090 0023     		movs	r3, #0
 778 0092 84F84430 		strb	r3, [r4, #68]
 779              	.L62:
 903:..\..\FreeRTOS/queue.c **** 
 780              		.loc 1 903 0 discriminator 3
 781 0096 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 782 009a 5BB2     		sxtb	r3, r3
 783 009c B3F1FF3F 		cmp	r3, #-1
 784 00a0 02D1     		bne	.L63
 903:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 58


 785              		.loc 1 903 0 discriminator 4
 786 00a2 0023     		movs	r3, #0
 787 00a4 84F84530 		strb	r3, [r4, #69]
 788              	.L63:
 903:..\..\FreeRTOS/queue.c **** 
 789              		.loc 1 903 0 discriminator 6
 790 00a8 FFF7FEFF 		bl	vPortExitCritical
 791              	.LVL97:
 906:..\..\FreeRTOS/queue.c **** 		{
 792              		.loc 1 906 0 is_stmt 1 discriminator 6
 793 00ac 01A9     		add	r1, sp, #4
 794              	.LVL98:
 795 00ae 02A8     		add	r0, sp, #8
 796 00b0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 797              	.LVL99:
 798 00b4 F0B9     		cbnz	r0, .L64
 908:..\..\FreeRTOS/queue.c **** 			{
 799              		.loc 1 908 0
 800 00b6 2046     		mov	r0, r4
 801 00b8 FFF7FEFF 		bl	prvIsQueueFull
 802              	.LVL100:
 803 00bc A0B1     		cbz	r0, .L65
 911:..\..\FreeRTOS/queue.c **** 
 804              		.loc 1 911 0
 805 00be 0199     		ldr	r1, [sp, #4]
 806 00c0 04F11000 		add	r0, r4, #16
 807 00c4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 808              	.LVL101:
 918:..\..\FreeRTOS/queue.c **** 
 809              		.loc 1 918 0
 810 00c8 2046     		mov	r0, r4
 811 00ca FFF7FEFF 		bl	prvUnlockQueue
 812              	.LVL102:
 925:..\..\FreeRTOS/queue.c **** 				{
 813              		.loc 1 925 0
 814 00ce FFF7FEFF 		bl	xTaskResumeAll
 815              	.LVL103:
 816 00d2 0028     		cmp	r0, #0
 817 00d4 9BD1     		bne	.L54
 927:..\..\FreeRTOS/queue.c **** 				}
 818              		.loc 1 927 0
 819 00d6 4FF08052 		mov	r2, #268435456
 820 00da 0A4B     		ldr	r3, .L68
 821 00dc 1A60     		str	r2, [r3]
 822              		.syntax unified
 823              	@ 927 "..\..\FreeRTOS\queue.c" 1
 824 00de BFF34F8F 		dsb
 825              	@ 0 "" 2
 826              	@ 927 "..\..\FreeRTOS\queue.c" 1
 827 00e2 BFF36F8F 		isb
 828              	@ 0 "" 2
 829              		.thumb
 830              		.syntax unified
 831 00e6 92E7     		b	.L54
 832              	.L65:
 933:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 833              		.loc 1 933 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 59


 834 00e8 2046     		mov	r0, r4
 835 00ea FFF7FEFF 		bl	prvUnlockQueue
 836              	.LVL104:
 934:..\..\FreeRTOS/queue.c **** 			}
 837              		.loc 1 934 0
 838 00ee FFF7FEFF 		bl	xTaskResumeAll
 839              	.LVL105:
 840 00f2 8CE7     		b	.L54
 841              	.L64:
 940:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 842              		.loc 1 940 0
 843 00f4 2046     		mov	r0, r4
 844 00f6 FFF7FEFF 		bl	prvUnlockQueue
 845              	.LVL106:
 941:..\..\FreeRTOS/queue.c **** 
 846              		.loc 1 941 0
 847 00fa FFF7FEFF 		bl	xTaskResumeAll
 848              	.LVL107:
 944:..\..\FreeRTOS/queue.c **** 		}
 849              		.loc 1 944 0
 850 00fe 0020     		movs	r0, #0
 851              	.L59:
 947:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 852              		.loc 1 947 0
 853 0100 05B0     		add	sp, sp, #20
 854              		.cfi_def_cfa_offset 20
 855              		@ sp needed
 856 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 857              	.LVL108:
 858              	.L69:
 859              		.align	2
 860              	.L68:
 861 0104 04ED00E0 		.word	-536810236
 862              		.cfi_endproc
 863              	.LFE76:
 864              		.size	xQueueGenericSend, .-xQueueGenericSend
 865              		.section	.text.prvInitialiseMutex,"ax",%progbits
 866              		.align	2
 867              		.thumb
 868              		.thumb_func
 869              		.type	prvInitialiseMutex, %function
 870              	prvInitialiseMutex:
 871              	.LFB71:
 467:..\..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 872              		.loc 1 467 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              	.LVL109:
 468:..\..\FreeRTOS/queue.c **** 		{
 877              		.loc 1 468 0
 878 0000 48B1     		cbz	r0, .L73
 467:..\..\FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 879              		.loc 1 467 0
 880 0002 08B5     		push	{r3, lr}
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 3, -8
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 60


 883              		.cfi_offset 14, -4
 474:..\..\FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 884              		.loc 1 474 0
 885 0004 0021     		movs	r1, #0
 886 0006 8160     		str	r1, [r0, #8]
 475:..\..\FreeRTOS/queue.c **** 
 887              		.loc 1 475 0
 888 0008 0160     		str	r1, [r0]
 478:..\..\FreeRTOS/queue.c **** 
 889              		.loc 1 478 0
 890 000a C160     		str	r1, [r0, #12]
 483:..\..\FreeRTOS/queue.c **** 		}
 891              		.loc 1 483 0
 892 000c 0B46     		mov	r3, r1
 893 000e 0A46     		mov	r2, r1
 894 0010 FFF7FEFF 		bl	xQueueGenericSend
 895              	.LVL110:
 896 0014 08BD     		pop	{r3, pc}
 897              	.LVL111:
 898              	.L73:
 899              		.cfi_def_cfa_offset 0
 900              		.cfi_restore 3
 901              		.cfi_restore 14
 902 0016 7047     		bx	lr
 903              		.cfi_endproc
 904              	.LFE71:
 905              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 906              		.section	.text.xQueueCreateMutex,"ax",%progbits
 907              		.align	2
 908              		.global	xQueueCreateMutex
 909              		.thumb
 910              		.thumb_func
 911              		.type	xQueueCreateMutex, %function
 912              	xQueueCreateMutex:
 913              	.LFB72:
 497:..\..\FreeRTOS/queue.c **** 	QueueHandle_t xNewQueue;
 914              		.loc 1 497 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 0
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918              	.LVL112:
 919 0000 10B5     		push	{r4, lr}
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 4, -8
 922              		.cfi_offset 14, -4
 923              	.LVL113:
 501:..\..\FreeRTOS/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 924              		.loc 1 501 0
 925 0002 0246     		mov	r2, r0
 926 0004 0021     		movs	r1, #0
 927 0006 0120     		movs	r0, #1
 928              	.LVL114:
 929 0008 FFF7FEFF 		bl	xQueueGenericCreate
 930              	.LVL115:
 931 000c 0446     		mov	r4, r0
 932              	.LVL116:
 502:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 61


 933              		.loc 1 502 0
 934 000e FFF7FEFF 		bl	prvInitialiseMutex
 935              	.LVL117:
 505:..\..\FreeRTOS/queue.c **** 
 936              		.loc 1 505 0
 937 0012 2046     		mov	r0, r4
 938 0014 10BD     		pop	{r4, pc}
 939              		.cfi_endproc
 940              	.LFE72:
 941              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 942 0016 00BF     		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 943              		.align	2
 944              		.global	xQueueGiveMutexRecursive
 945              		.thumb
 946              		.thumb_func
 947              		.type	xQueueGiveMutexRecursive, %function
 948              	xQueueGiveMutexRecursive:
 949              	.LFB73:
 590:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 950              		.loc 1 590 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              	.LVL118:
 955 0000 38B5     		push	{r3, r4, r5, lr}
 956              		.cfi_def_cfa_offset 16
 957              		.cfi_offset 3, -16
 958              		.cfi_offset 4, -12
 959              		.cfi_offset 5, -8
 960              		.cfi_offset 14, -4
 961 0002 0446     		mov	r4, r0
 962              	.LVL119:
 602:..\..\FreeRTOS/queue.c **** 		{
 963              		.loc 1 602 0
 964 0004 8568     		ldr	r5, [r0, #8]
 965 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 966              	.LVL120:
 967 000a 8542     		cmp	r5, r0
 968 000c 0AD1     		bne	.L78
 611:..\..\FreeRTOS/queue.c **** 
 969              		.loc 1 611 0
 970 000e E368     		ldr	r3, [r4, #12]
 971 0010 013B     		subs	r3, r3, #1
 972 0012 E360     		str	r3, [r4, #12]
 614:..\..\FreeRTOS/queue.c **** 			{
 973              		.loc 1 614 0
 974 0014 43B9     		cbnz	r3, .L79
 618:..\..\FreeRTOS/queue.c **** 			}
 975              		.loc 1 618 0
 976 0016 1A46     		mov	r2, r3
 977 0018 1946     		mov	r1, r3
 978 001a 2046     		mov	r0, r4
 979 001c FFF7FEFF 		bl	xQueueGenericSend
 980              	.LVL121:
 625:..\..\FreeRTOS/queue.c **** 		}
 981              		.loc 1 625 0
 982 0020 0120     		movs	r0, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 62


 983 0022 38BD     		pop	{r3, r4, r5, pc}
 984              	.LVL122:
 985              	.L78:
 631:..\..\FreeRTOS/queue.c **** 
 986              		.loc 1 631 0
 987 0024 0020     		movs	r0, #0
 988 0026 38BD     		pop	{r3, r4, r5, pc}
 989              	.LVL123:
 990              	.L79:
 625:..\..\FreeRTOS/queue.c **** 		}
 991              		.loc 1 625 0
 992 0028 0120     		movs	r0, #1
 993              	.LVL124:
 637:..\..\FreeRTOS/queue.c **** 
 994              		.loc 1 637 0
 995 002a 38BD     		pop	{r3, r4, r5, pc}
 996              		.cfi_endproc
 997              	.LFE73:
 998              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 999              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1000              		.align	2
 1001              		.global	xQueueGenericSendFromISR
 1002              		.thumb
 1003              		.thumb_func
 1004              		.type	xQueueGenericSendFromISR, %function
 1005              	xQueueGenericSendFromISR:
 1006              	.LFB77:
 951:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 1007              		.loc 1 951 0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 0
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 1011              	.LVL125:
 1012 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1013              		.cfi_def_cfa_offset 24
 1014              		.cfi_offset 3, -24
 1015              		.cfi_offset 4, -20
 1016              		.cfi_offset 5, -16
 1017              		.cfi_offset 6, -12
 1018              		.cfi_offset 7, -8
 1019              		.cfi_offset 14, -4
 1020              	.LVL126:
 1021              	.LBB25:
 1022              	.LBB26:
 1023              		.file 2 "..\\..\\FreeRTOS\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 63


  13:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 64


  70:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 65


 127:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 173:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 179:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	else
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 66


 184:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 188:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 190:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 193:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 195:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 198:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 206:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 209:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 211:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1024              		.loc 2 213 0
 1025              		.syntax unified
 1026              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1027 0002 EFF31186 			mrs r6, basepri											
 1028 0006 4FF0A004 		mov r4, #160												
 1029 000a 84F31188 		msr basepri, r4											
 1030 000e BFF36F8F 		isb														
 1031 0012 BFF34F8F 		dsb														
 1032              	
 1033              	@ 0 "" 2
 1034              		.thumb
 1035              		.syntax unified
 1036              	.LBE26:
 1037              	.LBE25:
 983:..\..\FreeRTOS/queue.c **** 		{
 1038              		.loc 1 983 0
 1039 0016 856B     		ldr	r5, [r0, #56]
 1040 0018 C46B     		ldr	r4, [r0, #60]
 1041 001a A542     		cmp	r5, r4
 1042 001c 01D3     		bcc	.L82
 983:..\..\FreeRTOS/queue.c **** 		{
 1043              		.loc 1 983 0 is_stmt 0 discriminator 1
 1044 001e 022B     		cmp	r3, #2
 1045 0020 1CD1     		bne	.L85
 1046              	.L82:
 1047 0022 1746     		mov	r7, r2
 1048 0024 0546     		mov	r5, r0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 67


 1049              	.LBB27:
 985:..\..\FreeRTOS/queue.c **** 			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1050              		.loc 1 985 0 is_stmt 1
 1051 0026 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1052 002a 64B2     		sxtb	r4, r4
 1053              	.LVL127:
 986:..\..\FreeRTOS/queue.c **** 
 1054              		.loc 1 986 0
 1055 002c 826B     		ldr	r2, [r0, #56]
 1056              	.LVL128:
 995:..\..\FreeRTOS/queue.c **** 
 1057              		.loc 1 995 0
 1058 002e 1A46     		mov	r2, r3
 1059 0030 FFF7FEFF 		bl	prvCopyDataToQueue
 1060              	.LVL129:
 999:..\..\FreeRTOS/queue.c **** 			{
 1061              		.loc 1 999 0
 1062 0034 B4F1FF3F 		cmp	r4, #-1
 1063 0038 0AD1     		bne	.L84
1061:..\..\FreeRTOS/queue.c **** 					{
 1064              		.loc 1 1061 0
 1065 003a 6B6A     		ldr	r3, [r5, #36]
 1066 003c 83B1     		cbz	r3, .L86
1063:..\..\FreeRTOS/queue.c **** 						{
 1067              		.loc 1 1063 0
 1068 003e 05F12400 		add	r0, r5, #36
 1069 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1070              	.LVL130:
 1071 0046 68B1     		cbz	r0, .L87
1067:..\..\FreeRTOS/queue.c **** 							{
 1072              		.loc 1 1067 0
 1073 0048 77B1     		cbz	r7, .L88
1069:..\..\FreeRTOS/queue.c **** 							}
 1074              		.loc 1 1069 0
 1075 004a 0120     		movs	r0, #1
 1076 004c 3860     		str	r0, [r7]
 1077 004e 0CE0     		b	.L83
 1078              	.L84:
1095:..\..\FreeRTOS/queue.c **** 			}
 1079              		.loc 1 1095 0
 1080 0050 0134     		adds	r4, r4, #1
 1081              	.LVL131:
 1082 0052 64B2     		sxtb	r4, r4
 1083              	.LVL132:
 1084 0054 85F84540 		strb	r4, [r5, #69]
1098:..\..\FreeRTOS/queue.c **** 		}
 1085              		.loc 1 1098 0
 1086 0058 0120     		movs	r0, #1
 1087 005a 06E0     		b	.L83
 1088              	.LVL133:
 1089              	.L85:
 1090              	.LBE27:
1103:..\..\FreeRTOS/queue.c **** 		}
 1091              		.loc 1 1103 0
 1092 005c 0020     		movs	r0, #0
 1093              	.LVL134:
 1094 005e 04E0     		b	.L83
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 68


 1095              	.LVL135:
 1096              	.L86:
 1097              	.LBB28:
1098:..\..\FreeRTOS/queue.c **** 		}
 1098              		.loc 1 1098 0
 1099 0060 0120     		movs	r0, #1
 1100 0062 02E0     		b	.L83
 1101              	.L87:
 1102 0064 0120     		movs	r0, #1
 1103 0066 00E0     		b	.L83
 1104              	.L88:
 1105 0068 0120     		movs	r0, #1
 1106              	.LVL136:
 1107              	.L83:
 1108              	.LBE28:
 1109              	.LBB29:
 1110              	.LBB30:
 214:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 223:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 226:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 227:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 229:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 231:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1111              		.loc 2 231 0
 1112              		.syntax unified
 1113              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1114 006a 86F31188 			msr basepri, r6	
 1115              	@ 0 "" 2
 1116              	.LVL137:
 1117              		.thumb
 1118              		.syntax unified
 1119              	.LBE30:
 1120              	.LBE29:
1109:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1121              		.loc 1 1109 0
 1122 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1123              		.cfi_endproc
 1124              	.LFE77:
 1125              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1126              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1127              		.align	2
 1128              		.global	xQueueGiveFromISR
 1129              		.thumb
 1130              		.thumb_func
 1131              		.type	xQueueGiveFromISR, %function
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 69


 1132              	xQueueGiveFromISR:
 1133              	.LFB78:
1113:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 1134              		.loc 1 1113 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              	.LVL138:
 1139 0000 38B5     		push	{r3, r4, r5, lr}
 1140              		.cfi_def_cfa_offset 16
 1141              		.cfi_offset 3, -16
 1142              		.cfi_offset 4, -12
 1143              		.cfi_offset 5, -8
 1144              		.cfi_offset 14, -4
 1145              	.LVL139:
 1146              	.LBB31:
 1147              	.LBB32:
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1148              		.loc 2 213 0
 1149              		.syntax unified
 1150              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1151 0002 EFF31184 			mrs r4, basepri											
 1152 0006 4FF0A003 		mov r3, #160												
 1153 000a 83F31188 		msr basepri, r3											
 1154 000e BFF36F8F 		isb														
 1155 0012 BFF34F8F 		dsb														
 1156              	
 1157              	@ 0 "" 2
 1158              		.thumb
 1159              		.syntax unified
 1160              	.LBE32:
 1161              	.LBE31:
 1162              	.LBB33:
1153:..\..\FreeRTOS/queue.c **** 
 1163              		.loc 1 1153 0
 1164 0016 826B     		ldr	r2, [r0, #56]
 1165              	.LVL140:
1158:..\..\FreeRTOS/queue.c **** 		{
 1166              		.loc 1 1158 0
 1167 0018 C36B     		ldr	r3, [r0, #60]
 1168 001a 9A42     		cmp	r2, r3
 1169 001c 18D2     		bcs	.L93
 1170              	.LBB34:
1160:..\..\FreeRTOS/queue.c **** 
 1171              		.loc 1 1160 0
 1172 001e 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1173 0022 5BB2     		sxtb	r3, r3
 1174              	.LVL141:
1170:..\..\FreeRTOS/queue.c **** 
 1175              		.loc 1 1170 0
 1176 0024 0132     		adds	r2, r2, #1
 1177              	.LVL142:
 1178 0026 8263     		str	r2, [r0, #56]
1174:..\..\FreeRTOS/queue.c **** 			{
 1179              		.loc 1 1174 0
 1180 0028 B3F1FF3F 		cmp	r3, #-1
 1181 002c 0AD1     		bne	.L92
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 70


1229:..\..\FreeRTOS/queue.c **** 					{
 1182              		.loc 1 1229 0
 1183 002e 436A     		ldr	r3, [r0, #36]
 1184              	.LVL143:
 1185 0030 83B1     		cbz	r3, .L94
 1186 0032 0D46     		mov	r5, r1
1231:..\..\FreeRTOS/queue.c **** 						{
 1187              		.loc 1 1231 0
 1188 0034 2430     		adds	r0, r0, #36
 1189              	.LVL144:
 1190 0036 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1191              	.LVL145:
 1192 003a 68B1     		cbz	r0, .L95
1235:..\..\FreeRTOS/queue.c **** 							{
 1193              		.loc 1 1235 0
 1194 003c 75B1     		cbz	r5, .L96
1237:..\..\FreeRTOS/queue.c **** 							}
 1195              		.loc 1 1237 0
 1196 003e 0120     		movs	r0, #1
 1197 0040 2860     		str	r0, [r5]
 1198 0042 0CE0     		b	.L91
 1199              	.LVL146:
 1200              	.L92:
1260:..\..\FreeRTOS/queue.c **** 			}
 1201              		.loc 1 1260 0
 1202 0044 0133     		adds	r3, r3, #1
 1203              	.LVL147:
 1204 0046 5BB2     		sxtb	r3, r3
 1205              	.LVL148:
 1206 0048 80F84530 		strb	r3, [r0, #69]
1263:..\..\FreeRTOS/queue.c **** 		}
 1207              		.loc 1 1263 0
 1208 004c 0120     		movs	r0, #1
 1209              	.LVL149:
 1210 004e 06E0     		b	.L91
 1211              	.LVL150:
 1212              	.L93:
 1213              	.LBE34:
1268:..\..\FreeRTOS/queue.c **** 		}
 1214              		.loc 1 1268 0
 1215 0050 0020     		movs	r0, #0
 1216              	.LVL151:
 1217 0052 04E0     		b	.L91
 1218              	.LVL152:
 1219              	.L94:
 1220              	.LBB35:
1263:..\..\FreeRTOS/queue.c **** 		}
 1221              		.loc 1 1263 0
 1222 0054 0120     		movs	r0, #1
 1223              	.LVL153:
 1224 0056 02E0     		b	.L91
 1225              	.LVL154:
 1226              	.L95:
 1227 0058 0120     		movs	r0, #1
 1228 005a 00E0     		b	.L91
 1229              	.L96:
 1230 005c 0120     		movs	r0, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 71


 1231              	.LVL155:
 1232              	.L91:
 1233              	.LBE35:
 1234              	.LBE33:
 1235              	.LBB36:
 1236              	.LBB37:
 1237              		.loc 2 231 0
 1238              		.syntax unified
 1239              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 1240 005e 84F31188 			msr basepri, r4	
 1241              	@ 0 "" 2
 1242              	.LVL156:
 1243              		.thumb
 1244              		.syntax unified
 1245              	.LBE37:
 1246              	.LBE36:
1274:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1247              		.loc 1 1274 0
 1248 0062 38BD     		pop	{r3, r4, r5, pc}
 1249              		.cfi_endproc
 1250              	.LFE78:
 1251              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1252              		.section	.text.xQueueReceive,"ax",%progbits
 1253              		.align	2
 1254              		.global	xQueueReceive
 1255              		.thumb
 1256              		.thumb_func
 1257              		.type	xQueueReceive, %function
 1258              	xQueueReceive:
 1259              	.LFB79:
1278:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1260              		.loc 1 1278 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 16
 1263              		@ frame_needed = 0, uses_anonymous_args = 0
 1264              	.LVL157:
 1265 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1266              		.cfi_def_cfa_offset 20
 1267              		.cfi_offset 4, -20
 1268              		.cfi_offset 5, -16
 1269              		.cfi_offset 6, -12
 1270              		.cfi_offset 7, -8
 1271              		.cfi_offset 14, -4
 1272 0002 85B0     		sub	sp, sp, #20
 1273              		.cfi_def_cfa_offset 40
 1274 0004 0446     		mov	r4, r0
 1275 0006 0F46     		mov	r7, r1
 1276 0008 0192     		str	r2, [sp, #4]
 1277              	.LVL158:
1279:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 1278              		.loc 1 1279 0
 1279 000a 0026     		movs	r6, #0
 1280              	.LVL159:
 1281              	.L99:
1303:..\..\FreeRTOS/queue.c **** 		{
 1282              		.loc 1 1303 0
 1283 000c FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 72


 1284              	.LVL160:
 1285              	.LBB38:
1305:..\..\FreeRTOS/queue.c **** 
 1286              		.loc 1 1305 0
 1287 0010 A56B     		ldr	r5, [r4, #56]
 1288              	.LVL161:
1309:..\..\FreeRTOS/queue.c **** 			{
 1289              		.loc 1 1309 0
 1290 0012 C5B1     		cbz	r5, .L100
1312:..\..\FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1291              		.loc 1 1312 0
 1292 0014 3946     		mov	r1, r7
 1293 0016 2046     		mov	r0, r4
 1294 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1295              	.LVL162:
1314:..\..\FreeRTOS/queue.c **** 
 1296              		.loc 1 1314 0
 1297 001c 013D     		subs	r5, r5, #1
 1298              	.LVL163:
 1299 001e A563     		str	r5, [r4, #56]
1319:..\..\FreeRTOS/queue.c **** 				{
 1300              		.loc 1 1319 0
 1301 0020 2369     		ldr	r3, [r4, #16]
 1302 0022 63B1     		cbz	r3, .L101
1321:..\..\FreeRTOS/queue.c **** 					{
 1303              		.loc 1 1321 0
 1304 0024 04F11000 		add	r0, r4, #16
 1305 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1306              	.LVL164:
 1307 002c 38B1     		cbz	r0, .L101
1323:..\..\FreeRTOS/queue.c **** 					}
 1308              		.loc 1 1323 0
 1309 002e 4FF08052 		mov	r2, #268435456
 1310 0032 304B     		ldr	r3, .L111
 1311 0034 1A60     		str	r2, [r3]
 1312              		.syntax unified
 1313              	@ 1323 "..\..\FreeRTOS\queue.c" 1
 1314 0036 BFF34F8F 		dsb
 1315              	@ 0 "" 2
 1316              	@ 1323 "..\..\FreeRTOS\queue.c" 1
 1317 003a BFF36F8F 		isb
 1318              	@ 0 "" 2
 1319              		.thumb
 1320              		.syntax unified
 1321              	.L101:
1335:..\..\FreeRTOS/queue.c **** 				return pdPASS;
 1322              		.loc 1 1335 0
 1323 003e FFF7FEFF 		bl	vPortExitCritical
 1324              	.LVL165:
1336:..\..\FreeRTOS/queue.c **** 			}
 1325              		.loc 1 1336 0
 1326 0042 0120     		movs	r0, #1
 1327 0044 53E0     		b	.L102
 1328              	.LVL166:
 1329              	.L100:
1340:..\..\FreeRTOS/queue.c **** 				{
 1330              		.loc 1 1340 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 73


 1331 0046 019B     		ldr	r3, [sp, #4]
 1332 0048 1BB9     		cbnz	r3, .L103
1344:..\..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1333              		.loc 1 1344 0
 1334 004a FFF7FEFF 		bl	vPortExitCritical
 1335              	.LVL167:
1346:..\..\FreeRTOS/queue.c **** 				}
 1336              		.loc 1 1346 0
 1337 004e 0020     		movs	r0, #0
 1338 0050 4DE0     		b	.L102
 1339              	.L103:
1348:..\..\FreeRTOS/queue.c **** 				{
 1340              		.loc 1 1348 0
 1341 0052 1EB9     		cbnz	r6, .L104
1352:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1342              		.loc 1 1352 0
 1343 0054 02A8     		add	r0, sp, #8
 1344 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1345              	.LVL168:
1353:..\..\FreeRTOS/queue.c **** 				}
 1346              		.loc 1 1353 0
 1347 005a 0126     		movs	r6, #1
 1348              	.LVL169:
 1349              	.L104:
 1350              	.LBE38:
1362:..\..\FreeRTOS/queue.c **** 
 1351              		.loc 1 1362 0
 1352 005c FFF7FEFF 		bl	vPortExitCritical
 1353              	.LVL170:
1367:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1354              		.loc 1 1367 0
 1355 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1356              	.LVL171:
1368:..\..\FreeRTOS/queue.c **** 
 1357              		.loc 1 1368 0
 1358 0064 FFF7FEFF 		bl	vPortEnterCritical
 1359              	.LVL172:
 1360 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1361 006c 5BB2     		sxtb	r3, r3
 1362 006e B3F1FF3F 		cmp	r3, #-1
 1363 0072 02D1     		bne	.L105
1368:..\..\FreeRTOS/queue.c **** 
 1364              		.loc 1 1368 0 is_stmt 0 discriminator 1
 1365 0074 0023     		movs	r3, #0
 1366 0076 84F84430 		strb	r3, [r4, #68]
 1367              	.L105:
1368:..\..\FreeRTOS/queue.c **** 
 1368              		.loc 1 1368 0 discriminator 3
 1369 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1370 007e 5BB2     		sxtb	r3, r3
 1371 0080 B3F1FF3F 		cmp	r3, #-1
 1372 0084 02D1     		bne	.L106
1368:..\..\FreeRTOS/queue.c **** 
 1373              		.loc 1 1368 0 discriminator 4
 1374 0086 0023     		movs	r3, #0
 1375 0088 84F84530 		strb	r3, [r4, #69]
 1376              	.L106:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 74


1368:..\..\FreeRTOS/queue.c **** 
 1377              		.loc 1 1368 0 discriminator 6
 1378 008c FFF7FEFF 		bl	vPortExitCritical
 1379              	.LVL173:
1371:..\..\FreeRTOS/queue.c **** 		{
 1380              		.loc 1 1371 0 is_stmt 1 discriminator 6
 1381 0090 01A9     		add	r1, sp, #4
 1382              	.LVL174:
 1383 0092 02A8     		add	r0, sp, #8
 1384 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1385              	.LVL175:
 1386 0098 F0B9     		cbnz	r0, .L107
1375:..\..\FreeRTOS/queue.c **** 			{
 1387              		.loc 1 1375 0
 1388 009a 2046     		mov	r0, r4
 1389 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1390              	.LVL176:
 1391 00a0 A0B1     		cbz	r0, .L108
1378:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1392              		.loc 1 1378 0
 1393 00a2 0199     		ldr	r1, [sp, #4]
 1394 00a4 04F12400 		add	r0, r4, #36
 1395 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1396              	.LVL177:
1379:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1397              		.loc 1 1379 0
 1398 00ac 2046     		mov	r0, r4
 1399 00ae FFF7FEFF 		bl	prvUnlockQueue
 1400              	.LVL178:
1380:..\..\FreeRTOS/queue.c **** 				{
 1401              		.loc 1 1380 0
 1402 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1403              	.LVL179:
 1404 00b6 0028     		cmp	r0, #0
 1405 00b8 A8D1     		bne	.L99
1382:..\..\FreeRTOS/queue.c **** 				}
 1406              		.loc 1 1382 0
 1407 00ba 4FF08052 		mov	r2, #268435456
 1408 00be 0D4B     		ldr	r3, .L111
 1409 00c0 1A60     		str	r2, [r3]
 1410              		.syntax unified
 1411              	@ 1382 "..\..\FreeRTOS\queue.c" 1
 1412 00c2 BFF34F8F 		dsb
 1413              	@ 0 "" 2
 1414              	@ 1382 "..\..\FreeRTOS\queue.c" 1
 1415 00c6 BFF36F8F 		isb
 1416              	@ 0 "" 2
 1417              		.thumb
 1418              		.syntax unified
 1419 00ca 9FE7     		b	.L99
 1420              	.L108:
1393:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1421              		.loc 1 1393 0
 1422 00cc 2046     		mov	r0, r4
 1423 00ce FFF7FEFF 		bl	prvUnlockQueue
 1424              	.LVL180:
1394:..\..\FreeRTOS/queue.c **** 			}
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 75


 1425              		.loc 1 1394 0
 1426 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1427              	.LVL181:
 1428 00d6 99E7     		b	.L99
 1429              	.L107:
1401:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1430              		.loc 1 1401 0
 1431 00d8 2046     		mov	r0, r4
 1432 00da FFF7FEFF 		bl	prvUnlockQueue
 1433              	.LVL182:
1402:..\..\FreeRTOS/queue.c **** 
 1434              		.loc 1 1402 0
 1435 00de FFF7FEFF 		bl	xTaskResumeAll
 1436              	.LVL183:
1404:..\..\FreeRTOS/queue.c **** 			{
 1437              		.loc 1 1404 0
 1438 00e2 2046     		mov	r0, r4
 1439 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1440              	.LVL184:
 1441 00e8 0028     		cmp	r0, #0
 1442 00ea 8FD0     		beq	.L99
1407:..\..\FreeRTOS/queue.c **** 			}
 1443              		.loc 1 1407 0
 1444 00ec 0020     		movs	r0, #0
 1445              	.LVL185:
 1446              	.L102:
1415:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1447              		.loc 1 1415 0
 1448 00ee 05B0     		add	sp, sp, #20
 1449              		.cfi_def_cfa_offset 20
 1450              		@ sp needed
 1451 00f0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1452              	.LVL186:
 1453              	.L112:
 1454 00f2 00BF     		.align	2
 1455              	.L111:
 1456 00f4 04ED00E0 		.word	-536810236
 1457              		.cfi_endproc
 1458              	.LFE79:
 1459              		.size	xQueueReceive, .-xQueueReceive
 1460              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1461              		.align	2
 1462              		.global	xQueueSemaphoreTake
 1463              		.thumb
 1464              		.thumb_func
 1465              		.type	xQueueSemaphoreTake, %function
 1466              	xQueueSemaphoreTake:
 1467              	.LFB80:
1419:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1468              		.loc 1 1419 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 16
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              	.LVL187:
 1473 0000 70B5     		push	{r4, r5, r6, lr}
 1474              		.cfi_def_cfa_offset 16
 1475              		.cfi_offset 4, -16
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 76


 1476              		.cfi_offset 5, -12
 1477              		.cfi_offset 6, -8
 1478              		.cfi_offset 14, -4
 1479 0002 84B0     		sub	sp, sp, #16
 1480              		.cfi_def_cfa_offset 32
 1481 0004 0446     		mov	r4, r0
 1482 0006 0191     		str	r1, [sp, #4]
 1483              	.LVL188:
1425:..\..\FreeRTOS/queue.c **** #endif
 1484              		.loc 1 1425 0
 1485 0008 0026     		movs	r6, #0
1420:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 1486              		.loc 1 1420 0
 1487 000a 3546     		mov	r5, r6
 1488              	.LVL189:
 1489              	.L114:
1448:..\..\FreeRTOS/queue.c **** 		{
 1490              		.loc 1 1448 0
 1491 000c FFF7FEFF 		bl	vPortEnterCritical
 1492              	.LVL190:
 1493              	.LBB39:
1452:..\..\FreeRTOS/queue.c **** 
 1494              		.loc 1 1452 0
 1495 0010 A36B     		ldr	r3, [r4, #56]
 1496              	.LVL191:
1456:..\..\FreeRTOS/queue.c **** 			{
 1497              		.loc 1 1456 0
 1498 0012 CBB1     		cbz	r3, .L115
1462:..\..\FreeRTOS/queue.c **** 
 1499              		.loc 1 1462 0
 1500 0014 013B     		subs	r3, r3, #1
 1501              	.LVL192:
 1502 0016 A363     		str	r3, [r4, #56]
1466:..\..\FreeRTOS/queue.c **** 					{
 1503              		.loc 1 1466 0
 1504 0018 2368     		ldr	r3, [r4]
 1505              	.LVL193:
 1506 001a 13B9     		cbnz	r3, .L116
1470:..\..\FreeRTOS/queue.c **** 					}
 1507              		.loc 1 1470 0
 1508 001c FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1509              	.LVL194:
 1510 0020 A060     		str	r0, [r4, #8]
 1511              	.L116:
1481:..\..\FreeRTOS/queue.c **** 				{
 1512              		.loc 1 1481 0
 1513 0022 2369     		ldr	r3, [r4, #16]
 1514 0024 63B1     		cbz	r3, .L117
1483:..\..\FreeRTOS/queue.c **** 					{
 1515              		.loc 1 1483 0
 1516 0026 04F11000 		add	r0, r4, #16
 1517 002a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1518              	.LVL195:
 1519 002e 38B1     		cbz	r0, .L117
1485:..\..\FreeRTOS/queue.c **** 					}
 1520              		.loc 1 1485 0
 1521 0030 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 77


 1522 0034 3B4B     		ldr	r3, .L129
 1523 0036 1A60     		str	r2, [r3]
 1524              		.syntax unified
 1525              	@ 1485 "..\..\FreeRTOS\queue.c" 1
 1526 0038 BFF34F8F 		dsb
 1527              	@ 0 "" 2
 1528              	@ 1485 "..\..\FreeRTOS\queue.c" 1
 1529 003c BFF36F8F 		isb
 1530              	@ 0 "" 2
 1531              		.thumb
 1532              		.syntax unified
 1533              	.L117:
1497:..\..\FreeRTOS/queue.c **** 				return pdPASS;
 1534              		.loc 1 1497 0
 1535 0040 FFF7FEFF 		bl	vPortExitCritical
 1536              	.LVL196:
1498:..\..\FreeRTOS/queue.c **** 			}
 1537              		.loc 1 1498 0
 1538 0044 0120     		movs	r0, #1
 1539 0046 6BE0     		b	.L118
 1540              	.LVL197:
 1541              	.L115:
1502:..\..\FreeRTOS/queue.c **** 				{
 1542              		.loc 1 1502 0
 1543 0048 019B     		ldr	r3, [sp, #4]
 1544              	.LVL198:
 1545 004a 1BB9     		cbnz	r3, .L119
1515:..\..\FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1546              		.loc 1 1515 0
 1547 004c FFF7FEFF 		bl	vPortExitCritical
 1548              	.LVL199:
1517:..\..\FreeRTOS/queue.c **** 				}
 1549              		.loc 1 1517 0
 1550 0050 0020     		movs	r0, #0
 1551 0052 65E0     		b	.L118
 1552              	.L119:
1519:..\..\FreeRTOS/queue.c **** 				{
 1553              		.loc 1 1519 0
 1554 0054 1DB9     		cbnz	r5, .L120
1523:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1555              		.loc 1 1523 0
 1556 0056 02A8     		add	r0, sp, #8
 1557 0058 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1558              	.LVL200:
1524:..\..\FreeRTOS/queue.c **** 				}
 1559              		.loc 1 1524 0
 1560 005c 0125     		movs	r5, #1
 1561              	.LVL201:
 1562              	.L120:
 1563              	.LBE39:
1533:..\..\FreeRTOS/queue.c **** 
 1564              		.loc 1 1533 0
 1565 005e FFF7FEFF 		bl	vPortExitCritical
 1566              	.LVL202:
1538:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1567              		.loc 1 1538 0
 1568 0062 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 78


 1569              	.LVL203:
1539:..\..\FreeRTOS/queue.c **** 
 1570              		.loc 1 1539 0
 1571 0066 FFF7FEFF 		bl	vPortEnterCritical
 1572              	.LVL204:
 1573 006a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1574 006e 5BB2     		sxtb	r3, r3
 1575 0070 B3F1FF3F 		cmp	r3, #-1
 1576 0074 02D1     		bne	.L121
1539:..\..\FreeRTOS/queue.c **** 
 1577              		.loc 1 1539 0 is_stmt 0 discriminator 1
 1578 0076 0023     		movs	r3, #0
 1579 0078 84F84430 		strb	r3, [r4, #68]
 1580              	.L121:
1539:..\..\FreeRTOS/queue.c **** 
 1581              		.loc 1 1539 0 discriminator 3
 1582 007c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1583 0080 5BB2     		sxtb	r3, r3
 1584 0082 B3F1FF3F 		cmp	r3, #-1
 1585 0086 02D1     		bne	.L122
1539:..\..\FreeRTOS/queue.c **** 
 1586              		.loc 1 1539 0 discriminator 4
 1587 0088 0023     		movs	r3, #0
 1588 008a 84F84530 		strb	r3, [r4, #69]
 1589              	.L122:
1539:..\..\FreeRTOS/queue.c **** 
 1590              		.loc 1 1539 0 discriminator 6
 1591 008e FFF7FEFF 		bl	vPortExitCritical
 1592              	.LVL205:
1542:..\..\FreeRTOS/queue.c **** 		{
 1593              		.loc 1 1542 0 is_stmt 1 discriminator 6
 1594 0092 01A9     		add	r1, sp, #4
 1595              	.LVL206:
 1596 0094 02A8     		add	r0, sp, #8
 1597 0096 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1598              	.LVL207:
 1599 009a 40BB     		cbnz	r0, .L123
1548:..\..\FreeRTOS/queue.c **** 			{
 1600              		.loc 1 1548 0
 1601 009c 2046     		mov	r0, r4
 1602 009e FFF7FEFF 		bl	prvIsQueueEmpty
 1603              	.LVL208:
 1604 00a2 F0B1     		cbz	r0, .L124
1554:..\..\FreeRTOS/queue.c **** 					{
 1605              		.loc 1 1554 0
 1606 00a4 2368     		ldr	r3, [r4]
 1607 00a6 3BB9     		cbnz	r3, .L125
1556:..\..\FreeRTOS/queue.c **** 						{
 1608              		.loc 1 1556 0
 1609 00a8 FFF7FEFF 		bl	vPortEnterCritical
 1610              	.LVL209:
1558:..\..\FreeRTOS/queue.c **** 						}
 1611              		.loc 1 1558 0
 1612 00ac A068     		ldr	r0, [r4, #8]
 1613 00ae FFF7FEFF 		bl	xTaskPriorityInherit
 1614              	.LVL210:
 1615 00b2 0646     		mov	r6, r0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 79


 1616              	.LVL211:
1560:..\..\FreeRTOS/queue.c **** 					}
 1617              		.loc 1 1560 0
 1618 00b4 FFF7FEFF 		bl	vPortExitCritical
 1619              	.LVL212:
 1620              	.L125:
1569:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1621              		.loc 1 1569 0
 1622 00b8 0199     		ldr	r1, [sp, #4]
 1623 00ba 04F12400 		add	r0, r4, #36
 1624 00be FFF7FEFF 		bl	vTaskPlaceOnEventList
 1625              	.LVL213:
1570:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1626              		.loc 1 1570 0
 1627 00c2 2046     		mov	r0, r4
 1628 00c4 FFF7FEFF 		bl	prvUnlockQueue
 1629              	.LVL214:
1571:..\..\FreeRTOS/queue.c **** 				{
 1630              		.loc 1 1571 0
 1631 00c8 FFF7FEFF 		bl	xTaskResumeAll
 1632              	.LVL215:
 1633 00cc 0028     		cmp	r0, #0
 1634 00ce 9DD1     		bne	.L114
1573:..\..\FreeRTOS/queue.c **** 				}
 1635              		.loc 1 1573 0
 1636 00d0 4FF08052 		mov	r2, #268435456
 1637 00d4 134B     		ldr	r3, .L129
 1638 00d6 1A60     		str	r2, [r3]
 1639              		.syntax unified
 1640              	@ 1573 "..\..\FreeRTOS\queue.c" 1
 1641 00d8 BFF34F8F 		dsb
 1642              	@ 0 "" 2
 1643              	@ 1573 "..\..\FreeRTOS\queue.c" 1
 1644 00dc BFF36F8F 		isb
 1645              	@ 0 "" 2
 1646              		.thumb
 1647              		.syntax unified
 1648 00e0 94E7     		b	.L114
 1649              	.L124:
1584:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1650              		.loc 1 1584 0
 1651 00e2 2046     		mov	r0, r4
 1652 00e4 FFF7FEFF 		bl	prvUnlockQueue
 1653              	.LVL216:
1585:..\..\FreeRTOS/queue.c **** 			}
 1654              		.loc 1 1585 0
 1655 00e8 FFF7FEFF 		bl	xTaskResumeAll
 1656              	.LVL217:
 1657 00ec 8EE7     		b	.L114
 1658              	.L123:
1591:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1659              		.loc 1 1591 0
 1660 00ee 2046     		mov	r0, r4
 1661 00f0 FFF7FEFF 		bl	prvUnlockQueue
 1662              	.LVL218:
1592:..\..\FreeRTOS/queue.c **** 
 1663              		.loc 1 1592 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 80


 1664 00f4 FFF7FEFF 		bl	xTaskResumeAll
 1665              	.LVL219:
1598:..\..\FreeRTOS/queue.c **** 			{
 1666              		.loc 1 1598 0
 1667 00f8 2046     		mov	r0, r4
 1668 00fa FFF7FEFF 		bl	prvIsQueueEmpty
 1669              	.LVL220:
 1670 00fe 0028     		cmp	r0, #0
 1671 0100 84D0     		beq	.L114
1605:..\..\FreeRTOS/queue.c **** 					{
 1672              		.loc 1 1605 0
 1673 0102 66B1     		cbz	r6, .L127
1607:..\..\FreeRTOS/queue.c **** 						{
 1674              		.loc 1 1607 0
 1675 0104 FFF7FEFF 		bl	vPortEnterCritical
 1676              	.LVL221:
 1677              	.LBB40:
1616:..\..\FreeRTOS/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 1678              		.loc 1 1616 0
 1679 0108 2046     		mov	r0, r4
 1680 010a FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 1681              	.LVL222:
1617:..\..\FreeRTOS/queue.c **** 						}
 1682              		.loc 1 1617 0
 1683 010e 0146     		mov	r1, r0
 1684 0110 A068     		ldr	r0, [r4, #8]
 1685              	.LVL223:
 1686 0112 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 1687              	.LVL224:
 1688              	.LBE40:
1619:..\..\FreeRTOS/queue.c **** 					}
 1689              		.loc 1 1619 0
 1690 0116 FFF7FEFF 		bl	vPortExitCritical
 1691              	.LVL225:
1625:..\..\FreeRTOS/queue.c **** 			}
 1692              		.loc 1 1625 0
 1693 011a 0020     		movs	r0, #0
 1694 011c 00E0     		b	.L118
 1695              	.L127:
 1696 011e 0020     		movs	r0, #0
 1697              	.L118:
1633:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1698              		.loc 1 1633 0
 1699 0120 04B0     		add	sp, sp, #16
 1700              		.cfi_def_cfa_offset 16
 1701              		@ sp needed
 1702 0122 70BD     		pop	{r4, r5, r6, pc}
 1703              	.LVL226:
 1704              	.L130:
 1705              		.align	2
 1706              	.L129:
 1707 0124 04ED00E0 		.word	-536810236
 1708              		.cfi_endproc
 1709              	.LFE80:
 1710              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1711              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 1712              		.align	2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 81


 1713              		.global	xQueueTakeMutexRecursive
 1714              		.thumb
 1715              		.thumb_func
 1716              		.type	xQueueTakeMutexRecursive, %function
 1717              	xQueueTakeMutexRecursive:
 1718              	.LFB74:
 645:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
 1719              		.loc 1 645 0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723              	.LVL227:
 1724 0000 70B5     		push	{r4, r5, r6, lr}
 1725              		.cfi_def_cfa_offset 16
 1726              		.cfi_offset 4, -16
 1727              		.cfi_offset 5, -12
 1728              		.cfi_offset 6, -8
 1729              		.cfi_offset 14, -4
 1730 0002 0446     		mov	r4, r0
 1731 0004 0E46     		mov	r6, r1
 1732              	.LVL228:
 656:..\..\FreeRTOS/queue.c **** 		{
 1733              		.loc 1 656 0
 1734 0006 8568     		ldr	r5, [r0, #8]
 1735 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1736              	.LVL229:
 1737 000c 8542     		cmp	r5, r0
 1738 000e 04D1     		bne	.L132
 658:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
 1739              		.loc 1 658 0
 1740 0010 E368     		ldr	r3, [r4, #12]
 1741 0012 0133     		adds	r3, r3, #1
 1742 0014 E360     		str	r3, [r4, #12]
 1743              	.LVL230:
 659:..\..\FreeRTOS/queue.c **** 		}
 1744              		.loc 1 659 0
 1745 0016 0123     		movs	r3, #1
 1746 0018 08E0     		b	.L133
 1747              	.LVL231:
 1748              	.L132:
 663:..\..\FreeRTOS/queue.c **** 
 1749              		.loc 1 663 0
 1750 001a 3146     		mov	r1, r6
 1751 001c 2046     		mov	r0, r4
 1752 001e FFF7FEFF 		bl	xQueueSemaphoreTake
 1753              	.LVL232:
 668:..\..\FreeRTOS/queue.c **** 			{
 1754              		.loc 1 668 0
 1755 0022 0346     		mov	r3, r0
 1756 0024 10B1     		cbz	r0, .L133
 670:..\..\FreeRTOS/queue.c **** 			}
 1757              		.loc 1 670 0
 1758 0026 E268     		ldr	r2, [r4, #12]
 1759 0028 0132     		adds	r2, r2, #1
 1760 002a E260     		str	r2, [r4, #12]
 1761              	.LVL233:
 1762              	.L133:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 82


 679:..\..\FreeRTOS/queue.c **** 
 1763              		.loc 1 679 0
 1764 002c 1846     		mov	r0, r3
 1765 002e 70BD     		pop	{r4, r5, r6, pc}
 1766              		.cfi_endproc
 1767              	.LFE74:
 1768              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 1769              		.section	.text.xQueuePeek,"ax",%progbits
 1770              		.align	2
 1771              		.global	xQueuePeek
 1772              		.thumb
 1773              		.thumb_func
 1774              		.type	xQueuePeek, %function
 1775              	xQueuePeek:
 1776              	.LFB81:
1637:..\..\FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1777              		.loc 1 1637 0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 16
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
 1781              	.LVL234:
 1782 0000 70B5     		push	{r4, r5, r6, lr}
 1783              		.cfi_def_cfa_offset 16
 1784              		.cfi_offset 4, -16
 1785              		.cfi_offset 5, -12
 1786              		.cfi_offset 6, -8
 1787              		.cfi_offset 14, -4
 1788 0002 84B0     		sub	sp, sp, #16
 1789              		.cfi_def_cfa_offset 32
 1790 0004 0446     		mov	r4, r0
 1791 0006 0E46     		mov	r6, r1
 1792 0008 0192     		str	r2, [sp, #4]
 1793              	.LVL235:
1638:..\..\FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 1794              		.loc 1 1638 0
 1795 000a 0025     		movs	r5, #0
 1796              	.LVL236:
 1797              	.L136:
1663:..\..\FreeRTOS/queue.c **** 		{
 1798              		.loc 1 1663 0
 1799 000c FFF7FEFF 		bl	vPortEnterCritical
 1800              	.LVL237:
 1801              	.LBB41:
1665:..\..\FreeRTOS/queue.c **** 
 1802              		.loc 1 1665 0
 1803 0010 A36B     		ldr	r3, [r4, #56]
 1804              	.LVL238:
1669:..\..\FreeRTOS/queue.c **** 			{
 1805              		.loc 1 1669 0
 1806 0012 C3B1     		cbz	r3, .L137
1674:..\..\FreeRTOS/queue.c **** 
 1807              		.loc 1 1674 0
 1808 0014 E568     		ldr	r5, [r4, #12]
 1809              	.LVL239:
1676:..\..\FreeRTOS/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 1810              		.loc 1 1676 0
 1811 0016 3146     		mov	r1, r6
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 83


 1812 0018 2046     		mov	r0, r4
 1813 001a FFF7FEFF 		bl	prvCopyDataFromQueue
 1814              	.LVL240:
1680:..\..\FreeRTOS/queue.c **** 
 1815              		.loc 1 1680 0
 1816 001e E560     		str	r5, [r4, #12]
1684:..\..\FreeRTOS/queue.c **** 				{
 1817              		.loc 1 1684 0
 1818 0020 636A     		ldr	r3, [r4, #36]
 1819 0022 63B1     		cbz	r3, .L138
1686:..\..\FreeRTOS/queue.c **** 					{
 1820              		.loc 1 1686 0
 1821 0024 04F12400 		add	r0, r4, #36
 1822 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1823              	.LVL241:
 1824 002c 38B1     		cbz	r0, .L138
1689:..\..\FreeRTOS/queue.c **** 					}
 1825              		.loc 1 1689 0
 1826 002e 4FF08052 		mov	r2, #268435456
 1827 0032 304B     		ldr	r3, .L148
 1828 0034 1A60     		str	r2, [r3]
 1829              		.syntax unified
 1830              	@ 1689 "..\..\FreeRTOS\queue.c" 1
 1831 0036 BFF34F8F 		dsb
 1832              	@ 0 "" 2
 1833              	@ 1689 "..\..\FreeRTOS\queue.c" 1
 1834 003a BFF36F8F 		isb
 1835              	@ 0 "" 2
 1836              		.thumb
 1837              		.syntax unified
 1838              	.L138:
1701:..\..\FreeRTOS/queue.c **** 				return pdPASS;
 1839              		.loc 1 1701 0
 1840 003e FFF7FEFF 		bl	vPortExitCritical
 1841              	.LVL242:
1702:..\..\FreeRTOS/queue.c **** 			}
 1842              		.loc 1 1702 0
 1843 0042 0120     		movs	r0, #1
 1844 0044 53E0     		b	.L139
 1845              	.LVL243:
 1846              	.L137:
1706:..\..\FreeRTOS/queue.c **** 				{
 1847              		.loc 1 1706 0
 1848 0046 019B     		ldr	r3, [sp, #4]
 1849              	.LVL244:
 1850 0048 1BB9     		cbnz	r3, .L140
1710:..\..\FreeRTOS/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 1851              		.loc 1 1710 0
 1852 004a FFF7FEFF 		bl	vPortExitCritical
 1853              	.LVL245:
1712:..\..\FreeRTOS/queue.c **** 				}
 1854              		.loc 1 1712 0
 1855 004e 0020     		movs	r0, #0
 1856 0050 4DE0     		b	.L139
 1857              	.L140:
1714:..\..\FreeRTOS/queue.c **** 				{
 1858              		.loc 1 1714 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 84


 1859 0052 1DB9     		cbnz	r5, .L141
1719:..\..\FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1860              		.loc 1 1719 0
 1861 0054 02A8     		add	r0, sp, #8
 1862 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1863              	.LVL246:
1720:..\..\FreeRTOS/queue.c **** 				}
 1864              		.loc 1 1720 0
 1865 005a 0125     		movs	r5, #1
 1866              	.LVL247:
 1867              	.L141:
 1868              	.LBE41:
1729:..\..\FreeRTOS/queue.c **** 
 1869              		.loc 1 1729 0
 1870 005c FFF7FEFF 		bl	vPortExitCritical
 1871              	.LVL248:
1734:..\..\FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1872              		.loc 1 1734 0
 1873 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1874              	.LVL249:
1735:..\..\FreeRTOS/queue.c **** 
 1875              		.loc 1 1735 0
 1876 0064 FFF7FEFF 		bl	vPortEnterCritical
 1877              	.LVL250:
 1878 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1879 006c 5BB2     		sxtb	r3, r3
 1880 006e B3F1FF3F 		cmp	r3, #-1
 1881 0072 02D1     		bne	.L142
1735:..\..\FreeRTOS/queue.c **** 
 1882              		.loc 1 1735 0 is_stmt 0 discriminator 1
 1883 0074 0023     		movs	r3, #0
 1884 0076 84F84430 		strb	r3, [r4, #68]
 1885              	.L142:
1735:..\..\FreeRTOS/queue.c **** 
 1886              		.loc 1 1735 0 discriminator 3
 1887 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1888 007e 5BB2     		sxtb	r3, r3
 1889 0080 B3F1FF3F 		cmp	r3, #-1
 1890 0084 02D1     		bne	.L143
1735:..\..\FreeRTOS/queue.c **** 
 1891              		.loc 1 1735 0 discriminator 4
 1892 0086 0023     		movs	r3, #0
 1893 0088 84F84530 		strb	r3, [r4, #69]
 1894              	.L143:
1735:..\..\FreeRTOS/queue.c **** 
 1895              		.loc 1 1735 0 discriminator 6
 1896 008c FFF7FEFF 		bl	vPortExitCritical
 1897              	.LVL251:
1738:..\..\FreeRTOS/queue.c **** 		{
 1898              		.loc 1 1738 0 is_stmt 1 discriminator 6
 1899 0090 01A9     		add	r1, sp, #4
 1900              	.LVL252:
 1901 0092 02A8     		add	r0, sp, #8
 1902 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1903              	.LVL253:
 1904 0098 F0B9     		cbnz	r0, .L144
1742:..\..\FreeRTOS/queue.c **** 			{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 85


 1905              		.loc 1 1742 0
 1906 009a 2046     		mov	r0, r4
 1907 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1908              	.LVL254:
 1909 00a0 A0B1     		cbz	r0, .L145
1745:..\..\FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1910              		.loc 1 1745 0
 1911 00a2 0199     		ldr	r1, [sp, #4]
 1912 00a4 04F12400 		add	r0, r4, #36
 1913 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1914              	.LVL255:
1746:..\..\FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1915              		.loc 1 1746 0
 1916 00ac 2046     		mov	r0, r4
 1917 00ae FFF7FEFF 		bl	prvUnlockQueue
 1918              	.LVL256:
1747:..\..\FreeRTOS/queue.c **** 				{
 1919              		.loc 1 1747 0
 1920 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1921              	.LVL257:
 1922 00b6 0028     		cmp	r0, #0
 1923 00b8 A8D1     		bne	.L136
1749:..\..\FreeRTOS/queue.c **** 				}
 1924              		.loc 1 1749 0
 1925 00ba 4FF08052 		mov	r2, #268435456
 1926 00be 0D4B     		ldr	r3, .L148
 1927 00c0 1A60     		str	r2, [r3]
 1928              		.syntax unified
 1929              	@ 1749 "..\..\FreeRTOS\queue.c" 1
 1930 00c2 BFF34F8F 		dsb
 1931              	@ 0 "" 2
 1932              	@ 1749 "..\..\FreeRTOS\queue.c" 1
 1933 00c6 BFF36F8F 		isb
 1934              	@ 0 "" 2
 1935              		.thumb
 1936              		.syntax unified
 1937 00ca 9FE7     		b	.L136
 1938              	.L145:
1760:..\..\FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1939              		.loc 1 1760 0
 1940 00cc 2046     		mov	r0, r4
 1941 00ce FFF7FEFF 		bl	prvUnlockQueue
 1942              	.LVL258:
1761:..\..\FreeRTOS/queue.c **** 			}
 1943              		.loc 1 1761 0
 1944 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1945              	.LVL259:
 1946 00d6 99E7     		b	.L136
 1947              	.L144:
1768:..\..\FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1948              		.loc 1 1768 0
 1949 00d8 2046     		mov	r0, r4
 1950 00da FFF7FEFF 		bl	prvUnlockQueue
 1951              	.LVL260:
1769:..\..\FreeRTOS/queue.c **** 
 1952              		.loc 1 1769 0
 1953 00de FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 86


 1954              	.LVL261:
1771:..\..\FreeRTOS/queue.c **** 			{
 1955              		.loc 1 1771 0
 1956 00e2 2046     		mov	r0, r4
 1957 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1958              	.LVL262:
 1959 00e8 0028     		cmp	r0, #0
 1960 00ea 8FD0     		beq	.L136
1774:..\..\FreeRTOS/queue.c **** 			}
 1961              		.loc 1 1774 0
 1962 00ec 0020     		movs	r0, #0
 1963              	.LVL263:
 1964              	.L139:
1782:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1965              		.loc 1 1782 0
 1966 00ee 04B0     		add	sp, sp, #16
 1967              		.cfi_def_cfa_offset 16
 1968              		@ sp needed
 1969 00f0 70BD     		pop	{r4, r5, r6, pc}
 1970              	.LVL264:
 1971              	.L149:
 1972 00f2 00BF     		.align	2
 1973              	.L148:
 1974 00f4 04ED00E0 		.word	-536810236
 1975              		.cfi_endproc
 1976              	.LFE81:
 1977              		.size	xQueuePeek, .-xQueuePeek
 1978              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1979              		.align	2
 1980              		.global	xQueueReceiveFromISR
 1981              		.thumb
 1982              		.thumb_func
 1983              		.type	xQueueReceiveFromISR, %function
 1984              	xQueueReceiveFromISR:
 1985              	.LFB82:
1786:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 1986              		.loc 1 1786 0
 1987              		.cfi_startproc
 1988              		@ args = 0, pretend = 0, frame = 0
 1989              		@ frame_needed = 0, uses_anonymous_args = 0
 1990              	.LVL265:
 1991 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1992              		.cfi_def_cfa_offset 24
 1993              		.cfi_offset 4, -24
 1994              		.cfi_offset 5, -20
 1995              		.cfi_offset 6, -16
 1996              		.cfi_offset 7, -12
 1997              		.cfi_offset 8, -8
 1998              		.cfi_offset 14, -4
 1999              	.LVL266:
 2000              	.LBB42:
 2001              	.LBB43:
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 2002              		.loc 2 213 0
 2003              		.syntax unified
 2004              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 2005 0004 EFF31186 			mrs r6, basepri											
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 87


 2006 0008 4FF0A003 		mov r3, #160												
 2007 000c 83F31188 		msr basepri, r3											
 2008 0010 BFF36F8F 		isb														
 2009 0014 BFF34F8F 		dsb														
 2010              	
 2011              	@ 0 "" 2
 2012              		.thumb
 2013              		.syntax unified
 2014              	.LBE43:
 2015              	.LBE42:
 2016              	.LBB44:
1812:..\..\FreeRTOS/queue.c **** 
 2017              		.loc 1 1812 0
 2018 0018 846B     		ldr	r4, [r0, #56]
 2019              	.LVL267:
1815:..\..\FreeRTOS/queue.c **** 		{
 2020              		.loc 1 1815 0
 2021 001a FCB1     		cbz	r4, .L153
 2022 001c 9046     		mov	r8, r2
 2023 001e 0746     		mov	r7, r0
 2024              	.LBB45:
1817:..\..\FreeRTOS/queue.c **** 
 2025              		.loc 1 1817 0
 2026 0020 90F84450 		ldrb	r5, [r0, #68]	@ zero_extendqisi2
 2027 0024 6DB2     		sxtb	r5, r5
 2028              	.LVL268:
1821:..\..\FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2029              		.loc 1 1821 0
 2030 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2031              	.LVL269:
1822:..\..\FreeRTOS/queue.c **** 
 2032              		.loc 1 1822 0
 2033 002a 013C     		subs	r4, r4, #1
 2034              	.LVL270:
 2035 002c BC63     		str	r4, [r7, #56]
1828:..\..\FreeRTOS/queue.c **** 			{
 2036              		.loc 1 1828 0
 2037 002e B5F1FF3F 		cmp	r5, #-1
 2038 0032 0DD1     		bne	.L152
1830:..\..\FreeRTOS/queue.c **** 				{
 2039              		.loc 1 1830 0
 2040 0034 3B69     		ldr	r3, [r7, #16]
 2041 0036 9BB1     		cbz	r3, .L154
1832:..\..\FreeRTOS/queue.c **** 					{
 2042              		.loc 1 1832 0
 2043 0038 07F11000 		add	r0, r7, #16
 2044 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2045              	.LVL271:
 2046 0040 80B1     		cbz	r0, .L155
1836:..\..\FreeRTOS/queue.c **** 						{
 2047              		.loc 1 1836 0
 2048 0042 B8F1000F 		cmp	r8, #0
 2049 0046 0FD0     		beq	.L156
1838:..\..\FreeRTOS/queue.c **** 						}
 2050              		.loc 1 1838 0
 2051 0048 0120     		movs	r0, #1
 2052 004a C8F80000 		str	r0, [r8]
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 88


 2053 004e 0CE0     		b	.L151
 2054              	.L152:
1859:..\..\FreeRTOS/queue.c **** 			}
 2055              		.loc 1 1859 0
 2056 0050 0135     		adds	r5, r5, #1
 2057              	.LVL272:
 2058 0052 6DB2     		sxtb	r5, r5
 2059              	.LVL273:
 2060 0054 87F84450 		strb	r5, [r7, #68]
1862:..\..\FreeRTOS/queue.c **** 		}
 2061              		.loc 1 1862 0
 2062 0058 0120     		movs	r0, #1
 2063 005a 06E0     		b	.L151
 2064              	.LVL274:
 2065              	.L153:
 2066              	.LBE45:
1866:..\..\FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2067              		.loc 1 1866 0
 2068 005c 0020     		movs	r0, #0
 2069              	.LVL275:
 2070 005e 04E0     		b	.L151
 2071              	.LVL276:
 2072              	.L154:
 2073              	.LBB46:
1862:..\..\FreeRTOS/queue.c **** 		}
 2074              		.loc 1 1862 0
 2075 0060 0120     		movs	r0, #1
 2076 0062 02E0     		b	.L151
 2077              	.L155:
 2078 0064 0120     		movs	r0, #1
 2079 0066 00E0     		b	.L151
 2080              	.L156:
 2081 0068 0120     		movs	r0, #1
 2082              	.LVL277:
 2083              	.L151:
 2084              	.LBE46:
 2085              	.LBE44:
 2086              	.LBB47:
 2087              	.LBB48:
 2088              		.loc 2 231 0
 2089              		.syntax unified
 2090              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 2091 006a 86F31188 			msr basepri, r6	
 2092              	@ 0 "" 2
 2093              	.LVL278:
 2094              		.thumb
 2095              		.syntax unified
 2096              	.LBE48:
 2097              	.LBE47:
1873:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2098              		.loc 1 1873 0
 2099 006e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2100              		.cfi_endproc
 2101              	.LFE82:
 2102              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2103 0072 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2104              		.align	2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 89


 2105              		.global	xQueuePeekFromISR
 2106              		.thumb
 2107              		.thumb_func
 2108              		.type	xQueuePeekFromISR, %function
 2109              	xQueuePeekFromISR:
 2110              	.LFB83:
1877:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 2111              		.loc 1 1877 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 0
 2114              		@ frame_needed = 0, uses_anonymous_args = 0
 2115              	.LVL279:
 2116 0000 70B5     		push	{r4, r5, r6, lr}
 2117              		.cfi_def_cfa_offset 16
 2118              		.cfi_offset 4, -16
 2119              		.cfi_offset 5, -12
 2120              		.cfi_offset 6, -8
 2121              		.cfi_offset 14, -4
 2122              	.LVL280:
 2123              	.LBB49:
 2124              	.LBB50:
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 2125              		.loc 2 213 0
 2126              		.syntax unified
 2127              	@ 213 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 2128 0002 EFF31185 			mrs r5, basepri											
 2129 0006 4FF0A003 		mov r3, #160												
 2130 000a 83F31188 		msr basepri, r3											
 2131 000e BFF36F8F 		isb														
 2132 0012 BFF34F8F 		dsb														
 2133              	
 2134              	@ 0 "" 2
 2135              		.thumb
 2136              		.syntax unified
 2137              	.LBE50:
 2138              	.LBE49:
1906:..\..\FreeRTOS/queue.c **** 		{
 2139              		.loc 1 1906 0
 2140 0016 836B     		ldr	r3, [r0, #56]
 2141 0018 33B1     		cbz	r3, .L160
 2142 001a 0446     		mov	r4, r0
1912:..\..\FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2143              		.loc 1 1912 0
 2144 001c C668     		ldr	r6, [r0, #12]
 2145              	.LVL281:
1913:..\..\FreeRTOS/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2146              		.loc 1 1913 0
 2147 001e FFF7FEFF 		bl	prvCopyDataFromQueue
 2148              	.LVL282:
1914:..\..\FreeRTOS/queue.c **** 
 2149              		.loc 1 1914 0
 2150 0022 E660     		str	r6, [r4, #12]
 2151              	.LVL283:
1916:..\..\FreeRTOS/queue.c **** 		}
 2152              		.loc 1 1916 0
 2153 0024 0120     		movs	r0, #1
 2154 0026 00E0     		b	.L159
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 90


 2155              	.LVL284:
 2156              	.L160:
1920:..\..\FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2157              		.loc 1 1920 0
 2158 0028 0020     		movs	r0, #0
 2159              	.LVL285:
 2160              	.L159:
 2161              	.LBB51:
 2162              	.LBB52:
 2163              		.loc 2 231 0
 2164              		.syntax unified
 2165              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 2166 002a 85F31188 			msr basepri, r5	
 2167              	@ 0 "" 2
 2168              	.LVL286:
 2169              		.thumb
 2170              		.syntax unified
 2171              	.LBE52:
 2172              	.LBE51:
1927:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2173              		.loc 1 1927 0
 2174 002e 70BD     		pop	{r4, r5, r6, pc}
 2175              		.cfi_endproc
 2176              	.LFE83:
 2177              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2178              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2179              		.align	2
 2180              		.global	uxQueueMessagesWaiting
 2181              		.thumb
 2182              		.thumb_func
 2183              		.type	uxQueueMessagesWaiting, %function
 2184              	uxQueueMessagesWaiting:
 2185              	.LFB84:
1931:..\..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2186              		.loc 1 1931 0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 0
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
 2190              	.LVL287:
 2191 0000 10B5     		push	{r4, lr}
 2192              		.cfi_def_cfa_offset 8
 2193              		.cfi_offset 4, -8
 2194              		.cfi_offset 14, -4
 2195 0002 0446     		mov	r4, r0
1936:..\..\FreeRTOS/queue.c **** 	{
 2196              		.loc 1 1936 0
 2197 0004 FFF7FEFF 		bl	vPortEnterCritical
 2198              	.LVL288:
1938:..\..\FreeRTOS/queue.c **** 	}
 2199              		.loc 1 1938 0
 2200 0008 A46B     		ldr	r4, [r4, #56]
 2201              	.LVL289:
1940:..\..\FreeRTOS/queue.c **** 
 2202              		.loc 1 1940 0
 2203 000a FFF7FEFF 		bl	vPortExitCritical
 2204              	.LVL290:
1943:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 91


 2205              		.loc 1 1943 0
 2206 000e 2046     		mov	r0, r4
 2207 0010 10BD     		pop	{r4, pc}
 2208              		.cfi_endproc
 2209              	.LFE84:
 2210              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2211 0012 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2212              		.align	2
 2213              		.global	uxQueueSpacesAvailable
 2214              		.thumb
 2215              		.thumb_func
 2216              		.type	uxQueueSpacesAvailable, %function
 2217              	uxQueueSpacesAvailable:
 2218              	.LFB85:
1947:..\..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2219              		.loc 1 1947 0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223              	.LVL291:
 2224 0000 10B5     		push	{r4, lr}
 2225              		.cfi_def_cfa_offset 8
 2226              		.cfi_offset 4, -8
 2227              		.cfi_offset 14, -4
 2228 0002 0446     		mov	r4, r0
 2229              	.LVL292:
1953:..\..\FreeRTOS/queue.c **** 	{
 2230              		.loc 1 1953 0
 2231 0004 FFF7FEFF 		bl	vPortEnterCritical
 2232              	.LVL293:
1955:..\..\FreeRTOS/queue.c **** 	}
 2233              		.loc 1 1955 0
 2234 0008 E36B     		ldr	r3, [r4, #60]
 2235 000a A46B     		ldr	r4, [r4, #56]
 2236              	.LVL294:
 2237 000c 1C1B     		subs	r4, r3, r4
 2238              	.LVL295:
1957:..\..\FreeRTOS/queue.c **** 
 2239              		.loc 1 1957 0
 2240 000e FFF7FEFF 		bl	vPortExitCritical
 2241              	.LVL296:
1960:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2242              		.loc 1 1960 0
 2243 0012 2046     		mov	r0, r4
 2244 0014 10BD     		pop	{r4, pc}
 2245              		.cfi_endproc
 2246              	.LFE85:
 2247              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2248 0016 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2249              		.align	2
 2250              		.global	uxQueueMessagesWaitingFromISR
 2251              		.thumb
 2252              		.thumb_func
 2253              		.type	uxQueueMessagesWaitingFromISR, %function
 2254              	uxQueueMessagesWaitingFromISR:
 2255              	.LFB86:
1964:..\..\FreeRTOS/queue.c **** UBaseType_t uxReturn;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 92


 2256              		.loc 1 1964 0
 2257              		.cfi_startproc
 2258              		@ args = 0, pretend = 0, frame = 0
 2259              		@ frame_needed = 0, uses_anonymous_args = 0
 2260              		@ link register save eliminated.
 2261              	.LVL297:
1969:..\..\FreeRTOS/queue.c **** 
 2262              		.loc 1 1969 0
 2263 0000 806B     		ldr	r0, [r0, #56]
 2264              	.LVL298:
1972:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2265              		.loc 1 1972 0
 2266 0002 7047     		bx	lr
 2267              		.cfi_endproc
 2268              	.LFE86:
 2269              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2270              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2271              		.align	2
 2272              		.global	xQueueIsQueueEmptyFromISR
 2273              		.thumb
 2274              		.thumb_func
 2275              		.type	xQueueIsQueueEmptyFromISR, %function
 2276              	xQueueIsQueueEmptyFromISR:
 2277              	.LFB93:
2313:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
 2278              		.loc 1 2313 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 0
 2281              		@ frame_needed = 0, uses_anonymous_args = 0
 2282              		@ link register save eliminated.
 2283              	.LVL299:
2318:..\..\FreeRTOS/queue.c **** 	{
 2284              		.loc 1 2318 0
 2285 0000 836B     		ldr	r3, [r0, #56]
 2286 0002 0BB9     		cbnz	r3, .L169
2320:..\..\FreeRTOS/queue.c **** 	}
 2287              		.loc 1 2320 0
 2288 0004 0120     		movs	r0, #1
 2289              	.LVL300:
 2290 0006 7047     		bx	lr
 2291              	.LVL301:
 2292              	.L169:
2324:..\..\FreeRTOS/queue.c **** 	}
 2293              		.loc 1 2324 0
 2294 0008 0020     		movs	r0, #0
 2295              	.LVL302:
2328:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2296              		.loc 1 2328 0
 2297 000a 7047     		bx	lr
 2298              		.cfi_endproc
 2299              	.LFE93:
 2300              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2301              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2302              		.align	2
 2303              		.global	xQueueIsQueueFullFromISR
 2304              		.thumb
 2305              		.thumb_func
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 93


 2306              		.type	xQueueIsQueueFullFromISR, %function
 2307              	xQueueIsQueueFullFromISR:
 2308              	.LFB95:
2350:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2351:..\..\FreeRTOS/queue.c **** 
2352:..\..\FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2353:..\..\FreeRTOS/queue.c **** {
 2309              		.loc 1 2353 0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 0
 2312              		@ frame_needed = 0, uses_anonymous_args = 0
 2313              		@ link register save eliminated.
 2314              	.LVL303:
2354:..\..\FreeRTOS/queue.c **** BaseType_t xReturn;
2355:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
2356:..\..\FreeRTOS/queue.c **** 
2357:..\..\FreeRTOS/queue.c **** 	configASSERT( pxQueue );
2358:..\..\FreeRTOS/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2315              		.loc 1 2358 0
 2316 0000 826B     		ldr	r2, [r0, #56]
 2317 0002 C36B     		ldr	r3, [r0, #60]
 2318 0004 9A42     		cmp	r2, r3
 2319 0006 01D1     		bne	.L172
2359:..\..\FreeRTOS/queue.c **** 	{
2360:..\..\FreeRTOS/queue.c **** 		xReturn = pdTRUE;
 2320              		.loc 1 2360 0
 2321 0008 0120     		movs	r0, #1
 2322              	.LVL304:
 2323 000a 7047     		bx	lr
 2324              	.LVL305:
 2325              	.L172:
2361:..\..\FreeRTOS/queue.c **** 	}
2362:..\..\FreeRTOS/queue.c **** 	else
2363:..\..\FreeRTOS/queue.c **** 	{
2364:..\..\FreeRTOS/queue.c **** 		xReturn = pdFALSE;
 2326              		.loc 1 2364 0
 2327 000c 0020     		movs	r0, #0
 2328              	.LVL306:
2365:..\..\FreeRTOS/queue.c **** 	}
2366:..\..\FreeRTOS/queue.c **** 
2367:..\..\FreeRTOS/queue.c **** 	return xReturn;
2368:..\..\FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2329              		.loc 1 2368 0
 2330 000e 7047     		bx	lr
 2331              		.cfi_endproc
 2332              	.LFE95:
 2333              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2334              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2335              		.align	2
 2336              		.global	vQueueAddToRegistry
 2337              		.thumb
 2338              		.thumb_func
 2339              		.type	vQueueAddToRegistry, %function
 2340              	vQueueAddToRegistry:
 2341              	.LFB96:
2369:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2370:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 94


2371:..\..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2372:..\..\FreeRTOS/queue.c **** 
2373:..\..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2374:..\..\FreeRTOS/queue.c **** 	{
2375:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
2376:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = xQueue;
2377:..\..\FreeRTOS/queue.c **** 
2378:..\..\FreeRTOS/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2379:..\..\FreeRTOS/queue.c **** 		is required to prevent an interrupt removing something from the queue
2380:..\..\FreeRTOS/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2381:..\..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2382:..\..\FreeRTOS/queue.c **** 		{
2383:..\..\FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2384:..\..\FreeRTOS/queue.c **** 			{
2385:..\..\FreeRTOS/queue.c **** 				/* The queue is full - do we want to block or just leave without
2386:..\..\FreeRTOS/queue.c **** 				posting? */
2387:..\..\FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2388:..\..\FreeRTOS/queue.c **** 				{
2389:..\..\FreeRTOS/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2390:..\..\FreeRTOS/queue.c **** 					return indicating that we need to block. */
2391:..\..\FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2392:..\..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2393:..\..\FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2394:..\..\FreeRTOS/queue.c **** 				}
2395:..\..\FreeRTOS/queue.c **** 				else
2396:..\..\FreeRTOS/queue.c **** 				{
2397:..\..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2398:..\..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2399:..\..\FreeRTOS/queue.c **** 				}
2400:..\..\FreeRTOS/queue.c **** 			}
2401:..\..\FreeRTOS/queue.c **** 		}
2402:..\..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2403:..\..\FreeRTOS/queue.c **** 
2404:..\..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2405:..\..\FreeRTOS/queue.c **** 		{
2406:..\..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2407:..\..\FreeRTOS/queue.c **** 			{
2408:..\..\FreeRTOS/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2409:..\..\FreeRTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2410:..\..\FreeRTOS/queue.c **** 				xReturn = pdPASS;
2411:..\..\FreeRTOS/queue.c **** 
2412:..\..\FreeRTOS/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2413:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2414:..\..\FreeRTOS/queue.c **** 				{
2415:..\..\FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2416:..\..\FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2417:..\..\FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2418:..\..\FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2419:..\..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2420:..\..\FreeRTOS/queue.c **** 					{
2421:..\..\FreeRTOS/queue.c **** 						/* The co-routine waiting has a higher priority so record
2422:..\..\FreeRTOS/queue.c **** 						that a yield might be appropriate. */
2423:..\..\FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2424:..\..\FreeRTOS/queue.c **** 					}
2425:..\..\FreeRTOS/queue.c **** 					else
2426:..\..\FreeRTOS/queue.c **** 					{
2427:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 95


2428:..\..\FreeRTOS/queue.c **** 					}
2429:..\..\FreeRTOS/queue.c **** 				}
2430:..\..\FreeRTOS/queue.c **** 				else
2431:..\..\FreeRTOS/queue.c **** 				{
2432:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2433:..\..\FreeRTOS/queue.c **** 				}
2434:..\..\FreeRTOS/queue.c **** 			}
2435:..\..\FreeRTOS/queue.c **** 			else
2436:..\..\FreeRTOS/queue.c **** 			{
2437:..\..\FreeRTOS/queue.c **** 				xReturn = errQUEUE_FULL;
2438:..\..\FreeRTOS/queue.c **** 			}
2439:..\..\FreeRTOS/queue.c **** 		}
2440:..\..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2441:..\..\FreeRTOS/queue.c **** 
2442:..\..\FreeRTOS/queue.c **** 		return xReturn;
2443:..\..\FreeRTOS/queue.c **** 	}
2444:..\..\FreeRTOS/queue.c **** 
2445:..\..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2446:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2447:..\..\FreeRTOS/queue.c **** 
2448:..\..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2449:..\..\FreeRTOS/queue.c **** 
2450:..\..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2451:..\..\FreeRTOS/queue.c **** 	{
2452:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
2453:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = xQueue;
2454:..\..\FreeRTOS/queue.c **** 
2455:..\..\FreeRTOS/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2456:..\..\FreeRTOS/queue.c **** 		is required to prevent an interrupt adding something to the queue
2457:..\..\FreeRTOS/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2458:..\..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2459:..\..\FreeRTOS/queue.c **** 		{
2460:..\..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2461:..\..\FreeRTOS/queue.c **** 			{
2462:..\..\FreeRTOS/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2463:..\..\FreeRTOS/queue.c **** 				leave with nothing? */
2464:..\..\FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2465:..\..\FreeRTOS/queue.c **** 				{
2466:..\..\FreeRTOS/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2467:..\..\FreeRTOS/queue.c **** 					indicating that we need to block. */
2468:..\..\FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2469:..\..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2470:..\..\FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2471:..\..\FreeRTOS/queue.c **** 				}
2472:..\..\FreeRTOS/queue.c **** 				else
2473:..\..\FreeRTOS/queue.c **** 				{
2474:..\..\FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2475:..\..\FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2476:..\..\FreeRTOS/queue.c **** 				}
2477:..\..\FreeRTOS/queue.c **** 			}
2478:..\..\FreeRTOS/queue.c **** 			else
2479:..\..\FreeRTOS/queue.c **** 			{
2480:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2481:..\..\FreeRTOS/queue.c **** 			}
2482:..\..\FreeRTOS/queue.c **** 		}
2483:..\..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2484:..\..\FreeRTOS/queue.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 96


2485:..\..\FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2486:..\..\FreeRTOS/queue.c **** 		{
2487:..\..\FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2488:..\..\FreeRTOS/queue.c **** 			{
2489:..\..\FreeRTOS/queue.c **** 				/* Data is available from the queue. */
2490:..\..\FreeRTOS/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2491:..\..\FreeRTOS/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2492:..\..\FreeRTOS/queue.c **** 				{
2493:..\..\FreeRTOS/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2494:..\..\FreeRTOS/queue.c **** 				}
2495:..\..\FreeRTOS/queue.c **** 				else
2496:..\..\FreeRTOS/queue.c **** 				{
2497:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2498:..\..\FreeRTOS/queue.c **** 				}
2499:..\..\FreeRTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2500:..\..\FreeRTOS/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2501:..\..\FreeRTOS/queue.c **** 
2502:..\..\FreeRTOS/queue.c **** 				xReturn = pdPASS;
2503:..\..\FreeRTOS/queue.c **** 
2504:..\..\FreeRTOS/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2505:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2506:..\..\FreeRTOS/queue.c **** 				{
2507:..\..\FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2508:..\..\FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2509:..\..\FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2510:..\..\FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2511:..\..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2512:..\..\FreeRTOS/queue.c **** 					{
2513:..\..\FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2514:..\..\FreeRTOS/queue.c **** 					}
2515:..\..\FreeRTOS/queue.c **** 					else
2516:..\..\FreeRTOS/queue.c **** 					{
2517:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2518:..\..\FreeRTOS/queue.c **** 					}
2519:..\..\FreeRTOS/queue.c **** 				}
2520:..\..\FreeRTOS/queue.c **** 				else
2521:..\..\FreeRTOS/queue.c **** 				{
2522:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2523:..\..\FreeRTOS/queue.c **** 				}
2524:..\..\FreeRTOS/queue.c **** 			}
2525:..\..\FreeRTOS/queue.c **** 			else
2526:..\..\FreeRTOS/queue.c **** 			{
2527:..\..\FreeRTOS/queue.c **** 				xReturn = pdFAIL;
2528:..\..\FreeRTOS/queue.c **** 			}
2529:..\..\FreeRTOS/queue.c **** 		}
2530:..\..\FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2531:..\..\FreeRTOS/queue.c **** 
2532:..\..\FreeRTOS/queue.c **** 		return xReturn;
2533:..\..\FreeRTOS/queue.c **** 	}
2534:..\..\FreeRTOS/queue.c **** 
2535:..\..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2536:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2537:..\..\FreeRTOS/queue.c **** 
2538:..\..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2539:..\..\FreeRTOS/queue.c **** 
2540:..\..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2541:..\..\FreeRTOS/queue.c **** 	{
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 97


2542:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = xQueue;
2543:..\..\FreeRTOS/queue.c **** 
2544:..\..\FreeRTOS/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2545:..\..\FreeRTOS/queue.c **** 		exit without doing anything. */
2546:..\..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2547:..\..\FreeRTOS/queue.c **** 		{
2548:..\..\FreeRTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2549:..\..\FreeRTOS/queue.c **** 
2550:..\..\FreeRTOS/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2551:..\..\FreeRTOS/queue.c **** 			co-routine has not already been woken. */
2552:..\..\FreeRTOS/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2553:..\..\FreeRTOS/queue.c **** 			{
2554:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2555:..\..\FreeRTOS/queue.c **** 				{
2556:..\..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2557:..\..\FreeRTOS/queue.c **** 					{
2558:..\..\FreeRTOS/queue.c **** 						return pdTRUE;
2559:..\..\FreeRTOS/queue.c **** 					}
2560:..\..\FreeRTOS/queue.c **** 					else
2561:..\..\FreeRTOS/queue.c **** 					{
2562:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2563:..\..\FreeRTOS/queue.c **** 					}
2564:..\..\FreeRTOS/queue.c **** 				}
2565:..\..\FreeRTOS/queue.c **** 				else
2566:..\..\FreeRTOS/queue.c **** 				{
2567:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2568:..\..\FreeRTOS/queue.c **** 				}
2569:..\..\FreeRTOS/queue.c **** 			}
2570:..\..\FreeRTOS/queue.c **** 			else
2571:..\..\FreeRTOS/queue.c **** 			{
2572:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2573:..\..\FreeRTOS/queue.c **** 			}
2574:..\..\FreeRTOS/queue.c **** 		}
2575:..\..\FreeRTOS/queue.c **** 		else
2576:..\..\FreeRTOS/queue.c **** 		{
2577:..\..\FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2578:..\..\FreeRTOS/queue.c **** 		}
2579:..\..\FreeRTOS/queue.c **** 
2580:..\..\FreeRTOS/queue.c **** 		return xCoRoutinePreviouslyWoken;
2581:..\..\FreeRTOS/queue.c **** 	}
2582:..\..\FreeRTOS/queue.c **** 
2583:..\..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2584:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2585:..\..\FreeRTOS/queue.c **** 
2586:..\..\FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2587:..\..\FreeRTOS/queue.c **** 
2588:..\..\FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2589:..\..\FreeRTOS/queue.c **** 	{
2590:..\..\FreeRTOS/queue.c **** 	BaseType_t xReturn;
2591:..\..\FreeRTOS/queue.c **** 	Queue_t * const pxQueue = xQueue;
2592:..\..\FreeRTOS/queue.c **** 
2593:..\..\FreeRTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2594:..\..\FreeRTOS/queue.c **** 		not then just leave without doing anything. */
2595:..\..\FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2596:..\..\FreeRTOS/queue.c **** 		{
2597:..\..\FreeRTOS/queue.c **** 			/* Copy the data from the queue. */
2598:..\..\FreeRTOS/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 98


2599:..\..\FreeRTOS/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2600:..\..\FreeRTOS/queue.c **** 			{
2601:..\..\FreeRTOS/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2602:..\..\FreeRTOS/queue.c **** 			}
2603:..\..\FreeRTOS/queue.c **** 			else
2604:..\..\FreeRTOS/queue.c **** 			{
2605:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2606:..\..\FreeRTOS/queue.c **** 			}
2607:..\..\FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2608:..\..\FreeRTOS/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2609:..\..\FreeRTOS/queue.c **** 
2610:..\..\FreeRTOS/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2611:..\..\FreeRTOS/queue.c **** 			{
2612:..\..\FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2613:..\..\FreeRTOS/queue.c **** 				{
2614:..\..\FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2615:..\..\FreeRTOS/queue.c **** 					{
2616:..\..\FreeRTOS/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2617:..\..\FreeRTOS/queue.c **** 					}
2618:..\..\FreeRTOS/queue.c **** 					else
2619:..\..\FreeRTOS/queue.c **** 					{
2620:..\..\FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2621:..\..\FreeRTOS/queue.c **** 					}
2622:..\..\FreeRTOS/queue.c **** 				}
2623:..\..\FreeRTOS/queue.c **** 				else
2624:..\..\FreeRTOS/queue.c **** 				{
2625:..\..\FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2626:..\..\FreeRTOS/queue.c **** 				}
2627:..\..\FreeRTOS/queue.c **** 			}
2628:..\..\FreeRTOS/queue.c **** 			else
2629:..\..\FreeRTOS/queue.c **** 			{
2630:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:..\..\FreeRTOS/queue.c **** 			}
2632:..\..\FreeRTOS/queue.c **** 
2633:..\..\FreeRTOS/queue.c **** 			xReturn = pdPASS;
2634:..\..\FreeRTOS/queue.c **** 		}
2635:..\..\FreeRTOS/queue.c **** 		else
2636:..\..\FreeRTOS/queue.c **** 		{
2637:..\..\FreeRTOS/queue.c **** 			xReturn = pdFAIL;
2638:..\..\FreeRTOS/queue.c **** 		}
2639:..\..\FreeRTOS/queue.c **** 
2640:..\..\FreeRTOS/queue.c **** 		return xReturn;
2641:..\..\FreeRTOS/queue.c **** 	}
2642:..\..\FreeRTOS/queue.c **** 
2643:..\..\FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2644:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2645:..\..\FreeRTOS/queue.c **** 
2646:..\..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2647:..\..\FreeRTOS/queue.c **** 
2648:..\..\FreeRTOS/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2649:..\..\FreeRTOS/queue.c **** 	{
 2342              		.loc 1 2649 0
 2343              		.cfi_startproc
 2344              		@ args = 0, pretend = 0, frame = 0
 2345              		@ frame_needed = 0, uses_anonymous_args = 0
 2346              		@ link register save eliminated.
 2347              	.LVL307:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 99


2650:..\..\FreeRTOS/queue.c **** 	UBaseType_t ux;
2651:..\..\FreeRTOS/queue.c **** 
2652:..\..\FreeRTOS/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2653:..\..\FreeRTOS/queue.c **** 		a free slot. */
2654:..\..\FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2348              		.loc 1 2654 0
 2349 0000 0023     		movs	r3, #0
 2350 0002 0BE0     		b	.L174
 2351              	.LVL308:
 2352              	.L177:
2655:..\..\FreeRTOS/queue.c **** 		{
2656:..\..\FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2353              		.loc 1 2656 0
 2354 0004 074A     		ldr	r2, .L178
 2355 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2356 000a 32B9     		cbnz	r2, .L175
2657:..\..\FreeRTOS/queue.c **** 			{
2658:..\..\FreeRTOS/queue.c **** 				/* Store the information on this queue. */
2659:..\..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2357              		.loc 1 2659 0
 2358 000c 054A     		ldr	r2, .L178
 2359 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2660:..\..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2360              		.loc 1 2660 0
 2361 0012 02EBC303 		add	r3, r2, r3, lsl #3
 2362              	.LVL309:
 2363 0016 5860     		str	r0, [r3, #4]
2661:..\..\FreeRTOS/queue.c **** 
2662:..\..\FreeRTOS/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2663:..\..\FreeRTOS/queue.c **** 				break;
 2364              		.loc 1 2663 0
 2365 0018 7047     		bx	lr
 2366              	.LVL310:
 2367              	.L175:
2654:..\..\FreeRTOS/queue.c **** 		{
 2368              		.loc 1 2654 0 discriminator 2
 2369 001a 0133     		adds	r3, r3, #1
 2370              	.LVL311:
 2371              	.L174:
2654:..\..\FreeRTOS/queue.c **** 		{
 2372              		.loc 1 2654 0 is_stmt 0 discriminator 1
 2373 001c 092B     		cmp	r3, #9
 2374 001e F1D9     		bls	.L177
 2375 0020 7047     		bx	lr
 2376              	.L179:
 2377 0022 00BF     		.align	2
 2378              	.L178:
 2379 0024 00000000 		.word	xQueueRegistry
 2380              		.cfi_endproc
 2381              	.LFE96:
 2382              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2383              		.section	.text.pcQueueGetName,"ax",%progbits
 2384              		.align	2
 2385              		.global	pcQueueGetName
 2386              		.thumb
 2387              		.thumb_func
 2388              		.type	pcQueueGetName, %function
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 100


 2389              	pcQueueGetName:
 2390              	.LFB97:
2664:..\..\FreeRTOS/queue.c **** 			}
2665:..\..\FreeRTOS/queue.c **** 			else
2666:..\..\FreeRTOS/queue.c **** 			{
2667:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2668:..\..\FreeRTOS/queue.c **** 			}
2669:..\..\FreeRTOS/queue.c **** 		}
2670:..\..\FreeRTOS/queue.c **** 	}
2671:..\..\FreeRTOS/queue.c **** 
2672:..\..\FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2673:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2674:..\..\FreeRTOS/queue.c **** 
2675:..\..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2676:..\..\FreeRTOS/queue.c **** 
2677:..\..\FreeRTOS/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2678:..\..\FreeRTOS/queue.c **** 	{
 2391              		.loc 1 2678 0 is_stmt 1
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 0
 2394              		@ frame_needed = 0, uses_anonymous_args = 0
 2395              		@ link register save eliminated.
 2396              	.LVL312:
2679:..\..\FreeRTOS/queue.c **** 	UBaseType_t ux;
2680:..\..\FreeRTOS/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2681:..\..\FreeRTOS/queue.c **** 
2682:..\..\FreeRTOS/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2683:..\..\FreeRTOS/queue.c **** 		removing entries from the registry while it is being searched. */
2684:..\..\FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2397              		.loc 1 2684 0
 2398 0000 0023     		movs	r3, #0
 2399 0002 0AE0     		b	.L181
 2400              	.LVL313:
 2401              	.L184:
2685:..\..\FreeRTOS/queue.c **** 		{
2686:..\..\FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2402              		.loc 1 2686 0
 2403 0004 074A     		ldr	r2, .L185
 2404 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2405 000a 5268     		ldr	r2, [r2, #4]
 2406 000c 8242     		cmp	r2, r0
 2407 000e 03D1     		bne	.L182
2687:..\..\FreeRTOS/queue.c **** 			{
2688:..\..\FreeRTOS/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2408              		.loc 1 2688 0
 2409 0010 044A     		ldr	r2, .L185
 2410 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2411              	.LVL314:
2689:..\..\FreeRTOS/queue.c **** 				break;
 2412              		.loc 1 2689 0
 2413 0016 7047     		bx	lr
 2414              	.LVL315:
 2415              	.L182:
2684:..\..\FreeRTOS/queue.c **** 		{
 2416              		.loc 1 2684 0 discriminator 2
 2417 0018 0133     		adds	r3, r3, #1
 2418              	.LVL316:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 101


 2419              	.L181:
2684:..\..\FreeRTOS/queue.c **** 		{
 2420              		.loc 1 2684 0 is_stmt 0 discriminator 1
 2421 001a 092B     		cmp	r3, #9
 2422 001c F2D9     		bls	.L184
2680:..\..\FreeRTOS/queue.c **** 
 2423              		.loc 1 2680 0 is_stmt 1
 2424 001e 0020     		movs	r0, #0
 2425              	.LVL317:
2690:..\..\FreeRTOS/queue.c **** 			}
2691:..\..\FreeRTOS/queue.c **** 			else
2692:..\..\FreeRTOS/queue.c **** 			{
2693:..\..\FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2694:..\..\FreeRTOS/queue.c **** 			}
2695:..\..\FreeRTOS/queue.c **** 		}
2696:..\..\FreeRTOS/queue.c **** 
2697:..\..\FreeRTOS/queue.c **** 		return pcReturn;
2698:..\..\FreeRTOS/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2426              		.loc 1 2698 0
 2427 0020 7047     		bx	lr
 2428              	.L186:
 2429 0022 00BF     		.align	2
 2430              	.L185:
 2431 0024 00000000 		.word	xQueueRegistry
 2432              		.cfi_endproc
 2433              	.LFE97:
 2434              		.size	pcQueueGetName, .-pcQueueGetName
 2435              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2436              		.align	2
 2437              		.global	vQueueUnregisterQueue
 2438              		.thumb
 2439              		.thumb_func
 2440              		.type	vQueueUnregisterQueue, %function
 2441              	vQueueUnregisterQueue:
 2442              	.LFB98:
2699:..\..\FreeRTOS/queue.c **** 
2700:..\..\FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2701:..\..\FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2702:..\..\FreeRTOS/queue.c **** 
2703:..\..\FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2704:..\..\FreeRTOS/queue.c **** 
2705:..\..\FreeRTOS/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2706:..\..\FreeRTOS/queue.c **** 	{
 2443              		.loc 1 2706 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 0
 2446              		@ frame_needed = 0, uses_anonymous_args = 0
 2447              		@ link register save eliminated.
 2448              	.LVL318:
2707:..\..\FreeRTOS/queue.c **** 	UBaseType_t ux;
2708:..\..\FreeRTOS/queue.c **** 
2709:..\..\FreeRTOS/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2710:..\..\FreeRTOS/queue.c **** 		registry. */
2711:..\..\FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2449              		.loc 1 2711 0
 2450 0000 0023     		movs	r3, #0
 2451 0002 0EE0     		b	.L188
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 102


 2452              	.LVL319:
 2453              	.L191:
2712:..\..\FreeRTOS/queue.c **** 		{
2713:..\..\FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2454              		.loc 1 2713 0
 2455 0004 084A     		ldr	r2, .L192
 2456 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2457 000a 5268     		ldr	r2, [r2, #4]
 2458 000c 8242     		cmp	r2, r0
 2459 000e 07D1     		bne	.L189
2714:..\..\FreeRTOS/queue.c **** 			{
2715:..\..\FreeRTOS/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2716:..\..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 2460              		.loc 1 2716 0
 2461 0010 054A     		ldr	r2, .L192
 2462 0012 0021     		movs	r1, #0
 2463 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2717:..\..\FreeRTOS/queue.c **** 
2718:..\..\FreeRTOS/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2719:..\..\FreeRTOS/queue.c **** 				appear in the registry twice if it is added, removed, then
2720:..\..\FreeRTOS/queue.c **** 				added again. */
2721:..\..\FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2464              		.loc 1 2721 0
 2465 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2466              	.LVL320:
 2467 001c 5960     		str	r1, [r3, #4]
2722:..\..\FreeRTOS/queue.c **** 				break;
 2468              		.loc 1 2722 0
 2469 001e 7047     		bx	lr
 2470              	.LVL321:
 2471              	.L189:
2711:..\..\FreeRTOS/queue.c **** 		{
 2472              		.loc 1 2711 0 discriminator 2
 2473 0020 0133     		adds	r3, r3, #1
 2474              	.LVL322:
 2475              	.L188:
2711:..\..\FreeRTOS/queue.c **** 		{
 2476              		.loc 1 2711 0 is_stmt 0 discriminator 1
 2477 0022 092B     		cmp	r3, #9
 2478 0024 EED9     		bls	.L191
 2479 0026 7047     		bx	lr
 2480              	.L193:
 2481              		.align	2
 2482              	.L192:
 2483 0028 00000000 		.word	xQueueRegistry
 2484              		.cfi_endproc
 2485              	.LFE98:
 2486              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 2487              		.section	.text.vQueueDelete,"ax",%progbits
 2488              		.align	2
 2489              		.global	vQueueDelete
 2490              		.thumb
 2491              		.thumb_func
 2492              		.type	vQueueDelete, %function
 2493              	vQueueDelete:
 2494              	.LFB87:
1976:..\..\FreeRTOS/queue.c **** Queue_t * const pxQueue = xQueue;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 103


 2495              		.loc 1 1976 0 is_stmt 1
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 0
 2498              		@ frame_needed = 0, uses_anonymous_args = 0
 2499              	.LVL323:
 2500 0000 10B5     		push	{r4, lr}
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 4, -8
 2503              		.cfi_offset 14, -4
 2504 0002 0446     		mov	r4, r0
 2505              	.LVL324:
1984:..\..\FreeRTOS/queue.c **** 	}
 2506              		.loc 1 1984 0
 2507 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 2508              	.LVL325:
1992:..\..\FreeRTOS/queue.c **** 	}
 2509              		.loc 1 1992 0
 2510 0008 2046     		mov	r0, r4
 2511 000a FFF7FEFF 		bl	vPortFree
 2512              	.LVL326:
 2513 000e 10BD     		pop	{r4, pc}
 2514              		.cfi_endproc
 2515              	.LFE87:
 2516              		.size	vQueueDelete, .-vQueueDelete
 2517              		.comm	xQueueRegistry,80,4
 2518              		.text
 2519              	.Letext0:
 2520              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2521              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2522              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2523              		.file 6 "..\\..\\FreeRTOS\\include/list.h"
 2524              		.file 7 "..\\..\\FreeRTOS\\include/task.h"
 2525              		.file 8 "..\\..\\FreeRTOS\\include/queue.h"
 2526              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 2527              		.file 10 "..\\..\\FreeRTOS\\include/portable.h"
 2528              		.section	.debug_info,"",%progbits
 2529              	.Ldebug_info0:
 2530 0000 72190000 		.4byte	0x1972
 2531 0004 0400     		.2byte	0x4
 2532 0006 00000000 		.4byte	.Ldebug_abbrev0
 2533 000a 04       		.byte	0x4
 2534 000b 01       		.uleb128 0x1
 2535 000c 2D030000 		.4byte	.LASF157
 2536 0010 0C       		.byte	0xc
 2537 0011 3A020000 		.4byte	.LASF158
 2538 0015 9F040000 		.4byte	.LASF159
 2539 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 2540 001d 00000000 		.4byte	0
 2541 0021 00000000 		.4byte	.Ldebug_line0
 2542 0025 02       		.uleb128 0x2
 2543 0026 C9030000 		.4byte	.LASF3
 2544 002a 03       		.byte	0x3
 2545 002b D8       		.byte	0xd8
 2546 002c 30000000 		.4byte	0x30
 2547 0030 03       		.uleb128 0x3
 2548 0031 04       		.byte	0x4
 2549 0032 07       		.byte	0x7
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 104


 2550 0033 C4000000 		.4byte	.LASF0
 2551 0037 04       		.uleb128 0x4
 2552 0038 04       		.byte	0x4
 2553 0039 05       		.byte	0x5
 2554 003a 696E7400 		.ascii	"int\000"
 2555 003e 03       		.uleb128 0x3
 2556 003f 08       		.byte	0x8
 2557 0040 05       		.byte	0x5
 2558 0041 0E060000 		.4byte	.LASF1
 2559 0045 03       		.uleb128 0x3
 2560 0046 08       		.byte	0x8
 2561 0047 04       		.byte	0x4
 2562 0048 5B070000 		.4byte	.LASF2
 2563 004c 02       		.uleb128 0x2
 2564 004d 44070000 		.4byte	.LASF4
 2565 0051 04       		.byte	0x4
 2566 0052 1B       		.byte	0x1b
 2567 0053 57000000 		.4byte	0x57
 2568 0057 03       		.uleb128 0x3
 2569 0058 01       		.byte	0x1
 2570 0059 06       		.byte	0x6
 2571 005a 0F0A0000 		.4byte	.LASF5
 2572 005e 02       		.uleb128 0x2
 2573 005f 94080000 		.4byte	.LASF6
 2574 0063 04       		.byte	0x4
 2575 0064 1D       		.byte	0x1d
 2576 0065 69000000 		.4byte	0x69
 2577 0069 03       		.uleb128 0x3
 2578 006a 01       		.byte	0x1
 2579 006b 08       		.byte	0x8
 2580 006c 22090000 		.4byte	.LASF7
 2581 0070 03       		.uleb128 0x3
 2582 0071 02       		.byte	0x2
 2583 0072 05       		.byte	0x5
 2584 0073 E4070000 		.4byte	.LASF8
 2585 0077 03       		.uleb128 0x3
 2586 0078 02       		.byte	0x2
 2587 0079 07       		.byte	0x7
 2588 007a 1B0A0000 		.4byte	.LASF9
 2589 007e 02       		.uleb128 0x2
 2590 007f EE000000 		.4byte	.LASF10
 2591 0083 04       		.byte	0x4
 2592 0084 3F       		.byte	0x3f
 2593 0085 89000000 		.4byte	0x89
 2594 0089 03       		.uleb128 0x3
 2595 008a 04       		.byte	0x4
 2596 008b 05       		.byte	0x5
 2597 008c F9070000 		.4byte	.LASF11
 2598 0090 02       		.uleb128 0x2
 2599 0091 30090000 		.4byte	.LASF12
 2600 0095 04       		.byte	0x4
 2601 0096 41       		.byte	0x41
 2602 0097 9B000000 		.4byte	0x9b
 2603 009b 03       		.uleb128 0x3
 2604 009c 04       		.byte	0x4
 2605 009d 07       		.byte	0x7
 2606 009e C8080000 		.4byte	.LASF13
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 105


 2607 00a2 03       		.uleb128 0x3
 2608 00a3 08       		.byte	0x8
 2609 00a4 07       		.byte	0x7
 2610 00a5 6E020000 		.4byte	.LASF14
 2611 00a9 03       		.uleb128 0x3
 2612 00aa 04       		.byte	0x4
 2613 00ab 07       		.byte	0x7
 2614 00ac AE080000 		.4byte	.LASF15
 2615 00b0 05       		.uleb128 0x5
 2616 00b1 04       		.byte	0x4
 2617 00b2 03       		.uleb128 0x3
 2618 00b3 01       		.byte	0x1
 2619 00b4 08       		.byte	0x8
 2620 00b5 0F050000 		.4byte	.LASF16
 2621 00b9 06       		.uleb128 0x6
 2622 00ba 04       		.byte	0x4
 2623 00bb BF000000 		.4byte	0xbf
 2624 00bf 07       		.uleb128 0x7
 2625 00c0 B2000000 		.4byte	0xb2
 2626 00c4 06       		.uleb128 0x6
 2627 00c5 04       		.byte	0x4
 2628 00c6 CA000000 		.4byte	0xca
 2629 00ca 08       		.uleb128 0x8
 2630 00cb 02       		.uleb128 0x2
 2631 00cc 18020000 		.4byte	.LASF17
 2632 00d0 05       		.byte	0x5
 2633 00d1 14       		.byte	0x14
 2634 00d2 4C000000 		.4byte	0x4c
 2635 00d6 02       		.uleb128 0x2
 2636 00d7 BA050000 		.4byte	.LASF18
 2637 00db 05       		.byte	0x5
 2638 00dc 18       		.byte	0x18
 2639 00dd 5E000000 		.4byte	0x5e
 2640 00e1 02       		.uleb128 0x2
 2641 00e2 EF080000 		.4byte	.LASF19
 2642 00e6 05       		.byte	0x5
 2643 00e7 2C       		.byte	0x2c
 2644 00e8 7E000000 		.4byte	0x7e
 2645 00ec 02       		.uleb128 0x2
 2646 00ed 0F020000 		.4byte	.LASF20
 2647 00f1 05       		.byte	0x5
 2648 00f2 30       		.byte	0x30
 2649 00f3 90000000 		.4byte	0x90
 2650 00f7 03       		.uleb128 0x3
 2651 00f8 04       		.byte	0x4
 2652 00f9 04       		.byte	0x4
 2653 00fa 58020000 		.4byte	.LASF21
 2654 00fe 03       		.uleb128 0x3
 2655 00ff 08       		.byte	0x8
 2656 0100 04       		.byte	0x4
 2657 0101 490A0000 		.4byte	.LASF22
 2658 0105 02       		.uleb128 0x2
 2659 0106 2F060000 		.4byte	.LASF23
 2660 010a 02       		.byte	0x2
 2661 010b 38       		.byte	0x38
 2662 010c 89000000 		.4byte	0x89
 2663 0110 02       		.uleb128 0x2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 106


 2664 0111 49050000 		.4byte	.LASF24
 2665 0115 02       		.byte	0x2
 2666 0116 39       		.byte	0x39
 2667 0117 9B000000 		.4byte	0x9b
 2668 011b 02       		.uleb128 0x2
 2669 011c 39070000 		.4byte	.LASF25
 2670 0120 02       		.byte	0x2
 2671 0121 3F       		.byte	0x3f
 2672 0122 EC000000 		.4byte	0xec
 2673 0126 06       		.uleb128 0x6
 2674 0127 04       		.byte	0x4
 2675 0128 D6000000 		.4byte	0xd6
 2676 012c 09       		.uleb128 0x9
 2677 012d F8000000 		.4byte	.LASF31
 2678 0131 14       		.byte	0x14
 2679 0132 06       		.byte	0x6
 2680 0133 8C       		.byte	0x8c
 2681 0134 75010000 		.4byte	0x175
 2682 0138 0A       		.uleb128 0xa
 2683 0139 EE070000 		.4byte	.LASF26
 2684 013d 06       		.byte	0x6
 2685 013e 8F       		.byte	0x8f
 2686 013f 1B010000 		.4byte	0x11b
 2687 0143 00       		.byte	0
 2688 0144 0A       		.uleb128 0xa
 2689 0145 75060000 		.4byte	.LASF27
 2690 0149 06       		.byte	0x6
 2691 014a 90       		.byte	0x90
 2692 014b 75010000 		.4byte	0x175
 2693 014f 04       		.byte	0x4
 2694 0150 0A       		.uleb128 0xa
 2695 0151 C3020000 		.4byte	.LASF28
 2696 0155 06       		.byte	0x6
 2697 0156 91       		.byte	0x91
 2698 0157 75010000 		.4byte	0x175
 2699 015b 08       		.byte	0x8
 2700 015c 0A       		.uleb128 0xa
 2701 015d 91090000 		.4byte	.LASF29
 2702 0161 06       		.byte	0x6
 2703 0162 92       		.byte	0x92
 2704 0163 B0000000 		.4byte	0xb0
 2705 0167 0C       		.byte	0xc
 2706 0168 0A       		.uleb128 0xa
 2707 0169 95070000 		.4byte	.LASF30
 2708 016d 06       		.byte	0x6
 2709 016e 93       		.byte	0x93
 2710 016f AC010000 		.4byte	0x1ac
 2711 0173 10       		.byte	0x10
 2712 0174 00       		.byte	0
 2713 0175 06       		.uleb128 0x6
 2714 0176 04       		.byte	0x4
 2715 0177 2C010000 		.4byte	0x12c
 2716 017b 09       		.uleb128 0x9
 2717 017c FD030000 		.4byte	.LASF32
 2718 0180 14       		.byte	0x14
 2719 0181 06       		.byte	0x6
 2720 0182 A4       		.byte	0xa4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 107


 2721 0183 AC010000 		.4byte	0x1ac
 2722 0187 0A       		.uleb128 0xa
 2723 0188 00000000 		.4byte	.LASF33
 2724 018c 06       		.byte	0x6
 2725 018d A7       		.byte	0xa7
 2726 018e F9010000 		.4byte	0x1f9
 2727 0192 00       		.byte	0
 2728 0193 0A       		.uleb128 0xa
 2729 0194 D1000000 		.4byte	.LASF34
 2730 0198 06       		.byte	0x6
 2731 0199 A8       		.byte	0xa8
 2732 019a FE010000 		.4byte	0x1fe
 2733 019e 04       		.byte	0x4
 2734 019f 0A       		.uleb128 0xa
 2735 01a0 84050000 		.4byte	.LASF35
 2736 01a4 06       		.byte	0x6
 2737 01a5 A9       		.byte	0xa9
 2738 01a6 EE010000 		.4byte	0x1ee
 2739 01aa 08       		.byte	0x8
 2740 01ab 00       		.byte	0
 2741 01ac 06       		.uleb128 0x6
 2742 01ad 04       		.byte	0x4
 2743 01ae 7B010000 		.4byte	0x17b
 2744 01b2 02       		.uleb128 0x2
 2745 01b3 14050000 		.4byte	.LASF36
 2746 01b7 06       		.byte	0x6
 2747 01b8 96       		.byte	0x96
 2748 01b9 2C010000 		.4byte	0x12c
 2749 01bd 09       		.uleb128 0x9
 2750 01be ED030000 		.4byte	.LASF37
 2751 01c2 0C       		.byte	0xc
 2752 01c3 06       		.byte	0x6
 2753 01c4 98       		.byte	0x98
 2754 01c5 EE010000 		.4byte	0x1ee
 2755 01c9 0A       		.uleb128 0xa
 2756 01ca EE070000 		.4byte	.LASF26
 2757 01ce 06       		.byte	0x6
 2758 01cf 9B       		.byte	0x9b
 2759 01d0 1B010000 		.4byte	0x11b
 2760 01d4 00       		.byte	0
 2761 01d5 0A       		.uleb128 0xa
 2762 01d6 75060000 		.4byte	.LASF27
 2763 01da 06       		.byte	0x6
 2764 01db 9C       		.byte	0x9c
 2765 01dc 75010000 		.4byte	0x175
 2766 01e0 04       		.byte	0x4
 2767 01e1 0A       		.uleb128 0xa
 2768 01e2 C3020000 		.4byte	.LASF28
 2769 01e6 06       		.byte	0x6
 2770 01e7 9D       		.byte	0x9d
 2771 01e8 75010000 		.4byte	0x175
 2772 01ec 08       		.byte	0x8
 2773 01ed 00       		.byte	0
 2774 01ee 02       		.uleb128 0x2
 2775 01ef AB050000 		.4byte	.LASF38
 2776 01f3 06       		.byte	0x6
 2777 01f4 9F       		.byte	0x9f
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 108


 2778 01f5 BD010000 		.4byte	0x1bd
 2779 01f9 0B       		.uleb128 0xb
 2780 01fa 10010000 		.4byte	0x110
 2781 01fe 06       		.uleb128 0x6
 2782 01ff 04       		.byte	0x4
 2783 0200 B2010000 		.4byte	0x1b2
 2784 0204 02       		.uleb128 0x2
 2785 0205 17070000 		.4byte	.LASF39
 2786 0209 06       		.byte	0x6
 2787 020a AB       		.byte	0xab
 2788 020b 7B010000 		.4byte	0x17b
 2789 020f 02       		.uleb128 0x2
 2790 0210 CF060000 		.4byte	.LASF40
 2791 0214 07       		.byte	0x7
 2792 0215 46       		.byte	0x46
 2793 0216 1A020000 		.4byte	0x21a
 2794 021a 06       		.uleb128 0x6
 2795 021b 04       		.byte	0x4
 2796 021c 20020000 		.4byte	0x220
 2797 0220 0C       		.uleb128 0xc
 2798 0221 30000000 		.4byte	.LASF160
 2799 0225 09       		.uleb128 0x9
 2800 0226 D9000000 		.4byte	.LASF41
 2801 022a 08       		.byte	0x8
 2802 022b 07       		.byte	0x7
 2803 022c 66       		.byte	0x66
 2804 022d 4A020000 		.4byte	0x24a
 2805 0231 0A       		.uleb128 0xa
 2806 0232 4A010000 		.4byte	.LASF42
 2807 0236 07       		.byte	0x7
 2808 0237 68       		.byte	0x68
 2809 0238 05010000 		.4byte	0x105
 2810 023c 00       		.byte	0
 2811 023d 0A       		.uleb128 0xa
 2812 023e 51060000 		.4byte	.LASF43
 2813 0242 07       		.byte	0x7
 2814 0243 69       		.byte	0x69
 2815 0244 1B010000 		.4byte	0x11b
 2816 0248 04       		.byte	0x4
 2817 0249 00       		.byte	0
 2818 024a 02       		.uleb128 0x2
 2819 024b 91060000 		.4byte	.LASF44
 2820 024f 07       		.byte	0x7
 2821 0250 6A       		.byte	0x6a
 2822 0251 25020000 		.4byte	0x225
 2823 0255 02       		.uleb128 0x2
 2824 0256 76050000 		.4byte	.LASF45
 2825 025a 08       		.byte	0x8
 2826 025b 30       		.byte	0x30
 2827 025c 60020000 		.4byte	0x260
 2828 0260 06       		.uleb128 0x6
 2829 0261 04       		.byte	0x4
 2830 0262 66020000 		.4byte	0x266
 2831 0266 09       		.uleb128 0x9
 2832 0267 5E020000 		.4byte	.LASF46
 2833 026b 48       		.byte	0x48
 2834 026c 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 109


 2835 026d 61       		.byte	0x61
 2836 026e E9020000 		.4byte	0x2e9
 2837 0272 0A       		.uleb128 0xa
 2838 0273 B3090000 		.4byte	.LASF47
 2839 0277 01       		.byte	0x1
 2840 0278 63       		.byte	0x63
 2841 0279 0E030000 		.4byte	0x30e
 2842 027d 00       		.byte	0
 2843 027e 0A       		.uleb128 0xa
 2844 027f 2F070000 		.4byte	.LASF48
 2845 0283 01       		.byte	0x1
 2846 0284 64       		.byte	0x64
 2847 0285 0E030000 		.4byte	0x30e
 2848 0289 04       		.byte	0x4
 2849 028a 0D       		.uleb128 0xd
 2850 028b 7500     		.ascii	"u\000"
 2851 028d 01       		.byte	0x1
 2852 028e 6A       		.byte	0x6a
 2853 028f 4F030000 		.4byte	0x34f
 2854 0293 08       		.byte	0x8
 2855 0294 0A       		.uleb128 0xa
 2856 0295 17010000 		.4byte	.LASF49
 2857 0299 01       		.byte	0x1
 2858 029a 6C       		.byte	0x6c
 2859 029b 04020000 		.4byte	0x204
 2860 029f 10       		.byte	0x10
 2861 02a0 0A       		.uleb128 0xa
 2862 02a1 77000000 		.4byte	.LASF50
 2863 02a5 01       		.byte	0x1
 2864 02a6 6D       		.byte	0x6d
 2865 02a7 04020000 		.4byte	0x204
 2866 02ab 24       		.byte	0x24
 2867 02ac 0A       		.uleb128 0xa
 2868 02ad CE020000 		.4byte	.LASF51
 2869 02b1 01       		.byte	0x1
 2870 02b2 6F       		.byte	0x6f
 2871 02b3 F9010000 		.4byte	0x1f9
 2872 02b7 38       		.byte	0x38
 2873 02b8 0A       		.uleb128 0xa
 2874 02b9 DB070000 		.4byte	.LASF52
 2875 02bd 01       		.byte	0x1
 2876 02be 70       		.byte	0x70
 2877 02bf 10010000 		.4byte	0x110
 2878 02c3 3C       		.byte	0x3c
 2879 02c4 0A       		.uleb128 0xa
 2880 02c5 85040000 		.4byte	.LASF53
 2881 02c9 01       		.byte	0x1
 2882 02ca 71       		.byte	0x71
 2883 02cb 10010000 		.4byte	0x110
 2884 02cf 40       		.byte	0x40
 2885 02d0 0A       		.uleb128 0xa
 2886 02d1 5A0A0000 		.4byte	.LASF54
 2887 02d5 01       		.byte	0x1
 2888 02d6 73       		.byte	0x73
 2889 02d7 6E030000 		.4byte	0x36e
 2890 02db 44       		.byte	0x44
 2891 02dc 0A       		.uleb128 0xa
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 110


 2892 02dd 42010000 		.4byte	.LASF55
 2893 02e1 01       		.byte	0x1
 2894 02e2 74       		.byte	0x74
 2895 02e3 6E030000 		.4byte	0x36e
 2896 02e7 45       		.byte	0x45
 2897 02e8 00       		.byte	0
 2898 02e9 09       		.uleb128 0x9
 2899 02ea 2E050000 		.4byte	.LASF56
 2900 02ee 08       		.byte	0x8
 2901 02ef 01       		.byte	0x1
 2902 02f0 43       		.byte	0x43
 2903 02f1 0E030000 		.4byte	0x30e
 2904 02f5 0A       		.uleb128 0xa
 2905 02f6 8D080000 		.4byte	.LASF57
 2906 02fa 01       		.byte	0x1
 2907 02fb 45       		.byte	0x45
 2908 02fc 0E030000 		.4byte	0x30e
 2909 0300 00       		.byte	0
 2910 0301 0A       		.uleb128 0xa
 2911 0302 C1010000 		.4byte	.LASF58
 2912 0306 01       		.byte	0x1
 2913 0307 46       		.byte	0x46
 2914 0308 0E030000 		.4byte	0x30e
 2915 030c 04       		.byte	0x4
 2916 030d 00       		.byte	0
 2917 030e 06       		.uleb128 0x6
 2918 030f 04       		.byte	0x4
 2919 0310 CB000000 		.4byte	0xcb
 2920 0314 02       		.uleb128 0x2
 2921 0315 C2070000 		.4byte	.LASF59
 2922 0319 01       		.byte	0x1
 2923 031a 47       		.byte	0x47
 2924 031b E9020000 		.4byte	0x2e9
 2925 031f 09       		.uleb128 0x9
 2926 0320 22000000 		.4byte	.LASF60
 2927 0324 08       		.byte	0x8
 2928 0325 01       		.byte	0x1
 2929 0326 49       		.byte	0x49
 2930 0327 44030000 		.4byte	0x344
 2931 032b 0A       		.uleb128 0xa
 2932 032c 3C0A0000 		.4byte	.LASF61
 2933 0330 01       		.byte	0x1
 2934 0331 4B       		.byte	0x4b
 2935 0332 0F020000 		.4byte	0x20f
 2936 0336 00       		.byte	0
 2937 0337 0A       		.uleb128 0xa
 2938 0338 6C010000 		.4byte	.LASF62
 2939 033c 01       		.byte	0x1
 2940 033d 4C       		.byte	0x4c
 2941 033e 10010000 		.4byte	0x110
 2942 0342 04       		.byte	0x4
 2943 0343 00       		.byte	0
 2944 0344 02       		.uleb128 0x2
 2945 0345 44000000 		.4byte	.LASF63
 2946 0349 01       		.byte	0x1
 2947 034a 4D       		.byte	0x4d
 2948 034b 1F030000 		.4byte	0x31f
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 111


 2949 034f 0E       		.uleb128 0xe
 2950 0350 08       		.byte	0x8
 2951 0351 01       		.byte	0x1
 2952 0352 66       		.byte	0x66
 2953 0353 6E030000 		.4byte	0x36e
 2954 0357 0F       		.uleb128 0xf
 2955 0358 51020000 		.4byte	.LASF64
 2956 035c 01       		.byte	0x1
 2957 035d 68       		.byte	0x68
 2958 035e 14030000 		.4byte	0x314
 2959 0362 0F       		.uleb128 0xf
 2960 0363 E0020000 		.4byte	.LASF65
 2961 0367 01       		.byte	0x1
 2962 0368 69       		.byte	0x69
 2963 0369 44030000 		.4byte	0x344
 2964 036d 00       		.byte	0
 2965 036e 0B       		.uleb128 0xb
 2966 036f CB000000 		.4byte	0xcb
 2967 0373 02       		.uleb128 0x2
 2968 0374 350A0000 		.4byte	.LASF66
 2969 0378 01       		.byte	0x1
 2970 0379 83       		.byte	0x83
 2971 037a 66020000 		.4byte	0x266
 2972 037e 02       		.uleb128 0x2
 2973 037f 81010000 		.4byte	.LASF67
 2974 0383 01       		.byte	0x1
 2975 0384 87       		.byte	0x87
 2976 0385 73030000 		.4byte	0x373
 2977 0389 09       		.uleb128 0x9
 2978 038a 03010000 		.4byte	.LASF68
 2979 038e 08       		.byte	0x8
 2980 038f 01       		.byte	0x1
 2981 0390 94       		.byte	0x94
 2982 0391 AE030000 		.4byte	0x3ae
 2983 0395 0A       		.uleb128 0xa
 2984 0396 E1030000 		.4byte	.LASF69
 2985 039a 01       		.byte	0x1
 2986 039b 96       		.byte	0x96
 2987 039c B9000000 		.4byte	0xb9
 2988 03a0 00       		.byte	0
 2989 03a1 0A       		.uleb128 0xa
 2990 03a2 D9030000 		.4byte	.LASF70
 2991 03a6 01       		.byte	0x1
 2992 03a7 97       		.byte	0x97
 2993 03a8 55020000 		.4byte	0x255
 2994 03ac 04       		.byte	0x4
 2995 03ad 00       		.byte	0
 2996 03ae 02       		.uleb128 0x2
 2997 03af C2050000 		.4byte	.LASF71
 2998 03b3 01       		.byte	0x1
 2999 03b4 98       		.byte	0x98
 3000 03b5 89030000 		.4byte	0x389
 3001 03b9 02       		.uleb128 0x2
 3002 03ba A0010000 		.4byte	.LASF72
 3003 03be 01       		.byte	0x1
 3004 03bf 9D       		.byte	0x9d
 3005 03c0 AE030000 		.4byte	0x3ae
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 112


 3006 03c4 10       		.uleb128 0x10
 3007 03c5 FB050000 		.4byte	.LASF161
 3008 03c9 02       		.byte	0x2
 3009 03ca D1       		.byte	0xd1
 3010 03cb EC000000 		.4byte	0xec
 3011 03cf 03       		.byte	0x3
 3012 03d0 EB030000 		.4byte	0x3eb
 3013 03d4 11       		.uleb128 0x11
 3014 03d5 A1070000 		.4byte	.LASF73
 3015 03d9 02       		.byte	0x2
 3016 03da D3       		.byte	0xd3
 3017 03db EC000000 		.4byte	0xec
 3018 03df 11       		.uleb128 0x11
 3019 03e0 3C050000 		.4byte	.LASF74
 3020 03e4 02       		.byte	0x2
 3021 03e5 D3       		.byte	0xd3
 3022 03e6 EC000000 		.4byte	0xec
 3023 03ea 00       		.byte	0
 3024 03eb 12       		.uleb128 0x12
 3025 03ec 1C040000 		.4byte	.LASF162
 3026 03f0 02       		.byte	0x2
 3027 03f1 E5       		.byte	0xe5
 3028 03f2 03       		.byte	0x3
 3029 03f3 03040000 		.4byte	0x403
 3030 03f7 13       		.uleb128 0x13
 3031 03f8 DC060000 		.4byte	.LASF163
 3032 03fc 02       		.byte	0x2
 3033 03fd E5       		.byte	0xe5
 3034 03fe EC000000 		.4byte	0xec
 3035 0402 00       		.byte	0
 3036 0403 14       		.uleb128 0x14
 3037 0404 9E020000 		.4byte	.LASF75
 3038 0408 01       		.byte	0x1
 3039 0409 0108     		.2byte	0x801
 3040 040b 10010000 		.4byte	0x110
 3041 040f 00000000 		.4byte	.LFB88
 3042 0413 12000000 		.4byte	.LFE88-.LFB88
 3043 0417 01       		.uleb128 0x1
 3044 0418 9C       		.byte	0x9c
 3045 0419 3E040000 		.4byte	0x43e
 3046 041d 15       		.uleb128 0x15
 3047 041e 9E080000 		.4byte	.LASF77
 3048 0422 01       		.byte	0x1
 3049 0423 0108     		.2byte	0x801
 3050 0425 49040000 		.4byte	0x449
 3051 0429 00000000 		.4byte	.LLST0
 3052 042d 16       		.uleb128 0x16
 3053 042e EB060000 		.4byte	.LASF78
 3054 0432 01       		.byte	0x1
 3055 0433 0308     		.2byte	0x803
 3056 0435 10010000 		.4byte	0x110
 3057 0439 3A000000 		.4byte	.LLST1
 3058 043d 00       		.byte	0
 3059 043e 06       		.uleb128 0x6
 3060 043f 04       		.byte	0x4
 3061 0440 44040000 		.4byte	0x444
 3062 0444 07       		.uleb128 0x7
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 113


 3063 0445 7E030000 		.4byte	0x37e
 3064 0449 07       		.uleb128 0x7
 3065 044a 3E040000 		.4byte	0x43e
 3066 044e 14       		.uleb128 0x14
 3067 044f 1F050000 		.4byte	.LASF76
 3068 0453 01       		.byte	0x1
 3069 0454 1B09     		.2byte	0x91b
 3070 0456 05010000 		.4byte	0x105
 3071 045a 00000000 		.4byte	.LFB94
 3072 045e 1E000000 		.4byte	.LFE94-.LFB94
 3073 0462 01       		.uleb128 0x1
 3074 0463 9C       		.byte	0x9c
 3075 0464 99040000 		.4byte	0x499
 3076 0468 15       		.uleb128 0x15
 3077 0469 9E080000 		.4byte	.LASF77
 3078 046d 01       		.byte	0x1
 3079 046e 1B09     		.2byte	0x91b
 3080 0470 3E040000 		.4byte	0x43e
 3081 0474 58000000 		.4byte	.LLST2
 3082 0478 17       		.uleb128 0x17
 3083 0479 A6080000 		.4byte	.LASF79
 3084 047d 01       		.byte	0x1
 3085 047e 1D09     		.2byte	0x91d
 3086 0480 05010000 		.4byte	0x105
 3087 0484 01       		.uleb128 0x1
 3088 0485 54       		.byte	0x54
 3089 0486 18       		.uleb128 0x18
 3090 0487 08000000 		.4byte	.LVL6
 3091 048b A4180000 		.4byte	0x18a4
 3092 048f 18       		.uleb128 0x18
 3093 0490 1A000000 		.4byte	.LVL10
 3094 0494 AF180000 		.4byte	0x18af
 3095 0498 00       		.byte	0
 3096 0499 14       		.uleb128 0x14
 3097 049a 85020000 		.4byte	.LASF80
 3098 049e 01       		.byte	0x1
 3099 049f F308     		.2byte	0x8f3
 3100 04a1 05010000 		.4byte	0x105
 3101 04a5 00000000 		.4byte	.LFB92
 3102 04a9 1A000000 		.4byte	.LFE92-.LFB92
 3103 04ad 01       		.uleb128 0x1
 3104 04ae 9C       		.byte	0x9c
 3105 04af E4040000 		.4byte	0x4e4
 3106 04b3 15       		.uleb128 0x15
 3107 04b4 9E080000 		.4byte	.LASF77
 3108 04b8 01       		.byte	0x1
 3109 04b9 F308     		.2byte	0x8f3
 3110 04bb 3E040000 		.4byte	0x43e
 3111 04bf 9D000000 		.4byte	.LLST3
 3112 04c3 17       		.uleb128 0x17
 3113 04c4 A6080000 		.4byte	.LASF79
 3114 04c8 01       		.byte	0x1
 3115 04c9 F508     		.2byte	0x8f5
 3116 04cb 05010000 		.4byte	0x105
 3117 04cf 01       		.uleb128 0x1
 3118 04d0 54       		.byte	0x54
 3119 04d1 18       		.uleb128 0x18
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 114


 3120 04d2 08000000 		.4byte	.LVL12
 3121 04d6 A4180000 		.4byte	0x18a4
 3122 04da 18       		.uleb128 0x18
 3123 04db 16000000 		.4byte	.LVL16
 3124 04df AF180000 		.4byte	0x18af
 3125 04e3 00       		.byte	0
 3126 04e4 14       		.uleb128 0x14
 3127 04e5 2C040000 		.4byte	.LASF81
 3128 04e9 01       		.byte	0x1
 3129 04ea 1A08     		.2byte	0x81a
 3130 04ec 05010000 		.4byte	0x105
 3131 04f0 00000000 		.4byte	.LFB89
 3132 04f4 76000000 		.4byte	.LFE89-.LFB89
 3133 04f8 01       		.uleb128 0x1
 3134 04f9 9C       		.byte	0x9c
 3135 04fa 6A050000 		.4byte	0x56a
 3136 04fe 15       		.uleb128 0x15
 3137 04ff 9E080000 		.4byte	.LASF77
 3138 0503 01       		.byte	0x1
 3139 0504 1A08     		.2byte	0x81a
 3140 0506 70050000 		.4byte	0x570
 3141 050a E2000000 		.4byte	.LLST4
 3142 050e 15       		.uleb128 0x15
 3143 050f 30080000 		.4byte	.LASF82
 3144 0513 01       		.byte	0x1
 3145 0514 1A08     		.2byte	0x81a
 3146 0516 C4000000 		.4byte	0xc4
 3147 051a 42010000 		.4byte	.LLST5
 3148 051e 15       		.uleb128 0x15
 3149 051f 500A0000 		.4byte	.LASF83
 3150 0523 01       		.byte	0x1
 3151 0524 1A08     		.2byte	0x81a
 3152 0526 75050000 		.4byte	0x575
 3153 052a AE010000 		.4byte	.LLST6
 3154 052e 16       		.uleb128 0x16
 3155 052f A6080000 		.4byte	.LASF79
 3156 0533 01       		.byte	0x1
 3157 0534 1C08     		.2byte	0x81c
 3158 0536 05010000 		.4byte	0x105
 3159 053a CC010000 		.4byte	.LLST7
 3160 053e 16       		.uleb128 0x16
 3161 053f CE020000 		.4byte	.LASF51
 3162 0543 01       		.byte	0x1
 3163 0544 1D08     		.2byte	0x81d
 3164 0546 10010000 		.4byte	0x110
 3165 054a 02020000 		.4byte	.LLST8
 3166 054e 18       		.uleb128 0x18
 3167 054f 16000000 		.4byte	.LVL22
 3168 0553 BA180000 		.4byte	0x18ba
 3169 0557 18       		.uleb128 0x18
 3170 0558 24000000 		.4byte	.LVL25
 3171 055c C6180000 		.4byte	0x18c6
 3172 0560 18       		.uleb128 0x18
 3173 0561 40000000 		.4byte	.LVL28
 3174 0565 C6180000 		.4byte	0x18c6
 3175 0569 00       		.byte	0
 3176 056a 06       		.uleb128 0x6
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 115


 3177 056b 04       		.byte	0x4
 3178 056c 7E030000 		.4byte	0x37e
 3179 0570 07       		.uleb128 0x7
 3180 0571 6A050000 		.4byte	0x56a
 3181 0575 07       		.uleb128 0x7
 3182 0576 05010000 		.4byte	0x105
 3183 057a 19       		.uleb128 0x19
 3184 057b 4B090000 		.4byte	.LASF85
 3185 057f 01       		.byte	0x1
 3186 0580 6908     		.2byte	0x869
 3187 0582 00000000 		.4byte	.LFB90
 3188 0586 24000000 		.4byte	.LFE90-.LFB90
 3189 058a 01       		.uleb128 0x1
 3190 058b 9C       		.byte	0x9c
 3191 058c C1050000 		.4byte	0x5c1
 3192 0590 15       		.uleb128 0x15
 3193 0591 9E080000 		.4byte	.LASF77
 3194 0595 01       		.byte	0x1
 3195 0596 6908     		.2byte	0x869
 3196 0598 70050000 		.4byte	0x570
 3197 059c 22020000 		.4byte	.LLST9
 3198 05a0 15       		.uleb128 0x15
 3199 05a1 95020000 		.4byte	.LASF84
 3200 05a5 01       		.byte	0x1
 3201 05a6 6908     		.2byte	0x869
 3202 05a8 C1050000 		.4byte	0x5c1
 3203 05ac 4E020000 		.4byte	.LLST10
 3204 05b0 1A       		.uleb128 0x1a
 3205 05b1 20000000 		.4byte	.LVL38
 3206 05b5 C6180000 		.4byte	0x18c6
 3207 05b9 1B       		.uleb128 0x1b
 3208 05ba 01       		.uleb128 0x1
 3209 05bb 50       		.byte	0x50
 3210 05bc 02       		.uleb128 0x2
 3211 05bd 74       		.byte	0x74
 3212 05be 00       		.sleb128 0
 3213 05bf 00       		.byte	0
 3214 05c0 00       		.byte	0
 3215 05c1 07       		.uleb128 0x7
 3216 05c2 B0000000 		.4byte	0xb0
 3217 05c6 19       		.uleb128 0x19
 3218 05c7 D3090000 		.4byte	.LASF86
 3219 05cb 01       		.byte	0x1
 3220 05cc 7B08     		.2byte	0x87b
 3221 05ce 00000000 		.4byte	.LFB91
 3222 05d2 66000000 		.4byte	.LFE91-.LFB91
 3223 05d6 01       		.uleb128 0x1
 3224 05d7 9C       		.byte	0x9c
 3225 05d8 87060000 		.4byte	0x687
 3226 05dc 15       		.uleb128 0x15
 3227 05dd 9E080000 		.4byte	.LASF77
 3228 05e1 01       		.byte	0x1
 3229 05e2 7B08     		.2byte	0x87b
 3230 05e4 70050000 		.4byte	0x570
 3231 05e8 77020000 		.4byte	.LLST11
 3232 05ec 1C       		.uleb128 0x1c
 3233 05ed 08000000 		.4byte	.LBB23
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 116


 3234 05f1 28000000 		.4byte	.LBE23-.LBB23
 3235 05f5 27060000 		.4byte	0x627
 3236 05f9 16       		.uleb128 0x16
 3237 05fa 42010000 		.4byte	.LASF55
 3238 05fe 01       		.byte	0x1
 3239 05ff 8508     		.2byte	0x885
 3240 0601 CB000000 		.4byte	0xcb
 3241 0605 95020000 		.4byte	.LLST12
 3242 0609 1D       		.uleb128 0x1d
 3243 060a 1C000000 		.4byte	.LVL43
 3244 060e CF180000 		.4byte	0x18cf
 3245 0612 1D060000 		.4byte	0x61d
 3246 0616 1B       		.uleb128 0x1b
 3247 0617 01       		.uleb128 0x1
 3248 0618 50       		.byte	0x50
 3249 0619 02       		.uleb128 0x2
 3250 061a 75       		.byte	0x75
 3251 061b 24       		.sleb128 36
 3252 061c 00       		.byte	0
 3253 061d 18       		.uleb128 0x18
 3254 061e 22000000 		.4byte	.LVL44
 3255 0622 DB180000 		.4byte	0x18db
 3256 0626 00       		.byte	0
 3257 0627 1C       		.uleb128 0x1c
 3258 0628 38000000 		.4byte	.LBB24
 3259 062c 28000000 		.4byte	.LBE24-.LBB24
 3260 0630 62060000 		.4byte	0x662
 3261 0634 16       		.uleb128 0x16
 3262 0635 5A0A0000 		.4byte	.LASF54
 3263 0639 01       		.byte	0x1
 3264 063a D608     		.2byte	0x8d6
 3265 063c CB000000 		.4byte	0xcb
 3266 0640 B3020000 		.4byte	.LLST13
 3267 0644 1D       		.uleb128 0x1d
 3268 0645 4C000000 		.4byte	.LVL51
 3269 0649 CF180000 		.4byte	0x18cf
 3270 064d 58060000 		.4byte	0x658
 3271 0651 1B       		.uleb128 0x1b
 3272 0652 01       		.uleb128 0x1
 3273 0653 50       		.byte	0x50
 3274 0654 02       		.uleb128 0x2
 3275 0655 75       		.byte	0x75
 3276 0656 10       		.sleb128 16
 3277 0657 00       		.byte	0
 3278 0658 18       		.uleb128 0x18
 3279 0659 52000000 		.4byte	.LVL52
 3280 065d DB180000 		.4byte	0x18db
 3281 0661 00       		.byte	0
 3282 0662 18       		.uleb128 0x18
 3283 0663 08000000 		.4byte	.LVL41
 3284 0667 A4180000 		.4byte	0x18a4
 3285 066b 18       		.uleb128 0x18
 3286 066c 34000000 		.4byte	.LVL47
 3287 0670 AF180000 		.4byte	0x18af
 3288 0674 18       		.uleb128 0x18
 3289 0675 38000000 		.4byte	.LVL48
 3290 0679 A4180000 		.4byte	0x18a4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 117


 3291 067d 18       		.uleb128 0x18
 3292 067e 64000000 		.4byte	.LVL55
 3293 0682 AF180000 		.4byte	0x18af
 3294 0686 00       		.byte	0
 3295 0687 1E       		.uleb128 0x1e
 3296 0688 E2090000 		.4byte	.LASF93
 3297 068c 01       		.byte	0x1
 3298 068d FF       		.byte	0xff
 3299 068e 05010000 		.4byte	0x105
 3300 0692 00000000 		.4byte	.LFB68
 3301 0696 6C000000 		.4byte	.LFE68-.LFB68
 3302 069a 01       		.uleb128 0x1
 3303 069b 9C       		.byte	0x9c
 3304 069c 1D070000 		.4byte	0x71d
 3305 06a0 1F       		.uleb128 0x1f
 3306 06a1 51020000 		.4byte	.LASF64
 3307 06a5 01       		.byte	0x1
 3308 06a6 FF       		.byte	0xff
 3309 06a7 55020000 		.4byte	0x255
 3310 06ab D1020000 		.4byte	.LLST14
 3311 06af 1F       		.uleb128 0x1f
 3312 06b0 7C060000 		.4byte	.LASF87
 3313 06b4 01       		.byte	0x1
 3314 06b5 FF       		.byte	0xff
 3315 06b6 05010000 		.4byte	0x105
 3316 06ba FD020000 		.4byte	.LLST15
 3317 06be 16       		.uleb128 0x16
 3318 06bf 9E080000 		.4byte	.LASF77
 3319 06c3 01       		.byte	0x1
 3320 06c4 0101     		.2byte	0x101
 3321 06c6 70050000 		.4byte	0x570
 3322 06ca 29030000 		.4byte	.LLST16
 3323 06ce 18       		.uleb128 0x18
 3324 06cf 0A000000 		.4byte	.LVL58
 3325 06d3 A4180000 		.4byte	0x18a4
 3326 06d7 1D       		.uleb128 0x1d
 3327 06d8 3C000000 		.4byte	.LVL59
 3328 06dc CF180000 		.4byte	0x18cf
 3329 06e0 EB060000 		.4byte	0x6eb
 3330 06e4 1B       		.uleb128 0x1b
 3331 06e5 01       		.uleb128 0x1
 3332 06e6 50       		.byte	0x50
 3333 06e7 02       		.uleb128 0x2
 3334 06e8 74       		.byte	0x74
 3335 06e9 10       		.sleb128 16
 3336 06ea 00       		.byte	0
 3337 06eb 1D       		.uleb128 0x1d
 3338 06ec 58000000 		.4byte	.LVL60
 3339 06f0 E7180000 		.4byte	0x18e7
 3340 06f4 FF060000 		.4byte	0x6ff
 3341 06f8 1B       		.uleb128 0x1b
 3342 06f9 01       		.uleb128 0x1
 3343 06fa 50       		.byte	0x50
 3344 06fb 02       		.uleb128 0x2
 3345 06fc 74       		.byte	0x74
 3346 06fd 10       		.sleb128 16
 3347 06fe 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 118


 3348 06ff 1D       		.uleb128 0x1d
 3349 0700 60000000 		.4byte	.LVL61
 3350 0704 E7180000 		.4byte	0x18e7
 3351 0708 13070000 		.4byte	0x713
 3352 070c 1B       		.uleb128 0x1b
 3353 070d 01       		.uleb128 0x1
 3354 070e 50       		.byte	0x50
 3355 070f 02       		.uleb128 0x2
 3356 0710 74       		.byte	0x74
 3357 0711 24       		.sleb128 36
 3358 0712 00       		.byte	0
 3359 0713 18       		.uleb128 0x18
 3360 0714 64000000 		.4byte	.LVL62
 3361 0718 AF180000 		.4byte	0x18af
 3362 071c 00       		.byte	0
 3363 071d 19       		.uleb128 0x19
 3364 071e F9010000 		.4byte	.LASF88
 3365 0722 01       		.byte	0x1
 3366 0723 A601     		.2byte	0x1a6
 3367 0725 00000000 		.4byte	.LFB70
 3368 0729 1C000000 		.4byte	.LFE70-.LFB70
 3369 072d 01       		.uleb128 0x1
 3370 072e 9C       		.byte	0x9c
 3371 072f 99070000 		.4byte	0x799
 3372 0733 15       		.uleb128 0x15
 3373 0734 4D070000 		.4byte	.LASF89
 3374 0738 01       		.byte	0x1
 3375 0739 A601     		.2byte	0x1a6
 3376 073b 99070000 		.4byte	0x799
 3377 073f 55030000 		.4byte	.LLST17
 3378 0743 15       		.uleb128 0x15
 3379 0744 85040000 		.4byte	.LASF53
 3380 0748 01       		.byte	0x1
 3381 0749 A601     		.2byte	0x1a6
 3382 074b 99070000 		.4byte	0x799
 3383 074f 82030000 		.4byte	.LLST18
 3384 0753 15       		.uleb128 0x15
 3385 0754 3A060000 		.4byte	.LASF90
 3386 0758 01       		.byte	0x1
 3387 0759 A601     		.2byte	0x1a6
 3388 075b 26010000 		.4byte	0x126
 3389 075f A0030000 		.4byte	.LLST19
 3390 0763 15       		.uleb128 0x15
 3391 0764 0B070000 		.4byte	.LASF91
 3392 0768 01       		.byte	0x1
 3393 0769 A601     		.2byte	0x1a6
 3394 076b 9E070000 		.4byte	0x79e
 3395 076f C1030000 		.4byte	.LLST20
 3396 0773 20       		.uleb128 0x20
 3397 0774 E3000000 		.4byte	.LASF92
 3398 0778 01       		.byte	0x1
 3399 0779 A601     		.2byte	0x1a6
 3400 077b 6A050000 		.4byte	0x56a
 3401 077f 02       		.uleb128 0x2
 3402 0780 91       		.byte	0x91
 3403 0781 00       		.sleb128 0
 3404 0782 1A       		.uleb128 0x1a
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 119


 3405 0783 1A000000 		.4byte	.LVL68
 3406 0787 87060000 		.4byte	0x687
 3407 078b 1B       		.uleb128 0x1b
 3408 078c 01       		.uleb128 0x1
 3409 078d 50       		.byte	0x50
 3410 078e 03       		.uleb128 0x3
 3411 078f 91       		.byte	0x91
 3412 0790 00       		.sleb128 0
 3413 0791 06       		.byte	0x6
 3414 0792 1B       		.uleb128 0x1b
 3415 0793 01       		.uleb128 0x1
 3416 0794 51       		.byte	0x51
 3417 0795 01       		.uleb128 0x1
 3418 0796 31       		.byte	0x31
 3419 0797 00       		.byte	0
 3420 0798 00       		.byte	0
 3421 0799 07       		.uleb128 0x7
 3422 079a 10010000 		.4byte	0x110
 3423 079e 07       		.uleb128 0x7
 3424 079f D6000000 		.4byte	0xd6
 3425 07a3 21       		.uleb128 0x21
 3426 07a4 D5050000 		.4byte	.LASF94
 3427 07a8 01       		.byte	0x1
 3428 07a9 7001     		.2byte	0x170
 3429 07ab 55020000 		.4byte	0x255
 3430 07af 00000000 		.4byte	.LFB69
 3431 07b3 2E000000 		.4byte	.LFE69-.LFB69
 3432 07b7 01       		.uleb128 0x1
 3433 07b8 9C       		.byte	0x9c
 3434 07b9 61080000 		.4byte	0x861
 3435 07bd 15       		.uleb128 0x15
 3436 07be 4D070000 		.4byte	.LASF89
 3437 07c2 01       		.byte	0x1
 3438 07c3 7001     		.2byte	0x170
 3439 07c5 99070000 		.4byte	0x799
 3440 07c9 E2030000 		.4byte	.LLST21
 3441 07cd 15       		.uleb128 0x15
 3442 07ce 85040000 		.4byte	.LASF53
 3443 07d2 01       		.byte	0x1
 3444 07d3 7001     		.2byte	0x170
 3445 07d5 99070000 		.4byte	0x799
 3446 07d9 00040000 		.4byte	.LLST22
 3447 07dd 15       		.uleb128 0x15
 3448 07de 0B070000 		.4byte	.LASF91
 3449 07e2 01       		.byte	0x1
 3450 07e3 7001     		.2byte	0x170
 3451 07e5 9E070000 		.4byte	0x79e
 3452 07e9 1E040000 		.4byte	.LLST23
 3453 07ed 16       		.uleb128 0x16
 3454 07ee E3000000 		.4byte	.LASF92
 3455 07f2 01       		.byte	0x1
 3456 07f3 7201     		.2byte	0x172
 3457 07f5 6A050000 		.4byte	0x56a
 3458 07f9 3F040000 		.4byte	.LLST24
 3459 07fd 16       		.uleb128 0x16
 3460 07fe 0F080000 		.4byte	.LASF95
 3461 0802 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 120


 3462 0803 7301     		.2byte	0x173
 3463 0805 25000000 		.4byte	0x25
 3464 0809 5D040000 		.4byte	.LLST25
 3465 080d 16       		.uleb128 0x16
 3466 080e 3A060000 		.4byte	.LASF90
 3467 0812 01       		.byte	0x1
 3468 0813 7401     		.2byte	0x174
 3469 0815 26010000 		.4byte	0x126
 3470 0819 8E040000 		.4byte	.LLST26
 3471 081d 1D       		.uleb128 0x1d
 3472 081e 14000000 		.4byte	.LVL72
 3473 0822 F3180000 		.4byte	0x18f3
 3474 0826 36080000 		.4byte	0x836
 3475 082a 1B       		.uleb128 0x1b
 3476 082b 01       		.uleb128 0x1
 3477 082c 50       		.byte	0x50
 3478 082d 07       		.uleb128 0x7
 3479 082e 76       		.byte	0x76
 3480 082f 00       		.sleb128 0
 3481 0830 75       		.byte	0x75
 3482 0831 00       		.sleb128 0
 3483 0832 1E       		.byte	0x1e
 3484 0833 23       		.byte	0x23
 3485 0834 48       		.uleb128 0x48
 3486 0835 00       		.byte	0
 3487 0836 1A       		.uleb128 0x1a
 3488 0837 28000000 		.4byte	.LVL76
 3489 083b 1D070000 		.4byte	0x71d
 3490 083f 1B       		.uleb128 0x1b
 3491 0840 01       		.uleb128 0x1
 3492 0841 50       		.byte	0x50
 3493 0842 02       		.uleb128 0x2
 3494 0843 75       		.byte	0x75
 3495 0844 00       		.sleb128 0
 3496 0845 1B       		.uleb128 0x1b
 3497 0846 01       		.uleb128 0x1
 3498 0847 51       		.byte	0x51
 3499 0848 02       		.uleb128 0x2
 3500 0849 76       		.byte	0x76
 3501 084a 00       		.sleb128 0
 3502 084b 1B       		.uleb128 0x1b
 3503 084c 01       		.uleb128 0x1
 3504 084d 52       		.byte	0x52
 3505 084e 03       		.uleb128 0x3
 3506 084f 74       		.byte	0x74
 3507 0850 C800     		.sleb128 72
 3508 0852 1B       		.uleb128 0x1b
 3509 0853 01       		.uleb128 0x1
 3510 0854 53       		.byte	0x53
 3511 0855 02       		.uleb128 0x2
 3512 0856 77       		.byte	0x77
 3513 0857 00       		.sleb128 0
 3514 0858 1B       		.uleb128 0x1b
 3515 0859 02       		.uleb128 0x2
 3516 085a 7D       		.byte	0x7d
 3517 085b 00       		.sleb128 0
 3518 085c 02       		.uleb128 0x2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 121


 3519 085d 74       		.byte	0x74
 3520 085e 00       		.sleb128 0
 3521 085f 00       		.byte	0
 3522 0860 00       		.byte	0
 3523 0861 21       		.uleb128 0x21
 3524 0862 7B0A0000 		.4byte	.LASF96
 3525 0866 01       		.byte	0x1
 3526 0867 CA02     		.2byte	0x2ca
 3527 0869 55020000 		.4byte	0x255
 3528 086d 00000000 		.4byte	.LFB75
 3529 0871 16000000 		.4byte	.LFE75-.LFB75
 3530 0875 01       		.uleb128 0x1
 3531 0876 9C       		.byte	0x9c
 3532 0877 C7080000 		.4byte	0x8c7
 3533 087b 15       		.uleb128 0x15
 3534 087c 86060000 		.4byte	.LASF97
 3535 0880 01       		.byte	0x1
 3536 0881 CA02     		.2byte	0x2ca
 3537 0883 99070000 		.4byte	0x799
 3538 0887 BD040000 		.4byte	.LLST27
 3539 088b 15       		.uleb128 0x15
 3540 088c 90040000 		.4byte	.LASF98
 3541 0890 01       		.byte	0x1
 3542 0891 CA02     		.2byte	0x2ca
 3543 0893 99070000 		.4byte	0x799
 3544 0897 DE040000 		.4byte	.LLST28
 3545 089b 16       		.uleb128 0x16
 3546 089c D9030000 		.4byte	.LASF70
 3547 08a0 01       		.byte	0x1
 3548 08a1 CC02     		.2byte	0x2cc
 3549 08a3 55020000 		.4byte	0x255
 3550 08a7 FC040000 		.4byte	.LLST29
 3551 08ab 1A       		.uleb128 0x1a
 3552 08ac 0C000000 		.4byte	.LVL79
 3553 08b0 A3070000 		.4byte	0x7a3
 3554 08b4 1B       		.uleb128 0x1b
 3555 08b5 01       		.uleb128 0x1
 3556 08b6 50       		.byte	0x50
 3557 08b7 03       		.uleb128 0x3
 3558 08b8 F3       		.byte	0xf3
 3559 08b9 01       		.uleb128 0x1
 3560 08ba 50       		.byte	0x50
 3561 08bb 1B       		.uleb128 0x1b
 3562 08bc 01       		.uleb128 0x1
 3563 08bd 51       		.byte	0x51
 3564 08be 01       		.uleb128 0x1
 3565 08bf 30       		.byte	0x30
 3566 08c0 1B       		.uleb128 0x1b
 3567 08c1 01       		.uleb128 0x1
 3568 08c2 52       		.byte	0x52
 3569 08c3 01       		.uleb128 0x1
 3570 08c4 32       		.byte	0x32
 3571 08c5 00       		.byte	0
 3572 08c6 00       		.byte	0
 3573 08c7 21       		.uleb128 0x21
 3574 08c8 3F040000 		.4byte	.LASF99
 3575 08cc 01       		.byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 122


 3576 08cd E402     		.2byte	0x2e4
 3577 08cf 05010000 		.4byte	0x105
 3578 08d3 00000000 		.4byte	.LFB76
 3579 08d7 08010000 		.4byte	.LFE76-.LFB76
 3580 08db 01       		.uleb128 0x1
 3581 08dc 9C       		.byte	0x9c
 3582 08dd 810A0000 		.4byte	0xa81
 3583 08e1 15       		.uleb128 0x15
 3584 08e2 51020000 		.4byte	.LASF64
 3585 08e6 01       		.byte	0x1
 3586 08e7 E402     		.2byte	0x2e4
 3587 08e9 55020000 		.4byte	0x255
 3588 08ed 1A050000 		.4byte	.LLST30
 3589 08f1 15       		.uleb128 0x15
 3590 08f2 30080000 		.4byte	.LASF82
 3591 08f6 01       		.byte	0x1
 3592 08f7 E402     		.2byte	0x2e4
 3593 08f9 810A0000 		.4byte	0xa81
 3594 08fd 46050000 		.4byte	.LLST31
 3595 0901 15       		.uleb128 0x15
 3596 0902 84090000 		.4byte	.LASF100
 3597 0906 01       		.byte	0x1
 3598 0907 E402     		.2byte	0x2e4
 3599 0909 1B010000 		.4byte	0x11b
 3600 090d 72050000 		.4byte	.LLST32
 3601 0911 15       		.uleb128 0x15
 3602 0912 89010000 		.4byte	.LASF101
 3603 0916 01       		.byte	0x1
 3604 0917 E402     		.2byte	0x2e4
 3605 0919 75050000 		.4byte	0x575
 3606 091d B5050000 		.4byte	.LLST33
 3607 0921 16       		.uleb128 0x16
 3608 0922 BB030000 		.4byte	.LASF102
 3609 0926 01       		.byte	0x1
 3610 0927 E602     		.2byte	0x2e6
 3611 0929 05010000 		.4byte	0x105
 3612 092d E1050000 		.4byte	.LLST34
 3613 0931 16       		.uleb128 0x16
 3614 0932 2B020000 		.4byte	.LASF103
 3615 0936 01       		.byte	0x1
 3616 0937 E602     		.2byte	0x2e6
 3617 0939 05010000 		.4byte	0x105
 3618 093d 17060000 		.4byte	.LLST35
 3619 0941 17       		.uleb128 0x17
 3620 0942 D0030000 		.4byte	.LASF104
 3621 0946 01       		.byte	0x1
 3622 0947 E702     		.2byte	0x2e7
 3623 0949 4A020000 		.4byte	0x24a
 3624 094d 02       		.uleb128 0x2
 3625 094e 91       		.byte	0x91
 3626 094f 60       		.sleb128 -32
 3627 0950 16       		.uleb128 0x16
 3628 0951 9E080000 		.4byte	.LASF77
 3629 0955 01       		.byte	0x1
 3630 0956 E802     		.2byte	0x2e8
 3631 0958 70050000 		.4byte	0x570
 3632 095c 35060000 		.4byte	.LLST36
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 123


 3633 0960 18       		.uleb128 0x18
 3634 0961 12000000 		.4byte	.LVL84
 3635 0965 A4180000 		.4byte	0x18a4
 3636 0969 1D       		.uleb128 0x1d
 3637 096a 28000000 		.4byte	.LVL85
 3638 096e E4040000 		.4byte	0x4e4
 3639 0972 89090000 		.4byte	0x989
 3640 0976 1B       		.uleb128 0x1b
 3641 0977 01       		.uleb128 0x1
 3642 0978 50       		.byte	0x50
 3643 0979 02       		.uleb128 0x2
 3644 097a 74       		.byte	0x74
 3645 097b 00       		.sleb128 0
 3646 097c 1B       		.uleb128 0x1b
 3647 097d 01       		.uleb128 0x1
 3648 097e 51       		.byte	0x51
 3649 097f 02       		.uleb128 0x2
 3650 0980 77       		.byte	0x77
 3651 0981 00       		.sleb128 0
 3652 0982 1B       		.uleb128 0x1b
 3653 0983 01       		.uleb128 0x1
 3654 0984 52       		.byte	0x52
 3655 0985 02       		.uleb128 0x2
 3656 0986 76       		.byte	0x76
 3657 0987 00       		.sleb128 0
 3658 0988 00       		.byte	0
 3659 0989 1D       		.uleb128 0x1d
 3660 098a 34000000 		.4byte	.LVL87
 3661 098e CF180000 		.4byte	0x18cf
 3662 0992 9D090000 		.4byte	0x99d
 3663 0996 1B       		.uleb128 0x1b
 3664 0997 01       		.uleb128 0x1
 3665 0998 50       		.byte	0x50
 3666 0999 02       		.uleb128 0x2
 3667 099a 74       		.byte	0x74
 3668 099b 24       		.sleb128 36
 3669 099c 00       		.byte	0
 3670 099d 18       		.uleb128 0x18
 3671 099e 5E000000 		.4byte	.LVL90
 3672 09a2 AF180000 		.4byte	0x18af
 3673 09a6 18       		.uleb128 0x18
 3674 09a7 6A000000 		.4byte	.LVL91
 3675 09ab AF180000 		.4byte	0x18af
 3676 09af 1D       		.uleb128 0x1d
 3677 09b0 76000000 		.4byte	.LVL92
 3678 09b4 FE180000 		.4byte	0x18fe
 3679 09b8 C3090000 		.4byte	0x9c3
 3680 09bc 1B       		.uleb128 0x1b
 3681 09bd 01       		.uleb128 0x1
 3682 09be 50       		.byte	0x50
 3683 09bf 02       		.uleb128 0x2
 3684 09c0 91       		.byte	0x91
 3685 09c1 60       		.sleb128 -32
 3686 09c2 00       		.byte	0
 3687 09c3 18       		.uleb128 0x18
 3688 09c4 7C000000 		.4byte	.LVL94
 3689 09c8 AF180000 		.4byte	0x18af
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 124


 3690 09cc 18       		.uleb128 0x18
 3691 09cd 80000000 		.4byte	.LVL95
 3692 09d1 0A190000 		.4byte	0x190a
 3693 09d5 18       		.uleb128 0x18
 3694 09d6 84000000 		.4byte	.LVL96
 3695 09da A4180000 		.4byte	0x18a4
 3696 09de 18       		.uleb128 0x18
 3697 09df AC000000 		.4byte	.LVL97
 3698 09e3 AF180000 		.4byte	0x18af
 3699 09e7 1D       		.uleb128 0x1d
 3700 09e8 B4000000 		.4byte	.LVL99
 3701 09ec 16190000 		.4byte	0x1916
 3702 09f0 010A0000 		.4byte	0xa01
 3703 09f4 1B       		.uleb128 0x1b
 3704 09f5 01       		.uleb128 0x1
 3705 09f6 50       		.byte	0x50
 3706 09f7 02       		.uleb128 0x2
 3707 09f8 91       		.byte	0x91
 3708 09f9 60       		.sleb128 -32
 3709 09fa 1B       		.uleb128 0x1b
 3710 09fb 01       		.uleb128 0x1
 3711 09fc 51       		.byte	0x51
 3712 09fd 02       		.uleb128 0x2
 3713 09fe 91       		.byte	0x91
 3714 09ff 5C       		.sleb128 -36
 3715 0a00 00       		.byte	0
 3716 0a01 1D       		.uleb128 0x1d
 3717 0a02 BC000000 		.4byte	.LVL100
 3718 0a06 4E040000 		.4byte	0x44e
 3719 0a0a 150A0000 		.4byte	0xa15
 3720 0a0e 1B       		.uleb128 0x1b
 3721 0a0f 01       		.uleb128 0x1
 3722 0a10 50       		.byte	0x50
 3723 0a11 02       		.uleb128 0x2
 3724 0a12 74       		.byte	0x74
 3725 0a13 00       		.sleb128 0
 3726 0a14 00       		.byte	0
 3727 0a15 1D       		.uleb128 0x1d
 3728 0a16 C8000000 		.4byte	.LVL101
 3729 0a1a 22190000 		.4byte	0x1922
 3730 0a1e 290A0000 		.4byte	0xa29
 3731 0a22 1B       		.uleb128 0x1b
 3732 0a23 01       		.uleb128 0x1
 3733 0a24 50       		.byte	0x50
 3734 0a25 02       		.uleb128 0x2
 3735 0a26 74       		.byte	0x74
 3736 0a27 10       		.sleb128 16
 3737 0a28 00       		.byte	0
 3738 0a29 1D       		.uleb128 0x1d
 3739 0a2a CE000000 		.4byte	.LVL102
 3740 0a2e C6050000 		.4byte	0x5c6
 3741 0a32 3D0A0000 		.4byte	0xa3d
 3742 0a36 1B       		.uleb128 0x1b
 3743 0a37 01       		.uleb128 0x1
 3744 0a38 50       		.byte	0x50
 3745 0a39 02       		.uleb128 0x2
 3746 0a3a 74       		.byte	0x74
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 125


 3747 0a3b 00       		.sleb128 0
 3748 0a3c 00       		.byte	0
 3749 0a3d 18       		.uleb128 0x18
 3750 0a3e D2000000 		.4byte	.LVL103
 3751 0a42 2E190000 		.4byte	0x192e
 3752 0a46 1D       		.uleb128 0x1d
 3753 0a47 EE000000 		.4byte	.LVL104
 3754 0a4b C6050000 		.4byte	0x5c6
 3755 0a4f 5A0A0000 		.4byte	0xa5a
 3756 0a53 1B       		.uleb128 0x1b
 3757 0a54 01       		.uleb128 0x1
 3758 0a55 50       		.byte	0x50
 3759 0a56 02       		.uleb128 0x2
 3760 0a57 74       		.byte	0x74
 3761 0a58 00       		.sleb128 0
 3762 0a59 00       		.byte	0
 3763 0a5a 18       		.uleb128 0x18
 3764 0a5b F2000000 		.4byte	.LVL105
 3765 0a5f 2E190000 		.4byte	0x192e
 3766 0a63 1D       		.uleb128 0x1d
 3767 0a64 FA000000 		.4byte	.LVL106
 3768 0a68 C6050000 		.4byte	0x5c6
 3769 0a6c 770A0000 		.4byte	0xa77
 3770 0a70 1B       		.uleb128 0x1b
 3771 0a71 01       		.uleb128 0x1
 3772 0a72 50       		.byte	0x50
 3773 0a73 02       		.uleb128 0x2
 3774 0a74 74       		.byte	0x74
 3775 0a75 00       		.sleb128 0
 3776 0a76 00       		.byte	0
 3777 0a77 18       		.uleb128 0x18
 3778 0a78 FE000000 		.4byte	.LVL107
 3779 0a7c 2E190000 		.4byte	0x192e
 3780 0a80 00       		.byte	0
 3781 0a81 07       		.uleb128 0x7
 3782 0a82 C4000000 		.4byte	0xc4
 3783 0a86 19       		.uleb128 0x19
 3784 0a87 1C060000 		.4byte	.LASF105
 3785 0a8b 01       		.byte	0x1
 3786 0a8c D201     		.2byte	0x1d2
 3787 0a8e 00000000 		.4byte	.LFB71
 3788 0a92 18000000 		.4byte	.LFE71-.LFB71
 3789 0a96 01       		.uleb128 0x1
 3790 0a97 9C       		.byte	0x9c
 3791 0a98 CD0A0000 		.4byte	0xacd
 3792 0a9c 15       		.uleb128 0x15
 3793 0a9d E3000000 		.4byte	.LASF92
 3794 0aa1 01       		.byte	0x1
 3795 0aa2 D201     		.2byte	0x1d2
 3796 0aa4 6A050000 		.4byte	0x56a
 3797 0aa8 61060000 		.4byte	.LLST37
 3798 0aac 1A       		.uleb128 0x1a
 3799 0aad 14000000 		.4byte	.LVL110
 3800 0ab1 C7080000 		.4byte	0x8c7
 3801 0ab5 1B       		.uleb128 0x1b
 3802 0ab6 01       		.uleb128 0x1
 3803 0ab7 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 126


 3804 0ab8 03       		.uleb128 0x3
 3805 0ab9 F3       		.byte	0xf3
 3806 0aba 01       		.uleb128 0x1
 3807 0abb 50       		.byte	0x50
 3808 0abc 1B       		.uleb128 0x1b
 3809 0abd 01       		.uleb128 0x1
 3810 0abe 51       		.byte	0x51
 3811 0abf 01       		.uleb128 0x1
 3812 0ac0 30       		.byte	0x30
 3813 0ac1 1B       		.uleb128 0x1b
 3814 0ac2 01       		.uleb128 0x1
 3815 0ac3 52       		.byte	0x52
 3816 0ac4 01       		.uleb128 0x1
 3817 0ac5 30       		.byte	0x30
 3818 0ac6 1B       		.uleb128 0x1b
 3819 0ac7 01       		.uleb128 0x1
 3820 0ac8 53       		.byte	0x53
 3821 0ac9 01       		.uleb128 0x1
 3822 0aca 30       		.byte	0x30
 3823 0acb 00       		.byte	0
 3824 0acc 00       		.byte	0
 3825 0acd 21       		.uleb128 0x21
 3826 0ace E9050000 		.4byte	.LASF106
 3827 0ad2 01       		.byte	0x1
 3828 0ad3 F001     		.2byte	0x1f0
 3829 0ad5 55020000 		.4byte	0x255
 3830 0ad9 00000000 		.4byte	.LFB72
 3831 0add 16000000 		.4byte	.LFE72-.LFB72
 3832 0ae1 01       		.uleb128 0x1
 3833 0ae2 9C       		.byte	0x9c
 3834 0ae3 4A0B0000 		.4byte	0xb4a
 3835 0ae7 15       		.uleb128 0x15
 3836 0ae8 0B070000 		.4byte	.LASF91
 3837 0aec 01       		.byte	0x1
 3838 0aed F001     		.2byte	0x1f0
 3839 0aef 9E070000 		.4byte	0x79e
 3840 0af3 8D060000 		.4byte	.LLST38
 3841 0af7 16       		.uleb128 0x16
 3842 0af8 7C060000 		.4byte	.LASF87
 3843 0afc 01       		.byte	0x1
 3844 0afd F201     		.2byte	0x1f2
 3845 0aff 55020000 		.4byte	0x255
 3846 0b03 AE060000 		.4byte	.LLST39
 3847 0b07 22       		.uleb128 0x22
 3848 0b08 01050000 		.4byte	.LASF107
 3849 0b0c 01       		.byte	0x1
 3850 0b0d F301     		.2byte	0x1f3
 3851 0b0f 99070000 		.4byte	0x799
 3852 0b13 01       		.byte	0x1
 3853 0b14 22       		.uleb128 0x22
 3854 0b15 1F020000 		.4byte	.LASF108
 3855 0b19 01       		.byte	0x1
 3856 0b1a F301     		.2byte	0x1f3
 3857 0b1c 99070000 		.4byte	0x799
 3858 0b20 00       		.byte	0
 3859 0b21 1D       		.uleb128 0x1d
 3860 0b22 0C000000 		.4byte	.LVL115
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 127


 3861 0b26 A3070000 		.4byte	0x7a3
 3862 0b2a 390B0000 		.4byte	0xb39
 3863 0b2e 1B       		.uleb128 0x1b
 3864 0b2f 01       		.uleb128 0x1
 3865 0b30 50       		.byte	0x50
 3866 0b31 01       		.uleb128 0x1
 3867 0b32 31       		.byte	0x31
 3868 0b33 1B       		.uleb128 0x1b
 3869 0b34 01       		.uleb128 0x1
 3870 0b35 51       		.byte	0x51
 3871 0b36 01       		.uleb128 0x1
 3872 0b37 30       		.byte	0x30
 3873 0b38 00       		.byte	0
 3874 0b39 1A       		.uleb128 0x1a
 3875 0b3a 12000000 		.4byte	.LVL117
 3876 0b3e 860A0000 		.4byte	0xa86
 3877 0b42 1B       		.uleb128 0x1b
 3878 0b43 01       		.uleb128 0x1
 3879 0b44 50       		.byte	0x50
 3880 0b45 02       		.uleb128 0x2
 3881 0b46 74       		.byte	0x74
 3882 0b47 00       		.sleb128 0
 3883 0b48 00       		.byte	0
 3884 0b49 00       		.byte	0
 3885 0b4a 21       		.uleb128 0x21
 3886 0b4b BA090000 		.4byte	.LASF109
 3887 0b4f 01       		.byte	0x1
 3888 0b50 4D02     		.2byte	0x24d
 3889 0b52 05010000 		.4byte	0x105
 3890 0b56 00000000 		.4byte	.LFB73
 3891 0b5a 2C000000 		.4byte	.LFE73-.LFB73
 3892 0b5e 01       		.uleb128 0x1
 3893 0b5f 9C       		.byte	0x9c
 3894 0b60 AC0B0000 		.4byte	0xbac
 3895 0b64 15       		.uleb128 0x15
 3896 0b65 4A060000 		.4byte	.LASF110
 3897 0b69 01       		.byte	0x1
 3898 0b6a 4D02     		.2byte	0x24d
 3899 0b6c 55020000 		.4byte	0x255
 3900 0b70 CC060000 		.4byte	.LLST40
 3901 0b74 17       		.uleb128 0x17
 3902 0b75 A6080000 		.4byte	.LASF79
 3903 0b79 01       		.byte	0x1
 3904 0b7a 4F02     		.2byte	0x24f
 3905 0b7c 05010000 		.4byte	0x105
 3906 0b80 01       		.uleb128 0x1
 3907 0b81 50       		.byte	0x50
 3908 0b82 16       		.uleb128 0x16
 3909 0b83 A8000000 		.4byte	.LASF111
 3910 0b87 01       		.byte	0x1
 3911 0b88 5002     		.2byte	0x250
 3912 0b8a 70050000 		.4byte	0x570
 3913 0b8e EA060000 		.4byte	.LLST41
 3914 0b92 18       		.uleb128 0x18
 3915 0b93 0A000000 		.4byte	.LVL120
 3916 0b97 3A190000 		.4byte	0x193a
 3917 0b9b 1A       		.uleb128 0x1a
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 128


 3918 0b9c 20000000 		.4byte	.LVL121
 3919 0ba0 C7080000 		.4byte	0x8c7
 3920 0ba4 1B       		.uleb128 0x1b
 3921 0ba5 01       		.uleb128 0x1
 3922 0ba6 50       		.byte	0x50
 3923 0ba7 02       		.uleb128 0x2
 3924 0ba8 74       		.byte	0x74
 3925 0ba9 00       		.sleb128 0
 3926 0baa 00       		.byte	0
 3927 0bab 00       		.byte	0
 3928 0bac 21       		.uleb128 0x21
 3929 0bad 03040000 		.4byte	.LASF112
 3930 0bb1 01       		.byte	0x1
 3931 0bb2 B603     		.2byte	0x3b6
 3932 0bb4 05010000 		.4byte	0x105
 3933 0bb8 00000000 		.4byte	.LFB77
 3934 0bbc 70000000 		.4byte	.LFE77-.LFB77
 3935 0bc0 01       		.uleb128 0x1
 3936 0bc1 9C       		.byte	0x9c
 3937 0bc2 C70C0000 		.4byte	0xcc7
 3938 0bc6 15       		.uleb128 0x15
 3939 0bc7 51020000 		.4byte	.LASF64
 3940 0bcb 01       		.byte	0x1
 3941 0bcc B603     		.2byte	0x3b6
 3942 0bce 55020000 		.4byte	0x255
 3943 0bd2 08070000 		.4byte	.LLST42
 3944 0bd6 15       		.uleb128 0x15
 3945 0bd7 30080000 		.4byte	.LASF82
 3946 0bdb 01       		.byte	0x1
 3947 0bdc B603     		.2byte	0x3b6
 3948 0bde 810A0000 		.4byte	0xa81
 3949 0be2 58070000 		.4byte	.LLST43
 3950 0be6 15       		.uleb128 0x15
 3951 0be7 8E000000 		.4byte	.LASF113
 3952 0beb 01       		.byte	0x1
 3953 0bec B603     		.2byte	0x3b6
 3954 0bee CD0C0000 		.4byte	0xccd
 3955 0bf2 92070000 		.4byte	.LLST44
 3956 0bf6 15       		.uleb128 0x15
 3957 0bf7 89010000 		.4byte	.LASF101
 3958 0bfb 01       		.byte	0x1
 3959 0bfc B603     		.2byte	0x3b6
 3960 0bfe 75050000 		.4byte	0x575
 3961 0c02 D4070000 		.4byte	.LLST45
 3962 0c06 17       		.uleb128 0x17
 3963 0c07 A6080000 		.4byte	.LASF79
 3964 0c0b 01       		.byte	0x1
 3965 0c0c B803     		.2byte	0x3b8
 3966 0c0e 05010000 		.4byte	0x105
 3967 0c12 01       		.uleb128 0x1
 3968 0c13 50       		.byte	0x50
 3969 0c14 23       		.uleb128 0x23
 3970 0c15 E2010000 		.4byte	.LASF114
 3971 0c19 01       		.byte	0x1
 3972 0c1a B903     		.2byte	0x3b9
 3973 0c1c 10010000 		.4byte	0x110
 3974 0c20 16       		.uleb128 0x16
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 129


 3975 0c21 9E080000 		.4byte	.LASF77
 3976 0c25 01       		.byte	0x1
 3977 0c26 BA03     		.2byte	0x3ba
 3978 0c28 70050000 		.4byte	0x570
 3979 0c2c 0E080000 		.4byte	.LLST46
 3980 0c30 24       		.uleb128 0x24
 3981 0c31 C4030000 		.4byte	0x3c4
 3982 0c35 02000000 		.4byte	.LBB25
 3983 0c39 14000000 		.4byte	.LBE25-.LBB25
 3984 0c3d 01       		.byte	0x1
 3985 0c3e D503     		.2byte	0x3d5
 3986 0c40 590C0000 		.4byte	0xc59
 3987 0c44 25       		.uleb128 0x25
 3988 0c45 02000000 		.4byte	.LBB26
 3989 0c49 14000000 		.4byte	.LBE26-.LBB26
 3990 0c4d 26       		.uleb128 0x26
 3991 0c4e D4030000 		.4byte	0x3d4
 3992 0c52 26       		.uleb128 0x26
 3993 0c53 DF030000 		.4byte	0x3df
 3994 0c57 00       		.byte	0
 3995 0c58 00       		.byte	0
 3996 0c59 27       		.uleb128 0x27
 3997 0c5a 00000000 		.4byte	.Ldebug_ranges0+0
 3998 0c5e AC0C0000 		.4byte	0xcac
 3999 0c62 16       		.uleb128 0x16
 4000 0c63 42010000 		.4byte	.LASF55
 4001 0c67 01       		.byte	0x1
 4002 0c68 D903     		.2byte	0x3d9
 4003 0c6a D20C0000 		.4byte	0xcd2
 4004 0c6e 5E080000 		.4byte	.LLST47
 4005 0c72 17       		.uleb128 0x17
 4006 0c73 08030000 		.4byte	.LASF115
 4007 0c77 01       		.byte	0x1
 4008 0c78 DA03     		.2byte	0x3da
 4009 0c7a 99070000 		.4byte	0x799
 4010 0c7e 01       		.uleb128 0x1
 4011 0c7f 52       		.byte	0x52
 4012 0c80 1D       		.uleb128 0x1d
 4013 0c81 34000000 		.4byte	.LVL129
 4014 0c85 E4040000 		.4byte	0x4e4
 4015 0c89 9B0C0000 		.4byte	0xc9b
 4016 0c8d 1B       		.uleb128 0x1b
 4017 0c8e 01       		.uleb128 0x1
 4018 0c8f 50       		.byte	0x50
 4019 0c90 02       		.uleb128 0x2
 4020 0c91 75       		.byte	0x75
 4021 0c92 00       		.sleb128 0
 4022 0c93 1B       		.uleb128 0x1b
 4023 0c94 01       		.uleb128 0x1
 4024 0c95 52       		.byte	0x52
 4025 0c96 03       		.uleb128 0x3
 4026 0c97 F3       		.byte	0xf3
 4027 0c98 01       		.uleb128 0x1
 4028 0c99 53       		.byte	0x53
 4029 0c9a 00       		.byte	0
 4030 0c9b 1A       		.uleb128 0x1a
 4031 0c9c 46000000 		.4byte	.LVL130
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 130


 4032 0ca0 CF180000 		.4byte	0x18cf
 4033 0ca4 1B       		.uleb128 0x1b
 4034 0ca5 01       		.uleb128 0x1
 4035 0ca6 50       		.byte	0x50
 4036 0ca7 02       		.uleb128 0x2
 4037 0ca8 75       		.byte	0x75
 4038 0ca9 24       		.sleb128 36
 4039 0caa 00       		.byte	0
 4040 0cab 00       		.byte	0
 4041 0cac 28       		.uleb128 0x28
 4042 0cad EB030000 		.4byte	0x3eb
 4043 0cb1 6A000000 		.4byte	.LBB29
 4044 0cb5 04000000 		.4byte	.LBE29-.LBB29
 4045 0cb9 01       		.byte	0x1
 4046 0cba 5204     		.2byte	0x452
 4047 0cbc 29       		.uleb128 0x29
 4048 0cbd F7030000 		.4byte	0x3f7
 4049 0cc1 89080000 		.4byte	.LLST48
 4050 0cc5 00       		.byte	0
 4051 0cc6 00       		.byte	0
 4052 0cc7 06       		.uleb128 0x6
 4053 0cc8 04       		.byte	0x4
 4054 0cc9 05010000 		.4byte	0x105
 4055 0ccd 07       		.uleb128 0x7
 4056 0cce C70C0000 		.4byte	0xcc7
 4057 0cd2 07       		.uleb128 0x7
 4058 0cd3 CB000000 		.4byte	0xcb
 4059 0cd7 21       		.uleb128 0x21
 4060 0cd8 55050000 		.4byte	.LASF116
 4061 0cdc 01       		.byte	0x1
 4062 0cdd 5804     		.2byte	0x458
 4063 0cdf 05010000 		.4byte	0x105
 4064 0ce3 00000000 		.4byte	.LFB78
 4065 0ce7 64000000 		.4byte	.LFE78-.LFB78
 4066 0ceb 01       		.uleb128 0x1
 4067 0cec 9C       		.byte	0x9c
 4068 0ced C60D0000 		.4byte	0xdc6
 4069 0cf1 15       		.uleb128 0x15
 4070 0cf2 51020000 		.4byte	.LASF64
 4071 0cf6 01       		.byte	0x1
 4072 0cf7 5804     		.2byte	0x458
 4073 0cf9 55020000 		.4byte	0x255
 4074 0cfd 9C080000 		.4byte	.LLST49
 4075 0d01 15       		.uleb128 0x15
 4076 0d02 8E000000 		.4byte	.LASF113
 4077 0d06 01       		.byte	0x1
 4078 0d07 5804     		.2byte	0x458
 4079 0d09 CD0C0000 		.4byte	0xccd
 4080 0d0d 15090000 		.4byte	.LLST50
 4081 0d11 17       		.uleb128 0x17
 4082 0d12 A6080000 		.4byte	.LASF79
 4083 0d16 01       		.byte	0x1
 4084 0d17 5A04     		.2byte	0x45a
 4085 0d19 05010000 		.4byte	0x105
 4086 0d1d 01       		.uleb128 0x1
 4087 0d1e 50       		.byte	0x50
 4088 0d1f 23       		.uleb128 0x23
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 131


 4089 0d20 E2010000 		.4byte	.LASF114
 4090 0d24 01       		.byte	0x1
 4091 0d25 5B04     		.2byte	0x45b
 4092 0d27 10010000 		.4byte	0x110
 4093 0d2b 16       		.uleb128 0x16
 4094 0d2c 9E080000 		.4byte	.LASF77
 4095 0d30 01       		.byte	0x1
 4096 0d31 5C04     		.2byte	0x45c
 4097 0d33 70050000 		.4byte	0x570
 4098 0d37 57090000 		.4byte	.LLST51
 4099 0d3b 24       		.uleb128 0x24
 4100 0d3c C4030000 		.4byte	0x3c4
 4101 0d40 02000000 		.4byte	.LBB31
 4102 0d44 14000000 		.4byte	.LBE31-.LBB31
 4103 0d48 01       		.byte	0x1
 4104 0d49 7F04     		.2byte	0x47f
 4105 0d4b 640D0000 		.4byte	0xd64
 4106 0d4f 25       		.uleb128 0x25
 4107 0d50 02000000 		.4byte	.LBB32
 4108 0d54 14000000 		.4byte	.LBE32-.LBB32
 4109 0d58 26       		.uleb128 0x26
 4110 0d59 D4030000 		.4byte	0x3d4
 4111 0d5d 26       		.uleb128 0x26
 4112 0d5e DF030000 		.4byte	0x3df
 4113 0d62 00       		.byte	0
 4114 0d63 00       		.byte	0
 4115 0d64 1C       		.uleb128 0x1c
 4116 0d65 16000000 		.4byte	.LBB33
 4117 0d69 48000000 		.4byte	.LBE33-.LBB33
 4118 0d6d AB0D0000 		.4byte	0xdab
 4119 0d71 16       		.uleb128 0x16
 4120 0d72 CE020000 		.4byte	.LASF51
 4121 0d76 01       		.byte	0x1
 4122 0d77 8104     		.2byte	0x481
 4123 0d79 99070000 		.4byte	0x799
 4124 0d7d D0090000 		.4byte	.LLST52
 4125 0d81 2A       		.uleb128 0x2a
 4126 0d82 18000000 		.4byte	.Ldebug_ranges0+0x18
 4127 0d86 16       		.uleb128 0x16
 4128 0d87 42010000 		.4byte	.LASF55
 4129 0d8b 01       		.byte	0x1
 4130 0d8c 8804     		.2byte	0x488
 4131 0d8e D20C0000 		.4byte	0xcd2
 4132 0d92 150A0000 		.4byte	.LLST53
 4133 0d96 1A       		.uleb128 0x1a
 4134 0d97 3A000000 		.4byte	.LVL145
 4135 0d9b CF180000 		.4byte	0x18cf
 4136 0d9f 1B       		.uleb128 0x1b
 4137 0da0 01       		.uleb128 0x1
 4138 0da1 50       		.byte	0x50
 4139 0da2 05       		.uleb128 0x5
 4140 0da3 F3       		.byte	0xf3
 4141 0da4 01       		.uleb128 0x1
 4142 0da5 50       		.byte	0x50
 4143 0da6 23       		.byte	0x23
 4144 0da7 24       		.uleb128 0x24
 4145 0da8 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 132


 4146 0da9 00       		.byte	0
 4147 0daa 00       		.byte	0
 4148 0dab 28       		.uleb128 0x28
 4149 0dac EB030000 		.4byte	0x3eb
 4150 0db0 5E000000 		.4byte	.LBB36
 4151 0db4 04000000 		.4byte	.LBE36-.LBB36
 4152 0db8 01       		.byte	0x1
 4153 0db9 F704     		.2byte	0x4f7
 4154 0dbb 29       		.uleb128 0x29
 4155 0dbc F7030000 		.4byte	0x3f7
 4156 0dc0 400A0000 		.4byte	.LLST54
 4157 0dc4 00       		.byte	0
 4158 0dc5 00       		.byte	0
 4159 0dc6 21       		.uleb128 0x21
 4160 0dc7 54000000 		.4byte	.LASF117
 4161 0dcb 01       		.byte	0x1
 4162 0dcc FD04     		.2byte	0x4fd
 4163 0dce 05010000 		.4byte	0x105
 4164 0dd2 00000000 		.4byte	.LFB79
 4165 0dd6 F8000000 		.4byte	.LFE79-.LFB79
 4166 0dda 01       		.uleb128 0x1
 4167 0ddb 9C       		.byte	0x9c
 4168 0ddc 840F0000 		.4byte	0xf84
 4169 0de0 15       		.uleb128 0x15
 4170 0de1 51020000 		.4byte	.LASF64
 4171 0de5 01       		.byte	0x1
 4172 0de6 FD04     		.2byte	0x4fd
 4173 0de8 55020000 		.4byte	0x255
 4174 0dec 530A0000 		.4byte	.LLST55
 4175 0df0 15       		.uleb128 0x15
 4176 0df1 95020000 		.4byte	.LASF84
 4177 0df5 01       		.byte	0x1
 4178 0df6 FD04     		.2byte	0x4fd
 4179 0df8 C1050000 		.4byte	0x5c1
 4180 0dfc 7F0A0000 		.4byte	.LLST56
 4181 0e00 15       		.uleb128 0x15
 4182 0e01 84090000 		.4byte	.LASF100
 4183 0e05 01       		.byte	0x1
 4184 0e06 FD04     		.2byte	0x4fd
 4185 0e08 1B010000 		.4byte	0x11b
 4186 0e0c AB0A0000 		.4byte	.LLST57
 4187 0e10 16       		.uleb128 0x16
 4188 0e11 BB030000 		.4byte	.LASF102
 4189 0e15 01       		.byte	0x1
 4190 0e16 FF04     		.2byte	0x4ff
 4191 0e18 05010000 		.4byte	0x105
 4192 0e1c EE0A0000 		.4byte	.LLST58
 4193 0e20 17       		.uleb128 0x17
 4194 0e21 D0030000 		.4byte	.LASF104
 4195 0e25 01       		.byte	0x1
 4196 0e26 0005     		.2byte	0x500
 4197 0e28 4A020000 		.4byte	0x24a
 4198 0e2c 02       		.uleb128 0x2
 4199 0e2d 91       		.byte	0x91
 4200 0e2e 60       		.sleb128 -32
 4201 0e2f 16       		.uleb128 0x16
 4202 0e30 9E080000 		.4byte	.LASF77
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 133


 4203 0e34 01       		.byte	0x1
 4204 0e35 0105     		.2byte	0x501
 4205 0e37 70050000 		.4byte	0x570
 4206 0e3b 240B0000 		.4byte	.LLST59
 4207 0e3f 1C       		.uleb128 0x1c
 4208 0e40 10000000 		.4byte	.LBB38
 4209 0e44 4C000000 		.4byte	.LBE38-.LBB38
 4210 0e48 AD0E0000 		.4byte	0xead
 4211 0e4c 16       		.uleb128 0x16
 4212 0e4d CE020000 		.4byte	.LASF51
 4213 0e51 01       		.byte	0x1
 4214 0e52 1905     		.2byte	0x519
 4215 0e54 99070000 		.4byte	0x799
 4216 0e58 500B0000 		.4byte	.LLST60
 4217 0e5c 1D       		.uleb128 0x1d
 4218 0e5d 1C000000 		.4byte	.LVL162
 4219 0e61 7A050000 		.4byte	0x57a
 4220 0e65 760E0000 		.4byte	0xe76
 4221 0e69 1B       		.uleb128 0x1b
 4222 0e6a 01       		.uleb128 0x1
 4223 0e6b 50       		.byte	0x50
 4224 0e6c 02       		.uleb128 0x2
 4225 0e6d 74       		.byte	0x74
 4226 0e6e 00       		.sleb128 0
 4227 0e6f 1B       		.uleb128 0x1b
 4228 0e70 01       		.uleb128 0x1
 4229 0e71 51       		.byte	0x51
 4230 0e72 02       		.uleb128 0x2
 4231 0e73 77       		.byte	0x77
 4232 0e74 00       		.sleb128 0
 4233 0e75 00       		.byte	0
 4234 0e76 1D       		.uleb128 0x1d
 4235 0e77 2C000000 		.4byte	.LVL164
 4236 0e7b CF180000 		.4byte	0x18cf
 4237 0e7f 8A0E0000 		.4byte	0xe8a
 4238 0e83 1B       		.uleb128 0x1b
 4239 0e84 01       		.uleb128 0x1
 4240 0e85 50       		.byte	0x50
 4241 0e86 02       		.uleb128 0x2
 4242 0e87 74       		.byte	0x74
 4243 0e88 10       		.sleb128 16
 4244 0e89 00       		.byte	0
 4245 0e8a 18       		.uleb128 0x18
 4246 0e8b 42000000 		.4byte	.LVL165
 4247 0e8f AF180000 		.4byte	0x18af
 4248 0e93 18       		.uleb128 0x18
 4249 0e94 4E000000 		.4byte	.LVL167
 4250 0e98 AF180000 		.4byte	0x18af
 4251 0e9c 1A       		.uleb128 0x1a
 4252 0e9d 5A000000 		.4byte	.LVL168
 4253 0ea1 FE180000 		.4byte	0x18fe
 4254 0ea5 1B       		.uleb128 0x1b
 4255 0ea6 01       		.uleb128 0x1
 4256 0ea7 50       		.byte	0x50
 4257 0ea8 02       		.uleb128 0x2
 4258 0ea9 91       		.byte	0x91
 4259 0eaa 60       		.sleb128 -32
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 134


 4260 0eab 00       		.byte	0
 4261 0eac 00       		.byte	0
 4262 0ead 18       		.uleb128 0x18
 4263 0eae 10000000 		.4byte	.LVL160
 4264 0eb2 A4180000 		.4byte	0x18a4
 4265 0eb6 18       		.uleb128 0x18
 4266 0eb7 60000000 		.4byte	.LVL170
 4267 0ebb AF180000 		.4byte	0x18af
 4268 0ebf 18       		.uleb128 0x18
 4269 0ec0 64000000 		.4byte	.LVL171
 4270 0ec4 0A190000 		.4byte	0x190a
 4271 0ec8 18       		.uleb128 0x18
 4272 0ec9 68000000 		.4byte	.LVL172
 4273 0ecd A4180000 		.4byte	0x18a4
 4274 0ed1 18       		.uleb128 0x18
 4275 0ed2 90000000 		.4byte	.LVL173
 4276 0ed6 AF180000 		.4byte	0x18af
 4277 0eda 1D       		.uleb128 0x1d
 4278 0edb 98000000 		.4byte	.LVL175
 4279 0edf 16190000 		.4byte	0x1916
 4280 0ee3 F40E0000 		.4byte	0xef4
 4281 0ee7 1B       		.uleb128 0x1b
 4282 0ee8 01       		.uleb128 0x1
 4283 0ee9 50       		.byte	0x50
 4284 0eea 02       		.uleb128 0x2
 4285 0eeb 91       		.byte	0x91
 4286 0eec 60       		.sleb128 -32
 4287 0eed 1B       		.uleb128 0x1b
 4288 0eee 01       		.uleb128 0x1
 4289 0eef 51       		.byte	0x51
 4290 0ef0 02       		.uleb128 0x2
 4291 0ef1 91       		.byte	0x91
 4292 0ef2 5C       		.sleb128 -36
 4293 0ef3 00       		.byte	0
 4294 0ef4 1D       		.uleb128 0x1d
 4295 0ef5 A0000000 		.4byte	.LVL176
 4296 0ef9 99040000 		.4byte	0x499
 4297 0efd 080F0000 		.4byte	0xf08
 4298 0f01 1B       		.uleb128 0x1b
 4299 0f02 01       		.uleb128 0x1
 4300 0f03 50       		.byte	0x50
 4301 0f04 02       		.uleb128 0x2
 4302 0f05 74       		.byte	0x74
 4303 0f06 00       		.sleb128 0
 4304 0f07 00       		.byte	0
 4305 0f08 1D       		.uleb128 0x1d
 4306 0f09 AC000000 		.4byte	.LVL177
 4307 0f0d 22190000 		.4byte	0x1922
 4308 0f11 1C0F0000 		.4byte	0xf1c
 4309 0f15 1B       		.uleb128 0x1b
 4310 0f16 01       		.uleb128 0x1
 4311 0f17 50       		.byte	0x50
 4312 0f18 02       		.uleb128 0x2
 4313 0f19 74       		.byte	0x74
 4314 0f1a 24       		.sleb128 36
 4315 0f1b 00       		.byte	0
 4316 0f1c 1D       		.uleb128 0x1d
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 135


 4317 0f1d B2000000 		.4byte	.LVL178
 4318 0f21 C6050000 		.4byte	0x5c6
 4319 0f25 300F0000 		.4byte	0xf30
 4320 0f29 1B       		.uleb128 0x1b
 4321 0f2a 01       		.uleb128 0x1
 4322 0f2b 50       		.byte	0x50
 4323 0f2c 02       		.uleb128 0x2
 4324 0f2d 74       		.byte	0x74
 4325 0f2e 00       		.sleb128 0
 4326 0f2f 00       		.byte	0
 4327 0f30 18       		.uleb128 0x18
 4328 0f31 B6000000 		.4byte	.LVL179
 4329 0f35 2E190000 		.4byte	0x192e
 4330 0f39 1D       		.uleb128 0x1d
 4331 0f3a D2000000 		.4byte	.LVL180
 4332 0f3e C6050000 		.4byte	0x5c6
 4333 0f42 4D0F0000 		.4byte	0xf4d
 4334 0f46 1B       		.uleb128 0x1b
 4335 0f47 01       		.uleb128 0x1
 4336 0f48 50       		.byte	0x50
 4337 0f49 02       		.uleb128 0x2
 4338 0f4a 74       		.byte	0x74
 4339 0f4b 00       		.sleb128 0
 4340 0f4c 00       		.byte	0
 4341 0f4d 18       		.uleb128 0x18
 4342 0f4e D6000000 		.4byte	.LVL181
 4343 0f52 2E190000 		.4byte	0x192e
 4344 0f56 1D       		.uleb128 0x1d
 4345 0f57 DE000000 		.4byte	.LVL182
 4346 0f5b C6050000 		.4byte	0x5c6
 4347 0f5f 6A0F0000 		.4byte	0xf6a
 4348 0f63 1B       		.uleb128 0x1b
 4349 0f64 01       		.uleb128 0x1
 4350 0f65 50       		.byte	0x50
 4351 0f66 02       		.uleb128 0x2
 4352 0f67 74       		.byte	0x74
 4353 0f68 00       		.sleb128 0
 4354 0f69 00       		.byte	0
 4355 0f6a 18       		.uleb128 0x18
 4356 0f6b E2000000 		.4byte	.LVL183
 4357 0f6f 2E190000 		.4byte	0x192e
 4358 0f73 1A       		.uleb128 0x1a
 4359 0f74 E8000000 		.4byte	.LVL184
 4360 0f78 99040000 		.4byte	0x499
 4361 0f7c 1B       		.uleb128 0x1b
 4362 0f7d 01       		.uleb128 0x1
 4363 0f7e 50       		.byte	0x50
 4364 0f7f 02       		.uleb128 0x2
 4365 0f80 74       		.byte	0x74
 4366 0f81 00       		.sleb128 0
 4367 0f82 00       		.byte	0
 4368 0f83 00       		.byte	0
 4369 0f84 21       		.uleb128 0x21
 4370 0f85 B0000000 		.4byte	.LASF118
 4371 0f89 01       		.byte	0x1
 4372 0f8a 8A05     		.2byte	0x58a
 4373 0f8c 05010000 		.4byte	0x105
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 136


 4374 0f90 00000000 		.4byte	.LFB80
 4375 0f94 28010000 		.4byte	.LFE80-.LFB80
 4376 0f98 01       		.uleb128 0x1
 4377 0f99 9C       		.byte	0x9c
 4378 0f9a 9D110000 		.4byte	0x119d
 4379 0f9e 15       		.uleb128 0x15
 4380 0f9f 51020000 		.4byte	.LASF64
 4381 0fa3 01       		.byte	0x1
 4382 0fa4 8A05     		.2byte	0x58a
 4383 0fa6 55020000 		.4byte	0x255
 4384 0faa 7B0B0000 		.4byte	.LLST61
 4385 0fae 15       		.uleb128 0x15
 4386 0faf 84090000 		.4byte	.LASF100
 4387 0fb3 01       		.byte	0x1
 4388 0fb4 8A05     		.2byte	0x58a
 4389 0fb6 1B010000 		.4byte	0x11b
 4390 0fba A70B0000 		.4byte	.LLST62
 4391 0fbe 16       		.uleb128 0x16
 4392 0fbf BB030000 		.4byte	.LASF102
 4393 0fc3 01       		.byte	0x1
 4394 0fc4 8C05     		.2byte	0x58c
 4395 0fc6 05010000 		.4byte	0x105
 4396 0fca EA0B0000 		.4byte	.LLST63
 4397 0fce 17       		.uleb128 0x17
 4398 0fcf D0030000 		.4byte	.LASF104
 4399 0fd3 01       		.byte	0x1
 4400 0fd4 8D05     		.2byte	0x58d
 4401 0fd6 4A020000 		.4byte	0x24a
 4402 0fda 02       		.uleb128 0x2
 4403 0fdb 91       		.byte	0x91
 4404 0fdc 68       		.sleb128 -24
 4405 0fdd 16       		.uleb128 0x16
 4406 0fde 9E080000 		.4byte	.LASF77
 4407 0fe2 01       		.byte	0x1
 4408 0fe3 8E05     		.2byte	0x58e
 4409 0fe5 70050000 		.4byte	0x570
 4410 0fe9 200C0000 		.4byte	.LLST64
 4411 0fed 16       		.uleb128 0x16
 4412 0fee 67070000 		.4byte	.LASF119
 4413 0ff2 01       		.byte	0x1
 4414 0ff3 9105     		.2byte	0x591
 4415 0ff5 05010000 		.4byte	0x105
 4416 0ff9 4C0C0000 		.4byte	.LLST65
 4417 0ffd 1C       		.uleb128 0x1c
 4418 0ffe 10000000 		.4byte	.LBB39
 4419 1002 4E000000 		.4byte	.LBE39-.LBB39
 4420 1006 5A100000 		.4byte	0x105a
 4421 100a 16       		.uleb128 0x16
 4422 100b 1E070000 		.4byte	.LASF120
 4423 100f 01       		.byte	0x1
 4424 1010 AC05     		.2byte	0x5ac
 4425 1012 99070000 		.4byte	0x799
 4426 1016 810C0000 		.4byte	.LLST66
 4427 101a 18       		.uleb128 0x18
 4428 101b 20000000 		.4byte	.LVL194
 4429 101f 46190000 		.4byte	0x1946
 4430 1023 1D       		.uleb128 0x1d
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 137


 4431 1024 2E000000 		.4byte	.LVL195
 4432 1028 CF180000 		.4byte	0x18cf
 4433 102c 37100000 		.4byte	0x1037
 4434 1030 1B       		.uleb128 0x1b
 4435 1031 01       		.uleb128 0x1
 4436 1032 50       		.byte	0x50
 4437 1033 02       		.uleb128 0x2
 4438 1034 74       		.byte	0x74
 4439 1035 10       		.sleb128 16
 4440 1036 00       		.byte	0
 4441 1037 18       		.uleb128 0x18
 4442 1038 44000000 		.4byte	.LVL196
 4443 103c AF180000 		.4byte	0x18af
 4444 1040 18       		.uleb128 0x18
 4445 1041 50000000 		.4byte	.LVL199
 4446 1045 AF180000 		.4byte	0x18af
 4447 1049 1A       		.uleb128 0x1a
 4448 104a 5C000000 		.4byte	.LVL200
 4449 104e FE180000 		.4byte	0x18fe
 4450 1052 1B       		.uleb128 0x1b
 4451 1053 01       		.uleb128 0x1
 4452 1054 50       		.byte	0x50
 4453 1055 02       		.uleb128 0x2
 4454 1056 91       		.byte	0x91
 4455 1057 68       		.sleb128 -24
 4456 1058 00       		.byte	0
 4457 1059 00       		.byte	0
 4458 105a 1C       		.uleb128 0x1c
 4459 105b 08010000 		.4byte	.LBB40
 4460 105f 0E000000 		.4byte	.LBE40-.LBB40
 4461 1063 95100000 		.4byte	0x1095
 4462 1067 16       		.uleb128 0x16
 4463 1068 09090000 		.4byte	.LASF121
 4464 106c 01       		.byte	0x1
 4465 106d 4906     		.2byte	0x649
 4466 106f 10010000 		.4byte	0x110
 4467 1073 BC0C0000 		.4byte	.LLST67
 4468 1077 1D       		.uleb128 0x1d
 4469 1078 0E010000 		.4byte	.LVL222
 4470 107c 03040000 		.4byte	0x403
 4471 1080 8B100000 		.4byte	0x108b
 4472 1084 1B       		.uleb128 0x1b
 4473 1085 01       		.uleb128 0x1
 4474 1086 50       		.byte	0x50
 4475 1087 02       		.uleb128 0x2
 4476 1088 74       		.byte	0x74
 4477 1089 00       		.sleb128 0
 4478 108a 00       		.byte	0
 4479 108b 18       		.uleb128 0x18
 4480 108c 16010000 		.4byte	.LVL224
 4481 1090 52190000 		.4byte	0x1952
 4482 1094 00       		.byte	0
 4483 1095 18       		.uleb128 0x18
 4484 1096 10000000 		.4byte	.LVL190
 4485 109a A4180000 		.4byte	0x18a4
 4486 109e 18       		.uleb128 0x18
 4487 109f 62000000 		.4byte	.LVL202
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 138


 4488 10a3 AF180000 		.4byte	0x18af
 4489 10a7 18       		.uleb128 0x18
 4490 10a8 66000000 		.4byte	.LVL203
 4491 10ac 0A190000 		.4byte	0x190a
 4492 10b0 18       		.uleb128 0x18
 4493 10b1 6A000000 		.4byte	.LVL204
 4494 10b5 A4180000 		.4byte	0x18a4
 4495 10b9 18       		.uleb128 0x18
 4496 10ba 92000000 		.4byte	.LVL205
 4497 10be AF180000 		.4byte	0x18af
 4498 10c2 1D       		.uleb128 0x1d
 4499 10c3 9A000000 		.4byte	.LVL207
 4500 10c7 16190000 		.4byte	0x1916
 4501 10cb DC100000 		.4byte	0x10dc
 4502 10cf 1B       		.uleb128 0x1b
 4503 10d0 01       		.uleb128 0x1
 4504 10d1 50       		.byte	0x50
 4505 10d2 02       		.uleb128 0x2
 4506 10d3 91       		.byte	0x91
 4507 10d4 68       		.sleb128 -24
 4508 10d5 1B       		.uleb128 0x1b
 4509 10d6 01       		.uleb128 0x1
 4510 10d7 51       		.byte	0x51
 4511 10d8 02       		.uleb128 0x2
 4512 10d9 91       		.byte	0x91
 4513 10da 64       		.sleb128 -28
 4514 10db 00       		.byte	0
 4515 10dc 1D       		.uleb128 0x1d
 4516 10dd A2000000 		.4byte	.LVL208
 4517 10e1 99040000 		.4byte	0x499
 4518 10e5 F0100000 		.4byte	0x10f0
 4519 10e9 1B       		.uleb128 0x1b
 4520 10ea 01       		.uleb128 0x1
 4521 10eb 50       		.byte	0x50
 4522 10ec 02       		.uleb128 0x2
 4523 10ed 74       		.byte	0x74
 4524 10ee 00       		.sleb128 0
 4525 10ef 00       		.byte	0
 4526 10f0 18       		.uleb128 0x18
 4527 10f1 AC000000 		.4byte	.LVL209
 4528 10f5 A4180000 		.4byte	0x18a4
 4529 10f9 18       		.uleb128 0x18
 4530 10fa B2000000 		.4byte	.LVL210
 4531 10fe 5E190000 		.4byte	0x195e
 4532 1102 18       		.uleb128 0x18
 4533 1103 B8000000 		.4byte	.LVL212
 4534 1107 AF180000 		.4byte	0x18af
 4535 110b 1D       		.uleb128 0x1d
 4536 110c C2000000 		.4byte	.LVL213
 4537 1110 22190000 		.4byte	0x1922
 4538 1114 1F110000 		.4byte	0x111f
 4539 1118 1B       		.uleb128 0x1b
 4540 1119 01       		.uleb128 0x1
 4541 111a 50       		.byte	0x50
 4542 111b 02       		.uleb128 0x2
 4543 111c 74       		.byte	0x74
 4544 111d 24       		.sleb128 36
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 139


 4545 111e 00       		.byte	0
 4546 111f 1D       		.uleb128 0x1d
 4547 1120 C8000000 		.4byte	.LVL214
 4548 1124 C6050000 		.4byte	0x5c6
 4549 1128 33110000 		.4byte	0x1133
 4550 112c 1B       		.uleb128 0x1b
 4551 112d 01       		.uleb128 0x1
 4552 112e 50       		.byte	0x50
 4553 112f 02       		.uleb128 0x2
 4554 1130 74       		.byte	0x74
 4555 1131 00       		.sleb128 0
 4556 1132 00       		.byte	0
 4557 1133 18       		.uleb128 0x18
 4558 1134 CC000000 		.4byte	.LVL215
 4559 1138 2E190000 		.4byte	0x192e
 4560 113c 1D       		.uleb128 0x1d
 4561 113d E8000000 		.4byte	.LVL216
 4562 1141 C6050000 		.4byte	0x5c6
 4563 1145 50110000 		.4byte	0x1150
 4564 1149 1B       		.uleb128 0x1b
 4565 114a 01       		.uleb128 0x1
 4566 114b 50       		.byte	0x50
 4567 114c 02       		.uleb128 0x2
 4568 114d 74       		.byte	0x74
 4569 114e 00       		.sleb128 0
 4570 114f 00       		.byte	0
 4571 1150 18       		.uleb128 0x18
 4572 1151 EC000000 		.4byte	.LVL217
 4573 1155 2E190000 		.4byte	0x192e
 4574 1159 1D       		.uleb128 0x1d
 4575 115a F4000000 		.4byte	.LVL218
 4576 115e C6050000 		.4byte	0x5c6
 4577 1162 6D110000 		.4byte	0x116d
 4578 1166 1B       		.uleb128 0x1b
 4579 1167 01       		.uleb128 0x1
 4580 1168 50       		.byte	0x50
 4581 1169 02       		.uleb128 0x2
 4582 116a 74       		.byte	0x74
 4583 116b 00       		.sleb128 0
 4584 116c 00       		.byte	0
 4585 116d 18       		.uleb128 0x18
 4586 116e F8000000 		.4byte	.LVL219
 4587 1172 2E190000 		.4byte	0x192e
 4588 1176 1D       		.uleb128 0x1d
 4589 1177 FE000000 		.4byte	.LVL220
 4590 117b 99040000 		.4byte	0x499
 4591 117f 8A110000 		.4byte	0x118a
 4592 1183 1B       		.uleb128 0x1b
 4593 1184 01       		.uleb128 0x1
 4594 1185 50       		.byte	0x50
 4595 1186 02       		.uleb128 0x2
 4596 1187 74       		.byte	0x74
 4597 1188 00       		.sleb128 0
 4598 1189 00       		.byte	0
 4599 118a 18       		.uleb128 0x18
 4600 118b 08010000 		.4byte	.LVL221
 4601 118f A4180000 		.4byte	0x18a4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 140


 4602 1193 18       		.uleb128 0x18
 4603 1194 1A010000 		.4byte	.LVL225
 4604 1198 AF180000 		.4byte	0x18af
 4605 119c 00       		.byte	0
 4606 119d 21       		.uleb128 0x21
 4607 119e 7C070000 		.4byte	.LASF122
 4608 11a2 01       		.byte	0x1
 4609 11a3 8402     		.2byte	0x284
 4610 11a5 05010000 		.4byte	0x105
 4611 11a9 00000000 		.4byte	.LFB74
 4612 11ad 30000000 		.4byte	.LFE74-.LFB74
 4613 11b1 01       		.uleb128 0x1
 4614 11b2 9C       		.byte	0x9c
 4615 11b3 17120000 		.4byte	0x1217
 4616 11b7 15       		.uleb128 0x15
 4617 11b8 4A060000 		.4byte	.LASF110
 4618 11bc 01       		.byte	0x1
 4619 11bd 8402     		.2byte	0x284
 4620 11bf 55020000 		.4byte	0x255
 4621 11c3 DA0C0000 		.4byte	.LLST68
 4622 11c7 15       		.uleb128 0x15
 4623 11c8 84090000 		.4byte	.LASF100
 4624 11cc 01       		.byte	0x1
 4625 11cd 8402     		.2byte	0x284
 4626 11cf 1B010000 		.4byte	0x11b
 4627 11d3 F80C0000 		.4byte	.LLST69
 4628 11d7 16       		.uleb128 0x16
 4629 11d8 A6080000 		.4byte	.LASF79
 4630 11dc 01       		.byte	0x1
 4631 11dd 8602     		.2byte	0x286
 4632 11df 05010000 		.4byte	0x105
 4633 11e3 160D0000 		.4byte	.LLST70
 4634 11e7 16       		.uleb128 0x16
 4635 11e8 A8000000 		.4byte	.LASF111
 4636 11ec 01       		.byte	0x1
 4637 11ed 8702     		.2byte	0x287
 4638 11ef 70050000 		.4byte	0x570
 4639 11f3 400D0000 		.4byte	.LLST71
 4640 11f7 18       		.uleb128 0x18
 4641 11f8 0C000000 		.4byte	.LVL229
 4642 11fc 3A190000 		.4byte	0x193a
 4643 1200 1A       		.uleb128 0x1a
 4644 1201 22000000 		.4byte	.LVL232
 4645 1205 840F0000 		.4byte	0xf84
 4646 1209 1B       		.uleb128 0x1b
 4647 120a 01       		.uleb128 0x1
 4648 120b 50       		.byte	0x50
 4649 120c 02       		.uleb128 0x2
 4650 120d 74       		.byte	0x74
 4651 120e 00       		.sleb128 0
 4652 120f 1B       		.uleb128 0x1b
 4653 1210 01       		.uleb128 0x1
 4654 1211 51       		.byte	0x51
 4655 1212 02       		.uleb128 0x2
 4656 1213 76       		.byte	0x76
 4657 1214 00       		.sleb128 0
 4658 1215 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 141


 4659 1216 00       		.byte	0
 4660 1217 21       		.uleb128 0x21
 4661 1218 22030000 		.4byte	.LASF123
 4662 121c 01       		.byte	0x1
 4663 121d 6406     		.2byte	0x664
 4664 121f 05010000 		.4byte	0x105
 4665 1223 00000000 		.4byte	.LFB81
 4666 1227 F8000000 		.4byte	.LFE81-.LFB81
 4667 122b 01       		.uleb128 0x1
 4668 122c 9C       		.byte	0x9c
 4669 122d E5130000 		.4byte	0x13e5
 4670 1231 15       		.uleb128 0x15
 4671 1232 51020000 		.4byte	.LASF64
 4672 1236 01       		.byte	0x1
 4673 1237 6406     		.2byte	0x664
 4674 1239 55020000 		.4byte	0x255
 4675 123d 5E0D0000 		.4byte	.LLST72
 4676 1241 15       		.uleb128 0x15
 4677 1242 95020000 		.4byte	.LASF84
 4678 1246 01       		.byte	0x1
 4679 1247 6406     		.2byte	0x664
 4680 1249 C1050000 		.4byte	0x5c1
 4681 124d 8A0D0000 		.4byte	.LLST73
 4682 1251 15       		.uleb128 0x15
 4683 1252 84090000 		.4byte	.LASF100
 4684 1256 01       		.byte	0x1
 4685 1257 6406     		.2byte	0x664
 4686 1259 1B010000 		.4byte	0x11b
 4687 125d B60D0000 		.4byte	.LLST74
 4688 1261 16       		.uleb128 0x16
 4689 1262 BB030000 		.4byte	.LASF102
 4690 1266 01       		.byte	0x1
 4691 1267 6606     		.2byte	0x666
 4692 1269 05010000 		.4byte	0x105
 4693 126d F90D0000 		.4byte	.LLST75
 4694 1271 17       		.uleb128 0x17
 4695 1272 D0030000 		.4byte	.LASF104
 4696 1276 01       		.byte	0x1
 4697 1277 6706     		.2byte	0x667
 4698 1279 4A020000 		.4byte	0x24a
 4699 127d 02       		.uleb128 0x2
 4700 127e 91       		.byte	0x91
 4701 127f 68       		.sleb128 -24
 4702 1280 16       		.uleb128 0x16
 4703 1281 B8060000 		.4byte	.LASF124
 4704 1285 01       		.byte	0x1
 4705 1286 6806     		.2byte	0x668
 4706 1288 0E030000 		.4byte	0x30e
 4707 128c 3A0E0000 		.4byte	.LLST76
 4708 1290 16       		.uleb128 0x16
 4709 1291 9E080000 		.4byte	.LASF77
 4710 1295 01       		.byte	0x1
 4711 1296 6906     		.2byte	0x669
 4712 1298 70050000 		.4byte	0x570
 4713 129c 4D0E0000 		.4byte	.LLST77
 4714 12a0 1C       		.uleb128 0x1c
 4715 12a1 10000000 		.4byte	.LBB41
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 142


 4716 12a5 4C000000 		.4byte	.LBE41-.LBB41
 4717 12a9 0E130000 		.4byte	0x130e
 4718 12ad 16       		.uleb128 0x16
 4719 12ae CE020000 		.4byte	.LASF51
 4720 12b2 01       		.byte	0x1
 4721 12b3 8106     		.2byte	0x681
 4722 12b5 99070000 		.4byte	0x799
 4723 12b9 790E0000 		.4byte	.LLST78
 4724 12bd 1D       		.uleb128 0x1d
 4725 12be 1E000000 		.4byte	.LVL240
 4726 12c2 7A050000 		.4byte	0x57a
 4727 12c6 D7120000 		.4byte	0x12d7
 4728 12ca 1B       		.uleb128 0x1b
 4729 12cb 01       		.uleb128 0x1
 4730 12cc 50       		.byte	0x50
 4731 12cd 02       		.uleb128 0x2
 4732 12ce 74       		.byte	0x74
 4733 12cf 00       		.sleb128 0
 4734 12d0 1B       		.uleb128 0x1b
 4735 12d1 01       		.uleb128 0x1
 4736 12d2 51       		.byte	0x51
 4737 12d3 02       		.uleb128 0x2
 4738 12d4 76       		.byte	0x76
 4739 12d5 00       		.sleb128 0
 4740 12d6 00       		.byte	0
 4741 12d7 1D       		.uleb128 0x1d
 4742 12d8 2C000000 		.4byte	.LVL241
 4743 12dc CF180000 		.4byte	0x18cf
 4744 12e0 EB120000 		.4byte	0x12eb
 4745 12e4 1B       		.uleb128 0x1b
 4746 12e5 01       		.uleb128 0x1
 4747 12e6 50       		.byte	0x50
 4748 12e7 02       		.uleb128 0x2
 4749 12e8 74       		.byte	0x74
 4750 12e9 24       		.sleb128 36
 4751 12ea 00       		.byte	0
 4752 12eb 18       		.uleb128 0x18
 4753 12ec 42000000 		.4byte	.LVL242
 4754 12f0 AF180000 		.4byte	0x18af
 4755 12f4 18       		.uleb128 0x18
 4756 12f5 4E000000 		.4byte	.LVL245
 4757 12f9 AF180000 		.4byte	0x18af
 4758 12fd 1A       		.uleb128 0x1a
 4759 12fe 5A000000 		.4byte	.LVL246
 4760 1302 FE180000 		.4byte	0x18fe
 4761 1306 1B       		.uleb128 0x1b
 4762 1307 01       		.uleb128 0x1
 4763 1308 50       		.byte	0x50
 4764 1309 02       		.uleb128 0x2
 4765 130a 91       		.byte	0x91
 4766 130b 68       		.sleb128 -24
 4767 130c 00       		.byte	0
 4768 130d 00       		.byte	0
 4769 130e 18       		.uleb128 0x18
 4770 130f 10000000 		.4byte	.LVL237
 4771 1313 A4180000 		.4byte	0x18a4
 4772 1317 18       		.uleb128 0x18
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 143


 4773 1318 60000000 		.4byte	.LVL248
 4774 131c AF180000 		.4byte	0x18af
 4775 1320 18       		.uleb128 0x18
 4776 1321 64000000 		.4byte	.LVL249
 4777 1325 0A190000 		.4byte	0x190a
 4778 1329 18       		.uleb128 0x18
 4779 132a 68000000 		.4byte	.LVL250
 4780 132e A4180000 		.4byte	0x18a4
 4781 1332 18       		.uleb128 0x18
 4782 1333 90000000 		.4byte	.LVL251
 4783 1337 AF180000 		.4byte	0x18af
 4784 133b 1D       		.uleb128 0x1d
 4785 133c 98000000 		.4byte	.LVL253
 4786 1340 16190000 		.4byte	0x1916
 4787 1344 55130000 		.4byte	0x1355
 4788 1348 1B       		.uleb128 0x1b
 4789 1349 01       		.uleb128 0x1
 4790 134a 50       		.byte	0x50
 4791 134b 02       		.uleb128 0x2
 4792 134c 91       		.byte	0x91
 4793 134d 68       		.sleb128 -24
 4794 134e 1B       		.uleb128 0x1b
 4795 134f 01       		.uleb128 0x1
 4796 1350 51       		.byte	0x51
 4797 1351 02       		.uleb128 0x2
 4798 1352 91       		.byte	0x91
 4799 1353 64       		.sleb128 -28
 4800 1354 00       		.byte	0
 4801 1355 1D       		.uleb128 0x1d
 4802 1356 A0000000 		.4byte	.LVL254
 4803 135a 99040000 		.4byte	0x499
 4804 135e 69130000 		.4byte	0x1369
 4805 1362 1B       		.uleb128 0x1b
 4806 1363 01       		.uleb128 0x1
 4807 1364 50       		.byte	0x50
 4808 1365 02       		.uleb128 0x2
 4809 1366 74       		.byte	0x74
 4810 1367 00       		.sleb128 0
 4811 1368 00       		.byte	0
 4812 1369 1D       		.uleb128 0x1d
 4813 136a AC000000 		.4byte	.LVL255
 4814 136e 22190000 		.4byte	0x1922
 4815 1372 7D130000 		.4byte	0x137d
 4816 1376 1B       		.uleb128 0x1b
 4817 1377 01       		.uleb128 0x1
 4818 1378 50       		.byte	0x50
 4819 1379 02       		.uleb128 0x2
 4820 137a 74       		.byte	0x74
 4821 137b 24       		.sleb128 36
 4822 137c 00       		.byte	0
 4823 137d 1D       		.uleb128 0x1d
 4824 137e B2000000 		.4byte	.LVL256
 4825 1382 C6050000 		.4byte	0x5c6
 4826 1386 91130000 		.4byte	0x1391
 4827 138a 1B       		.uleb128 0x1b
 4828 138b 01       		.uleb128 0x1
 4829 138c 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 144


 4830 138d 02       		.uleb128 0x2
 4831 138e 74       		.byte	0x74
 4832 138f 00       		.sleb128 0
 4833 1390 00       		.byte	0
 4834 1391 18       		.uleb128 0x18
 4835 1392 B6000000 		.4byte	.LVL257
 4836 1396 2E190000 		.4byte	0x192e
 4837 139a 1D       		.uleb128 0x1d
 4838 139b D2000000 		.4byte	.LVL258
 4839 139f C6050000 		.4byte	0x5c6
 4840 13a3 AE130000 		.4byte	0x13ae
 4841 13a7 1B       		.uleb128 0x1b
 4842 13a8 01       		.uleb128 0x1
 4843 13a9 50       		.byte	0x50
 4844 13aa 02       		.uleb128 0x2
 4845 13ab 74       		.byte	0x74
 4846 13ac 00       		.sleb128 0
 4847 13ad 00       		.byte	0
 4848 13ae 18       		.uleb128 0x18
 4849 13af D6000000 		.4byte	.LVL259
 4850 13b3 2E190000 		.4byte	0x192e
 4851 13b7 1D       		.uleb128 0x1d
 4852 13b8 DE000000 		.4byte	.LVL260
 4853 13bc C6050000 		.4byte	0x5c6
 4854 13c0 CB130000 		.4byte	0x13cb
 4855 13c4 1B       		.uleb128 0x1b
 4856 13c5 01       		.uleb128 0x1
 4857 13c6 50       		.byte	0x50
 4858 13c7 02       		.uleb128 0x2
 4859 13c8 74       		.byte	0x74
 4860 13c9 00       		.sleb128 0
 4861 13ca 00       		.byte	0
 4862 13cb 18       		.uleb128 0x18
 4863 13cc E2000000 		.4byte	.LVL261
 4864 13d0 2E190000 		.4byte	0x192e
 4865 13d4 1A       		.uleb128 0x1a
 4866 13d5 E8000000 		.4byte	.LVL262
 4867 13d9 99040000 		.4byte	0x499
 4868 13dd 1B       		.uleb128 0x1b
 4869 13de 01       		.uleb128 0x1
 4870 13df 50       		.byte	0x50
 4871 13e0 02       		.uleb128 0x2
 4872 13e1 74       		.byte	0x74
 4873 13e2 00       		.sleb128 0
 4874 13e3 00       		.byte	0
 4875 13e4 00       		.byte	0
 4876 13e5 21       		.uleb128 0x21
 4877 13e6 62000000 		.4byte	.LASF125
 4878 13ea 01       		.byte	0x1
 4879 13eb F906     		.2byte	0x6f9
 4880 13ed 05010000 		.4byte	0x105
 4881 13f1 00000000 		.4byte	.LFB82
 4882 13f5 72000000 		.4byte	.LFE82-.LFB82
 4883 13f9 01       		.uleb128 0x1
 4884 13fa 9C       		.byte	0x9c
 4885 13fb FC140000 		.4byte	0x14fc
 4886 13ff 15       		.uleb128 0x15
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 145


 4887 1400 51020000 		.4byte	.LASF64
 4888 1404 01       		.byte	0x1
 4889 1405 F906     		.2byte	0x6f9
 4890 1407 55020000 		.4byte	0x255
 4891 140b 970E0000 		.4byte	.LLST79
 4892 140f 15       		.uleb128 0x15
 4893 1410 95020000 		.4byte	.LASF84
 4894 1414 01       		.byte	0x1
 4895 1415 F906     		.2byte	0x6f9
 4896 1417 C1050000 		.4byte	0x5c1
 4897 141b E70E0000 		.4byte	.LLST80
 4898 141f 15       		.uleb128 0x15
 4899 1420 8E000000 		.4byte	.LASF113
 4900 1424 01       		.byte	0x1
 4901 1425 F906     		.2byte	0x6f9
 4902 1427 CD0C0000 		.4byte	0xccd
 4903 142b 210F0000 		.4byte	.LLST81
 4904 142f 17       		.uleb128 0x17
 4905 1430 A6080000 		.4byte	.LASF79
 4906 1434 01       		.byte	0x1
 4907 1435 FB06     		.2byte	0x6fb
 4908 1437 05010000 		.4byte	0x105
 4909 143b 01       		.uleb128 0x1
 4910 143c 50       		.byte	0x50
 4911 143d 23       		.uleb128 0x23
 4912 143e E2010000 		.4byte	.LASF114
 4913 1442 01       		.byte	0x1
 4914 1443 FC06     		.2byte	0x6fc
 4915 1445 10010000 		.4byte	0x110
 4916 1449 16       		.uleb128 0x16
 4917 144a 9E080000 		.4byte	.LASF77
 4918 144e 01       		.byte	0x1
 4919 144f FD06     		.2byte	0x6fd
 4920 1451 70050000 		.4byte	0x570
 4921 1455 630F0000 		.4byte	.LLST82
 4922 1459 24       		.uleb128 0x24
 4923 145a C4030000 		.4byte	0x3c4
 4924 145e 04000000 		.4byte	.LBB42
 4925 1462 14000000 		.4byte	.LBE42-.LBB42
 4926 1466 01       		.byte	0x1
 4927 1467 1207     		.2byte	0x712
 4928 1469 82140000 		.4byte	0x1482
 4929 146d 25       		.uleb128 0x25
 4930 146e 04000000 		.4byte	.LBB43
 4931 1472 14000000 		.4byte	.LBE43-.LBB43
 4932 1476 26       		.uleb128 0x26
 4933 1477 D4030000 		.4byte	0x3d4
 4934 147b 26       		.uleb128 0x26
 4935 147c DF030000 		.4byte	0x3df
 4936 1480 00       		.byte	0
 4937 1481 00       		.byte	0
 4938 1482 1C       		.uleb128 0x1c
 4939 1483 18000000 		.4byte	.LBB44
 4940 1487 52000000 		.4byte	.LBE44-.LBB44
 4941 148b E1140000 		.4byte	0x14e1
 4942 148f 16       		.uleb128 0x16
 4943 1490 CE020000 		.4byte	.LASF51
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 146


 4944 1494 01       		.byte	0x1
 4945 1495 1407     		.2byte	0x714
 4946 1497 99070000 		.4byte	0x799
 4947 149b B30F0000 		.4byte	.LLST83
 4948 149f 2A       		.uleb128 0x2a
 4949 14a0 30000000 		.4byte	.Ldebug_ranges0+0x30
 4950 14a4 16       		.uleb128 0x16
 4951 14a5 5A0A0000 		.4byte	.LASF54
 4952 14a9 01       		.byte	0x1
 4953 14aa 1907     		.2byte	0x719
 4954 14ac D20C0000 		.4byte	0xcd2
 4955 14b0 EB0F0000 		.4byte	.LLST84
 4956 14b4 1D       		.uleb128 0x1d
 4957 14b5 2A000000 		.4byte	.LVL269
 4958 14b9 7A050000 		.4byte	0x57a
 4959 14bd CF140000 		.4byte	0x14cf
 4960 14c1 1B       		.uleb128 0x1b
 4961 14c2 01       		.uleb128 0x1
 4962 14c3 50       		.byte	0x50
 4963 14c4 02       		.uleb128 0x2
 4964 14c5 77       		.byte	0x77
 4965 14c6 00       		.sleb128 0
 4966 14c7 1B       		.uleb128 0x1b
 4967 14c8 01       		.uleb128 0x1
 4968 14c9 51       		.byte	0x51
 4969 14ca 03       		.uleb128 0x3
 4970 14cb F3       		.byte	0xf3
 4971 14cc 01       		.uleb128 0x1
 4972 14cd 51       		.byte	0x51
 4973 14ce 00       		.byte	0
 4974 14cf 1A       		.uleb128 0x1a
 4975 14d0 40000000 		.4byte	.LVL271
 4976 14d4 CF180000 		.4byte	0x18cf
 4977 14d8 1B       		.uleb128 0x1b
 4978 14d9 01       		.uleb128 0x1
 4979 14da 50       		.byte	0x50
 4980 14db 02       		.uleb128 0x2
 4981 14dc 77       		.byte	0x77
 4982 14dd 10       		.sleb128 16
 4983 14de 00       		.byte	0
 4984 14df 00       		.byte	0
 4985 14e0 00       		.byte	0
 4986 14e1 28       		.uleb128 0x28
 4987 14e2 EB030000 		.4byte	0x3eb
 4988 14e6 6A000000 		.4byte	.LBB47
 4989 14ea 04000000 		.4byte	.LBE47-.LBB47
 4990 14ee 01       		.byte	0x1
 4991 14ef 4E07     		.2byte	0x74e
 4992 14f1 29       		.uleb128 0x29
 4993 14f2 F7030000 		.4byte	0x3f7
 4994 14f6 16100000 		.4byte	.LLST85
 4995 14fa 00       		.byte	0
 4996 14fb 00       		.byte	0
 4997 14fc 21       		.uleb128 0x21
 4998 14fd F7080000 		.4byte	.LASF126
 4999 1501 01       		.byte	0x1
 5000 1502 5407     		.2byte	0x754
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 147


 5001 1504 05010000 		.4byte	0x105
 5002 1508 00000000 		.4byte	.LFB83
 5003 150c 30000000 		.4byte	.LFE83-.LFB83
 5004 1510 01       		.uleb128 0x1
 5005 1511 9C       		.byte	0x9c
 5006 1512 D1150000 		.4byte	0x15d1
 5007 1516 15       		.uleb128 0x15
 5008 1517 51020000 		.4byte	.LASF64
 5009 151b 01       		.byte	0x1
 5010 151c 5407     		.2byte	0x754
 5011 151e 55020000 		.4byte	0x255
 5012 1522 29100000 		.4byte	.LLST86
 5013 1526 15       		.uleb128 0x15
 5014 1527 95020000 		.4byte	.LASF84
 5015 152b 01       		.byte	0x1
 5016 152c 5407     		.2byte	0x754
 5017 152e C1050000 		.4byte	0x5c1
 5018 1532 60100000 		.4byte	.LLST87
 5019 1536 16       		.uleb128 0x16
 5020 1537 A6080000 		.4byte	.LASF79
 5021 153b 01       		.byte	0x1
 5022 153c 5607     		.2byte	0x756
 5023 153e 05010000 		.4byte	0x105
 5024 1542 9A100000 		.4byte	.LLST88
 5025 1546 23       		.uleb128 0x23
 5026 1547 E2010000 		.4byte	.LASF114
 5027 154b 01       		.byte	0x1
 5028 154c 5707     		.2byte	0x757
 5029 154e 10010000 		.4byte	0x110
 5030 1552 16       		.uleb128 0x16
 5031 1553 B8060000 		.4byte	.LASF124
 5032 1557 01       		.byte	0x1
 5033 1558 5807     		.2byte	0x758
 5034 155a 0E030000 		.4byte	0x30e
 5035 155e B9100000 		.4byte	.LLST89
 5036 1562 16       		.uleb128 0x16
 5037 1563 9E080000 		.4byte	.LASF77
 5038 1567 01       		.byte	0x1
 5039 1568 5907     		.2byte	0x759
 5040 156a 70050000 		.4byte	0x570
 5041 156e CC100000 		.4byte	.LLST90
 5042 1572 24       		.uleb128 0x24
 5043 1573 C4030000 		.4byte	0x3c4
 5044 1577 02000000 		.4byte	.LBB49
 5045 157b 14000000 		.4byte	.LBE49-.LBB49
 5046 157f 01       		.byte	0x1
 5047 1580 6F07     		.2byte	0x76f
 5048 1582 9B150000 		.4byte	0x159b
 5049 1586 25       		.uleb128 0x25
 5050 1587 02000000 		.4byte	.LBB50
 5051 158b 14000000 		.4byte	.LBE50-.LBB50
 5052 158f 26       		.uleb128 0x26
 5053 1590 D4030000 		.4byte	0x3d4
 5054 1594 26       		.uleb128 0x26
 5055 1595 DF030000 		.4byte	0x3df
 5056 1599 00       		.byte	0
 5057 159a 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 148


 5058 159b 24       		.uleb128 0x24
 5059 159c EB030000 		.4byte	0x3eb
 5060 15a0 2A000000 		.4byte	.LBB51
 5061 15a4 04000000 		.4byte	.LBE51-.LBB51
 5062 15a8 01       		.byte	0x1
 5063 15a9 8407     		.2byte	0x784
 5064 15ab B9150000 		.4byte	0x15b9
 5065 15af 29       		.uleb128 0x29
 5066 15b0 F7030000 		.4byte	0x3f7
 5067 15b4 03110000 		.4byte	.LLST91
 5068 15b8 00       		.byte	0
 5069 15b9 1A       		.uleb128 0x1a
 5070 15ba 22000000 		.4byte	.LVL282
 5071 15be 7A050000 		.4byte	0x57a
 5072 15c2 1B       		.uleb128 0x1b
 5073 15c3 01       		.uleb128 0x1
 5074 15c4 50       		.byte	0x50
 5075 15c5 02       		.uleb128 0x2
 5076 15c6 74       		.byte	0x74
 5077 15c7 00       		.sleb128 0
 5078 15c8 1B       		.uleb128 0x1b
 5079 15c9 01       		.uleb128 0x1
 5080 15ca 51       		.byte	0x51
 5081 15cb 03       		.uleb128 0x3
 5082 15cc F3       		.byte	0xf3
 5083 15cd 01       		.uleb128 0x1
 5084 15ce 51       		.byte	0x51
 5085 15cf 00       		.byte	0
 5086 15d0 00       		.byte	0
 5087 15d1 21       		.uleb128 0x21
 5088 15d2 76080000 		.4byte	.LASF127
 5089 15d6 01       		.byte	0x1
 5090 15d7 8A07     		.2byte	0x78a
 5091 15d9 10010000 		.4byte	0x110
 5092 15dd 00000000 		.4byte	.LFB84
 5093 15e1 12000000 		.4byte	.LFE84-.LFB84
 5094 15e5 01       		.uleb128 0x1
 5095 15e6 9C       		.byte	0x9c
 5096 15e7 1C160000 		.4byte	0x161c
 5097 15eb 15       		.uleb128 0x15
 5098 15ec 51020000 		.4byte	.LASF64
 5099 15f0 01       		.byte	0x1
 5100 15f1 8A07     		.2byte	0x78a
 5101 15f3 1C160000 		.4byte	0x161c
 5102 15f7 16110000 		.4byte	.LLST92
 5103 15fb 17       		.uleb128 0x17
 5104 15fc 97010000 		.4byte	.LASF128
 5105 1600 01       		.byte	0x1
 5106 1601 8C07     		.2byte	0x78c
 5107 1603 10010000 		.4byte	0x110
 5108 1607 01       		.uleb128 0x1
 5109 1608 54       		.byte	0x54
 5110 1609 18       		.uleb128 0x18
 5111 160a 08000000 		.4byte	.LVL288
 5112 160e A4180000 		.4byte	0x18a4
 5113 1612 18       		.uleb128 0x18
 5114 1613 0E000000 		.4byte	.LVL290
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 149


 5115 1617 AF180000 		.4byte	0x18af
 5116 161b 00       		.byte	0
 5117 161c 07       		.uleb128 0x7
 5118 161d 55020000 		.4byte	0x255
 5119 1621 21       		.uleb128 0x21
 5120 1622 2B010000 		.4byte	.LASF129
 5121 1626 01       		.byte	0x1
 5122 1627 9A07     		.2byte	0x79a
 5123 1629 10010000 		.4byte	0x110
 5124 162d 00000000 		.4byte	.LFB85
 5125 1631 16000000 		.4byte	.LFE85-.LFB85
 5126 1635 01       		.uleb128 0x1
 5127 1636 9C       		.byte	0x9c
 5128 1637 7C160000 		.4byte	0x167c
 5129 163b 15       		.uleb128 0x15
 5130 163c 51020000 		.4byte	.LASF64
 5131 1640 01       		.byte	0x1
 5132 1641 9A07     		.2byte	0x79a
 5133 1643 1C160000 		.4byte	0x161c
 5134 1647 42110000 		.4byte	.LLST93
 5135 164b 17       		.uleb128 0x17
 5136 164c 97010000 		.4byte	.LASF128
 5137 1650 01       		.byte	0x1
 5138 1651 9C07     		.2byte	0x79c
 5139 1653 10010000 		.4byte	0x110
 5140 1657 01       		.uleb128 0x1
 5141 1658 54       		.byte	0x54
 5142 1659 16       		.uleb128 0x16
 5143 165a 9E080000 		.4byte	.LASF77
 5144 165e 01       		.byte	0x1
 5145 165f 9D07     		.2byte	0x79d
 5146 1661 70050000 		.4byte	0x570
 5147 1665 6E110000 		.4byte	.LLST94
 5148 1669 18       		.uleb128 0x18
 5149 166a 08000000 		.4byte	.LVL293
 5150 166e A4180000 		.4byte	0x18a4
 5151 1672 18       		.uleb128 0x18
 5152 1673 12000000 		.4byte	.LVL296
 5153 1677 AF180000 		.4byte	0x18af
 5154 167b 00       		.byte	0
 5155 167c 21       		.uleb128 0x21
 5156 167d 8D050000 		.4byte	.LASF130
 5157 1681 01       		.byte	0x1
 5158 1682 AB07     		.2byte	0x7ab
 5159 1684 10010000 		.4byte	0x110
 5160 1688 00000000 		.4byte	.LFB86
 5161 168c 04000000 		.4byte	.LFE86-.LFB86
 5162 1690 01       		.uleb128 0x1
 5163 1691 9C       		.byte	0x9c
 5164 1692 C5160000 		.4byte	0x16c5
 5165 1696 15       		.uleb128 0x15
 5166 1697 51020000 		.4byte	.LASF64
 5167 169b 01       		.byte	0x1
 5168 169c AB07     		.2byte	0x7ab
 5169 169e 1C160000 		.4byte	0x161c
 5170 16a2 9A110000 		.4byte	.LLST95
 5171 16a6 17       		.uleb128 0x17
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 150


 5172 16a7 97010000 		.4byte	.LASF128
 5173 16ab 01       		.byte	0x1
 5174 16ac AD07     		.2byte	0x7ad
 5175 16ae 10010000 		.4byte	0x110
 5176 16b2 01       		.uleb128 0x1
 5177 16b3 50       		.byte	0x50
 5178 16b4 16       		.uleb128 0x16
 5179 16b5 9E080000 		.4byte	.LASF77
 5180 16b9 01       		.byte	0x1
 5181 16ba AE07     		.2byte	0x7ae
 5182 16bc 70050000 		.4byte	0x570
 5183 16c0 BB110000 		.4byte	.LLST96
 5184 16c4 00       		.byte	0
 5185 16c5 21       		.uleb128 0x21
 5186 16c6 F5090000 		.4byte	.LASF131
 5187 16ca 01       		.byte	0x1
 5188 16cb 0809     		.2byte	0x908
 5189 16cd 05010000 		.4byte	0x105
 5190 16d1 00000000 		.4byte	.LFB93
 5191 16d5 0C000000 		.4byte	.LFE93-.LFB93
 5192 16d9 01       		.uleb128 0x1
 5193 16da 9C       		.byte	0x9c
 5194 16db 0E170000 		.4byte	0x170e
 5195 16df 15       		.uleb128 0x15
 5196 16e0 51020000 		.4byte	.LASF64
 5197 16e4 01       		.byte	0x1
 5198 16e5 0809     		.2byte	0x908
 5199 16e7 1C160000 		.4byte	0x161c
 5200 16eb DC110000 		.4byte	.LLST97
 5201 16ef 17       		.uleb128 0x17
 5202 16f0 A6080000 		.4byte	.LASF79
 5203 16f4 01       		.byte	0x1
 5204 16f5 0A09     		.2byte	0x90a
 5205 16f7 05010000 		.4byte	0x105
 5206 16fb 01       		.uleb128 0x1
 5207 16fc 50       		.byte	0x50
 5208 16fd 16       		.uleb128 0x16
 5209 16fe 9E080000 		.4byte	.LASF77
 5210 1702 01       		.byte	0x1
 5211 1703 0B09     		.2byte	0x90b
 5212 1705 70050000 		.4byte	0x570
 5213 1709 16120000 		.4byte	.LLST98
 5214 170d 00       		.byte	0
 5215 170e 21       		.uleb128 0x21
 5216 170f 5D080000 		.4byte	.LASF132
 5217 1713 01       		.byte	0x1
 5218 1714 3009     		.2byte	0x930
 5219 1716 05010000 		.4byte	0x105
 5220 171a 00000000 		.4byte	.LFB95
 5221 171e 10000000 		.4byte	.LFE95-.LFB95
 5222 1722 01       		.uleb128 0x1
 5223 1723 9C       		.byte	0x9c
 5224 1724 57170000 		.4byte	0x1757
 5225 1728 15       		.uleb128 0x15
 5226 1729 51020000 		.4byte	.LASF64
 5227 172d 01       		.byte	0x1
 5228 172e 3009     		.2byte	0x930
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 151


 5229 1730 1C160000 		.4byte	0x161c
 5230 1734 50120000 		.4byte	.LLST99
 5231 1738 17       		.uleb128 0x17
 5232 1739 A6080000 		.4byte	.LASF79
 5233 173d 01       		.byte	0x1
 5234 173e 3209     		.2byte	0x932
 5235 1740 05010000 		.4byte	0x105
 5236 1744 01       		.uleb128 0x1
 5237 1745 50       		.byte	0x50
 5238 1746 16       		.uleb128 0x16
 5239 1747 9E080000 		.4byte	.LASF77
 5240 174b 01       		.byte	0x1
 5241 174c 3309     		.2byte	0x933
 5242 174e 70050000 		.4byte	0x570
 5243 1752 8A120000 		.4byte	.LLST100
 5244 1756 00       		.byte	0
 5245 1757 2B       		.uleb128 0x2b
 5246 1758 61060000 		.4byte	.LASF135
 5247 175c 01       		.byte	0x1
 5248 175d 580A     		.2byte	0xa58
 5249 175f 00000000 		.4byte	.LFB96
 5250 1763 28000000 		.4byte	.LFE96-.LFB96
 5251 1767 01       		.uleb128 0x1
 5252 1768 9C       		.byte	0x9c
 5253 1769 99170000 		.4byte	0x1799
 5254 176d 20       		.uleb128 0x20
 5255 176e 51020000 		.4byte	.LASF64
 5256 1772 01       		.byte	0x1
 5257 1773 580A     		.2byte	0xa58
 5258 1775 55020000 		.4byte	0x255
 5259 1779 01       		.uleb128 0x1
 5260 177a 50       		.byte	0x50
 5261 177b 20       		.uleb128 0x20
 5262 177c E1030000 		.4byte	.LASF69
 5263 1780 01       		.byte	0x1
 5264 1781 580A     		.2byte	0xa58
 5265 1783 B9000000 		.4byte	0xb9
 5266 1787 01       		.uleb128 0x1
 5267 1788 51       		.byte	0x51
 5268 1789 2C       		.uleb128 0x2c
 5269 178a 757800   		.ascii	"ux\000"
 5270 178d 01       		.byte	0x1
 5271 178e 5A0A     		.2byte	0xa5a
 5272 1790 10010000 		.4byte	0x110
 5273 1794 C4120000 		.4byte	.LLST101
 5274 1798 00       		.byte	0
 5275 1799 21       		.uleb128 0x21
 5276 179a B3070000 		.4byte	.LASF133
 5277 179e 01       		.byte	0x1
 5278 179f 750A     		.2byte	0xa75
 5279 17a1 B9000000 		.4byte	0xb9
 5280 17a5 00000000 		.4byte	.LFB97
 5281 17a9 28000000 		.4byte	.LFE97-.LFB97
 5282 17ad 01       		.uleb128 0x1
 5283 17ae 9C       		.byte	0x9c
 5284 17af E3170000 		.4byte	0x17e3
 5285 17b3 15       		.uleb128 0x15
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 152


 5286 17b4 51020000 		.4byte	.LASF64
 5287 17b8 01       		.byte	0x1
 5288 17b9 750A     		.2byte	0xa75
 5289 17bb 55020000 		.4byte	0x255
 5290 17bf EE120000 		.4byte	.LLST102
 5291 17c3 2C       		.uleb128 0x2c
 5292 17c4 757800   		.ascii	"ux\000"
 5293 17c7 01       		.byte	0x1
 5294 17c8 770A     		.2byte	0xa77
 5295 17ca 10010000 		.4byte	0x110
 5296 17ce 28130000 		.4byte	.LLST103
 5297 17d2 16       		.uleb128 0x16
 5298 17d3 D2070000 		.4byte	.LASF134
 5299 17d7 01       		.byte	0x1
 5300 17d8 780A     		.2byte	0xa78
 5301 17da B9000000 		.4byte	0xb9
 5302 17de 47130000 		.4byte	.LLST104
 5303 17e2 00       		.byte	0
 5304 17e3 2B       		.uleb128 0x2b
 5305 17e4 CC010000 		.4byte	.LASF136
 5306 17e8 01       		.byte	0x1
 5307 17e9 910A     		.2byte	0xa91
 5308 17eb 00000000 		.4byte	.LFB98
 5309 17ef 2C000000 		.4byte	.LFE98-.LFB98
 5310 17f3 01       		.uleb128 0x1
 5311 17f4 9C       		.byte	0x9c
 5312 17f5 17180000 		.4byte	0x1817
 5313 17f9 20       		.uleb128 0x20
 5314 17fa 51020000 		.4byte	.LASF64
 5315 17fe 01       		.byte	0x1
 5316 17ff 910A     		.2byte	0xa91
 5317 1801 55020000 		.4byte	0x255
 5318 1805 01       		.uleb128 0x1
 5319 1806 50       		.byte	0x50
 5320 1807 2C       		.uleb128 0x2c
 5321 1808 757800   		.ascii	"ux\000"
 5322 180b 01       		.byte	0x1
 5323 180c 930A     		.2byte	0xa93
 5324 180e 10010000 		.4byte	0x110
 5325 1812 7D130000 		.4byte	.LLST105
 5326 1816 00       		.byte	0
 5327 1817 2B       		.uleb128 0x2b
 5328 1818 B4010000 		.4byte	.LASF137
 5329 181c 01       		.byte	0x1
 5330 181d B707     		.2byte	0x7b7
 5331 181f 00000000 		.4byte	.LFB87
 5332 1823 10000000 		.4byte	.LFE87-.LFB87
 5333 1827 01       		.uleb128 0x1
 5334 1828 9C       		.byte	0x9c
 5335 1829 72180000 		.4byte	0x1872
 5336 182d 15       		.uleb128 0x15
 5337 182e 51020000 		.4byte	.LASF64
 5338 1832 01       		.byte	0x1
 5339 1833 B707     		.2byte	0x7b7
 5340 1835 55020000 		.4byte	0x255
 5341 1839 A7130000 		.4byte	.LLST106
 5342 183d 16       		.uleb128 0x16
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 153


 5343 183e 9E080000 		.4byte	.LASF77
 5344 1842 01       		.byte	0x1
 5345 1843 B907     		.2byte	0x7b9
 5346 1845 70050000 		.4byte	0x570
 5347 1849 C5130000 		.4byte	.LLST107
 5348 184d 1D       		.uleb128 0x1d
 5349 184e 08000000 		.4byte	.LVL325
 5350 1852 E3170000 		.4byte	0x17e3
 5351 1856 61180000 		.4byte	0x1861
 5352 185a 1B       		.uleb128 0x1b
 5353 185b 01       		.uleb128 0x1
 5354 185c 50       		.byte	0x50
 5355 185d 02       		.uleb128 0x2
 5356 185e 74       		.byte	0x74
 5357 185f 00       		.sleb128 0
 5358 1860 00       		.byte	0
 5359 1861 1A       		.uleb128 0x1a
 5360 1862 0E000000 		.4byte	.LVL326
 5361 1866 6A190000 		.4byte	0x196a
 5362 186a 1B       		.uleb128 0x1b
 5363 186b 01       		.uleb128 0x1
 5364 186c 50       		.byte	0x50
 5365 186d 02       		.uleb128 0x2
 5366 186e 74       		.byte	0x74
 5367 186f 00       		.sleb128 0
 5368 1870 00       		.byte	0
 5369 1871 00       		.byte	0
 5370 1872 2D       		.uleb128 0x2d
 5371 1873 02080000 		.4byte	.LASF138
 5372 1877 09       		.byte	0x9
 5373 1878 1207     		.2byte	0x712
 5374 187a 7E180000 		.4byte	0x187e
 5375 187e 0B       		.uleb128 0xb
 5376 187f E1000000 		.4byte	0xe1
 5377 1883 2E       		.uleb128 0x2e
 5378 1884 B9030000 		.4byte	0x3b9
 5379 1888 93180000 		.4byte	0x1893
 5380 188c 2F       		.uleb128 0x2f
 5381 188d A9000000 		.4byte	0xa9
 5382 1891 09       		.byte	0x9
 5383 1892 00       		.byte	0
 5384 1893 30       		.uleb128 0x30
 5385 1894 67050000 		.4byte	.LASF139
 5386 1898 01       		.byte	0x1
 5387 1899 A2       		.byte	0xa2
 5388 189a 83180000 		.4byte	0x1883
 5389 189e 05       		.uleb128 0x5
 5390 189f 03       		.byte	0x3
 5391 18a0 00000000 		.4byte	xQueueRegistry
 5392 18a4 31       		.uleb128 0x31
 5393 18a5 59010000 		.4byte	.LASF140
 5394 18a9 59010000 		.4byte	.LASF140
 5395 18ad 02       		.byte	0x2
 5396 18ae 61       		.byte	0x61
 5397 18af 31       		.uleb128 0x31
 5398 18b0 10000000 		.4byte	.LASF141
 5399 18b4 10000000 		.4byte	.LASF141
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 154


 5400 18b8 02       		.byte	0x2
 5401 18b9 62       		.byte	0x62
 5402 18ba 32       		.uleb128 0x32
 5403 18bb E9040000 		.4byte	.LASF142
 5404 18bf E9040000 		.4byte	.LASF142
 5405 18c3 07       		.byte	0x7
 5406 18c4 9E09     		.2byte	0x99e
 5407 18c6 33       		.uleb128 0x33
 5408 18c7 2E0A0000 		.4byte	.LASF164
 5409 18cb 2E0A0000 		.4byte	.LASF164
 5410 18cf 32       		.uleb128 0x32
 5411 18d0 620A0000 		.4byte	.LASF143
 5412 18d4 620A0000 		.4byte	.LASF143
 5413 18d8 07       		.byte	0x7
 5414 18d9 7009     		.2byte	0x970
 5415 18db 32       		.uleb128 0x32
 5416 18dc B7080000 		.4byte	.LASF144
 5417 18e0 B7080000 		.4byte	.LASF144
 5418 18e4 07       		.byte	0x7
 5419 18e5 8C09     		.2byte	0x98c
 5420 18e7 32       		.uleb128 0x32
 5421 18e8 3B090000 		.4byte	.LASF145
 5422 18ec 3B090000 		.4byte	.LASF145
 5423 18f0 06       		.byte	0x6
 5424 18f1 5901     		.2byte	0x159
 5425 18f3 31       		.uleb128 0x31
 5426 18f4 EB020000 		.4byte	.LASF146
 5427 18f8 EB020000 		.4byte	.LASF146
 5428 18fc 0A       		.byte	0xa
 5429 18fd A3       		.byte	0xa3
 5430 18fe 32       		.uleb128 0x32
 5431 18ff 9B060000 		.4byte	.LASF147
 5432 1903 9B060000 		.4byte	.LASF147
 5433 1907 07       		.byte	0x7
 5434 1908 E609     		.2byte	0x9e6
 5435 190a 32       		.uleb128 0x32
 5436 190b F8020000 		.4byte	.LASF148
 5437 190f F8020000 		.4byte	.LASF148
 5438 1913 07       		.byte	0x7
 5439 1914 0705     		.2byte	0x507
 5440 1916 32       		.uleb128 0x32
 5441 1917 3E080000 		.4byte	.LASF149
 5442 191b 3E080000 		.4byte	.LASF149
 5443 191f 07       		.byte	0x7
 5444 1920 1209     		.2byte	0x912
 5445 1922 32       		.uleb128 0x32
 5446 1923 51040000 		.4byte	.LASF150
 5447 1927 51040000 		.4byte	.LASF150
 5448 192b 07       		.byte	0x7
 5449 192c 4809     		.2byte	0x948
 5450 192e 32       		.uleb128 0x32
 5451 192f 21080000 		.4byte	.LASF151
 5452 1933 21080000 		.4byte	.LASF151
 5453 1937 07       		.byte	0x7
 5454 1938 3D05     		.2byte	0x53d
 5455 193a 32       		.uleb128 0x32
 5456 193b 99090000 		.4byte	.LASF152
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 155


 5457 193f 99090000 		.4byte	.LASF152
 5458 1943 07       		.byte	0x7
 5459 1944 8609     		.2byte	0x986
 5460 1946 32       		.uleb128 0x32
 5461 1947 67040000 		.4byte	.LASF153
 5462 194b 67040000 		.4byte	.LASF153
 5463 194f 07       		.byte	0x7
 5464 1950 E009     		.2byte	0x9e0
 5465 1952 32       		.uleb128 0x32
 5466 1953 60090000 		.4byte	.LASF154
 5467 1957 60090000 		.4byte	.LASF154
 5468 195b 07       		.byte	0x7
 5469 195c A809     		.2byte	0x9a8
 5470 195e 32       		.uleb128 0x32
 5471 195f DA080000 		.4byte	.LASF155
 5472 1963 DA080000 		.4byte	.LASF155
 5473 1967 07       		.byte	0x7
 5474 1968 9809     		.2byte	0x998
 5475 196a 31       		.uleb128 0x31
 5476 196b 53080000 		.4byte	.LASF156
 5477 196f 53080000 		.4byte	.LASF156
 5478 1973 0A       		.byte	0xa
 5479 1974 A4       		.byte	0xa4
 5480 1975 00       		.byte	0
 5481              		.section	.debug_abbrev,"",%progbits
 5482              	.Ldebug_abbrev0:
 5483 0000 01       		.uleb128 0x1
 5484 0001 11       		.uleb128 0x11
 5485 0002 01       		.byte	0x1
 5486 0003 25       		.uleb128 0x25
 5487 0004 0E       		.uleb128 0xe
 5488 0005 13       		.uleb128 0x13
 5489 0006 0B       		.uleb128 0xb
 5490 0007 03       		.uleb128 0x3
 5491 0008 0E       		.uleb128 0xe
 5492 0009 1B       		.uleb128 0x1b
 5493 000a 0E       		.uleb128 0xe
 5494 000b 55       		.uleb128 0x55
 5495 000c 17       		.uleb128 0x17
 5496 000d 11       		.uleb128 0x11
 5497 000e 01       		.uleb128 0x1
 5498 000f 10       		.uleb128 0x10
 5499 0010 17       		.uleb128 0x17
 5500 0011 00       		.byte	0
 5501 0012 00       		.byte	0
 5502 0013 02       		.uleb128 0x2
 5503 0014 16       		.uleb128 0x16
 5504 0015 00       		.byte	0
 5505 0016 03       		.uleb128 0x3
 5506 0017 0E       		.uleb128 0xe
 5507 0018 3A       		.uleb128 0x3a
 5508 0019 0B       		.uleb128 0xb
 5509 001a 3B       		.uleb128 0x3b
 5510 001b 0B       		.uleb128 0xb
 5511 001c 49       		.uleb128 0x49
 5512 001d 13       		.uleb128 0x13
 5513 001e 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 156


 5514 001f 00       		.byte	0
 5515 0020 03       		.uleb128 0x3
 5516 0021 24       		.uleb128 0x24
 5517 0022 00       		.byte	0
 5518 0023 0B       		.uleb128 0xb
 5519 0024 0B       		.uleb128 0xb
 5520 0025 3E       		.uleb128 0x3e
 5521 0026 0B       		.uleb128 0xb
 5522 0027 03       		.uleb128 0x3
 5523 0028 0E       		.uleb128 0xe
 5524 0029 00       		.byte	0
 5525 002a 00       		.byte	0
 5526 002b 04       		.uleb128 0x4
 5527 002c 24       		.uleb128 0x24
 5528 002d 00       		.byte	0
 5529 002e 0B       		.uleb128 0xb
 5530 002f 0B       		.uleb128 0xb
 5531 0030 3E       		.uleb128 0x3e
 5532 0031 0B       		.uleb128 0xb
 5533 0032 03       		.uleb128 0x3
 5534 0033 08       		.uleb128 0x8
 5535 0034 00       		.byte	0
 5536 0035 00       		.byte	0
 5537 0036 05       		.uleb128 0x5
 5538 0037 0F       		.uleb128 0xf
 5539 0038 00       		.byte	0
 5540 0039 0B       		.uleb128 0xb
 5541 003a 0B       		.uleb128 0xb
 5542 003b 00       		.byte	0
 5543 003c 00       		.byte	0
 5544 003d 06       		.uleb128 0x6
 5545 003e 0F       		.uleb128 0xf
 5546 003f 00       		.byte	0
 5547 0040 0B       		.uleb128 0xb
 5548 0041 0B       		.uleb128 0xb
 5549 0042 49       		.uleb128 0x49
 5550 0043 13       		.uleb128 0x13
 5551 0044 00       		.byte	0
 5552 0045 00       		.byte	0
 5553 0046 07       		.uleb128 0x7
 5554 0047 26       		.uleb128 0x26
 5555 0048 00       		.byte	0
 5556 0049 49       		.uleb128 0x49
 5557 004a 13       		.uleb128 0x13
 5558 004b 00       		.byte	0
 5559 004c 00       		.byte	0
 5560 004d 08       		.uleb128 0x8
 5561 004e 26       		.uleb128 0x26
 5562 004f 00       		.byte	0
 5563 0050 00       		.byte	0
 5564 0051 00       		.byte	0
 5565 0052 09       		.uleb128 0x9
 5566 0053 13       		.uleb128 0x13
 5567 0054 01       		.byte	0x1
 5568 0055 03       		.uleb128 0x3
 5569 0056 0E       		.uleb128 0xe
 5570 0057 0B       		.uleb128 0xb
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 157


 5571 0058 0B       		.uleb128 0xb
 5572 0059 3A       		.uleb128 0x3a
 5573 005a 0B       		.uleb128 0xb
 5574 005b 3B       		.uleb128 0x3b
 5575 005c 0B       		.uleb128 0xb
 5576 005d 01       		.uleb128 0x1
 5577 005e 13       		.uleb128 0x13
 5578 005f 00       		.byte	0
 5579 0060 00       		.byte	0
 5580 0061 0A       		.uleb128 0xa
 5581 0062 0D       		.uleb128 0xd
 5582 0063 00       		.byte	0
 5583 0064 03       		.uleb128 0x3
 5584 0065 0E       		.uleb128 0xe
 5585 0066 3A       		.uleb128 0x3a
 5586 0067 0B       		.uleb128 0xb
 5587 0068 3B       		.uleb128 0x3b
 5588 0069 0B       		.uleb128 0xb
 5589 006a 49       		.uleb128 0x49
 5590 006b 13       		.uleb128 0x13
 5591 006c 38       		.uleb128 0x38
 5592 006d 0B       		.uleb128 0xb
 5593 006e 00       		.byte	0
 5594 006f 00       		.byte	0
 5595 0070 0B       		.uleb128 0xb
 5596 0071 35       		.uleb128 0x35
 5597 0072 00       		.byte	0
 5598 0073 49       		.uleb128 0x49
 5599 0074 13       		.uleb128 0x13
 5600 0075 00       		.byte	0
 5601 0076 00       		.byte	0
 5602 0077 0C       		.uleb128 0xc
 5603 0078 13       		.uleb128 0x13
 5604 0079 00       		.byte	0
 5605 007a 03       		.uleb128 0x3
 5606 007b 0E       		.uleb128 0xe
 5607 007c 3C       		.uleb128 0x3c
 5608 007d 19       		.uleb128 0x19
 5609 007e 00       		.byte	0
 5610 007f 00       		.byte	0
 5611 0080 0D       		.uleb128 0xd
 5612 0081 0D       		.uleb128 0xd
 5613 0082 00       		.byte	0
 5614 0083 03       		.uleb128 0x3
 5615 0084 08       		.uleb128 0x8
 5616 0085 3A       		.uleb128 0x3a
 5617 0086 0B       		.uleb128 0xb
 5618 0087 3B       		.uleb128 0x3b
 5619 0088 0B       		.uleb128 0xb
 5620 0089 49       		.uleb128 0x49
 5621 008a 13       		.uleb128 0x13
 5622 008b 38       		.uleb128 0x38
 5623 008c 0B       		.uleb128 0xb
 5624 008d 00       		.byte	0
 5625 008e 00       		.byte	0
 5626 008f 0E       		.uleb128 0xe
 5627 0090 17       		.uleb128 0x17
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 158


 5628 0091 01       		.byte	0x1
 5629 0092 0B       		.uleb128 0xb
 5630 0093 0B       		.uleb128 0xb
 5631 0094 3A       		.uleb128 0x3a
 5632 0095 0B       		.uleb128 0xb
 5633 0096 3B       		.uleb128 0x3b
 5634 0097 0B       		.uleb128 0xb
 5635 0098 01       		.uleb128 0x1
 5636 0099 13       		.uleb128 0x13
 5637 009a 00       		.byte	0
 5638 009b 00       		.byte	0
 5639 009c 0F       		.uleb128 0xf
 5640 009d 0D       		.uleb128 0xd
 5641 009e 00       		.byte	0
 5642 009f 03       		.uleb128 0x3
 5643 00a0 0E       		.uleb128 0xe
 5644 00a1 3A       		.uleb128 0x3a
 5645 00a2 0B       		.uleb128 0xb
 5646 00a3 3B       		.uleb128 0x3b
 5647 00a4 0B       		.uleb128 0xb
 5648 00a5 49       		.uleb128 0x49
 5649 00a6 13       		.uleb128 0x13
 5650 00a7 00       		.byte	0
 5651 00a8 00       		.byte	0
 5652 00a9 10       		.uleb128 0x10
 5653 00aa 2E       		.uleb128 0x2e
 5654 00ab 01       		.byte	0x1
 5655 00ac 03       		.uleb128 0x3
 5656 00ad 0E       		.uleb128 0xe
 5657 00ae 3A       		.uleb128 0x3a
 5658 00af 0B       		.uleb128 0xb
 5659 00b0 3B       		.uleb128 0x3b
 5660 00b1 0B       		.uleb128 0xb
 5661 00b2 27       		.uleb128 0x27
 5662 00b3 19       		.uleb128 0x19
 5663 00b4 49       		.uleb128 0x49
 5664 00b5 13       		.uleb128 0x13
 5665 00b6 20       		.uleb128 0x20
 5666 00b7 0B       		.uleb128 0xb
 5667 00b8 01       		.uleb128 0x1
 5668 00b9 13       		.uleb128 0x13
 5669 00ba 00       		.byte	0
 5670 00bb 00       		.byte	0
 5671 00bc 11       		.uleb128 0x11
 5672 00bd 34       		.uleb128 0x34
 5673 00be 00       		.byte	0
 5674 00bf 03       		.uleb128 0x3
 5675 00c0 0E       		.uleb128 0xe
 5676 00c1 3A       		.uleb128 0x3a
 5677 00c2 0B       		.uleb128 0xb
 5678 00c3 3B       		.uleb128 0x3b
 5679 00c4 0B       		.uleb128 0xb
 5680 00c5 49       		.uleb128 0x49
 5681 00c6 13       		.uleb128 0x13
 5682 00c7 00       		.byte	0
 5683 00c8 00       		.byte	0
 5684 00c9 12       		.uleb128 0x12
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 159


 5685 00ca 2E       		.uleb128 0x2e
 5686 00cb 01       		.byte	0x1
 5687 00cc 03       		.uleb128 0x3
 5688 00cd 0E       		.uleb128 0xe
 5689 00ce 3A       		.uleb128 0x3a
 5690 00cf 0B       		.uleb128 0xb
 5691 00d0 3B       		.uleb128 0x3b
 5692 00d1 0B       		.uleb128 0xb
 5693 00d2 27       		.uleb128 0x27
 5694 00d3 19       		.uleb128 0x19
 5695 00d4 20       		.uleb128 0x20
 5696 00d5 0B       		.uleb128 0xb
 5697 00d6 01       		.uleb128 0x1
 5698 00d7 13       		.uleb128 0x13
 5699 00d8 00       		.byte	0
 5700 00d9 00       		.byte	0
 5701 00da 13       		.uleb128 0x13
 5702 00db 05       		.uleb128 0x5
 5703 00dc 00       		.byte	0
 5704 00dd 03       		.uleb128 0x3
 5705 00de 0E       		.uleb128 0xe
 5706 00df 3A       		.uleb128 0x3a
 5707 00e0 0B       		.uleb128 0xb
 5708 00e1 3B       		.uleb128 0x3b
 5709 00e2 0B       		.uleb128 0xb
 5710 00e3 49       		.uleb128 0x49
 5711 00e4 13       		.uleb128 0x13
 5712 00e5 00       		.byte	0
 5713 00e6 00       		.byte	0
 5714 00e7 14       		.uleb128 0x14
 5715 00e8 2E       		.uleb128 0x2e
 5716 00e9 01       		.byte	0x1
 5717 00ea 03       		.uleb128 0x3
 5718 00eb 0E       		.uleb128 0xe
 5719 00ec 3A       		.uleb128 0x3a
 5720 00ed 0B       		.uleb128 0xb
 5721 00ee 3B       		.uleb128 0x3b
 5722 00ef 05       		.uleb128 0x5
 5723 00f0 27       		.uleb128 0x27
 5724 00f1 19       		.uleb128 0x19
 5725 00f2 49       		.uleb128 0x49
 5726 00f3 13       		.uleb128 0x13
 5727 00f4 11       		.uleb128 0x11
 5728 00f5 01       		.uleb128 0x1
 5729 00f6 12       		.uleb128 0x12
 5730 00f7 06       		.uleb128 0x6
 5731 00f8 40       		.uleb128 0x40
 5732 00f9 18       		.uleb128 0x18
 5733 00fa 9742     		.uleb128 0x2117
 5734 00fc 19       		.uleb128 0x19
 5735 00fd 01       		.uleb128 0x1
 5736 00fe 13       		.uleb128 0x13
 5737 00ff 00       		.byte	0
 5738 0100 00       		.byte	0
 5739 0101 15       		.uleb128 0x15
 5740 0102 05       		.uleb128 0x5
 5741 0103 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 160


 5742 0104 03       		.uleb128 0x3
 5743 0105 0E       		.uleb128 0xe
 5744 0106 3A       		.uleb128 0x3a
 5745 0107 0B       		.uleb128 0xb
 5746 0108 3B       		.uleb128 0x3b
 5747 0109 05       		.uleb128 0x5
 5748 010a 49       		.uleb128 0x49
 5749 010b 13       		.uleb128 0x13
 5750 010c 02       		.uleb128 0x2
 5751 010d 17       		.uleb128 0x17
 5752 010e 00       		.byte	0
 5753 010f 00       		.byte	0
 5754 0110 16       		.uleb128 0x16
 5755 0111 34       		.uleb128 0x34
 5756 0112 00       		.byte	0
 5757 0113 03       		.uleb128 0x3
 5758 0114 0E       		.uleb128 0xe
 5759 0115 3A       		.uleb128 0x3a
 5760 0116 0B       		.uleb128 0xb
 5761 0117 3B       		.uleb128 0x3b
 5762 0118 05       		.uleb128 0x5
 5763 0119 49       		.uleb128 0x49
 5764 011a 13       		.uleb128 0x13
 5765 011b 02       		.uleb128 0x2
 5766 011c 17       		.uleb128 0x17
 5767 011d 00       		.byte	0
 5768 011e 00       		.byte	0
 5769 011f 17       		.uleb128 0x17
 5770 0120 34       		.uleb128 0x34
 5771 0121 00       		.byte	0
 5772 0122 03       		.uleb128 0x3
 5773 0123 0E       		.uleb128 0xe
 5774 0124 3A       		.uleb128 0x3a
 5775 0125 0B       		.uleb128 0xb
 5776 0126 3B       		.uleb128 0x3b
 5777 0127 05       		.uleb128 0x5
 5778 0128 49       		.uleb128 0x49
 5779 0129 13       		.uleb128 0x13
 5780 012a 02       		.uleb128 0x2
 5781 012b 18       		.uleb128 0x18
 5782 012c 00       		.byte	0
 5783 012d 00       		.byte	0
 5784 012e 18       		.uleb128 0x18
 5785 012f 898201   		.uleb128 0x4109
 5786 0132 00       		.byte	0
 5787 0133 11       		.uleb128 0x11
 5788 0134 01       		.uleb128 0x1
 5789 0135 31       		.uleb128 0x31
 5790 0136 13       		.uleb128 0x13
 5791 0137 00       		.byte	0
 5792 0138 00       		.byte	0
 5793 0139 19       		.uleb128 0x19
 5794 013a 2E       		.uleb128 0x2e
 5795 013b 01       		.byte	0x1
 5796 013c 03       		.uleb128 0x3
 5797 013d 0E       		.uleb128 0xe
 5798 013e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 161


 5799 013f 0B       		.uleb128 0xb
 5800 0140 3B       		.uleb128 0x3b
 5801 0141 05       		.uleb128 0x5
 5802 0142 27       		.uleb128 0x27
 5803 0143 19       		.uleb128 0x19
 5804 0144 11       		.uleb128 0x11
 5805 0145 01       		.uleb128 0x1
 5806 0146 12       		.uleb128 0x12
 5807 0147 06       		.uleb128 0x6
 5808 0148 40       		.uleb128 0x40
 5809 0149 18       		.uleb128 0x18
 5810 014a 9742     		.uleb128 0x2117
 5811 014c 19       		.uleb128 0x19
 5812 014d 01       		.uleb128 0x1
 5813 014e 13       		.uleb128 0x13
 5814 014f 00       		.byte	0
 5815 0150 00       		.byte	0
 5816 0151 1A       		.uleb128 0x1a
 5817 0152 898201   		.uleb128 0x4109
 5818 0155 01       		.byte	0x1
 5819 0156 11       		.uleb128 0x11
 5820 0157 01       		.uleb128 0x1
 5821 0158 31       		.uleb128 0x31
 5822 0159 13       		.uleb128 0x13
 5823 015a 00       		.byte	0
 5824 015b 00       		.byte	0
 5825 015c 1B       		.uleb128 0x1b
 5826 015d 8A8201   		.uleb128 0x410a
 5827 0160 00       		.byte	0
 5828 0161 02       		.uleb128 0x2
 5829 0162 18       		.uleb128 0x18
 5830 0163 9142     		.uleb128 0x2111
 5831 0165 18       		.uleb128 0x18
 5832 0166 00       		.byte	0
 5833 0167 00       		.byte	0
 5834 0168 1C       		.uleb128 0x1c
 5835 0169 0B       		.uleb128 0xb
 5836 016a 01       		.byte	0x1
 5837 016b 11       		.uleb128 0x11
 5838 016c 01       		.uleb128 0x1
 5839 016d 12       		.uleb128 0x12
 5840 016e 06       		.uleb128 0x6
 5841 016f 01       		.uleb128 0x1
 5842 0170 13       		.uleb128 0x13
 5843 0171 00       		.byte	0
 5844 0172 00       		.byte	0
 5845 0173 1D       		.uleb128 0x1d
 5846 0174 898201   		.uleb128 0x4109
 5847 0177 01       		.byte	0x1
 5848 0178 11       		.uleb128 0x11
 5849 0179 01       		.uleb128 0x1
 5850 017a 31       		.uleb128 0x31
 5851 017b 13       		.uleb128 0x13
 5852 017c 01       		.uleb128 0x1
 5853 017d 13       		.uleb128 0x13
 5854 017e 00       		.byte	0
 5855 017f 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 162


 5856 0180 1E       		.uleb128 0x1e
 5857 0181 2E       		.uleb128 0x2e
 5858 0182 01       		.byte	0x1
 5859 0183 3F       		.uleb128 0x3f
 5860 0184 19       		.uleb128 0x19
 5861 0185 03       		.uleb128 0x3
 5862 0186 0E       		.uleb128 0xe
 5863 0187 3A       		.uleb128 0x3a
 5864 0188 0B       		.uleb128 0xb
 5865 0189 3B       		.uleb128 0x3b
 5866 018a 0B       		.uleb128 0xb
 5867 018b 27       		.uleb128 0x27
 5868 018c 19       		.uleb128 0x19
 5869 018d 49       		.uleb128 0x49
 5870 018e 13       		.uleb128 0x13
 5871 018f 11       		.uleb128 0x11
 5872 0190 01       		.uleb128 0x1
 5873 0191 12       		.uleb128 0x12
 5874 0192 06       		.uleb128 0x6
 5875 0193 40       		.uleb128 0x40
 5876 0194 18       		.uleb128 0x18
 5877 0195 9742     		.uleb128 0x2117
 5878 0197 19       		.uleb128 0x19
 5879 0198 01       		.uleb128 0x1
 5880 0199 13       		.uleb128 0x13
 5881 019a 00       		.byte	0
 5882 019b 00       		.byte	0
 5883 019c 1F       		.uleb128 0x1f
 5884 019d 05       		.uleb128 0x5
 5885 019e 00       		.byte	0
 5886 019f 03       		.uleb128 0x3
 5887 01a0 0E       		.uleb128 0xe
 5888 01a1 3A       		.uleb128 0x3a
 5889 01a2 0B       		.uleb128 0xb
 5890 01a3 3B       		.uleb128 0x3b
 5891 01a4 0B       		.uleb128 0xb
 5892 01a5 49       		.uleb128 0x49
 5893 01a6 13       		.uleb128 0x13
 5894 01a7 02       		.uleb128 0x2
 5895 01a8 17       		.uleb128 0x17
 5896 01a9 00       		.byte	0
 5897 01aa 00       		.byte	0
 5898 01ab 20       		.uleb128 0x20
 5899 01ac 05       		.uleb128 0x5
 5900 01ad 00       		.byte	0
 5901 01ae 03       		.uleb128 0x3
 5902 01af 0E       		.uleb128 0xe
 5903 01b0 3A       		.uleb128 0x3a
 5904 01b1 0B       		.uleb128 0xb
 5905 01b2 3B       		.uleb128 0x3b
 5906 01b3 05       		.uleb128 0x5
 5907 01b4 49       		.uleb128 0x49
 5908 01b5 13       		.uleb128 0x13
 5909 01b6 02       		.uleb128 0x2
 5910 01b7 18       		.uleb128 0x18
 5911 01b8 00       		.byte	0
 5912 01b9 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 163


 5913 01ba 21       		.uleb128 0x21
 5914 01bb 2E       		.uleb128 0x2e
 5915 01bc 01       		.byte	0x1
 5916 01bd 3F       		.uleb128 0x3f
 5917 01be 19       		.uleb128 0x19
 5918 01bf 03       		.uleb128 0x3
 5919 01c0 0E       		.uleb128 0xe
 5920 01c1 3A       		.uleb128 0x3a
 5921 01c2 0B       		.uleb128 0xb
 5922 01c3 3B       		.uleb128 0x3b
 5923 01c4 05       		.uleb128 0x5
 5924 01c5 27       		.uleb128 0x27
 5925 01c6 19       		.uleb128 0x19
 5926 01c7 49       		.uleb128 0x49
 5927 01c8 13       		.uleb128 0x13
 5928 01c9 11       		.uleb128 0x11
 5929 01ca 01       		.uleb128 0x1
 5930 01cb 12       		.uleb128 0x12
 5931 01cc 06       		.uleb128 0x6
 5932 01cd 40       		.uleb128 0x40
 5933 01ce 18       		.uleb128 0x18
 5934 01cf 9742     		.uleb128 0x2117
 5935 01d1 19       		.uleb128 0x19
 5936 01d2 01       		.uleb128 0x1
 5937 01d3 13       		.uleb128 0x13
 5938 01d4 00       		.byte	0
 5939 01d5 00       		.byte	0
 5940 01d6 22       		.uleb128 0x22
 5941 01d7 34       		.uleb128 0x34
 5942 01d8 00       		.byte	0
 5943 01d9 03       		.uleb128 0x3
 5944 01da 0E       		.uleb128 0xe
 5945 01db 3A       		.uleb128 0x3a
 5946 01dc 0B       		.uleb128 0xb
 5947 01dd 3B       		.uleb128 0x3b
 5948 01de 05       		.uleb128 0x5
 5949 01df 49       		.uleb128 0x49
 5950 01e0 13       		.uleb128 0x13
 5951 01e1 1C       		.uleb128 0x1c
 5952 01e2 0B       		.uleb128 0xb
 5953 01e3 00       		.byte	0
 5954 01e4 00       		.byte	0
 5955 01e5 23       		.uleb128 0x23
 5956 01e6 34       		.uleb128 0x34
 5957 01e7 00       		.byte	0
 5958 01e8 03       		.uleb128 0x3
 5959 01e9 0E       		.uleb128 0xe
 5960 01ea 3A       		.uleb128 0x3a
 5961 01eb 0B       		.uleb128 0xb
 5962 01ec 3B       		.uleb128 0x3b
 5963 01ed 05       		.uleb128 0x5
 5964 01ee 49       		.uleb128 0x49
 5965 01ef 13       		.uleb128 0x13
 5966 01f0 00       		.byte	0
 5967 01f1 00       		.byte	0
 5968 01f2 24       		.uleb128 0x24
 5969 01f3 1D       		.uleb128 0x1d
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 164


 5970 01f4 01       		.byte	0x1
 5971 01f5 31       		.uleb128 0x31
 5972 01f6 13       		.uleb128 0x13
 5973 01f7 11       		.uleb128 0x11
 5974 01f8 01       		.uleb128 0x1
 5975 01f9 12       		.uleb128 0x12
 5976 01fa 06       		.uleb128 0x6
 5977 01fb 58       		.uleb128 0x58
 5978 01fc 0B       		.uleb128 0xb
 5979 01fd 59       		.uleb128 0x59
 5980 01fe 05       		.uleb128 0x5
 5981 01ff 01       		.uleb128 0x1
 5982 0200 13       		.uleb128 0x13
 5983 0201 00       		.byte	0
 5984 0202 00       		.byte	0
 5985 0203 25       		.uleb128 0x25
 5986 0204 0B       		.uleb128 0xb
 5987 0205 01       		.byte	0x1
 5988 0206 11       		.uleb128 0x11
 5989 0207 01       		.uleb128 0x1
 5990 0208 12       		.uleb128 0x12
 5991 0209 06       		.uleb128 0x6
 5992 020a 00       		.byte	0
 5993 020b 00       		.byte	0
 5994 020c 26       		.uleb128 0x26
 5995 020d 34       		.uleb128 0x34
 5996 020e 00       		.byte	0
 5997 020f 31       		.uleb128 0x31
 5998 0210 13       		.uleb128 0x13
 5999 0211 00       		.byte	0
 6000 0212 00       		.byte	0
 6001 0213 27       		.uleb128 0x27
 6002 0214 0B       		.uleb128 0xb
 6003 0215 01       		.byte	0x1
 6004 0216 55       		.uleb128 0x55
 6005 0217 17       		.uleb128 0x17
 6006 0218 01       		.uleb128 0x1
 6007 0219 13       		.uleb128 0x13
 6008 021a 00       		.byte	0
 6009 021b 00       		.byte	0
 6010 021c 28       		.uleb128 0x28
 6011 021d 1D       		.uleb128 0x1d
 6012 021e 01       		.byte	0x1
 6013 021f 31       		.uleb128 0x31
 6014 0220 13       		.uleb128 0x13
 6015 0221 11       		.uleb128 0x11
 6016 0222 01       		.uleb128 0x1
 6017 0223 12       		.uleb128 0x12
 6018 0224 06       		.uleb128 0x6
 6019 0225 58       		.uleb128 0x58
 6020 0226 0B       		.uleb128 0xb
 6021 0227 59       		.uleb128 0x59
 6022 0228 05       		.uleb128 0x5
 6023 0229 00       		.byte	0
 6024 022a 00       		.byte	0
 6025 022b 29       		.uleb128 0x29
 6026 022c 05       		.uleb128 0x5
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 165


 6027 022d 00       		.byte	0
 6028 022e 31       		.uleb128 0x31
 6029 022f 13       		.uleb128 0x13
 6030 0230 02       		.uleb128 0x2
 6031 0231 17       		.uleb128 0x17
 6032 0232 00       		.byte	0
 6033 0233 00       		.byte	0
 6034 0234 2A       		.uleb128 0x2a
 6035 0235 0B       		.uleb128 0xb
 6036 0236 01       		.byte	0x1
 6037 0237 55       		.uleb128 0x55
 6038 0238 17       		.uleb128 0x17
 6039 0239 00       		.byte	0
 6040 023a 00       		.byte	0
 6041 023b 2B       		.uleb128 0x2b
 6042 023c 2E       		.uleb128 0x2e
 6043 023d 01       		.byte	0x1
 6044 023e 3F       		.uleb128 0x3f
 6045 023f 19       		.uleb128 0x19
 6046 0240 03       		.uleb128 0x3
 6047 0241 0E       		.uleb128 0xe
 6048 0242 3A       		.uleb128 0x3a
 6049 0243 0B       		.uleb128 0xb
 6050 0244 3B       		.uleb128 0x3b
 6051 0245 05       		.uleb128 0x5
 6052 0246 27       		.uleb128 0x27
 6053 0247 19       		.uleb128 0x19
 6054 0248 11       		.uleb128 0x11
 6055 0249 01       		.uleb128 0x1
 6056 024a 12       		.uleb128 0x12
 6057 024b 06       		.uleb128 0x6
 6058 024c 40       		.uleb128 0x40
 6059 024d 18       		.uleb128 0x18
 6060 024e 9742     		.uleb128 0x2117
 6061 0250 19       		.uleb128 0x19
 6062 0251 01       		.uleb128 0x1
 6063 0252 13       		.uleb128 0x13
 6064 0253 00       		.byte	0
 6065 0254 00       		.byte	0
 6066 0255 2C       		.uleb128 0x2c
 6067 0256 34       		.uleb128 0x34
 6068 0257 00       		.byte	0
 6069 0258 03       		.uleb128 0x3
 6070 0259 08       		.uleb128 0x8
 6071 025a 3A       		.uleb128 0x3a
 6072 025b 0B       		.uleb128 0xb
 6073 025c 3B       		.uleb128 0x3b
 6074 025d 05       		.uleb128 0x5
 6075 025e 49       		.uleb128 0x49
 6076 025f 13       		.uleb128 0x13
 6077 0260 02       		.uleb128 0x2
 6078 0261 17       		.uleb128 0x17
 6079 0262 00       		.byte	0
 6080 0263 00       		.byte	0
 6081 0264 2D       		.uleb128 0x2d
 6082 0265 34       		.uleb128 0x34
 6083 0266 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 166


 6084 0267 03       		.uleb128 0x3
 6085 0268 0E       		.uleb128 0xe
 6086 0269 3A       		.uleb128 0x3a
 6087 026a 0B       		.uleb128 0xb
 6088 026b 3B       		.uleb128 0x3b
 6089 026c 05       		.uleb128 0x5
 6090 026d 49       		.uleb128 0x49
 6091 026e 13       		.uleb128 0x13
 6092 026f 3F       		.uleb128 0x3f
 6093 0270 19       		.uleb128 0x19
 6094 0271 3C       		.uleb128 0x3c
 6095 0272 19       		.uleb128 0x19
 6096 0273 00       		.byte	0
 6097 0274 00       		.byte	0
 6098 0275 2E       		.uleb128 0x2e
 6099 0276 01       		.uleb128 0x1
 6100 0277 01       		.byte	0x1
 6101 0278 49       		.uleb128 0x49
 6102 0279 13       		.uleb128 0x13
 6103 027a 01       		.uleb128 0x1
 6104 027b 13       		.uleb128 0x13
 6105 027c 00       		.byte	0
 6106 027d 00       		.byte	0
 6107 027e 2F       		.uleb128 0x2f
 6108 027f 21       		.uleb128 0x21
 6109 0280 00       		.byte	0
 6110 0281 49       		.uleb128 0x49
 6111 0282 13       		.uleb128 0x13
 6112 0283 2F       		.uleb128 0x2f
 6113 0284 0B       		.uleb128 0xb
 6114 0285 00       		.byte	0
 6115 0286 00       		.byte	0
 6116 0287 30       		.uleb128 0x30
 6117 0288 34       		.uleb128 0x34
 6118 0289 00       		.byte	0
 6119 028a 03       		.uleb128 0x3
 6120 028b 0E       		.uleb128 0xe
 6121 028c 3A       		.uleb128 0x3a
 6122 028d 0B       		.uleb128 0xb
 6123 028e 3B       		.uleb128 0x3b
 6124 028f 0B       		.uleb128 0xb
 6125 0290 49       		.uleb128 0x49
 6126 0291 13       		.uleb128 0x13
 6127 0292 3F       		.uleb128 0x3f
 6128 0293 19       		.uleb128 0x19
 6129 0294 02       		.uleb128 0x2
 6130 0295 18       		.uleb128 0x18
 6131 0296 00       		.byte	0
 6132 0297 00       		.byte	0
 6133 0298 31       		.uleb128 0x31
 6134 0299 2E       		.uleb128 0x2e
 6135 029a 00       		.byte	0
 6136 029b 3F       		.uleb128 0x3f
 6137 029c 19       		.uleb128 0x19
 6138 029d 3C       		.uleb128 0x3c
 6139 029e 19       		.uleb128 0x19
 6140 029f 6E       		.uleb128 0x6e
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 167


 6141 02a0 0E       		.uleb128 0xe
 6142 02a1 03       		.uleb128 0x3
 6143 02a2 0E       		.uleb128 0xe
 6144 02a3 3A       		.uleb128 0x3a
 6145 02a4 0B       		.uleb128 0xb
 6146 02a5 3B       		.uleb128 0x3b
 6147 02a6 0B       		.uleb128 0xb
 6148 02a7 00       		.byte	0
 6149 02a8 00       		.byte	0
 6150 02a9 32       		.uleb128 0x32
 6151 02aa 2E       		.uleb128 0x2e
 6152 02ab 00       		.byte	0
 6153 02ac 3F       		.uleb128 0x3f
 6154 02ad 19       		.uleb128 0x19
 6155 02ae 3C       		.uleb128 0x3c
 6156 02af 19       		.uleb128 0x19
 6157 02b0 6E       		.uleb128 0x6e
 6158 02b1 0E       		.uleb128 0xe
 6159 02b2 03       		.uleb128 0x3
 6160 02b3 0E       		.uleb128 0xe
 6161 02b4 3A       		.uleb128 0x3a
 6162 02b5 0B       		.uleb128 0xb
 6163 02b6 3B       		.uleb128 0x3b
 6164 02b7 05       		.uleb128 0x5
 6165 02b8 00       		.byte	0
 6166 02b9 00       		.byte	0
 6167 02ba 33       		.uleb128 0x33
 6168 02bb 2E       		.uleb128 0x2e
 6169 02bc 00       		.byte	0
 6170 02bd 3F       		.uleb128 0x3f
 6171 02be 19       		.uleb128 0x19
 6172 02bf 3C       		.uleb128 0x3c
 6173 02c0 19       		.uleb128 0x19
 6174 02c1 6E       		.uleb128 0x6e
 6175 02c2 0E       		.uleb128 0xe
 6176 02c3 03       		.uleb128 0x3
 6177 02c4 0E       		.uleb128 0xe
 6178 02c5 00       		.byte	0
 6179 02c6 00       		.byte	0
 6180 02c7 00       		.byte	0
 6181              		.section	.debug_loc,"",%progbits
 6182              	.Ldebug_loc0:
 6183              	.LLST0:
 6184 0000 00000000 		.4byte	.LVL0
 6185 0004 08000000 		.4byte	.LVL1
 6186 0008 0100     		.2byte	0x1
 6187 000a 50       		.byte	0x50
 6188 000b 08000000 		.4byte	.LVL1
 6189 000f 0E000000 		.4byte	.LVL3
 6190 0013 0400     		.2byte	0x4
 6191 0015 F3       		.byte	0xf3
 6192 0016 01       		.uleb128 0x1
 6193 0017 50       		.byte	0x50
 6194 0018 9F       		.byte	0x9f
 6195 0019 0E000000 		.4byte	.LVL3
 6196 001d 10000000 		.4byte	.LVL4
 6197 0021 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 168


 6198 0023 50       		.byte	0x50
 6199 0024 10000000 		.4byte	.LVL4
 6200 0028 12000000 		.4byte	.LFE88
 6201 002c 0400     		.2byte	0x4
 6202 002e F3       		.byte	0xf3
 6203 002f 01       		.uleb128 0x1
 6204 0030 50       		.byte	0x50
 6205 0031 9F       		.byte	0x9f
 6206 0032 00000000 		.4byte	0
 6207 0036 00000000 		.4byte	0
 6208              	.LLST1:
 6209 003a 0C000000 		.4byte	.LVL2
 6210 003e 0E000000 		.4byte	.LVL3
 6211 0042 0100     		.2byte	0x1
 6212 0044 50       		.byte	0x50
 6213 0045 10000000 		.4byte	.LVL4
 6214 0049 12000000 		.4byte	.LFE88
 6215 004d 0100     		.2byte	0x1
 6216 004f 50       		.byte	0x50
 6217 0050 00000000 		.4byte	0
 6218 0054 00000000 		.4byte	0
 6219              	.LLST2:
 6220 0058 00000000 		.4byte	.LVL5
 6221 005c 07000000 		.4byte	.LVL6-1
 6222 0060 0100     		.2byte	0x1
 6223 0062 50       		.byte	0x50
 6224 0063 07000000 		.4byte	.LVL6-1
 6225 0067 12000000 		.4byte	.LVL7
 6226 006b 0100     		.2byte	0x1
 6227 006d 54       		.byte	0x54
 6228 006e 12000000 		.4byte	.LVL7
 6229 0072 14000000 		.4byte	.LVL8
 6230 0076 0400     		.2byte	0x4
 6231 0078 F3       		.byte	0xf3
 6232 0079 01       		.uleb128 0x1
 6233 007a 50       		.byte	0x50
 6234 007b 9F       		.byte	0x9f
 6235 007c 14000000 		.4byte	.LVL8
 6236 0080 16000000 		.4byte	.LVL9
 6237 0084 0100     		.2byte	0x1
 6238 0086 54       		.byte	0x54
 6239 0087 16000000 		.4byte	.LVL9
 6240 008b 1E000000 		.4byte	.LFE94
 6241 008f 0400     		.2byte	0x4
 6242 0091 F3       		.byte	0xf3
 6243 0092 01       		.uleb128 0x1
 6244 0093 50       		.byte	0x50
 6245 0094 9F       		.byte	0x9f
 6246 0095 00000000 		.4byte	0
 6247 0099 00000000 		.4byte	0
 6248              	.LLST3:
 6249 009d 00000000 		.4byte	.LVL11
 6250 00a1 07000000 		.4byte	.LVL12-1
 6251 00a5 0100     		.2byte	0x1
 6252 00a7 50       		.byte	0x50
 6253 00a8 07000000 		.4byte	.LVL12-1
 6254 00ac 0E000000 		.4byte	.LVL13
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 169


 6255 00b0 0100     		.2byte	0x1
 6256 00b2 54       		.byte	0x54
 6257 00b3 0E000000 		.4byte	.LVL13
 6258 00b7 10000000 		.4byte	.LVL14
 6259 00bb 0400     		.2byte	0x4
 6260 00bd F3       		.byte	0xf3
 6261 00be 01       		.uleb128 0x1
 6262 00bf 50       		.byte	0x50
 6263 00c0 9F       		.byte	0x9f
 6264 00c1 10000000 		.4byte	.LVL14
 6265 00c5 12000000 		.4byte	.LVL15
 6266 00c9 0100     		.2byte	0x1
 6267 00cb 54       		.byte	0x54
 6268 00cc 12000000 		.4byte	.LVL15
 6269 00d0 1A000000 		.4byte	.LFE92
 6270 00d4 0400     		.2byte	0x4
 6271 00d6 F3       		.byte	0xf3
 6272 00d7 01       		.uleb128 0x1
 6273 00d8 50       		.byte	0x50
 6274 00d9 9F       		.byte	0x9f
 6275 00da 00000000 		.4byte	0
 6276 00de 00000000 		.4byte	0
 6277              	.LLST4:
 6278 00e2 00000000 		.4byte	.LVL17
 6279 00e6 12000000 		.4byte	.LVL21
 6280 00ea 0100     		.2byte	0x1
 6281 00ec 50       		.byte	0x50
 6282 00ed 12000000 		.4byte	.LVL21
 6283 00f1 1C000000 		.4byte	.LVL23
 6284 00f5 0100     		.2byte	0x1
 6285 00f7 54       		.byte	0x54
 6286 00f8 1C000000 		.4byte	.LVL23
 6287 00fc 20000000 		.4byte	.LVL24
 6288 0100 0100     		.2byte	0x1
 6289 0102 50       		.byte	0x50
 6290 0103 20000000 		.4byte	.LVL24
 6291 0107 3A000000 		.4byte	.LVL26
 6292 010b 0100     		.2byte	0x1
 6293 010d 54       		.byte	0x54
 6294 010e 3A000000 		.4byte	.LVL26
 6295 0112 3C000000 		.4byte	.LVL27
 6296 0116 0100     		.2byte	0x1
 6297 0118 50       		.byte	0x50
 6298 0119 3C000000 		.4byte	.LVL27
 6299 011d 62000000 		.4byte	.LVL30
 6300 0121 0100     		.2byte	0x1
 6301 0123 54       		.byte	0x54
 6302 0124 62000000 		.4byte	.LVL30
 6303 0128 64000000 		.4byte	.LVL31
 6304 012c 0100     		.2byte	0x1
 6305 012e 50       		.byte	0x50
 6306 012f 64000000 		.4byte	.LVL31
 6307 0133 76000000 		.4byte	.LFE89
 6308 0137 0100     		.2byte	0x1
 6309 0139 54       		.byte	0x54
 6310 013a 00000000 		.4byte	0
 6311 013e 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 170


 6312              	.LLST5:
 6313 0142 00000000 		.4byte	.LVL17
 6314 0146 15000000 		.4byte	.LVL22-1
 6315 014a 0100     		.2byte	0x1
 6316 014c 51       		.byte	0x51
 6317 014d 15000000 		.4byte	.LVL22-1
 6318 0151 1C000000 		.4byte	.LVL23
 6319 0155 0400     		.2byte	0x4
 6320 0157 F3       		.byte	0xf3
 6321 0158 01       		.uleb128 0x1
 6322 0159 51       		.byte	0x51
 6323 015a 9F       		.byte	0x9f
 6324 015b 1C000000 		.4byte	.LVL23
 6325 015f 23000000 		.4byte	.LVL25-1
 6326 0163 0100     		.2byte	0x1
 6327 0165 51       		.byte	0x51
 6328 0166 23000000 		.4byte	.LVL25-1
 6329 016a 3A000000 		.4byte	.LVL26
 6330 016e 0400     		.2byte	0x4
 6331 0170 F3       		.byte	0xf3
 6332 0171 01       		.uleb128 0x1
 6333 0172 51       		.byte	0x51
 6334 0173 9F       		.byte	0x9f
 6335 0174 3A000000 		.4byte	.LVL26
 6336 0178 3F000000 		.4byte	.LVL28-1
 6337 017c 0100     		.2byte	0x1
 6338 017e 51       		.byte	0x51
 6339 017f 3F000000 		.4byte	.LVL28-1
 6340 0183 62000000 		.4byte	.LVL30
 6341 0187 0400     		.2byte	0x4
 6342 0189 F3       		.byte	0xf3
 6343 018a 01       		.uleb128 0x1
 6344 018b 51       		.byte	0x51
 6345 018c 9F       		.byte	0x9f
 6346 018d 62000000 		.4byte	.LVL30
 6347 0191 66000000 		.4byte	.LVL32
 6348 0195 0100     		.2byte	0x1
 6349 0197 51       		.byte	0x51
 6350 0198 66000000 		.4byte	.LVL32
 6351 019c 76000000 		.4byte	.LFE89
 6352 01a0 0400     		.2byte	0x4
 6353 01a2 F3       		.byte	0xf3
 6354 01a3 01       		.uleb128 0x1
 6355 01a4 51       		.byte	0x51
 6356 01a5 9F       		.byte	0x9f
 6357 01a6 00000000 		.4byte	0
 6358 01aa 00000000 		.4byte	0
 6359              	.LLST6:
 6360 01ae 00000000 		.4byte	.LVL17
 6361 01b2 0A000000 		.4byte	.LVL20
 6362 01b6 0100     		.2byte	0x1
 6363 01b8 52       		.byte	0x52
 6364 01b9 0A000000 		.4byte	.LVL20
 6365 01bd 76000000 		.4byte	.LFE89
 6366 01c1 0100     		.2byte	0x1
 6367 01c3 56       		.byte	0x56
 6368 01c4 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 171


 6369 01c8 00000000 		.4byte	0
 6370              	.LLST7:
 6371 01cc 06000000 		.4byte	.LVL18
 6372 01d0 16000000 		.4byte	.LVL22
 6373 01d4 0200     		.2byte	0x2
 6374 01d6 30       		.byte	0x30
 6375 01d7 9F       		.byte	0x9f
 6376 01d8 16000000 		.4byte	.LVL22
 6377 01dc 1C000000 		.4byte	.LVL23
 6378 01e0 0100     		.2byte	0x1
 6379 01e2 50       		.byte	0x50
 6380 01e3 1C000000 		.4byte	.LVL23
 6381 01e7 70000000 		.4byte	.LVL33
 6382 01eb 0200     		.2byte	0x2
 6383 01ed 30       		.byte	0x30
 6384 01ee 9F       		.byte	0x9f
 6385 01ef 70000000 		.4byte	.LVL33
 6386 01f3 76000000 		.4byte	.LFE89
 6387 01f7 0100     		.2byte	0x1
 6388 01f9 50       		.byte	0x50
 6389 01fa 00000000 		.4byte	0
 6390 01fe 00000000 		.4byte	0
 6391              	.LLST8:
 6392 0202 08000000 		.4byte	.LVL19
 6393 0206 72000000 		.4byte	.LVL34
 6394 020a 0100     		.2byte	0x1
 6395 020c 55       		.byte	0x55
 6396 020d 72000000 		.4byte	.LVL34
 6397 0211 76000000 		.4byte	.LFE89
 6398 0215 0300     		.2byte	0x3
 6399 0217 75       		.byte	0x75
 6400 0218 7F       		.sleb128 -1
 6401 0219 9F       		.byte	0x9f
 6402 021a 00000000 		.4byte	0
 6403 021e 00000000 		.4byte	0
 6404              	.LLST9:
 6405 0222 00000000 		.4byte	.LVL35
 6406 0226 1C000000 		.4byte	.LVL37
 6407 022a 0100     		.2byte	0x1
 6408 022c 50       		.byte	0x50
 6409 022d 1C000000 		.4byte	.LVL37
 6410 0231 22000000 		.4byte	.LVL39
 6411 0235 0400     		.2byte	0x4
 6412 0237 F3       		.byte	0xf3
 6413 0238 01       		.uleb128 0x1
 6414 0239 50       		.byte	0x50
 6415 023a 9F       		.byte	0x9f
 6416 023b 22000000 		.4byte	.LVL39
 6417 023f 24000000 		.4byte	.LFE90
 6418 0243 0100     		.2byte	0x1
 6419 0245 50       		.byte	0x50
 6420 0246 00000000 		.4byte	0
 6421 024a 00000000 		.4byte	0
 6422              	.LLST10:
 6423 024e 00000000 		.4byte	.LVL35
 6424 0252 1A000000 		.4byte	.LVL36
 6425 0256 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 172


 6426 0258 51       		.byte	0x51
 6427 0259 1A000000 		.4byte	.LVL36
 6428 025d 22000000 		.4byte	.LVL39
 6429 0261 0100     		.2byte	0x1
 6430 0263 54       		.byte	0x54
 6431 0264 22000000 		.4byte	.LVL39
 6432 0268 24000000 		.4byte	.LFE90
 6433 026c 0100     		.2byte	0x1
 6434 026e 51       		.byte	0x51
 6435 026f 00000000 		.4byte	0
 6436 0273 00000000 		.4byte	0
 6437              	.LLST11:
 6438 0277 00000000 		.4byte	.LVL40
 6439 027b 07000000 		.4byte	.LVL41-1
 6440 027f 0100     		.2byte	0x1
 6441 0281 50       		.byte	0x50
 6442 0282 07000000 		.4byte	.LVL41-1
 6443 0286 66000000 		.4byte	.LFE91
 6444 028a 0100     		.2byte	0x1
 6445 028c 55       		.byte	0x55
 6446 028d 00000000 		.4byte	0
 6447 0291 00000000 		.4byte	0
 6448              	.LLST12:
 6449 0295 0E000000 		.4byte	.LVL42
 6450 0299 24000000 		.4byte	.LVL45
 6451 029d 0100     		.2byte	0x1
 6452 029f 54       		.byte	0x54
 6453 02a0 26000000 		.4byte	.LVL46
 6454 02a4 3C000000 		.4byte	.LVL49
 6455 02a8 0100     		.2byte	0x1
 6456 02aa 54       		.byte	0x54
 6457 02ab 00000000 		.4byte	0
 6458 02af 00000000 		.4byte	0
 6459              	.LLST13:
 6460 02b3 3E000000 		.4byte	.LVL50
 6461 02b7 54000000 		.4byte	.LVL53
 6462 02bb 0100     		.2byte	0x1
 6463 02bd 54       		.byte	0x54
 6464 02be 56000000 		.4byte	.LVL54
 6465 02c2 66000000 		.4byte	.LFE91
 6466 02c6 0100     		.2byte	0x1
 6467 02c8 54       		.byte	0x54
 6468 02c9 00000000 		.4byte	0
 6469 02cd 00000000 		.4byte	0
 6470              	.LLST14:
 6471 02d1 00000000 		.4byte	.LVL56
 6472 02d5 09000000 		.4byte	.LVL58-1
 6473 02d9 0100     		.2byte	0x1
 6474 02db 50       		.byte	0x50
 6475 02dc 09000000 		.4byte	.LVL58-1
 6476 02e0 68000000 		.4byte	.LVL63
 6477 02e4 0100     		.2byte	0x1
 6478 02e6 54       		.byte	0x54
 6479 02e7 68000000 		.4byte	.LVL63
 6480 02eb 6C000000 		.4byte	.LFE68
 6481 02ef 0400     		.2byte	0x4
 6482 02f1 F3       		.byte	0xf3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 173


 6483 02f2 01       		.uleb128 0x1
 6484 02f3 50       		.byte	0x50
 6485 02f4 9F       		.byte	0x9f
 6486 02f5 00000000 		.4byte	0
 6487 02f9 00000000 		.4byte	0
 6488              	.LLST15:
 6489 02fd 00000000 		.4byte	.LVL56
 6490 0301 09000000 		.4byte	.LVL58-1
 6491 0305 0100     		.2byte	0x1
 6492 0307 51       		.byte	0x51
 6493 0308 09000000 		.4byte	.LVL58-1
 6494 030c 68000000 		.4byte	.LVL63
 6495 0310 0100     		.2byte	0x1
 6496 0312 55       		.byte	0x55
 6497 0313 68000000 		.4byte	.LVL63
 6498 0317 6C000000 		.4byte	.LFE68
 6499 031b 0400     		.2byte	0x4
 6500 031d F3       		.byte	0xf3
 6501 031e 01       		.uleb128 0x1
 6502 031f 51       		.byte	0x51
 6503 0320 9F       		.byte	0x9f
 6504 0321 00000000 		.4byte	0
 6505 0325 00000000 		.4byte	0
 6506              	.LLST16:
 6507 0329 06000000 		.4byte	.LVL57
 6508 032d 09000000 		.4byte	.LVL58-1
 6509 0331 0100     		.2byte	0x1
 6510 0333 50       		.byte	0x50
 6511 0334 09000000 		.4byte	.LVL58-1
 6512 0338 68000000 		.4byte	.LVL63
 6513 033c 0100     		.2byte	0x1
 6514 033e 54       		.byte	0x54
 6515 033f 68000000 		.4byte	.LVL63
 6516 0343 6C000000 		.4byte	.LFE68
 6517 0347 0400     		.2byte	0x4
 6518 0349 F3       		.byte	0xf3
 6519 034a 01       		.uleb128 0x1
 6520 034b 50       		.byte	0x50
 6521 034c 9F       		.byte	0x9f
 6522 034d 00000000 		.4byte	0
 6523 0351 00000000 		.4byte	0
 6524              	.LLST17:
 6525 0355 00000000 		.4byte	.LVL64
 6526 0359 16000000 		.4byte	.LVL67
 6527 035d 0100     		.2byte	0x1
 6528 035f 50       		.byte	0x50
 6529 0360 16000000 		.4byte	.LVL67
 6530 0364 19000000 		.4byte	.LVL68-1
 6531 0368 0200     		.2byte	0x2
 6532 036a 70       		.byte	0x70
 6533 036b 3C       		.sleb128 60
 6534 036c 19000000 		.4byte	.LVL68-1
 6535 0370 1C000000 		.4byte	.LFE70
 6536 0374 0400     		.2byte	0x4
 6537 0376 F3       		.byte	0xf3
 6538 0377 01       		.uleb128 0x1
 6539 0378 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 174


 6540 0379 9F       		.byte	0x9f
 6541 037a 00000000 		.4byte	0
 6542 037e 00000000 		.4byte	0
 6543              	.LLST18:
 6544 0382 00000000 		.4byte	.LVL64
 6545 0386 14000000 		.4byte	.LVL66
 6546 038a 0100     		.2byte	0x1
 6547 038c 51       		.byte	0x51
 6548 038d 14000000 		.4byte	.LVL66
 6549 0391 1C000000 		.4byte	.LFE70
 6550 0395 0100     		.2byte	0x1
 6551 0397 54       		.byte	0x54
 6552 0398 00000000 		.4byte	0
 6553 039c 00000000 		.4byte	0
 6554              	.LLST19:
 6555 03a0 00000000 		.4byte	.LVL64
 6556 03a4 19000000 		.4byte	.LVL68-1
 6557 03a8 0100     		.2byte	0x1
 6558 03aa 52       		.byte	0x52
 6559 03ab 19000000 		.4byte	.LVL68-1
 6560 03af 1C000000 		.4byte	.LFE70
 6561 03b3 0400     		.2byte	0x4
 6562 03b5 F3       		.byte	0xf3
 6563 03b6 01       		.uleb128 0x1
 6564 03b7 52       		.byte	0x52
 6565 03b8 9F       		.byte	0x9f
 6566 03b9 00000000 		.4byte	0
 6567 03bd 00000000 		.4byte	0
 6568              	.LLST20:
 6569 03c1 00000000 		.4byte	.LVL64
 6570 03c5 04000000 		.4byte	.LVL65
 6571 03c9 0100     		.2byte	0x1
 6572 03cb 53       		.byte	0x53
 6573 03cc 04000000 		.4byte	.LVL65
 6574 03d0 1C000000 		.4byte	.LFE70
 6575 03d4 0400     		.2byte	0x4
 6576 03d6 F3       		.byte	0xf3
 6577 03d7 01       		.uleb128 0x1
 6578 03d8 53       		.byte	0x53
 6579 03d9 9F       		.byte	0x9f
 6580 03da 00000000 		.4byte	0
 6581 03de 00000000 		.4byte	0
 6582              	.LLST21:
 6583 03e2 00000000 		.4byte	.LVL69
 6584 03e6 0E000000 		.4byte	.LVL70
 6585 03ea 0100     		.2byte	0x1
 6586 03ec 50       		.byte	0x50
 6587 03ed 0E000000 		.4byte	.LVL70
 6588 03f1 2E000000 		.4byte	.LFE69
 6589 03f5 0100     		.2byte	0x1
 6590 03f7 55       		.byte	0x55
 6591 03f8 00000000 		.4byte	0
 6592 03fc 00000000 		.4byte	0
 6593              	.LLST22:
 6594 0400 00000000 		.4byte	.LVL69
 6595 0404 13000000 		.4byte	.LVL72-1
 6596 0408 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 175


 6597 040a 51       		.byte	0x51
 6598 040b 13000000 		.4byte	.LVL72-1
 6599 040f 2E000000 		.4byte	.LFE69
 6600 0413 0100     		.2byte	0x1
 6601 0415 56       		.byte	0x56
 6602 0416 00000000 		.4byte	0
 6603 041a 00000000 		.4byte	0
 6604              	.LLST23:
 6605 041e 00000000 		.4byte	.LVL69
 6606 0422 13000000 		.4byte	.LVL72-1
 6607 0426 0100     		.2byte	0x1
 6608 0428 52       		.byte	0x52
 6609 0429 13000000 		.4byte	.LVL72-1
 6610 042d 2E000000 		.4byte	.LFE69
 6611 0431 0400     		.2byte	0x4
 6612 0433 F3       		.byte	0xf3
 6613 0434 01       		.uleb128 0x1
 6614 0435 52       		.byte	0x52
 6615 0436 9F       		.byte	0x9f
 6616 0437 00000000 		.4byte	0
 6617 043b 00000000 		.4byte	0
 6618              	.LLST24:
 6619 043f 14000000 		.4byte	.LVL72
 6620 0443 24000000 		.4byte	.LVL75
 6621 0447 0100     		.2byte	0x1
 6622 0449 50       		.byte	0x50
 6623 044a 24000000 		.4byte	.LVL75
 6624 044e 2E000000 		.4byte	.LFE69
 6625 0452 0100     		.2byte	0x1
 6626 0454 54       		.byte	0x54
 6627 0455 00000000 		.4byte	0
 6628 0459 00000000 		.4byte	0
 6629              	.LLST25:
 6630 045d 0E000000 		.4byte	.LVL70
 6631 0461 10000000 		.4byte	.LVL71
 6632 0465 0100     		.2byte	0x1
 6633 0467 50       		.byte	0x50
 6634 0468 10000000 		.4byte	.LVL71
 6635 046c 13000000 		.4byte	.LVL72-1
 6636 0470 0400     		.2byte	0x4
 6637 0472 70       		.byte	0x70
 6638 0473 B87F     		.sleb128 -72
 6639 0475 9F       		.byte	0x9f
 6640 0476 13000000 		.4byte	.LVL72-1
 6641 047a 2E000000 		.4byte	.LFE69
 6642 047e 0600     		.2byte	0x6
 6643 0480 76       		.byte	0x76
 6644 0481 00       		.sleb128 0
 6645 0482 75       		.byte	0x75
 6646 0483 00       		.sleb128 0
 6647 0484 1E       		.byte	0x1e
 6648 0485 9F       		.byte	0x9f
 6649 0486 00000000 		.4byte	0
 6650 048a 00000000 		.4byte	0
 6651              	.LLST26:
 6652 048e 18000000 		.4byte	.LVL73
 6653 0492 20000000 		.4byte	.LVL74
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 176


 6654 0496 0400     		.2byte	0x4
 6655 0498 70       		.byte	0x70
 6656 0499 C800     		.sleb128 72
 6657 049b 9F       		.byte	0x9f
 6658 049c 20000000 		.4byte	.LVL74
 6659 04a0 27000000 		.4byte	.LVL76-1
 6660 04a4 0100     		.2byte	0x1
 6661 04a6 52       		.byte	0x52
 6662 04a7 27000000 		.4byte	.LVL76-1
 6663 04ab 28000000 		.4byte	.LVL76
 6664 04af 0400     		.2byte	0x4
 6665 04b1 74       		.byte	0x74
 6666 04b2 C800     		.sleb128 72
 6667 04b4 9F       		.byte	0x9f
 6668 04b5 00000000 		.4byte	0
 6669 04b9 00000000 		.4byte	0
 6670              	.LLST27:
 6671 04bd 00000000 		.4byte	.LVL77
 6672 04c1 0B000000 		.4byte	.LVL79-1
 6673 04c5 0100     		.2byte	0x1
 6674 04c7 50       		.byte	0x50
 6675 04c8 0B000000 		.4byte	.LVL79-1
 6676 04cc 16000000 		.4byte	.LFE75
 6677 04d0 0400     		.2byte	0x4
 6678 04d2 F3       		.byte	0xf3
 6679 04d3 01       		.uleb128 0x1
 6680 04d4 50       		.byte	0x50
 6681 04d5 9F       		.byte	0x9f
 6682 04d6 00000000 		.4byte	0
 6683 04da 00000000 		.4byte	0
 6684              	.LLST28:
 6685 04de 00000000 		.4byte	.LVL77
 6686 04e2 08000000 		.4byte	.LVL78
 6687 04e6 0100     		.2byte	0x1
 6688 04e8 51       		.byte	0x51
 6689 04e9 08000000 		.4byte	.LVL78
 6690 04ed 16000000 		.4byte	.LFE75
 6691 04f1 0100     		.2byte	0x1
 6692 04f3 54       		.byte	0x54
 6693 04f4 00000000 		.4byte	0
 6694 04f8 00000000 		.4byte	0
 6695              	.LLST29:
 6696 04fc 0C000000 		.4byte	.LVL79
 6697 0500 14000000 		.4byte	.LVL80
 6698 0504 0100     		.2byte	0x1
 6699 0506 50       		.byte	0x50
 6700 0507 14000000 		.4byte	.LVL80
 6701 050b 16000000 		.4byte	.LFE75
 6702 050f 0100     		.2byte	0x1
 6703 0511 53       		.byte	0x53
 6704 0512 00000000 		.4byte	0
 6705 0516 00000000 		.4byte	0
 6706              	.LLST30:
 6707 051a 00000000 		.4byte	.LVL81
 6708 051e 0E000000 		.4byte	.LVL83
 6709 0522 0100     		.2byte	0x1
 6710 0524 50       		.byte	0x50
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 177


 6711 0525 0E000000 		.4byte	.LVL83
 6712 0529 04010000 		.4byte	.LVL108
 6713 052d 0100     		.2byte	0x1
 6714 052f 54       		.byte	0x54
 6715 0530 04010000 		.4byte	.LVL108
 6716 0534 08010000 		.4byte	.LFE76
 6717 0538 0400     		.2byte	0x4
 6718 053a F3       		.byte	0xf3
 6719 053b 01       		.uleb128 0x1
 6720 053c 50       		.byte	0x50
 6721 053d 9F       		.byte	0x9f
 6722 053e 00000000 		.4byte	0
 6723 0542 00000000 		.4byte	0
 6724              	.LLST31:
 6725 0546 00000000 		.4byte	.LVL81
 6726 054a 0E000000 		.4byte	.LVL83
 6727 054e 0100     		.2byte	0x1
 6728 0550 51       		.byte	0x51
 6729 0551 0E000000 		.4byte	.LVL83
 6730 0555 04010000 		.4byte	.LVL108
 6731 0559 0100     		.2byte	0x1
 6732 055b 57       		.byte	0x57
 6733 055c 04010000 		.4byte	.LVL108
 6734 0560 08010000 		.4byte	.LFE76
 6735 0564 0400     		.2byte	0x4
 6736 0566 F3       		.byte	0xf3
 6737 0567 01       		.uleb128 0x1
 6738 0568 51       		.byte	0x51
 6739 0569 9F       		.byte	0x9f
 6740 056a 00000000 		.4byte	0
 6741 056e 00000000 		.4byte	0
 6742              	.LLST32:
 6743 0572 00000000 		.4byte	.LVL81
 6744 0576 0E000000 		.4byte	.LVL83
 6745 057a 0100     		.2byte	0x1
 6746 057c 52       		.byte	0x52
 6747 057d 0E000000 		.4byte	.LVL83
 6748 0581 AE000000 		.4byte	.LVL98
 6749 0585 0200     		.2byte	0x2
 6750 0587 91       		.byte	0x91
 6751 0588 5C       		.sleb128 -36
 6752 0589 AE000000 		.4byte	.LVL98
 6753 058d B3000000 		.4byte	.LVL99-1
 6754 0591 0200     		.2byte	0x2
 6755 0593 71       		.byte	0x71
 6756 0594 00       		.sleb128 0
 6757 0595 B3000000 		.4byte	.LVL99-1
 6758 0599 04010000 		.4byte	.LVL108
 6759 059d 0200     		.2byte	0x2
 6760 059f 91       		.byte	0x91
 6761 05a0 5C       		.sleb128 -36
 6762 05a1 04010000 		.4byte	.LVL108
 6763 05a5 08010000 		.4byte	.LFE76
 6764 05a9 0200     		.2byte	0x2
 6765 05ab 7D       		.byte	0x7d
 6766 05ac 5C       		.sleb128 -36
 6767 05ad 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 178


 6768 05b1 00000000 		.4byte	0
 6769              	.LLST33:
 6770 05b5 00000000 		.4byte	.LVL81
 6771 05b9 0E000000 		.4byte	.LVL83
 6772 05bd 0100     		.2byte	0x1
 6773 05bf 53       		.byte	0x53
 6774 05c0 0E000000 		.4byte	.LVL83
 6775 05c4 04010000 		.4byte	.LVL108
 6776 05c8 0100     		.2byte	0x1
 6777 05ca 56       		.byte	0x56
 6778 05cb 04010000 		.4byte	.LVL108
 6779 05cf 08010000 		.4byte	.LFE76
 6780 05d3 0400     		.2byte	0x4
 6781 05d5 F3       		.byte	0xf3
 6782 05d6 01       		.uleb128 0x1
 6783 05d7 53       		.byte	0x53
 6784 05d8 9F       		.byte	0x9f
 6785 05d9 00000000 		.4byte	0
 6786 05dd 00000000 		.4byte	0
 6787              	.LLST34:
 6788 05e1 0C000000 		.4byte	.LVL82
 6789 05e5 0E000000 		.4byte	.LVL83
 6790 05e9 0200     		.2byte	0x2
 6791 05eb 30       		.byte	0x30
 6792 05ec 9F       		.byte	0x9f
 6793 05ed 0E000000 		.4byte	.LVL83
 6794 05f1 76000000 		.4byte	.LVL92
 6795 05f5 0100     		.2byte	0x1
 6796 05f7 55       		.byte	0x55
 6797 05f8 76000000 		.4byte	.LVL92
 6798 05fc 78000000 		.4byte	.LVL93
 6799 0600 0200     		.2byte	0x2
 6800 0602 31       		.byte	0x31
 6801 0603 9F       		.byte	0x9f
 6802 0604 78000000 		.4byte	.LVL93
 6803 0608 04010000 		.4byte	.LVL108
 6804 060c 0100     		.2byte	0x1
 6805 060e 55       		.byte	0x55
 6806 060f 00000000 		.4byte	0
 6807 0613 00000000 		.4byte	0
 6808              	.LLST35:
 6809 0617 28000000 		.4byte	.LVL85
 6810 061b 30000000 		.4byte	.LVL86
 6811 061f 0100     		.2byte	0x1
 6812 0621 50       		.byte	0x50
 6813 0622 48000000 		.4byte	.LVL88
 6814 0626 5A000000 		.4byte	.LVL89
 6815 062a 0100     		.2byte	0x1
 6816 062c 50       		.byte	0x50
 6817 062d 00000000 		.4byte	0
 6818 0631 00000000 		.4byte	0
 6819              	.LLST36:
 6820 0635 0C000000 		.4byte	.LVL82
 6821 0639 0E000000 		.4byte	.LVL83
 6822 063d 0100     		.2byte	0x1
 6823 063f 50       		.byte	0x50
 6824 0640 0E000000 		.4byte	.LVL83
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 179


 6825 0644 04010000 		.4byte	.LVL108
 6826 0648 0100     		.2byte	0x1
 6827 064a 54       		.byte	0x54
 6828 064b 04010000 		.4byte	.LVL108
 6829 064f 08010000 		.4byte	.LFE76
 6830 0653 0400     		.2byte	0x4
 6831 0655 F3       		.byte	0xf3
 6832 0656 01       		.uleb128 0x1
 6833 0657 50       		.byte	0x50
 6834 0658 9F       		.byte	0x9f
 6835 0659 00000000 		.4byte	0
 6836 065d 00000000 		.4byte	0
 6837              	.LLST37:
 6838 0661 00000000 		.4byte	.LVL109
 6839 0665 13000000 		.4byte	.LVL110-1
 6840 0669 0100     		.2byte	0x1
 6841 066b 50       		.byte	0x50
 6842 066c 13000000 		.4byte	.LVL110-1
 6843 0670 16000000 		.4byte	.LVL111
 6844 0674 0400     		.2byte	0x4
 6845 0676 F3       		.byte	0xf3
 6846 0677 01       		.uleb128 0x1
 6847 0678 50       		.byte	0x50
 6848 0679 9F       		.byte	0x9f
 6849 067a 16000000 		.4byte	.LVL111
 6850 067e 18000000 		.4byte	.LFE71
 6851 0682 0100     		.2byte	0x1
 6852 0684 50       		.byte	0x50
 6853 0685 00000000 		.4byte	0
 6854 0689 00000000 		.4byte	0
 6855              	.LLST38:
 6856 068d 00000000 		.4byte	.LVL112
 6857 0691 08000000 		.4byte	.LVL114
 6858 0695 0100     		.2byte	0x1
 6859 0697 50       		.byte	0x50
 6860 0698 08000000 		.4byte	.LVL114
 6861 069c 16000000 		.4byte	.LFE72
 6862 06a0 0400     		.2byte	0x4
 6863 06a2 F3       		.byte	0xf3
 6864 06a3 01       		.uleb128 0x1
 6865 06a4 50       		.byte	0x50
 6866 06a5 9F       		.byte	0x9f
 6867 06a6 00000000 		.4byte	0
 6868 06aa 00000000 		.4byte	0
 6869              	.LLST39:
 6870 06ae 0E000000 		.4byte	.LVL116
 6871 06b2 11000000 		.4byte	.LVL117-1
 6872 06b6 0100     		.2byte	0x1
 6873 06b8 50       		.byte	0x50
 6874 06b9 11000000 		.4byte	.LVL117-1
 6875 06bd 16000000 		.4byte	.LFE72
 6876 06c1 0100     		.2byte	0x1
 6877 06c3 54       		.byte	0x54
 6878 06c4 00000000 		.4byte	0
 6879 06c8 00000000 		.4byte	0
 6880              	.LLST40:
 6881 06cc 00000000 		.4byte	.LVL118
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 180


 6882 06d0 09000000 		.4byte	.LVL120-1
 6883 06d4 0100     		.2byte	0x1
 6884 06d6 50       		.byte	0x50
 6885 06d7 09000000 		.4byte	.LVL120-1
 6886 06db 2C000000 		.4byte	.LFE73
 6887 06df 0100     		.2byte	0x1
 6888 06e1 54       		.byte	0x54
 6889 06e2 00000000 		.4byte	0
 6890 06e6 00000000 		.4byte	0
 6891              	.LLST41:
 6892 06ea 04000000 		.4byte	.LVL119
 6893 06ee 09000000 		.4byte	.LVL120-1
 6894 06f2 0100     		.2byte	0x1
 6895 06f4 50       		.byte	0x50
 6896 06f5 09000000 		.4byte	.LVL120-1
 6897 06f9 2C000000 		.4byte	.LFE73
 6898 06fd 0100     		.2byte	0x1
 6899 06ff 54       		.byte	0x54
 6900 0700 00000000 		.4byte	0
 6901 0704 00000000 		.4byte	0
 6902              	.LLST42:
 6903 0708 00000000 		.4byte	.LVL125
 6904 070c 33000000 		.4byte	.LVL129-1
 6905 0710 0100     		.2byte	0x1
 6906 0712 50       		.byte	0x50
 6907 0713 33000000 		.4byte	.LVL129-1
 6908 0717 5C000000 		.4byte	.LVL133
 6909 071b 0100     		.2byte	0x1
 6910 071d 55       		.byte	0x55
 6911 071e 5C000000 		.4byte	.LVL133
 6912 0722 5E000000 		.4byte	.LVL134
 6913 0726 0100     		.2byte	0x1
 6914 0728 50       		.byte	0x50
 6915 0729 5E000000 		.4byte	.LVL134
 6916 072d 60000000 		.4byte	.LVL135
 6917 0731 0400     		.2byte	0x4
 6918 0733 F3       		.byte	0xf3
 6919 0734 01       		.uleb128 0x1
 6920 0735 50       		.byte	0x50
 6921 0736 9F       		.byte	0x9f
 6922 0737 60000000 		.4byte	.LVL135
 6923 073b 6A000000 		.4byte	.LVL136
 6924 073f 0100     		.2byte	0x1
 6925 0741 55       		.byte	0x55
 6926 0742 6A000000 		.4byte	.LVL136
 6927 0746 70000000 		.4byte	.LFE77
 6928 074a 0400     		.2byte	0x4
 6929 074c F3       		.byte	0xf3
 6930 074d 01       		.uleb128 0x1
 6931 074e 50       		.byte	0x50
 6932 074f 9F       		.byte	0x9f
 6933 0750 00000000 		.4byte	0
 6934 0754 00000000 		.4byte	0
 6935              	.LLST43:
 6936 0758 00000000 		.4byte	.LVL125
 6937 075c 33000000 		.4byte	.LVL129-1
 6938 0760 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 181


 6939 0762 51       		.byte	0x51
 6940 0763 33000000 		.4byte	.LVL129-1
 6941 0767 5C000000 		.4byte	.LVL133
 6942 076b 0400     		.2byte	0x4
 6943 076d F3       		.byte	0xf3
 6944 076e 01       		.uleb128 0x1
 6945 076f 51       		.byte	0x51
 6946 0770 9F       		.byte	0x9f
 6947 0771 5C000000 		.4byte	.LVL133
 6948 0775 60000000 		.4byte	.LVL135
 6949 0779 0100     		.2byte	0x1
 6950 077b 51       		.byte	0x51
 6951 077c 60000000 		.4byte	.LVL135
 6952 0780 70000000 		.4byte	.LFE77
 6953 0784 0400     		.2byte	0x4
 6954 0786 F3       		.byte	0xf3
 6955 0787 01       		.uleb128 0x1
 6956 0788 51       		.byte	0x51
 6957 0789 9F       		.byte	0x9f
 6958 078a 00000000 		.4byte	0
 6959 078e 00000000 		.4byte	0
 6960              	.LLST44:
 6961 0792 00000000 		.4byte	.LVL125
 6962 0796 2E000000 		.4byte	.LVL128
 6963 079a 0100     		.2byte	0x1
 6964 079c 52       		.byte	0x52
 6965 079d 2E000000 		.4byte	.LVL128
 6966 07a1 5C000000 		.4byte	.LVL133
 6967 07a5 0100     		.2byte	0x1
 6968 07a7 57       		.byte	0x57
 6969 07a8 5C000000 		.4byte	.LVL133
 6970 07ac 60000000 		.4byte	.LVL135
 6971 07b0 0100     		.2byte	0x1
 6972 07b2 52       		.byte	0x52
 6973 07b3 60000000 		.4byte	.LVL135
 6974 07b7 6A000000 		.4byte	.LVL136
 6975 07bb 0100     		.2byte	0x1
 6976 07bd 57       		.byte	0x57
 6977 07be 6A000000 		.4byte	.LVL136
 6978 07c2 70000000 		.4byte	.LFE77
 6979 07c6 0400     		.2byte	0x4
 6980 07c8 F3       		.byte	0xf3
 6981 07c9 01       		.uleb128 0x1
 6982 07ca 52       		.byte	0x52
 6983 07cb 9F       		.byte	0x9f
 6984 07cc 00000000 		.4byte	0
 6985 07d0 00000000 		.4byte	0
 6986              	.LLST45:
 6987 07d4 00000000 		.4byte	.LVL125
 6988 07d8 33000000 		.4byte	.LVL129-1
 6989 07dc 0100     		.2byte	0x1
 6990 07de 53       		.byte	0x53
 6991 07df 33000000 		.4byte	.LVL129-1
 6992 07e3 5C000000 		.4byte	.LVL133
 6993 07e7 0400     		.2byte	0x4
 6994 07e9 F3       		.byte	0xf3
 6995 07ea 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 182


 6996 07eb 53       		.byte	0x53
 6997 07ec 9F       		.byte	0x9f
 6998 07ed 5C000000 		.4byte	.LVL133
 6999 07f1 60000000 		.4byte	.LVL135
 7000 07f5 0100     		.2byte	0x1
 7001 07f7 53       		.byte	0x53
 7002 07f8 60000000 		.4byte	.LVL135
 7003 07fc 70000000 		.4byte	.LFE77
 7004 0800 0400     		.2byte	0x4
 7005 0802 F3       		.byte	0xf3
 7006 0803 01       		.uleb128 0x1
 7007 0804 53       		.byte	0x53
 7008 0805 9F       		.byte	0x9f
 7009 0806 00000000 		.4byte	0
 7010 080a 00000000 		.4byte	0
 7011              	.LLST46:
 7012 080e 02000000 		.4byte	.LVL126
 7013 0812 33000000 		.4byte	.LVL129-1
 7014 0816 0100     		.2byte	0x1
 7015 0818 50       		.byte	0x50
 7016 0819 33000000 		.4byte	.LVL129-1
 7017 081d 5C000000 		.4byte	.LVL133
 7018 0821 0100     		.2byte	0x1
 7019 0823 55       		.byte	0x55
 7020 0824 5C000000 		.4byte	.LVL133
 7021 0828 5E000000 		.4byte	.LVL134
 7022 082c 0100     		.2byte	0x1
 7023 082e 50       		.byte	0x50
 7024 082f 5E000000 		.4byte	.LVL134
 7025 0833 60000000 		.4byte	.LVL135
 7026 0837 0400     		.2byte	0x4
 7027 0839 F3       		.byte	0xf3
 7028 083a 01       		.uleb128 0x1
 7029 083b 50       		.byte	0x50
 7030 083c 9F       		.byte	0x9f
 7031 083d 60000000 		.4byte	.LVL135
 7032 0841 6A000000 		.4byte	.LVL136
 7033 0845 0100     		.2byte	0x1
 7034 0847 55       		.byte	0x55
 7035 0848 6A000000 		.4byte	.LVL136
 7036 084c 70000000 		.4byte	.LFE77
 7037 0850 0400     		.2byte	0x4
 7038 0852 F3       		.byte	0xf3
 7039 0853 01       		.uleb128 0x1
 7040 0854 50       		.byte	0x50
 7041 0855 9F       		.byte	0x9f
 7042 0856 00000000 		.4byte	0
 7043 085a 00000000 		.4byte	0
 7044              	.LLST47:
 7045 085e 2C000000 		.4byte	.LVL127
 7046 0862 52000000 		.4byte	.LVL131
 7047 0866 0100     		.2byte	0x1
 7048 0868 54       		.byte	0x54
 7049 0869 52000000 		.4byte	.LVL131
 7050 086d 54000000 		.4byte	.LVL132
 7051 0871 0300     		.2byte	0x3
 7052 0873 74       		.byte	0x74
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 183


 7053 0874 7F       		.sleb128 -1
 7054 0875 9F       		.byte	0x9f
 7055 0876 60000000 		.4byte	.LVL135
 7056 087a 6A000000 		.4byte	.LVL136
 7057 087e 0100     		.2byte	0x1
 7058 0880 54       		.byte	0x54
 7059 0881 00000000 		.4byte	0
 7060 0885 00000000 		.4byte	0
 7061              	.LLST48:
 7062 0889 6A000000 		.4byte	.LVL136
 7063 088d 6E000000 		.4byte	.LVL137
 7064 0891 0100     		.2byte	0x1
 7065 0893 56       		.byte	0x56
 7066 0894 00000000 		.4byte	0
 7067 0898 00000000 		.4byte	0
 7068              	.LLST49:
 7069 089c 00000000 		.4byte	.LVL138
 7070 08a0 36000000 		.4byte	.LVL144
 7071 08a4 0100     		.2byte	0x1
 7072 08a6 50       		.byte	0x50
 7073 08a7 36000000 		.4byte	.LVL144
 7074 08ab 39000000 		.4byte	.LVL145-1
 7075 08af 0300     		.2byte	0x3
 7076 08b1 70       		.byte	0x70
 7077 08b2 5C       		.sleb128 -36
 7078 08b3 9F       		.byte	0x9f
 7079 08b4 39000000 		.4byte	.LVL145-1
 7080 08b8 44000000 		.4byte	.LVL146
 7081 08bc 0400     		.2byte	0x4
 7082 08be F3       		.byte	0xf3
 7083 08bf 01       		.uleb128 0x1
 7084 08c0 50       		.byte	0x50
 7085 08c1 9F       		.byte	0x9f
 7086 08c2 44000000 		.4byte	.LVL146
 7087 08c6 4E000000 		.4byte	.LVL149
 7088 08ca 0100     		.2byte	0x1
 7089 08cc 50       		.byte	0x50
 7090 08cd 4E000000 		.4byte	.LVL149
 7091 08d1 50000000 		.4byte	.LVL150
 7092 08d5 0400     		.2byte	0x4
 7093 08d7 F3       		.byte	0xf3
 7094 08d8 01       		.uleb128 0x1
 7095 08d9 50       		.byte	0x50
 7096 08da 9F       		.byte	0x9f
 7097 08db 50000000 		.4byte	.LVL150
 7098 08df 52000000 		.4byte	.LVL151
 7099 08e3 0100     		.2byte	0x1
 7100 08e5 50       		.byte	0x50
 7101 08e6 52000000 		.4byte	.LVL151
 7102 08ea 54000000 		.4byte	.LVL152
 7103 08ee 0400     		.2byte	0x4
 7104 08f0 F3       		.byte	0xf3
 7105 08f1 01       		.uleb128 0x1
 7106 08f2 50       		.byte	0x50
 7107 08f3 9F       		.byte	0x9f
 7108 08f4 54000000 		.4byte	.LVL152
 7109 08f8 56000000 		.4byte	.LVL153
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 184


 7110 08fc 0100     		.2byte	0x1
 7111 08fe 50       		.byte	0x50
 7112 08ff 56000000 		.4byte	.LVL153
 7113 0903 64000000 		.4byte	.LFE78
 7114 0907 0400     		.2byte	0x4
 7115 0909 F3       		.byte	0xf3
 7116 090a 01       		.uleb128 0x1
 7117 090b 50       		.byte	0x50
 7118 090c 9F       		.byte	0x9f
 7119 090d 00000000 		.4byte	0
 7120 0911 00000000 		.4byte	0
 7121              	.LLST50:
 7122 0915 00000000 		.4byte	.LVL138
 7123 0919 39000000 		.4byte	.LVL145-1
 7124 091d 0100     		.2byte	0x1
 7125 091f 51       		.byte	0x51
 7126 0920 39000000 		.4byte	.LVL145-1
 7127 0924 44000000 		.4byte	.LVL146
 7128 0928 0100     		.2byte	0x1
 7129 092a 55       		.byte	0x55
 7130 092b 44000000 		.4byte	.LVL146
 7131 092f 58000000 		.4byte	.LVL154
 7132 0933 0100     		.2byte	0x1
 7133 0935 51       		.byte	0x51
 7134 0936 58000000 		.4byte	.LVL154
 7135 093a 5E000000 		.4byte	.LVL155
 7136 093e 0100     		.2byte	0x1
 7137 0940 55       		.byte	0x55
 7138 0941 5E000000 		.4byte	.LVL155
 7139 0945 64000000 		.4byte	.LFE78
 7140 0949 0400     		.2byte	0x4
 7141 094b F3       		.byte	0xf3
 7142 094c 01       		.uleb128 0x1
 7143 094d 51       		.byte	0x51
 7144 094e 9F       		.byte	0x9f
 7145 094f 00000000 		.4byte	0
 7146 0953 00000000 		.4byte	0
 7147              	.LLST51:
 7148 0957 02000000 		.4byte	.LVL139
 7149 095b 36000000 		.4byte	.LVL144
 7150 095f 0100     		.2byte	0x1
 7151 0961 50       		.byte	0x50
 7152 0962 36000000 		.4byte	.LVL144
 7153 0966 39000000 		.4byte	.LVL145-1
 7154 096a 0300     		.2byte	0x3
 7155 096c 70       		.byte	0x70
 7156 096d 5C       		.sleb128 -36
 7157 096e 9F       		.byte	0x9f
 7158 096f 39000000 		.4byte	.LVL145-1
 7159 0973 44000000 		.4byte	.LVL146
 7160 0977 0400     		.2byte	0x4
 7161 0979 F3       		.byte	0xf3
 7162 097a 01       		.uleb128 0x1
 7163 097b 50       		.byte	0x50
 7164 097c 9F       		.byte	0x9f
 7165 097d 44000000 		.4byte	.LVL146
 7166 0981 4E000000 		.4byte	.LVL149
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 185


 7167 0985 0100     		.2byte	0x1
 7168 0987 50       		.byte	0x50
 7169 0988 4E000000 		.4byte	.LVL149
 7170 098c 50000000 		.4byte	.LVL150
 7171 0990 0400     		.2byte	0x4
 7172 0992 F3       		.byte	0xf3
 7173 0993 01       		.uleb128 0x1
 7174 0994 50       		.byte	0x50
 7175 0995 9F       		.byte	0x9f
 7176 0996 50000000 		.4byte	.LVL150
 7177 099a 52000000 		.4byte	.LVL151
 7178 099e 0100     		.2byte	0x1
 7179 09a0 50       		.byte	0x50
 7180 09a1 52000000 		.4byte	.LVL151
 7181 09a5 54000000 		.4byte	.LVL152
 7182 09a9 0400     		.2byte	0x4
 7183 09ab F3       		.byte	0xf3
 7184 09ac 01       		.uleb128 0x1
 7185 09ad 50       		.byte	0x50
 7186 09ae 9F       		.byte	0x9f
 7187 09af 54000000 		.4byte	.LVL152
 7188 09b3 56000000 		.4byte	.LVL153
 7189 09b7 0100     		.2byte	0x1
 7190 09b9 50       		.byte	0x50
 7191 09ba 56000000 		.4byte	.LVL153
 7192 09be 64000000 		.4byte	.LFE78
 7193 09c2 0400     		.2byte	0x4
 7194 09c4 F3       		.byte	0xf3
 7195 09c5 01       		.uleb128 0x1
 7196 09c6 50       		.byte	0x50
 7197 09c7 9F       		.byte	0x9f
 7198 09c8 00000000 		.4byte	0
 7199 09cc 00000000 		.4byte	0
 7200              	.LLST52:
 7201 09d0 18000000 		.4byte	.LVL140
 7202 09d4 26000000 		.4byte	.LVL142
 7203 09d8 0100     		.2byte	0x1
 7204 09da 52       		.byte	0x52
 7205 09db 26000000 		.4byte	.LVL142
 7206 09df 39000000 		.4byte	.LVL145-1
 7207 09e3 0300     		.2byte	0x3
 7208 09e5 72       		.byte	0x72
 7209 09e6 7F       		.sleb128 -1
 7210 09e7 9F       		.byte	0x9f
 7211 09e8 44000000 		.4byte	.LVL146
 7212 09ec 50000000 		.4byte	.LVL150
 7213 09f0 0300     		.2byte	0x3
 7214 09f2 72       		.byte	0x72
 7215 09f3 7F       		.sleb128 -1
 7216 09f4 9F       		.byte	0x9f
 7217 09f5 50000000 		.4byte	.LVL150
 7218 09f9 54000000 		.4byte	.LVL152
 7219 09fd 0100     		.2byte	0x1
 7220 09ff 52       		.byte	0x52
 7221 0a00 54000000 		.4byte	.LVL152
 7222 0a04 58000000 		.4byte	.LVL154
 7223 0a08 0300     		.2byte	0x3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 186


 7224 0a0a 72       		.byte	0x72
 7225 0a0b 7F       		.sleb128 -1
 7226 0a0c 9F       		.byte	0x9f
 7227 0a0d 00000000 		.4byte	0
 7228 0a11 00000000 		.4byte	0
 7229              	.LLST53:
 7230 0a15 24000000 		.4byte	.LVL141
 7231 0a19 30000000 		.4byte	.LVL143
 7232 0a1d 0100     		.2byte	0x1
 7233 0a1f 53       		.byte	0x53
 7234 0a20 44000000 		.4byte	.LVL146
 7235 0a24 46000000 		.4byte	.LVL147
 7236 0a28 0100     		.2byte	0x1
 7237 0a2a 53       		.byte	0x53
 7238 0a2b 46000000 		.4byte	.LVL147
 7239 0a2f 48000000 		.4byte	.LVL148
 7240 0a33 0300     		.2byte	0x3
 7241 0a35 73       		.byte	0x73
 7242 0a36 7F       		.sleb128 -1
 7243 0a37 9F       		.byte	0x9f
 7244 0a38 00000000 		.4byte	0
 7245 0a3c 00000000 		.4byte	0
 7246              	.LLST54:
 7247 0a40 5E000000 		.4byte	.LVL155
 7248 0a44 62000000 		.4byte	.LVL156
 7249 0a48 0100     		.2byte	0x1
 7250 0a4a 54       		.byte	0x54
 7251 0a4b 00000000 		.4byte	0
 7252 0a4f 00000000 		.4byte	0
 7253              	.LLST55:
 7254 0a53 00000000 		.4byte	.LVL157
 7255 0a57 0C000000 		.4byte	.LVL159
 7256 0a5b 0100     		.2byte	0x1
 7257 0a5d 50       		.byte	0x50
 7258 0a5e 0C000000 		.4byte	.LVL159
 7259 0a62 F2000000 		.4byte	.LVL186
 7260 0a66 0100     		.2byte	0x1
 7261 0a68 54       		.byte	0x54
 7262 0a69 F2000000 		.4byte	.LVL186
 7263 0a6d F8000000 		.4byte	.LFE79
 7264 0a71 0400     		.2byte	0x4
 7265 0a73 F3       		.byte	0xf3
 7266 0a74 01       		.uleb128 0x1
 7267 0a75 50       		.byte	0x50
 7268 0a76 9F       		.byte	0x9f
 7269 0a77 00000000 		.4byte	0
 7270 0a7b 00000000 		.4byte	0
 7271              	.LLST56:
 7272 0a7f 00000000 		.4byte	.LVL157
 7273 0a83 0C000000 		.4byte	.LVL159
 7274 0a87 0100     		.2byte	0x1
 7275 0a89 51       		.byte	0x51
 7276 0a8a 0C000000 		.4byte	.LVL159
 7277 0a8e F2000000 		.4byte	.LVL186
 7278 0a92 0100     		.2byte	0x1
 7279 0a94 57       		.byte	0x57
 7280 0a95 F2000000 		.4byte	.LVL186
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 187


 7281 0a99 F8000000 		.4byte	.LFE79
 7282 0a9d 0400     		.2byte	0x4
 7283 0a9f F3       		.byte	0xf3
 7284 0aa0 01       		.uleb128 0x1
 7285 0aa1 51       		.byte	0x51
 7286 0aa2 9F       		.byte	0x9f
 7287 0aa3 00000000 		.4byte	0
 7288 0aa7 00000000 		.4byte	0
 7289              	.LLST57:
 7290 0aab 00000000 		.4byte	.LVL157
 7291 0aaf 0C000000 		.4byte	.LVL159
 7292 0ab3 0100     		.2byte	0x1
 7293 0ab5 52       		.byte	0x52
 7294 0ab6 0C000000 		.4byte	.LVL159
 7295 0aba 92000000 		.4byte	.LVL174
 7296 0abe 0200     		.2byte	0x2
 7297 0ac0 91       		.byte	0x91
 7298 0ac1 5C       		.sleb128 -36
 7299 0ac2 92000000 		.4byte	.LVL174
 7300 0ac6 97000000 		.4byte	.LVL175-1
 7301 0aca 0200     		.2byte	0x2
 7302 0acc 71       		.byte	0x71
 7303 0acd 00       		.sleb128 0
 7304 0ace 97000000 		.4byte	.LVL175-1
 7305 0ad2 F2000000 		.4byte	.LVL186
 7306 0ad6 0200     		.2byte	0x2
 7307 0ad8 91       		.byte	0x91
 7308 0ad9 5C       		.sleb128 -36
 7309 0ada F2000000 		.4byte	.LVL186
 7310 0ade F8000000 		.4byte	.LFE79
 7311 0ae2 0200     		.2byte	0x2
 7312 0ae4 7D       		.byte	0x7d
 7313 0ae5 5C       		.sleb128 -36
 7314 0ae6 00000000 		.4byte	0
 7315 0aea 00000000 		.4byte	0
 7316              	.LLST58:
 7317 0aee 0A000000 		.4byte	.LVL158
 7318 0af2 0C000000 		.4byte	.LVL159
 7319 0af6 0200     		.2byte	0x2
 7320 0af8 30       		.byte	0x30
 7321 0af9 9F       		.byte	0x9f
 7322 0afa 0C000000 		.4byte	.LVL159
 7323 0afe 5A000000 		.4byte	.LVL168
 7324 0b02 0100     		.2byte	0x1
 7325 0b04 56       		.byte	0x56
 7326 0b05 5A000000 		.4byte	.LVL168
 7327 0b09 5C000000 		.4byte	.LVL169
 7328 0b0d 0200     		.2byte	0x2
 7329 0b0f 31       		.byte	0x31
 7330 0b10 9F       		.byte	0x9f
 7331 0b11 5C000000 		.4byte	.LVL169
 7332 0b15 F2000000 		.4byte	.LVL186
 7333 0b19 0100     		.2byte	0x1
 7334 0b1b 56       		.byte	0x56
 7335 0b1c 00000000 		.4byte	0
 7336 0b20 00000000 		.4byte	0
 7337              	.LLST59:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 188


 7338 0b24 0A000000 		.4byte	.LVL158
 7339 0b28 0C000000 		.4byte	.LVL159
 7340 0b2c 0100     		.2byte	0x1
 7341 0b2e 50       		.byte	0x50
 7342 0b2f 0C000000 		.4byte	.LVL159
 7343 0b33 F2000000 		.4byte	.LVL186
 7344 0b37 0100     		.2byte	0x1
 7345 0b39 54       		.byte	0x54
 7346 0b3a F2000000 		.4byte	.LVL186
 7347 0b3e F8000000 		.4byte	.LFE79
 7348 0b42 0400     		.2byte	0x4
 7349 0b44 F3       		.byte	0xf3
 7350 0b45 01       		.uleb128 0x1
 7351 0b46 50       		.byte	0x50
 7352 0b47 9F       		.byte	0x9f
 7353 0b48 00000000 		.4byte	0
 7354 0b4c 00000000 		.4byte	0
 7355              	.LLST60:
 7356 0b50 12000000 		.4byte	.LVL161
 7357 0b54 1E000000 		.4byte	.LVL163
 7358 0b58 0100     		.2byte	0x1
 7359 0b5a 55       		.byte	0x55
 7360 0b5b 1E000000 		.4byte	.LVL163
 7361 0b5f 46000000 		.4byte	.LVL166
 7362 0b63 0300     		.2byte	0x3
 7363 0b65 75       		.byte	0x75
 7364 0b66 01       		.sleb128 1
 7365 0b67 9F       		.byte	0x9f
 7366 0b68 46000000 		.4byte	.LVL166
 7367 0b6c EE000000 		.4byte	.LVL185
 7368 0b70 0100     		.2byte	0x1
 7369 0b72 55       		.byte	0x55
 7370 0b73 00000000 		.4byte	0
 7371 0b77 00000000 		.4byte	0
 7372              	.LLST61:
 7373 0b7b 00000000 		.4byte	.LVL187
 7374 0b7f 0C000000 		.4byte	.LVL189
 7375 0b83 0100     		.2byte	0x1
 7376 0b85 50       		.byte	0x50
 7377 0b86 0C000000 		.4byte	.LVL189
 7378 0b8a 24010000 		.4byte	.LVL226
 7379 0b8e 0100     		.2byte	0x1
 7380 0b90 54       		.byte	0x54
 7381 0b91 24010000 		.4byte	.LVL226
 7382 0b95 28010000 		.4byte	.LFE80
 7383 0b99 0400     		.2byte	0x4
 7384 0b9b F3       		.byte	0xf3
 7385 0b9c 01       		.uleb128 0x1
 7386 0b9d 50       		.byte	0x50
 7387 0b9e 9F       		.byte	0x9f
 7388 0b9f 00000000 		.4byte	0
 7389 0ba3 00000000 		.4byte	0
 7390              	.LLST62:
 7391 0ba7 00000000 		.4byte	.LVL187
 7392 0bab 0C000000 		.4byte	.LVL189
 7393 0baf 0100     		.2byte	0x1
 7394 0bb1 51       		.byte	0x51
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 189


 7395 0bb2 0C000000 		.4byte	.LVL189
 7396 0bb6 94000000 		.4byte	.LVL206
 7397 0bba 0200     		.2byte	0x2
 7398 0bbc 91       		.byte	0x91
 7399 0bbd 64       		.sleb128 -28
 7400 0bbe 94000000 		.4byte	.LVL206
 7401 0bc2 99000000 		.4byte	.LVL207-1
 7402 0bc6 0200     		.2byte	0x2
 7403 0bc8 71       		.byte	0x71
 7404 0bc9 00       		.sleb128 0
 7405 0bca 99000000 		.4byte	.LVL207-1
 7406 0bce 24010000 		.4byte	.LVL226
 7407 0bd2 0200     		.2byte	0x2
 7408 0bd4 91       		.byte	0x91
 7409 0bd5 64       		.sleb128 -28
 7410 0bd6 24010000 		.4byte	.LVL226
 7411 0bda 28010000 		.4byte	.LFE80
 7412 0bde 0200     		.2byte	0x2
 7413 0be0 7D       		.byte	0x7d
 7414 0be1 64       		.sleb128 -28
 7415 0be2 00000000 		.4byte	0
 7416 0be6 00000000 		.4byte	0
 7417              	.LLST63:
 7418 0bea 08000000 		.4byte	.LVL188
 7419 0bee 0C000000 		.4byte	.LVL189
 7420 0bf2 0200     		.2byte	0x2
 7421 0bf4 30       		.byte	0x30
 7422 0bf5 9F       		.byte	0x9f
 7423 0bf6 0C000000 		.4byte	.LVL189
 7424 0bfa 5C000000 		.4byte	.LVL200
 7425 0bfe 0100     		.2byte	0x1
 7426 0c00 55       		.byte	0x55
 7427 0c01 5C000000 		.4byte	.LVL200
 7428 0c05 5E000000 		.4byte	.LVL201
 7429 0c09 0200     		.2byte	0x2
 7430 0c0b 31       		.byte	0x31
 7431 0c0c 9F       		.byte	0x9f
 7432 0c0d 5E000000 		.4byte	.LVL201
 7433 0c11 24010000 		.4byte	.LVL226
 7434 0c15 0100     		.2byte	0x1
 7435 0c17 55       		.byte	0x55
 7436 0c18 00000000 		.4byte	0
 7437 0c1c 00000000 		.4byte	0
 7438              	.LLST64:
 7439 0c20 08000000 		.4byte	.LVL188
 7440 0c24 0C000000 		.4byte	.LVL189
 7441 0c28 0100     		.2byte	0x1
 7442 0c2a 50       		.byte	0x50
 7443 0c2b 0C000000 		.4byte	.LVL189
 7444 0c2f 24010000 		.4byte	.LVL226
 7445 0c33 0100     		.2byte	0x1
 7446 0c35 54       		.byte	0x54
 7447 0c36 24010000 		.4byte	.LVL226
 7448 0c3a 28010000 		.4byte	.LFE80
 7449 0c3e 0400     		.2byte	0x4
 7450 0c40 F3       		.byte	0xf3
 7451 0c41 01       		.uleb128 0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 190


 7452 0c42 50       		.byte	0x50
 7453 0c43 9F       		.byte	0x9f
 7454 0c44 00000000 		.4byte	0
 7455 0c48 00000000 		.4byte	0
 7456              	.LLST65:
 7457 0c4c 08000000 		.4byte	.LVL188
 7458 0c50 0C000000 		.4byte	.LVL189
 7459 0c54 0200     		.2byte	0x2
 7460 0c56 30       		.byte	0x30
 7461 0c57 9F       		.byte	0x9f
 7462 0c58 0C000000 		.4byte	.LVL189
 7463 0c5c B4000000 		.4byte	.LVL211
 7464 0c60 0100     		.2byte	0x1
 7465 0c62 56       		.byte	0x56
 7466 0c63 B4000000 		.4byte	.LVL211
 7467 0c67 B7000000 		.4byte	.LVL212-1
 7468 0c6b 0100     		.2byte	0x1
 7469 0c6d 50       		.byte	0x50
 7470 0c6e B7000000 		.4byte	.LVL212-1
 7471 0c72 24010000 		.4byte	.LVL226
 7472 0c76 0100     		.2byte	0x1
 7473 0c78 56       		.byte	0x56
 7474 0c79 00000000 		.4byte	0
 7475 0c7d 00000000 		.4byte	0
 7476              	.LLST66:
 7477 0c81 12000000 		.4byte	.LVL191
 7478 0c85 16000000 		.4byte	.LVL192
 7479 0c89 0100     		.2byte	0x1
 7480 0c8b 53       		.byte	0x53
 7481 0c8c 16000000 		.4byte	.LVL192
 7482 0c90 1A000000 		.4byte	.LVL193
 7483 0c94 0300     		.2byte	0x3
 7484 0c96 73       		.byte	0x73
 7485 0c97 01       		.sleb128 1
 7486 0c98 9F       		.byte	0x9f
 7487 0c99 1A000000 		.4byte	.LVL193
 7488 0c9d 1F000000 		.4byte	.LVL194-1
 7489 0ca1 0600     		.2byte	0x6
 7490 0ca3 74       		.byte	0x74
 7491 0ca4 38       		.sleb128 56
 7492 0ca5 06       		.byte	0x6
 7493 0ca6 23       		.byte	0x23
 7494 0ca7 01       		.uleb128 0x1
 7495 0ca8 9F       		.byte	0x9f
 7496 0ca9 48000000 		.4byte	.LVL197
 7497 0cad 4A000000 		.4byte	.LVL198
 7498 0cb1 0100     		.2byte	0x1
 7499 0cb3 53       		.byte	0x53
 7500 0cb4 00000000 		.4byte	0
 7501 0cb8 00000000 		.4byte	0
 7502              	.LLST67:
 7503 0cbc 0E010000 		.4byte	.LVL222
 7504 0cc0 12010000 		.4byte	.LVL223
 7505 0cc4 0100     		.2byte	0x1
 7506 0cc6 50       		.byte	0x50
 7507 0cc7 12010000 		.4byte	.LVL223
 7508 0ccb 15010000 		.4byte	.LVL224-1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 191


 7509 0ccf 0100     		.2byte	0x1
 7510 0cd1 51       		.byte	0x51
 7511 0cd2 00000000 		.4byte	0
 7512 0cd6 00000000 		.4byte	0
 7513              	.LLST68:
 7514 0cda 00000000 		.4byte	.LVL227
 7515 0cde 0B000000 		.4byte	.LVL229-1
 7516 0ce2 0100     		.2byte	0x1
 7517 0ce4 50       		.byte	0x50
 7518 0ce5 0B000000 		.4byte	.LVL229-1
 7519 0ce9 30000000 		.4byte	.LFE74
 7520 0ced 0100     		.2byte	0x1
 7521 0cef 54       		.byte	0x54
 7522 0cf0 00000000 		.4byte	0
 7523 0cf4 00000000 		.4byte	0
 7524              	.LLST69:
 7525 0cf8 00000000 		.4byte	.LVL227
 7526 0cfc 0B000000 		.4byte	.LVL229-1
 7527 0d00 0100     		.2byte	0x1
 7528 0d02 51       		.byte	0x51
 7529 0d03 0B000000 		.4byte	.LVL229-1
 7530 0d07 30000000 		.4byte	.LFE74
 7531 0d0b 0100     		.2byte	0x1
 7532 0d0d 56       		.byte	0x56
 7533 0d0e 00000000 		.4byte	0
 7534 0d12 00000000 		.4byte	0
 7535              	.LLST70:
 7536 0d16 16000000 		.4byte	.LVL230
 7537 0d1a 1A000000 		.4byte	.LVL231
 7538 0d1e 0200     		.2byte	0x2
 7539 0d20 31       		.byte	0x31
 7540 0d21 9F       		.byte	0x9f
 7541 0d22 22000000 		.4byte	.LVL232
 7542 0d26 2C000000 		.4byte	.LVL233
 7543 0d2a 0100     		.2byte	0x1
 7544 0d2c 50       		.byte	0x50
 7545 0d2d 2C000000 		.4byte	.LVL233
 7546 0d31 30000000 		.4byte	.LFE74
 7547 0d35 0100     		.2byte	0x1
 7548 0d37 53       		.byte	0x53
 7549 0d38 00000000 		.4byte	0
 7550 0d3c 00000000 		.4byte	0
 7551              	.LLST71:
 7552 0d40 06000000 		.4byte	.LVL228
 7553 0d44 0B000000 		.4byte	.LVL229-1
 7554 0d48 0100     		.2byte	0x1
 7555 0d4a 50       		.byte	0x50
 7556 0d4b 0B000000 		.4byte	.LVL229-1
 7557 0d4f 30000000 		.4byte	.LFE74
 7558 0d53 0100     		.2byte	0x1
 7559 0d55 54       		.byte	0x54
 7560 0d56 00000000 		.4byte	0
 7561 0d5a 00000000 		.4byte	0
 7562              	.LLST72:
 7563 0d5e 00000000 		.4byte	.LVL234
 7564 0d62 0C000000 		.4byte	.LVL236
 7565 0d66 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 192


 7566 0d68 50       		.byte	0x50
 7567 0d69 0C000000 		.4byte	.LVL236
 7568 0d6d F2000000 		.4byte	.LVL264
 7569 0d71 0100     		.2byte	0x1
 7570 0d73 54       		.byte	0x54
 7571 0d74 F2000000 		.4byte	.LVL264
 7572 0d78 F8000000 		.4byte	.LFE81
 7573 0d7c 0400     		.2byte	0x4
 7574 0d7e F3       		.byte	0xf3
 7575 0d7f 01       		.uleb128 0x1
 7576 0d80 50       		.byte	0x50
 7577 0d81 9F       		.byte	0x9f
 7578 0d82 00000000 		.4byte	0
 7579 0d86 00000000 		.4byte	0
 7580              	.LLST73:
 7581 0d8a 00000000 		.4byte	.LVL234
 7582 0d8e 0C000000 		.4byte	.LVL236
 7583 0d92 0100     		.2byte	0x1
 7584 0d94 51       		.byte	0x51
 7585 0d95 0C000000 		.4byte	.LVL236
 7586 0d99 F2000000 		.4byte	.LVL264
 7587 0d9d 0100     		.2byte	0x1
 7588 0d9f 56       		.byte	0x56
 7589 0da0 F2000000 		.4byte	.LVL264
 7590 0da4 F8000000 		.4byte	.LFE81
 7591 0da8 0400     		.2byte	0x4
 7592 0daa F3       		.byte	0xf3
 7593 0dab 01       		.uleb128 0x1
 7594 0dac 51       		.byte	0x51
 7595 0dad 9F       		.byte	0x9f
 7596 0dae 00000000 		.4byte	0
 7597 0db2 00000000 		.4byte	0
 7598              	.LLST74:
 7599 0db6 00000000 		.4byte	.LVL234
 7600 0dba 0C000000 		.4byte	.LVL236
 7601 0dbe 0100     		.2byte	0x1
 7602 0dc0 52       		.byte	0x52
 7603 0dc1 0C000000 		.4byte	.LVL236
 7604 0dc5 92000000 		.4byte	.LVL252
 7605 0dc9 0200     		.2byte	0x2
 7606 0dcb 91       		.byte	0x91
 7607 0dcc 64       		.sleb128 -28
 7608 0dcd 92000000 		.4byte	.LVL252
 7609 0dd1 97000000 		.4byte	.LVL253-1
 7610 0dd5 0200     		.2byte	0x2
 7611 0dd7 71       		.byte	0x71
 7612 0dd8 00       		.sleb128 0
 7613 0dd9 97000000 		.4byte	.LVL253-1
 7614 0ddd F2000000 		.4byte	.LVL264
 7615 0de1 0200     		.2byte	0x2
 7616 0de3 91       		.byte	0x91
 7617 0de4 64       		.sleb128 -28
 7618 0de5 F2000000 		.4byte	.LVL264
 7619 0de9 F8000000 		.4byte	.LFE81
 7620 0ded 0200     		.2byte	0x2
 7621 0def 7D       		.byte	0x7d
 7622 0df0 64       		.sleb128 -28
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 193


 7623 0df1 00000000 		.4byte	0
 7624 0df5 00000000 		.4byte	0
 7625              	.LLST75:
 7626 0df9 0A000000 		.4byte	.LVL235
 7627 0dfd 0C000000 		.4byte	.LVL236
 7628 0e01 0200     		.2byte	0x2
 7629 0e03 30       		.byte	0x30
 7630 0e04 9F       		.byte	0x9f
 7631 0e05 0C000000 		.4byte	.LVL236
 7632 0e09 16000000 		.4byte	.LVL239
 7633 0e0d 0100     		.2byte	0x1
 7634 0e0f 55       		.byte	0x55
 7635 0e10 46000000 		.4byte	.LVL243
 7636 0e14 5A000000 		.4byte	.LVL246
 7637 0e18 0100     		.2byte	0x1
 7638 0e1a 55       		.byte	0x55
 7639 0e1b 5A000000 		.4byte	.LVL246
 7640 0e1f 5C000000 		.4byte	.LVL247
 7641 0e23 0200     		.2byte	0x2
 7642 0e25 31       		.byte	0x31
 7643 0e26 9F       		.byte	0x9f
 7644 0e27 5C000000 		.4byte	.LVL247
 7645 0e2b EE000000 		.4byte	.LVL263
 7646 0e2f 0100     		.2byte	0x1
 7647 0e31 55       		.byte	0x55
 7648 0e32 00000000 		.4byte	0
 7649 0e36 00000000 		.4byte	0
 7650              	.LLST76:
 7651 0e3a 16000000 		.4byte	.LVL239
 7652 0e3e 46000000 		.4byte	.LVL243
 7653 0e42 0100     		.2byte	0x1
 7654 0e44 55       		.byte	0x55
 7655 0e45 00000000 		.4byte	0
 7656 0e49 00000000 		.4byte	0
 7657              	.LLST77:
 7658 0e4d 0A000000 		.4byte	.LVL235
 7659 0e51 0C000000 		.4byte	.LVL236
 7660 0e55 0100     		.2byte	0x1
 7661 0e57 50       		.byte	0x50
 7662 0e58 0C000000 		.4byte	.LVL236
 7663 0e5c F2000000 		.4byte	.LVL264
 7664 0e60 0100     		.2byte	0x1
 7665 0e62 54       		.byte	0x54
 7666 0e63 F2000000 		.4byte	.LVL264
 7667 0e67 F8000000 		.4byte	.LFE81
 7668 0e6b 0400     		.2byte	0x4
 7669 0e6d F3       		.byte	0xf3
 7670 0e6e 01       		.uleb128 0x1
 7671 0e6f 50       		.byte	0x50
 7672 0e70 9F       		.byte	0x9f
 7673 0e71 00000000 		.4byte	0
 7674 0e75 00000000 		.4byte	0
 7675              	.LLST78:
 7676 0e79 12000000 		.4byte	.LVL238
 7677 0e7d 1D000000 		.4byte	.LVL240-1
 7678 0e81 0100     		.2byte	0x1
 7679 0e83 53       		.byte	0x53
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 194


 7680 0e84 46000000 		.4byte	.LVL243
 7681 0e88 48000000 		.4byte	.LVL244
 7682 0e8c 0100     		.2byte	0x1
 7683 0e8e 53       		.byte	0x53
 7684 0e8f 00000000 		.4byte	0
 7685 0e93 00000000 		.4byte	0
 7686              	.LLST79:
 7687 0e97 00000000 		.4byte	.LVL265
 7688 0e9b 29000000 		.4byte	.LVL269-1
 7689 0e9f 0100     		.2byte	0x1
 7690 0ea1 50       		.byte	0x50
 7691 0ea2 29000000 		.4byte	.LVL269-1
 7692 0ea6 5C000000 		.4byte	.LVL274
 7693 0eaa 0100     		.2byte	0x1
 7694 0eac 57       		.byte	0x57
 7695 0ead 5C000000 		.4byte	.LVL274
 7696 0eb1 5E000000 		.4byte	.LVL275
 7697 0eb5 0100     		.2byte	0x1
 7698 0eb7 50       		.byte	0x50
 7699 0eb8 5E000000 		.4byte	.LVL275
 7700 0ebc 60000000 		.4byte	.LVL276
 7701 0ec0 0400     		.2byte	0x4
 7702 0ec2 F3       		.byte	0xf3
 7703 0ec3 01       		.uleb128 0x1
 7704 0ec4 50       		.byte	0x50
 7705 0ec5 9F       		.byte	0x9f
 7706 0ec6 60000000 		.4byte	.LVL276
 7707 0eca 6A000000 		.4byte	.LVL277
 7708 0ece 0100     		.2byte	0x1
 7709 0ed0 57       		.byte	0x57
 7710 0ed1 6A000000 		.4byte	.LVL277
 7711 0ed5 72000000 		.4byte	.LFE82
 7712 0ed9 0400     		.2byte	0x4
 7713 0edb F3       		.byte	0xf3
 7714 0edc 01       		.uleb128 0x1
 7715 0edd 50       		.byte	0x50
 7716 0ede 9F       		.byte	0x9f
 7717 0edf 00000000 		.4byte	0
 7718 0ee3 00000000 		.4byte	0
 7719              	.LLST80:
 7720 0ee7 00000000 		.4byte	.LVL265
 7721 0eeb 29000000 		.4byte	.LVL269-1
 7722 0eef 0100     		.2byte	0x1
 7723 0ef1 51       		.byte	0x51
 7724 0ef2 29000000 		.4byte	.LVL269-1
 7725 0ef6 5C000000 		.4byte	.LVL274
 7726 0efa 0400     		.2byte	0x4
 7727 0efc F3       		.byte	0xf3
 7728 0efd 01       		.uleb128 0x1
 7729 0efe 51       		.byte	0x51
 7730 0eff 9F       		.byte	0x9f
 7731 0f00 5C000000 		.4byte	.LVL274
 7732 0f04 60000000 		.4byte	.LVL276
 7733 0f08 0100     		.2byte	0x1
 7734 0f0a 51       		.byte	0x51
 7735 0f0b 60000000 		.4byte	.LVL276
 7736 0f0f 72000000 		.4byte	.LFE82
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 195


 7737 0f13 0400     		.2byte	0x4
 7738 0f15 F3       		.byte	0xf3
 7739 0f16 01       		.uleb128 0x1
 7740 0f17 51       		.byte	0x51
 7741 0f18 9F       		.byte	0x9f
 7742 0f19 00000000 		.4byte	0
 7743 0f1d 00000000 		.4byte	0
 7744              	.LLST81:
 7745 0f21 00000000 		.4byte	.LVL265
 7746 0f25 29000000 		.4byte	.LVL269-1
 7747 0f29 0100     		.2byte	0x1
 7748 0f2b 52       		.byte	0x52
 7749 0f2c 29000000 		.4byte	.LVL269-1
 7750 0f30 5C000000 		.4byte	.LVL274
 7751 0f34 0100     		.2byte	0x1
 7752 0f36 58       		.byte	0x58
 7753 0f37 5C000000 		.4byte	.LVL274
 7754 0f3b 60000000 		.4byte	.LVL276
 7755 0f3f 0100     		.2byte	0x1
 7756 0f41 52       		.byte	0x52
 7757 0f42 60000000 		.4byte	.LVL276
 7758 0f46 6A000000 		.4byte	.LVL277
 7759 0f4a 0100     		.2byte	0x1
 7760 0f4c 58       		.byte	0x58
 7761 0f4d 6A000000 		.4byte	.LVL277
 7762 0f51 72000000 		.4byte	.LFE82
 7763 0f55 0400     		.2byte	0x4
 7764 0f57 F3       		.byte	0xf3
 7765 0f58 01       		.uleb128 0x1
 7766 0f59 52       		.byte	0x52
 7767 0f5a 9F       		.byte	0x9f
 7768 0f5b 00000000 		.4byte	0
 7769 0f5f 00000000 		.4byte	0
 7770              	.LLST82:
 7771 0f63 04000000 		.4byte	.LVL266
 7772 0f67 29000000 		.4byte	.LVL269-1
 7773 0f6b 0100     		.2byte	0x1
 7774 0f6d 50       		.byte	0x50
 7775 0f6e 29000000 		.4byte	.LVL269-1
 7776 0f72 5C000000 		.4byte	.LVL274
 7777 0f76 0100     		.2byte	0x1
 7778 0f78 57       		.byte	0x57
 7779 0f79 5C000000 		.4byte	.LVL274
 7780 0f7d 5E000000 		.4byte	.LVL275
 7781 0f81 0100     		.2byte	0x1
 7782 0f83 50       		.byte	0x50
 7783 0f84 5E000000 		.4byte	.LVL275
 7784 0f88 60000000 		.4byte	.LVL276
 7785 0f8c 0400     		.2byte	0x4
 7786 0f8e F3       		.byte	0xf3
 7787 0f8f 01       		.uleb128 0x1
 7788 0f90 50       		.byte	0x50
 7789 0f91 9F       		.byte	0x9f
 7790 0f92 60000000 		.4byte	.LVL276
 7791 0f96 6A000000 		.4byte	.LVL277
 7792 0f9a 0100     		.2byte	0x1
 7793 0f9c 57       		.byte	0x57
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 196


 7794 0f9d 6A000000 		.4byte	.LVL277
 7795 0fa1 72000000 		.4byte	.LFE82
 7796 0fa5 0400     		.2byte	0x4
 7797 0fa7 F3       		.byte	0xf3
 7798 0fa8 01       		.uleb128 0x1
 7799 0fa9 50       		.byte	0x50
 7800 0faa 9F       		.byte	0x9f
 7801 0fab 00000000 		.4byte	0
 7802 0faf 00000000 		.4byte	0
 7803              	.LLST83:
 7804 0fb3 1A000000 		.4byte	.LVL267
 7805 0fb7 2C000000 		.4byte	.LVL270
 7806 0fbb 0100     		.2byte	0x1
 7807 0fbd 54       		.byte	0x54
 7808 0fbe 2C000000 		.4byte	.LVL270
 7809 0fc2 5C000000 		.4byte	.LVL274
 7810 0fc6 0300     		.2byte	0x3
 7811 0fc8 74       		.byte	0x74
 7812 0fc9 01       		.sleb128 1
 7813 0fca 9F       		.byte	0x9f
 7814 0fcb 5C000000 		.4byte	.LVL274
 7815 0fcf 60000000 		.4byte	.LVL276
 7816 0fd3 0100     		.2byte	0x1
 7817 0fd5 54       		.byte	0x54
 7818 0fd6 60000000 		.4byte	.LVL276
 7819 0fda 6A000000 		.4byte	.LVL277
 7820 0fde 0300     		.2byte	0x3
 7821 0fe0 74       		.byte	0x74
 7822 0fe1 01       		.sleb128 1
 7823 0fe2 9F       		.byte	0x9f
 7824 0fe3 00000000 		.4byte	0
 7825 0fe7 00000000 		.4byte	0
 7826              	.LLST84:
 7827 0feb 26000000 		.4byte	.LVL268
 7828 0fef 52000000 		.4byte	.LVL272
 7829 0ff3 0100     		.2byte	0x1
 7830 0ff5 55       		.byte	0x55
 7831 0ff6 52000000 		.4byte	.LVL272
 7832 0ffa 54000000 		.4byte	.LVL273
 7833 0ffe 0300     		.2byte	0x3
 7834 1000 75       		.byte	0x75
 7835 1001 7F       		.sleb128 -1
 7836 1002 9F       		.byte	0x9f
 7837 1003 60000000 		.4byte	.LVL276
 7838 1007 6A000000 		.4byte	.LVL277
 7839 100b 0100     		.2byte	0x1
 7840 100d 55       		.byte	0x55
 7841 100e 00000000 		.4byte	0
 7842 1012 00000000 		.4byte	0
 7843              	.LLST85:
 7844 1016 6A000000 		.4byte	.LVL277
 7845 101a 6E000000 		.4byte	.LVL278
 7846 101e 0100     		.2byte	0x1
 7847 1020 56       		.byte	0x56
 7848 1021 00000000 		.4byte	0
 7849 1025 00000000 		.4byte	0
 7850              	.LLST86:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 197


 7851 1029 00000000 		.4byte	.LVL279
 7852 102d 21000000 		.4byte	.LVL282-1
 7853 1031 0100     		.2byte	0x1
 7854 1033 50       		.byte	0x50
 7855 1034 21000000 		.4byte	.LVL282-1
 7856 1038 28000000 		.4byte	.LVL284
 7857 103c 0100     		.2byte	0x1
 7858 103e 54       		.byte	0x54
 7859 103f 28000000 		.4byte	.LVL284
 7860 1043 2A000000 		.4byte	.LVL285
 7861 1047 0100     		.2byte	0x1
 7862 1049 50       		.byte	0x50
 7863 104a 2A000000 		.4byte	.LVL285
 7864 104e 30000000 		.4byte	.LFE83
 7865 1052 0400     		.2byte	0x4
 7866 1054 F3       		.byte	0xf3
 7867 1055 01       		.uleb128 0x1
 7868 1056 50       		.byte	0x50
 7869 1057 9F       		.byte	0x9f
 7870 1058 00000000 		.4byte	0
 7871 105c 00000000 		.4byte	0
 7872              	.LLST87:
 7873 1060 00000000 		.4byte	.LVL279
 7874 1064 21000000 		.4byte	.LVL282-1
 7875 1068 0100     		.2byte	0x1
 7876 106a 51       		.byte	0x51
 7877 106b 21000000 		.4byte	.LVL282-1
 7878 106f 28000000 		.4byte	.LVL284
 7879 1073 0400     		.2byte	0x4
 7880 1075 F3       		.byte	0xf3
 7881 1076 01       		.uleb128 0x1
 7882 1077 51       		.byte	0x51
 7883 1078 9F       		.byte	0x9f
 7884 1079 28000000 		.4byte	.LVL284
 7885 107d 2A000000 		.4byte	.LVL285
 7886 1081 0100     		.2byte	0x1
 7887 1083 51       		.byte	0x51
 7888 1084 2A000000 		.4byte	.LVL285
 7889 1088 30000000 		.4byte	.LFE83
 7890 108c 0400     		.2byte	0x4
 7891 108e F3       		.byte	0xf3
 7892 108f 01       		.uleb128 0x1
 7893 1090 51       		.byte	0x51
 7894 1091 9F       		.byte	0x9f
 7895 1092 00000000 		.4byte	0
 7896 1096 00000000 		.4byte	0
 7897              	.LLST88:
 7898 109a 24000000 		.4byte	.LVL283
 7899 109e 28000000 		.4byte	.LVL284
 7900 10a2 0200     		.2byte	0x2
 7901 10a4 31       		.byte	0x31
 7902 10a5 9F       		.byte	0x9f
 7903 10a6 2A000000 		.4byte	.LVL285
 7904 10aa 30000000 		.4byte	.LFE83
 7905 10ae 0100     		.2byte	0x1
 7906 10b0 50       		.byte	0x50
 7907 10b1 00000000 		.4byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 198


 7908 10b5 00000000 		.4byte	0
 7909              	.LLST89:
 7910 10b9 1E000000 		.4byte	.LVL281
 7911 10bd 28000000 		.4byte	.LVL284
 7912 10c1 0100     		.2byte	0x1
 7913 10c3 56       		.byte	0x56
 7914 10c4 00000000 		.4byte	0
 7915 10c8 00000000 		.4byte	0
 7916              	.LLST90:
 7917 10cc 02000000 		.4byte	.LVL280
 7918 10d0 21000000 		.4byte	.LVL282-1
 7919 10d4 0100     		.2byte	0x1
 7920 10d6 50       		.byte	0x50
 7921 10d7 21000000 		.4byte	.LVL282-1
 7922 10db 28000000 		.4byte	.LVL284
 7923 10df 0100     		.2byte	0x1
 7924 10e1 54       		.byte	0x54
 7925 10e2 28000000 		.4byte	.LVL284
 7926 10e6 2A000000 		.4byte	.LVL285
 7927 10ea 0100     		.2byte	0x1
 7928 10ec 50       		.byte	0x50
 7929 10ed 2A000000 		.4byte	.LVL285
 7930 10f1 30000000 		.4byte	.LFE83
 7931 10f5 0400     		.2byte	0x4
 7932 10f7 F3       		.byte	0xf3
 7933 10f8 01       		.uleb128 0x1
 7934 10f9 50       		.byte	0x50
 7935 10fa 9F       		.byte	0x9f
 7936 10fb 00000000 		.4byte	0
 7937 10ff 00000000 		.4byte	0
 7938              	.LLST91:
 7939 1103 2A000000 		.4byte	.LVL285
 7940 1107 2E000000 		.4byte	.LVL286
 7941 110b 0100     		.2byte	0x1
 7942 110d 55       		.byte	0x55
 7943 110e 00000000 		.4byte	0
 7944 1112 00000000 		.4byte	0
 7945              	.LLST92:
 7946 1116 00000000 		.4byte	.LVL287
 7947 111a 07000000 		.4byte	.LVL288-1
 7948 111e 0100     		.2byte	0x1
 7949 1120 50       		.byte	0x50
 7950 1121 07000000 		.4byte	.LVL288-1
 7951 1125 0A000000 		.4byte	.LVL289
 7952 1129 0100     		.2byte	0x1
 7953 112b 54       		.byte	0x54
 7954 112c 0A000000 		.4byte	.LVL289
 7955 1130 12000000 		.4byte	.LFE84
 7956 1134 0400     		.2byte	0x4
 7957 1136 F3       		.byte	0xf3
 7958 1137 01       		.uleb128 0x1
 7959 1138 50       		.byte	0x50
 7960 1139 9F       		.byte	0x9f
 7961 113a 00000000 		.4byte	0
 7962 113e 00000000 		.4byte	0
 7963              	.LLST93:
 7964 1142 00000000 		.4byte	.LVL291
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 199


 7965 1146 07000000 		.4byte	.LVL293-1
 7966 114a 0100     		.2byte	0x1
 7967 114c 50       		.byte	0x50
 7968 114d 07000000 		.4byte	.LVL293-1
 7969 1151 0C000000 		.4byte	.LVL294
 7970 1155 0100     		.2byte	0x1
 7971 1157 54       		.byte	0x54
 7972 1158 0C000000 		.4byte	.LVL294
 7973 115c 16000000 		.4byte	.LFE85
 7974 1160 0400     		.2byte	0x4
 7975 1162 F3       		.byte	0xf3
 7976 1163 01       		.uleb128 0x1
 7977 1164 50       		.byte	0x50
 7978 1165 9F       		.byte	0x9f
 7979 1166 00000000 		.4byte	0
 7980 116a 00000000 		.4byte	0
 7981              	.LLST94:
 7982 116e 04000000 		.4byte	.LVL292
 7983 1172 07000000 		.4byte	.LVL293-1
 7984 1176 0100     		.2byte	0x1
 7985 1178 50       		.byte	0x50
 7986 1179 07000000 		.4byte	.LVL293-1
 7987 117d 0C000000 		.4byte	.LVL294
 7988 1181 0100     		.2byte	0x1
 7989 1183 54       		.byte	0x54
 7990 1184 0C000000 		.4byte	.LVL294
 7991 1188 16000000 		.4byte	.LFE85
 7992 118c 0400     		.2byte	0x4
 7993 118e F3       		.byte	0xf3
 7994 118f 01       		.uleb128 0x1
 7995 1190 50       		.byte	0x50
 7996 1191 9F       		.byte	0x9f
 7997 1192 00000000 		.4byte	0
 7998 1196 00000000 		.4byte	0
 7999              	.LLST95:
 8000 119a 00000000 		.4byte	.LVL297
 8001 119e 02000000 		.4byte	.LVL298
 8002 11a2 0100     		.2byte	0x1
 8003 11a4 50       		.byte	0x50
 8004 11a5 02000000 		.4byte	.LVL298
 8005 11a9 04000000 		.4byte	.LFE86
 8006 11ad 0400     		.2byte	0x4
 8007 11af F3       		.byte	0xf3
 8008 11b0 01       		.uleb128 0x1
 8009 11b1 50       		.byte	0x50
 8010 11b2 9F       		.byte	0x9f
 8011 11b3 00000000 		.4byte	0
 8012 11b7 00000000 		.4byte	0
 8013              	.LLST96:
 8014 11bb 00000000 		.4byte	.LVL297
 8015 11bf 02000000 		.4byte	.LVL298
 8016 11c3 0100     		.2byte	0x1
 8017 11c5 50       		.byte	0x50
 8018 11c6 02000000 		.4byte	.LVL298
 8019 11ca 04000000 		.4byte	.LFE86
 8020 11ce 0400     		.2byte	0x4
 8021 11d0 F3       		.byte	0xf3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 200


 8022 11d1 01       		.uleb128 0x1
 8023 11d2 50       		.byte	0x50
 8024 11d3 9F       		.byte	0x9f
 8025 11d4 00000000 		.4byte	0
 8026 11d8 00000000 		.4byte	0
 8027              	.LLST97:
 8028 11dc 00000000 		.4byte	.LVL299
 8029 11e0 06000000 		.4byte	.LVL300
 8030 11e4 0100     		.2byte	0x1
 8031 11e6 50       		.byte	0x50
 8032 11e7 06000000 		.4byte	.LVL300
 8033 11eb 08000000 		.4byte	.LVL301
 8034 11ef 0400     		.2byte	0x4
 8035 11f1 F3       		.byte	0xf3
 8036 11f2 01       		.uleb128 0x1
 8037 11f3 50       		.byte	0x50
 8038 11f4 9F       		.byte	0x9f
 8039 11f5 08000000 		.4byte	.LVL301
 8040 11f9 0A000000 		.4byte	.LVL302
 8041 11fd 0100     		.2byte	0x1
 8042 11ff 50       		.byte	0x50
 8043 1200 0A000000 		.4byte	.LVL302
 8044 1204 0C000000 		.4byte	.LFE93
 8045 1208 0400     		.2byte	0x4
 8046 120a F3       		.byte	0xf3
 8047 120b 01       		.uleb128 0x1
 8048 120c 50       		.byte	0x50
 8049 120d 9F       		.byte	0x9f
 8050 120e 00000000 		.4byte	0
 8051 1212 00000000 		.4byte	0
 8052              	.LLST98:
 8053 1216 00000000 		.4byte	.LVL299
 8054 121a 06000000 		.4byte	.LVL300
 8055 121e 0100     		.2byte	0x1
 8056 1220 50       		.byte	0x50
 8057 1221 06000000 		.4byte	.LVL300
 8058 1225 08000000 		.4byte	.LVL301
 8059 1229 0400     		.2byte	0x4
 8060 122b F3       		.byte	0xf3
 8061 122c 01       		.uleb128 0x1
 8062 122d 50       		.byte	0x50
 8063 122e 9F       		.byte	0x9f
 8064 122f 08000000 		.4byte	.LVL301
 8065 1233 0A000000 		.4byte	.LVL302
 8066 1237 0100     		.2byte	0x1
 8067 1239 50       		.byte	0x50
 8068 123a 0A000000 		.4byte	.LVL302
 8069 123e 0C000000 		.4byte	.LFE93
 8070 1242 0400     		.2byte	0x4
 8071 1244 F3       		.byte	0xf3
 8072 1245 01       		.uleb128 0x1
 8073 1246 50       		.byte	0x50
 8074 1247 9F       		.byte	0x9f
 8075 1248 00000000 		.4byte	0
 8076 124c 00000000 		.4byte	0
 8077              	.LLST99:
 8078 1250 00000000 		.4byte	.LVL303
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 201


 8079 1254 0A000000 		.4byte	.LVL304
 8080 1258 0100     		.2byte	0x1
 8081 125a 50       		.byte	0x50
 8082 125b 0A000000 		.4byte	.LVL304
 8083 125f 0C000000 		.4byte	.LVL305
 8084 1263 0400     		.2byte	0x4
 8085 1265 F3       		.byte	0xf3
 8086 1266 01       		.uleb128 0x1
 8087 1267 50       		.byte	0x50
 8088 1268 9F       		.byte	0x9f
 8089 1269 0C000000 		.4byte	.LVL305
 8090 126d 0E000000 		.4byte	.LVL306
 8091 1271 0100     		.2byte	0x1
 8092 1273 50       		.byte	0x50
 8093 1274 0E000000 		.4byte	.LVL306
 8094 1278 10000000 		.4byte	.LFE95
 8095 127c 0400     		.2byte	0x4
 8096 127e F3       		.byte	0xf3
 8097 127f 01       		.uleb128 0x1
 8098 1280 50       		.byte	0x50
 8099 1281 9F       		.byte	0x9f
 8100 1282 00000000 		.4byte	0
 8101 1286 00000000 		.4byte	0
 8102              	.LLST100:
 8103 128a 00000000 		.4byte	.LVL303
 8104 128e 0A000000 		.4byte	.LVL304
 8105 1292 0100     		.2byte	0x1
 8106 1294 50       		.byte	0x50
 8107 1295 0A000000 		.4byte	.LVL304
 8108 1299 0C000000 		.4byte	.LVL305
 8109 129d 0400     		.2byte	0x4
 8110 129f F3       		.byte	0xf3
 8111 12a0 01       		.uleb128 0x1
 8112 12a1 50       		.byte	0x50
 8113 12a2 9F       		.byte	0x9f
 8114 12a3 0C000000 		.4byte	.LVL305
 8115 12a7 0E000000 		.4byte	.LVL306
 8116 12ab 0100     		.2byte	0x1
 8117 12ad 50       		.byte	0x50
 8118 12ae 0E000000 		.4byte	.LVL306
 8119 12b2 10000000 		.4byte	.LFE95
 8120 12b6 0400     		.2byte	0x4
 8121 12b8 F3       		.byte	0xf3
 8122 12b9 01       		.uleb128 0x1
 8123 12ba 50       		.byte	0x50
 8124 12bb 9F       		.byte	0x9f
 8125 12bc 00000000 		.4byte	0
 8126 12c0 00000000 		.4byte	0
 8127              	.LLST101:
 8128 12c4 00000000 		.4byte	.LVL307
 8129 12c8 04000000 		.4byte	.LVL308
 8130 12cc 0200     		.2byte	0x2
 8131 12ce 30       		.byte	0x30
 8132 12cf 9F       		.byte	0x9f
 8133 12d0 04000000 		.4byte	.LVL308
 8134 12d4 16000000 		.4byte	.LVL309
 8135 12d8 0100     		.2byte	0x1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 202


 8136 12da 53       		.byte	0x53
 8137 12db 1A000000 		.4byte	.LVL310
 8138 12df 28000000 		.4byte	.LFE96
 8139 12e3 0100     		.2byte	0x1
 8140 12e5 53       		.byte	0x53
 8141 12e6 00000000 		.4byte	0
 8142 12ea 00000000 		.4byte	0
 8143              	.LLST102:
 8144 12ee 00000000 		.4byte	.LVL312
 8145 12f2 16000000 		.4byte	.LVL314
 8146 12f6 0100     		.2byte	0x1
 8147 12f8 50       		.byte	0x50
 8148 12f9 16000000 		.4byte	.LVL314
 8149 12fd 18000000 		.4byte	.LVL315
 8150 1301 0400     		.2byte	0x4
 8151 1303 F3       		.byte	0xf3
 8152 1304 01       		.uleb128 0x1
 8153 1305 50       		.byte	0x50
 8154 1306 9F       		.byte	0x9f
 8155 1307 18000000 		.4byte	.LVL315
 8156 130b 20000000 		.4byte	.LVL317
 8157 130f 0100     		.2byte	0x1
 8158 1311 50       		.byte	0x50
 8159 1312 20000000 		.4byte	.LVL317
 8160 1316 28000000 		.4byte	.LFE97
 8161 131a 0400     		.2byte	0x4
 8162 131c F3       		.byte	0xf3
 8163 131d 01       		.uleb128 0x1
 8164 131e 50       		.byte	0x50
 8165 131f 9F       		.byte	0x9f
 8166 1320 00000000 		.4byte	0
 8167 1324 00000000 		.4byte	0
 8168              	.LLST103:
 8169 1328 00000000 		.4byte	.LVL312
 8170 132c 04000000 		.4byte	.LVL313
 8171 1330 0200     		.2byte	0x2
 8172 1332 30       		.byte	0x30
 8173 1333 9F       		.byte	0x9f
 8174 1334 04000000 		.4byte	.LVL313
 8175 1338 28000000 		.4byte	.LFE97
 8176 133c 0100     		.2byte	0x1
 8177 133e 53       		.byte	0x53
 8178 133f 00000000 		.4byte	0
 8179 1343 00000000 		.4byte	0
 8180              	.LLST104:
 8181 1347 00000000 		.4byte	.LVL312
 8182 134b 16000000 		.4byte	.LVL314
 8183 134f 0200     		.2byte	0x2
 8184 1351 30       		.byte	0x30
 8185 1352 9F       		.byte	0x9f
 8186 1353 16000000 		.4byte	.LVL314
 8187 1357 18000000 		.4byte	.LVL315
 8188 135b 0100     		.2byte	0x1
 8189 135d 50       		.byte	0x50
 8190 135e 18000000 		.4byte	.LVL315
 8191 1362 20000000 		.4byte	.LVL317
 8192 1366 0200     		.2byte	0x2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 203


 8193 1368 30       		.byte	0x30
 8194 1369 9F       		.byte	0x9f
 8195 136a 20000000 		.4byte	.LVL317
 8196 136e 28000000 		.4byte	.LFE97
 8197 1372 0100     		.2byte	0x1
 8198 1374 50       		.byte	0x50
 8199 1375 00000000 		.4byte	0
 8200 1379 00000000 		.4byte	0
 8201              	.LLST105:
 8202 137d 00000000 		.4byte	.LVL318
 8203 1381 04000000 		.4byte	.LVL319
 8204 1385 0200     		.2byte	0x2
 8205 1387 30       		.byte	0x30
 8206 1388 9F       		.byte	0x9f
 8207 1389 04000000 		.4byte	.LVL319
 8208 138d 1C000000 		.4byte	.LVL320
 8209 1391 0100     		.2byte	0x1
 8210 1393 53       		.byte	0x53
 8211 1394 20000000 		.4byte	.LVL321
 8212 1398 2C000000 		.4byte	.LFE98
 8213 139c 0100     		.2byte	0x1
 8214 139e 53       		.byte	0x53
 8215 139f 00000000 		.4byte	0
 8216 13a3 00000000 		.4byte	0
 8217              	.LLST106:
 8218 13a7 00000000 		.4byte	.LVL323
 8219 13ab 07000000 		.4byte	.LVL325-1
 8220 13af 0100     		.2byte	0x1
 8221 13b1 50       		.byte	0x50
 8222 13b2 07000000 		.4byte	.LVL325-1
 8223 13b6 10000000 		.4byte	.LFE87
 8224 13ba 0100     		.2byte	0x1
 8225 13bc 54       		.byte	0x54
 8226 13bd 00000000 		.4byte	0
 8227 13c1 00000000 		.4byte	0
 8228              	.LLST107:
 8229 13c5 04000000 		.4byte	.LVL324
 8230 13c9 07000000 		.4byte	.LVL325-1
 8231 13cd 0100     		.2byte	0x1
 8232 13cf 50       		.byte	0x50
 8233 13d0 07000000 		.4byte	.LVL325-1
 8234 13d4 10000000 		.4byte	.LFE87
 8235 13d8 0100     		.2byte	0x1
 8236 13da 54       		.byte	0x54
 8237 13db 00000000 		.4byte	0
 8238 13df 00000000 		.4byte	0
 8239              		.section	.debug_aranges,"",%progbits
 8240 0000 0C010000 		.4byte	0x10c
 8241 0004 0200     		.2byte	0x2
 8242 0006 00000000 		.4byte	.Ldebug_info0
 8243 000a 04       		.byte	0x4
 8244 000b 00       		.byte	0
 8245 000c 0000     		.2byte	0
 8246 000e 0000     		.2byte	0
 8247 0010 00000000 		.4byte	.LFB88
 8248 0014 12000000 		.4byte	.LFE88-.LFB88
 8249 0018 00000000 		.4byte	.LFB94
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 204


 8250 001c 1E000000 		.4byte	.LFE94-.LFB94
 8251 0020 00000000 		.4byte	.LFB92
 8252 0024 1A000000 		.4byte	.LFE92-.LFB92
 8253 0028 00000000 		.4byte	.LFB89
 8254 002c 76000000 		.4byte	.LFE89-.LFB89
 8255 0030 00000000 		.4byte	.LFB90
 8256 0034 24000000 		.4byte	.LFE90-.LFB90
 8257 0038 00000000 		.4byte	.LFB91
 8258 003c 66000000 		.4byte	.LFE91-.LFB91
 8259 0040 00000000 		.4byte	.LFB68
 8260 0044 6C000000 		.4byte	.LFE68-.LFB68
 8261 0048 00000000 		.4byte	.LFB70
 8262 004c 1C000000 		.4byte	.LFE70-.LFB70
 8263 0050 00000000 		.4byte	.LFB69
 8264 0054 2E000000 		.4byte	.LFE69-.LFB69
 8265 0058 00000000 		.4byte	.LFB75
 8266 005c 16000000 		.4byte	.LFE75-.LFB75
 8267 0060 00000000 		.4byte	.LFB76
 8268 0064 08010000 		.4byte	.LFE76-.LFB76
 8269 0068 00000000 		.4byte	.LFB71
 8270 006c 18000000 		.4byte	.LFE71-.LFB71
 8271 0070 00000000 		.4byte	.LFB72
 8272 0074 16000000 		.4byte	.LFE72-.LFB72
 8273 0078 00000000 		.4byte	.LFB73
 8274 007c 2C000000 		.4byte	.LFE73-.LFB73
 8275 0080 00000000 		.4byte	.LFB77
 8276 0084 70000000 		.4byte	.LFE77-.LFB77
 8277 0088 00000000 		.4byte	.LFB78
 8278 008c 64000000 		.4byte	.LFE78-.LFB78
 8279 0090 00000000 		.4byte	.LFB79
 8280 0094 F8000000 		.4byte	.LFE79-.LFB79
 8281 0098 00000000 		.4byte	.LFB80
 8282 009c 28010000 		.4byte	.LFE80-.LFB80
 8283 00a0 00000000 		.4byte	.LFB74
 8284 00a4 30000000 		.4byte	.LFE74-.LFB74
 8285 00a8 00000000 		.4byte	.LFB81
 8286 00ac F8000000 		.4byte	.LFE81-.LFB81
 8287 00b0 00000000 		.4byte	.LFB82
 8288 00b4 72000000 		.4byte	.LFE82-.LFB82
 8289 00b8 00000000 		.4byte	.LFB83
 8290 00bc 30000000 		.4byte	.LFE83-.LFB83
 8291 00c0 00000000 		.4byte	.LFB84
 8292 00c4 12000000 		.4byte	.LFE84-.LFB84
 8293 00c8 00000000 		.4byte	.LFB85
 8294 00cc 16000000 		.4byte	.LFE85-.LFB85
 8295 00d0 00000000 		.4byte	.LFB86
 8296 00d4 04000000 		.4byte	.LFE86-.LFB86
 8297 00d8 00000000 		.4byte	.LFB93
 8298 00dc 0C000000 		.4byte	.LFE93-.LFB93
 8299 00e0 00000000 		.4byte	.LFB95
 8300 00e4 10000000 		.4byte	.LFE95-.LFB95
 8301 00e8 00000000 		.4byte	.LFB96
 8302 00ec 28000000 		.4byte	.LFE96-.LFB96
 8303 00f0 00000000 		.4byte	.LFB97
 8304 00f4 28000000 		.4byte	.LFE97-.LFB97
 8305 00f8 00000000 		.4byte	.LFB98
 8306 00fc 2C000000 		.4byte	.LFE98-.LFB98
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 205


 8307 0100 00000000 		.4byte	.LFB87
 8308 0104 10000000 		.4byte	.LFE87-.LFB87
 8309 0108 00000000 		.4byte	0
 8310 010c 00000000 		.4byte	0
 8311              		.section	.debug_ranges,"",%progbits
 8312              	.Ldebug_ranges0:
 8313 0000 26000000 		.4byte	.LBB27
 8314 0004 5C000000 		.4byte	.LBE27
 8315 0008 60000000 		.4byte	.LBB28
 8316 000c 6A000000 		.4byte	.LBE28
 8317 0010 00000000 		.4byte	0
 8318 0014 00000000 		.4byte	0
 8319 0018 1E000000 		.4byte	.LBB34
 8320 001c 50000000 		.4byte	.LBE34
 8321 0020 54000000 		.4byte	.LBB35
 8322 0024 5E000000 		.4byte	.LBE35
 8323 0028 00000000 		.4byte	0
 8324 002c 00000000 		.4byte	0
 8325 0030 20000000 		.4byte	.LBB45
 8326 0034 5C000000 		.4byte	.LBE45
 8327 0038 60000000 		.4byte	.LBB46
 8328 003c 6A000000 		.4byte	.LBE46
 8329 0040 00000000 		.4byte	0
 8330 0044 00000000 		.4byte	0
 8331 0048 00000000 		.4byte	.LFB88
 8332 004c 12000000 		.4byte	.LFE88
 8333 0050 00000000 		.4byte	.LFB94
 8334 0054 1E000000 		.4byte	.LFE94
 8335 0058 00000000 		.4byte	.LFB92
 8336 005c 1A000000 		.4byte	.LFE92
 8337 0060 00000000 		.4byte	.LFB89
 8338 0064 76000000 		.4byte	.LFE89
 8339 0068 00000000 		.4byte	.LFB90
 8340 006c 24000000 		.4byte	.LFE90
 8341 0070 00000000 		.4byte	.LFB91
 8342 0074 66000000 		.4byte	.LFE91
 8343 0078 00000000 		.4byte	.LFB68
 8344 007c 6C000000 		.4byte	.LFE68
 8345 0080 00000000 		.4byte	.LFB70
 8346 0084 1C000000 		.4byte	.LFE70
 8347 0088 00000000 		.4byte	.LFB69
 8348 008c 2E000000 		.4byte	.LFE69
 8349 0090 00000000 		.4byte	.LFB75
 8350 0094 16000000 		.4byte	.LFE75
 8351 0098 00000000 		.4byte	.LFB76
 8352 009c 08010000 		.4byte	.LFE76
 8353 00a0 00000000 		.4byte	.LFB71
 8354 00a4 18000000 		.4byte	.LFE71
 8355 00a8 00000000 		.4byte	.LFB72
 8356 00ac 16000000 		.4byte	.LFE72
 8357 00b0 00000000 		.4byte	.LFB73
 8358 00b4 2C000000 		.4byte	.LFE73
 8359 00b8 00000000 		.4byte	.LFB77
 8360 00bc 70000000 		.4byte	.LFE77
 8361 00c0 00000000 		.4byte	.LFB78
 8362 00c4 64000000 		.4byte	.LFE78
 8363 00c8 00000000 		.4byte	.LFB79
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 206


 8364 00cc F8000000 		.4byte	.LFE79
 8365 00d0 00000000 		.4byte	.LFB80
 8366 00d4 28010000 		.4byte	.LFE80
 8367 00d8 00000000 		.4byte	.LFB74
 8368 00dc 30000000 		.4byte	.LFE74
 8369 00e0 00000000 		.4byte	.LFB81
 8370 00e4 F8000000 		.4byte	.LFE81
 8371 00e8 00000000 		.4byte	.LFB82
 8372 00ec 72000000 		.4byte	.LFE82
 8373 00f0 00000000 		.4byte	.LFB83
 8374 00f4 30000000 		.4byte	.LFE83
 8375 00f8 00000000 		.4byte	.LFB84
 8376 00fc 12000000 		.4byte	.LFE84
 8377 0100 00000000 		.4byte	.LFB85
 8378 0104 16000000 		.4byte	.LFE85
 8379 0108 00000000 		.4byte	.LFB86
 8380 010c 04000000 		.4byte	.LFE86
 8381 0110 00000000 		.4byte	.LFB93
 8382 0114 0C000000 		.4byte	.LFE93
 8383 0118 00000000 		.4byte	.LFB95
 8384 011c 10000000 		.4byte	.LFE95
 8385 0120 00000000 		.4byte	.LFB96
 8386 0124 28000000 		.4byte	.LFE96
 8387 0128 00000000 		.4byte	.LFB97
 8388 012c 28000000 		.4byte	.LFE97
 8389 0130 00000000 		.4byte	.LFB98
 8390 0134 2C000000 		.4byte	.LFE98
 8391 0138 00000000 		.4byte	.LFB87
 8392 013c 10000000 		.4byte	.LFE87
 8393 0140 00000000 		.4byte	0
 8394 0144 00000000 		.4byte	0
 8395              		.section	.debug_line,"",%progbits
 8396              	.Ldebug_line0:
 8397 0000 F8060000 		.section	.debug_str,"MS",%progbits,1
 8397      02004802 
 8397      00000201 
 8397      FB0E0D00 
 8397      01010101 
 8398              	.LASF33:
 8399 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 8399      6D626572 
 8399      4F664974 
 8399      656D7300 
 8400              	.LASF141:
 8401 0010 76506F72 		.ascii	"vPortExitCritical\000"
 8401      74457869 
 8401      74437269 
 8401      74696361 
 8401      6C00
 8402              	.LASF60:
 8403 0022 53656D61 		.ascii	"SemaphoreData\000"
 8403      70686F72 
 8403      65446174 
 8403      6100
 8404              	.LASF160:
 8405 0030 74736B54 		.ascii	"tskTaskControlBlock\000"
 8405      61736B43 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 207


 8405      6F6E7472 
 8405      6F6C426C 
 8405      6F636B00 
 8406              	.LASF63:
 8407 0044 53656D61 		.ascii	"SemaphoreData_t\000"
 8407      70686F72 
 8407      65446174 
 8407      615F7400 
 8408              	.LASF117:
 8409 0054 78517565 		.ascii	"xQueueReceive\000"
 8409      75655265 
 8409      63656976 
 8409      6500
 8410              	.LASF125:
 8411 0062 78517565 		.ascii	"xQueueReceiveFromISR\000"
 8411      75655265 
 8411      63656976 
 8411      6546726F 
 8411      6D495352 
 8412              	.LASF50:
 8413 0077 78546173 		.ascii	"xTasksWaitingToReceive\000"
 8413      6B735761 
 8413      6974696E 
 8413      67546F52 
 8413      65636569 
 8414              	.LASF113:
 8415 008e 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8415      67686572 
 8415      5072696F 
 8415      72697479 
 8415      5461736B 
 8416              	.LASF111:
 8417 00a8 70784D75 		.ascii	"pxMutex\000"
 8417      74657800 
 8418              	.LASF118:
 8419 00b0 78517565 		.ascii	"xQueueSemaphoreTake\000"
 8419      75655365 
 8419      6D617068 
 8419      6F726554 
 8419      616B6500 
 8420              	.LASF0:
 8421 00c4 756E7369 		.ascii	"unsigned int\000"
 8421      676E6564 
 8421      20696E74 
 8421      00
 8422              	.LASF34:
 8423 00d1 7078496E 		.ascii	"pxIndex\000"
 8423      64657800 
 8424              	.LASF41:
 8425 00d9 7854494D 		.ascii	"xTIME_OUT\000"
 8425      455F4F55 
 8425      5400
 8426              	.LASF92:
 8427 00e3 70784E65 		.ascii	"pxNewQueue\000"
 8427      77517565 
 8427      756500
 8428              	.LASF10:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 208


 8429 00ee 5F5F696E 		.ascii	"__int32_t\000"
 8429      7433325F 
 8429      7400
 8430              	.LASF31:
 8431 00f8 784C4953 		.ascii	"xLIST_ITEM\000"
 8431      545F4954 
 8431      454D00
 8432              	.LASF68:
 8433 0103 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 8433      455F5245 
 8433      47495354 
 8433      52595F49 
 8433      54454D00 
 8434              	.LASF49:
 8435 0117 78546173 		.ascii	"xTasksWaitingToSend\000"
 8435      6B735761 
 8435      6974696E 
 8435      67546F53 
 8435      656E6400 
 8436              	.LASF129:
 8437 012b 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 8437      65756553 
 8437      70616365 
 8437      73417661 
 8437      696C6162 
 8438              	.LASF55:
 8439 0142 6354784C 		.ascii	"cTxLock\000"
 8439      6F636B00 
 8440              	.LASF42:
 8441 014a 784F7665 		.ascii	"xOverflowCount\000"
 8441      72666C6F 
 8441      77436F75 
 8441      6E7400
 8442              	.LASF140:
 8443 0159 76506F72 		.ascii	"vPortEnterCritical\000"
 8443      74456E74 
 8443      65724372 
 8443      69746963 
 8443      616C00
 8444              	.LASF62:
 8445 016c 75785265 		.ascii	"uxRecursiveCallCount\000"
 8445      63757273 
 8445      69766543 
 8445      616C6C43 
 8445      6F756E74 
 8446              	.LASF67:
 8447 0181 51756575 		.ascii	"Queue_t\000"
 8447      655F7400 
 8448              	.LASF101:
 8449 0189 78436F70 		.ascii	"xCopyPosition\000"
 8449      79506F73 
 8449      6974696F 
 8449      6E00
 8450              	.LASF128:
 8451 0197 75785265 		.ascii	"uxReturn\000"
 8451      7475726E 
 8451      00
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 209


 8452              	.LASF72:
 8453 01a0 51756575 		.ascii	"QueueRegistryItem_t\000"
 8453      65526567 
 8453      69737472 
 8453      79497465 
 8453      6D5F7400 
 8454              	.LASF137:
 8455 01b4 76517565 		.ascii	"vQueueDelete\000"
 8455      75654465 
 8455      6C657465 
 8455      00
 8456              	.LASF58:
 8457 01c1 70635265 		.ascii	"pcReadFrom\000"
 8457      61644672 
 8457      6F6D00
 8458              	.LASF136:
 8459 01cc 76517565 		.ascii	"vQueueUnregisterQueue\000"
 8459      7565556E 
 8459      72656769 
 8459      73746572 
 8459      51756575 
 8460              	.LASF114:
 8461 01e2 75785361 		.ascii	"uxSavedInterruptStatus\000"
 8461      76656449 
 8461      6E746572 
 8461      72757074 
 8461      53746174 
 8462              	.LASF88:
 8463 01f9 70727649 		.ascii	"prvInitialiseNewQueue\000"
 8463      6E697469 
 8463      616C6973 
 8463      654E6577 
 8463      51756575 
 8464              	.LASF20:
 8465 020f 75696E74 		.ascii	"uint32_t\000"
 8465      33325F74 
 8465      00
 8466              	.LASF17:
 8467 0218 696E7438 		.ascii	"int8_t\000"
 8467      5F7400
 8468              	.LASF108:
 8469 021f 75784D75 		.ascii	"uxMutexSize\000"
 8469      74657853 
 8469      697A6500 
 8470              	.LASF103:
 8471 022b 78596965 		.ascii	"xYieldRequired\000"
 8471      6C645265 
 8471      71756972 
 8471      656400
 8472              	.LASF158:
 8473 023a 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS\\queue.c\000"
 8473      2E5C4672 
 8473      65655254 
 8473      4F535C71 
 8473      75657565 
 8474              	.LASF64:
 8475 0251 78517565 		.ascii	"xQueue\000"
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 210


 8475      756500
 8476              	.LASF21:
 8477 0258 666C6F61 		.ascii	"float\000"
 8477      7400
 8478              	.LASF46:
 8479 025e 51756575 		.ascii	"QueueDefinition\000"
 8479      65446566 
 8479      696E6974 
 8479      696F6E00 
 8480              	.LASF14:
 8481 026e 6C6F6E67 		.ascii	"long long unsigned int\000"
 8481      206C6F6E 
 8481      6720756E 
 8481      7369676E 
 8481      65642069 
 8482              	.LASF80:
 8483 0285 70727649 		.ascii	"prvIsQueueEmpty\000"
 8483      73517565 
 8483      7565456D 
 8483      70747900 
 8484              	.LASF84:
 8485 0295 70764275 		.ascii	"pvBuffer\000"
 8485      66666572 
 8485      00
 8486              	.LASF75:
 8487 029e 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 8487      65744469 
 8487      73696E68 
 8487      65726974 
 8487      5072696F 
 8488              	.LASF28:
 8489 02c3 70785072 		.ascii	"pxPrevious\000"
 8489      6576696F 
 8489      757300
 8490              	.LASF51:
 8491 02ce 75784D65 		.ascii	"uxMessagesWaiting\000"
 8491      73736167 
 8491      65735761 
 8491      6974696E 
 8491      6700
 8492              	.LASF65:
 8493 02e0 7853656D 		.ascii	"xSemaphore\000"
 8493      6170686F 
 8493      726500
 8494              	.LASF146:
 8495 02eb 7076506F 		.ascii	"pvPortMalloc\000"
 8495      72744D61 
 8495      6C6C6F63 
 8495      00
 8496              	.LASF148:
 8497 02f8 76546173 		.ascii	"vTaskSuspendAll\000"
 8497      6B537573 
 8497      70656E64 
 8497      416C6C00 
 8498              	.LASF115:
 8499 0308 75785072 		.ascii	"uxPreviousMessagesWaiting\000"
 8499      6576696F 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 211


 8499      75734D65 
 8499      73736167 
 8499      65735761 
 8500              	.LASF123:
 8501 0322 78517565 		.ascii	"xQueuePeek\000"
 8501      75655065 
 8501      656B00
 8502              	.LASF157:
 8503 032d 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 8503      43313120 
 8503      352E342E 
 8503      31203230 
 8503      31363036 
 8504 0360 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 8504      20726576 
 8504      6973696F 
 8504      6E203233 
 8504      37373135 
 8505 0393 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 8505      66756E63 
 8505      74696F6E 
 8505      2D736563 
 8505      74696F6E 
 8506              	.LASF102:
 8507 03bb 78456E74 		.ascii	"xEntryTimeSet\000"
 8507      72795469 
 8507      6D655365 
 8507      7400
 8508              	.LASF3:
 8509 03c9 73697A65 		.ascii	"size_t\000"
 8509      5F7400
 8510              	.LASF104:
 8511 03d0 7854696D 		.ascii	"xTimeOut\000"
 8511      654F7574 
 8511      00
 8512              	.LASF70:
 8513 03d9 7848616E 		.ascii	"xHandle\000"
 8513      646C6500 
 8514              	.LASF69:
 8515 03e1 70635175 		.ascii	"pcQueueName\000"
 8515      6575654E 
 8515      616D6500 
 8516              	.LASF37:
 8517 03ed 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8517      495F4C49 
 8517      53545F49 
 8517      54454D00 
 8518              	.LASF32:
 8519 03fd 784C4953 		.ascii	"xLIST\000"
 8519      5400
 8520              	.LASF112:
 8521 0403 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 8521      75654765 
 8521      6E657269 
 8521      6353656E 
 8521      6446726F 
 8522              	.LASF162:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 212


 8523 041c 76506F72 		.ascii	"vPortSetBASEPRI\000"
 8523      74536574 
 8523      42415345 
 8523      50524900 
 8524              	.LASF81:
 8525 042c 70727643 		.ascii	"prvCopyDataToQueue\000"
 8525      6F707944 
 8525      61746154 
 8525      6F517565 
 8525      756500
 8526              	.LASF99:
 8527 043f 78517565 		.ascii	"xQueueGenericSend\000"
 8527      75654765 
 8527      6E657269 
 8527      6353656E 
 8527      6400
 8528              	.LASF150:
 8529 0451 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8529      6B506C61 
 8529      63654F6E 
 8529      4576656E 
 8529      744C6973 
 8530              	.LASF153:
 8531 0467 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 8531      736B496E 
 8531      6372656D 
 8531      656E744D 
 8531      75746578 
 8532              	.LASF53:
 8533 0485 75784974 		.ascii	"uxItemSize\000"
 8533      656D5369 
 8533      7A6500
 8534              	.LASF98:
 8535 0490 7578496E 		.ascii	"uxInitialCount\000"
 8535      69746961 
 8535      6C436F75 
 8535      6E7400
 8536              	.LASF159:
 8537 049f 433A5C55 		.ascii	"C:\\Users\\vincent\\Documents\\PSoC Creator\\Reform"
 8537      73657273 
 8537      5C76696E 
 8537      63656E74 
 8537      5C446F63 
 8538 04cd 6174576F 		.ascii	"atWorkspace\\Project1A.cydsn\000"
 8538      726B7370 
 8538      6163655C 
 8538      50726F6A 
 8538      65637431 
 8539              	.LASF142:
 8540 04e9 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 8540      6B507269 
 8540      6F726974 
 8540      79446973 
 8540      696E6865 
 8541              	.LASF107:
 8542 0501 75784D75 		.ascii	"uxMutexLength\000"
 8542      7465784C 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 213


 8542      656E6774 
 8542      6800
 8543              	.LASF16:
 8544 050f 63686172 		.ascii	"char\000"
 8544      00
 8545              	.LASF36:
 8546 0514 4C697374 		.ascii	"ListItem_t\000"
 8546      4974656D 
 8546      5F7400
 8547              	.LASF76:
 8548 051f 70727649 		.ascii	"prvIsQueueFull\000"
 8548      73517565 
 8548      75654675 
 8548      6C6C00
 8549              	.LASF56:
 8550 052e 51756575 		.ascii	"QueuePointers\000"
 8550      65506F69 
 8550      6E746572 
 8550      7300
 8551              	.LASF74:
 8552 053c 756C4E65 		.ascii	"ulNewBASEPRI\000"
 8552      77424153 
 8552      45505249 
 8552      00
 8553              	.LASF24:
 8554 0549 55426173 		.ascii	"UBaseType_t\000"
 8554      65547970 
 8554      655F7400 
 8555              	.LASF116:
 8556 0555 78517565 		.ascii	"xQueueGiveFromISR\000"
 8556      75654769 
 8556      76654672 
 8556      6F6D4953 
 8556      5200
 8557              	.LASF139:
 8558 0567 78517565 		.ascii	"xQueueRegistry\000"
 8558      75655265 
 8558      67697374 
 8558      727900
 8559              	.LASF45:
 8560 0576 51756575 		.ascii	"QueueHandle_t\000"
 8560      6548616E 
 8560      646C655F 
 8560      7400
 8561              	.LASF35:
 8562 0584 784C6973 		.ascii	"xListEnd\000"
 8562      74456E64 
 8562      00
 8563              	.LASF130:
 8564 058d 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 8564      6575654D 
 8564      65737361 
 8564      67657357 
 8564      61697469 
 8565              	.LASF38:
 8566 05ab 4D696E69 		.ascii	"MiniListItem_t\000"
 8566      4C697374 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 214


 8566      4974656D 
 8566      5F7400
 8567              	.LASF18:
 8568 05ba 75696E74 		.ascii	"uint8_t\000"
 8568      385F7400 
 8569              	.LASF71:
 8570 05c2 78517565 		.ascii	"xQueueRegistryItem\000"
 8570      75655265 
 8570      67697374 
 8570      72794974 
 8570      656D00
 8571              	.LASF94:
 8572 05d5 78517565 		.ascii	"xQueueGenericCreate\000"
 8572      75654765 
 8572      6E657269 
 8572      63437265 
 8572      61746500 
 8573              	.LASF106:
 8574 05e9 78517565 		.ascii	"xQueueCreateMutex\000"
 8574      75654372 
 8574      65617465 
 8574      4D757465 
 8574      7800
 8575              	.LASF161:
 8576 05fb 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 8576      72745261 
 8576      69736542 
 8576      41534550 
 8576      524900
 8577              	.LASF1:
 8578 060e 6C6F6E67 		.ascii	"long long int\000"
 8578      206C6F6E 
 8578      6720696E 
 8578      7400
 8579              	.LASF105:
 8580 061c 70727649 		.ascii	"prvInitialiseMutex\000"
 8580      6E697469 
 8580      616C6973 
 8580      654D7574 
 8580      657800
 8581              	.LASF23:
 8582 062f 42617365 		.ascii	"BaseType_t\000"
 8582      54797065 
 8582      5F7400
 8583              	.LASF90:
 8584 063a 70756351 		.ascii	"pucQueueStorage\000"
 8584      75657565 
 8584      53746F72 
 8584      61676500 
 8585              	.LASF110:
 8586 064a 784D7574 		.ascii	"xMutex\000"
 8586      657800
 8587              	.LASF43:
 8588 0651 7854696D 		.ascii	"xTimeOnEntering\000"
 8588      654F6E45 
 8588      6E746572 
 8588      696E6700 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 215


 8589              	.LASF135:
 8590 0661 76517565 		.ascii	"vQueueAddToRegistry\000"
 8590      75654164 
 8590      64546F52 
 8590      65676973 
 8590      74727900 
 8591              	.LASF27:
 8592 0675 70784E65 		.ascii	"pxNext\000"
 8592      787400
 8593              	.LASF87:
 8594 067c 784E6577 		.ascii	"xNewQueue\000"
 8594      51756575 
 8594      6500
 8595              	.LASF97:
 8596 0686 75784D61 		.ascii	"uxMaxCount\000"
 8596      78436F75 
 8596      6E7400
 8597              	.LASF44:
 8598 0691 54696D65 		.ascii	"TimeOut_t\000"
 8598      4F75745F 
 8598      7400
 8599              	.LASF147:
 8600 069b 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 8600      6B496E74 
 8600      65726E61 
 8600      6C536574 
 8600      54696D65 
 8601              	.LASF124:
 8602 06b8 70634F72 		.ascii	"pcOriginalReadPosition\000"
 8602      6967696E 
 8602      616C5265 
 8602      6164506F 
 8602      73697469 
 8603              	.LASF40:
 8604 06cf 5461736B 		.ascii	"TaskHandle_t\000"
 8604      48616E64 
 8604      6C655F74 
 8604      00
 8605              	.LASF163:
 8606 06dc 756C4E65 		.ascii	"ulNewMaskValue\000"
 8606      774D6173 
 8606      6B56616C 
 8606      756500
 8607              	.LASF78:
 8608 06eb 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 8608      67686573 
 8608      74507269 
 8608      6F726974 
 8608      794F6657 
 8609              	.LASF91:
 8610 070b 75635175 		.ascii	"ucQueueType\000"
 8610      65756554 
 8610      79706500 
 8611              	.LASF39:
 8612 0717 4C697374 		.ascii	"List_t\000"
 8612      5F7400
 8613              	.LASF120:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 216


 8614 071e 75785365 		.ascii	"uxSemaphoreCount\000"
 8614      6D617068 
 8614      6F726543 
 8614      6F756E74 
 8614      00
 8615              	.LASF48:
 8616 072f 70635772 		.ascii	"pcWriteTo\000"
 8616      69746554 
 8616      6F00
 8617              	.LASF25:
 8618 0739 5469636B 		.ascii	"TickType_t\000"
 8618      54797065 
 8618      5F7400
 8619              	.LASF4:
 8620 0744 5F5F696E 		.ascii	"__int8_t\000"
 8620      74385F74 
 8620      00
 8621              	.LASF89:
 8622 074d 75785175 		.ascii	"uxQueueLength\000"
 8622      6575654C 
 8622      656E6774 
 8622      6800
 8623              	.LASF2:
 8624 075b 6C6F6E67 		.ascii	"long double\000"
 8624      20646F75 
 8624      626C6500 
 8625              	.LASF119:
 8626 0767 78496E68 		.ascii	"xInheritanceOccurred\000"
 8626      65726974 
 8626      616E6365 
 8626      4F636375 
 8626      72726564 
 8627              	.LASF122:
 8628 077c 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 8628      75655461 
 8628      6B654D75 
 8628      74657852 
 8628      65637572 
 8629              	.LASF30:
 8630 0795 7076436F 		.ascii	"pvContainer\000"
 8630      6E746169 
 8630      6E657200 
 8631              	.LASF73:
 8632 07a1 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 8632      6967696E 
 8632      616C4241 
 8632      53455052 
 8632      4900
 8633              	.LASF133:
 8634 07b3 70635175 		.ascii	"pcQueueGetName\000"
 8634      65756547 
 8634      65744E61 
 8634      6D6500
 8635              	.LASF59:
 8636 07c2 51756575 		.ascii	"QueuePointers_t\000"
 8636      65506F69 
 8636      6E746572 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 217


 8636      735F7400 
 8637              	.LASF134:
 8638 07d2 70635265 		.ascii	"pcReturn\000"
 8638      7475726E 
 8638      00
 8639              	.LASF52:
 8640 07db 75784C65 		.ascii	"uxLength\000"
 8640      6E677468 
 8640      00
 8641              	.LASF8:
 8642 07e4 73686F72 		.ascii	"short int\000"
 8642      7420696E 
 8642      7400
 8643              	.LASF26:
 8644 07ee 78497465 		.ascii	"xItemValue\000"
 8644      6D56616C 
 8644      756500
 8645              	.LASF11:
 8646 07f9 6C6F6E67 		.ascii	"long int\000"
 8646      20696E74 
 8646      00
 8647              	.LASF138:
 8648 0802 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8648      52784275 
 8648      66666572 
 8648      00
 8649              	.LASF95:
 8650 080f 78517565 		.ascii	"xQueueSizeInBytes\000"
 8650      75655369 
 8650      7A65496E 
 8650      42797465 
 8650      7300
 8651              	.LASF151:
 8652 0821 78546173 		.ascii	"xTaskResumeAll\000"
 8652      6B526573 
 8652      756D6541 
 8652      6C6C00
 8653              	.LASF82:
 8654 0830 70764974 		.ascii	"pvItemToQueue\000"
 8654      656D546F 
 8654      51756575 
 8654      6500
 8655              	.LASF149:
 8656 083e 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 8656      6B436865 
 8656      636B466F 
 8656      7254696D 
 8656      654F7574 
 8657              	.LASF156:
 8658 0853 76506F72 		.ascii	"vPortFree\000"
 8658      74467265 
 8658      6500
 8659              	.LASF132:
 8660 085d 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 8660      75654973 
 8660      51756575 
 8660      6546756C 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 218


 8660      6C46726F 
 8661              	.LASF127:
 8662 0876 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 8662      6575654D 
 8662      65737361 
 8662      67657357 
 8662      61697469 
 8663              	.LASF57:
 8664 088d 70635461 		.ascii	"pcTail\000"
 8664      696C00
 8665              	.LASF6:
 8666 0894 5F5F7569 		.ascii	"__uint8_t\000"
 8666      6E74385F 
 8666      7400
 8667              	.LASF77:
 8668 089e 70785175 		.ascii	"pxQueue\000"
 8668      65756500 
 8669              	.LASF79:
 8670 08a6 78526574 		.ascii	"xReturn\000"
 8670      75726E00 
 8671              	.LASF15:
 8672 08ae 73697A65 		.ascii	"sizetype\000"
 8672      74797065 
 8672      00
 8673              	.LASF144:
 8674 08b7 76546173 		.ascii	"vTaskMissedYield\000"
 8674      6B4D6973 
 8674      73656459 
 8674      69656C64 
 8674      00
 8675              	.LASF13:
 8676 08c8 6C6F6E67 		.ascii	"long unsigned int\000"
 8676      20756E73 
 8676      69676E65 
 8676      6420696E 
 8676      7400
 8677              	.LASF155:
 8678 08da 78546173 		.ascii	"xTaskPriorityInherit\000"
 8678      6B507269 
 8678      6F726974 
 8678      79496E68 
 8678      65726974 
 8679              	.LASF19:
 8680 08ef 696E7433 		.ascii	"int32_t\000"
 8680      325F7400 
 8681              	.LASF126:
 8682 08f7 78517565 		.ascii	"xQueuePeekFromISR\000"
 8682      75655065 
 8682      656B4672 
 8682      6F6D4953 
 8682      5200
 8683              	.LASF121:
 8684 0909 75784869 		.ascii	"uxHighestWaitingPriority\000"
 8684      67686573 
 8684      74576169 
 8684      74696E67 
 8684      5072696F 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 219


 8685              	.LASF7:
 8686 0922 756E7369 		.ascii	"unsigned char\000"
 8686      676E6564 
 8686      20636861 
 8686      7200
 8687              	.LASF12:
 8688 0930 5F5F7569 		.ascii	"__uint32_t\000"
 8688      6E743332 
 8688      5F7400
 8689              	.LASF145:
 8690 093b 764C6973 		.ascii	"vListInitialise\000"
 8690      74496E69 
 8690      7469616C 
 8690      69736500 
 8691              	.LASF85:
 8692 094b 70727643 		.ascii	"prvCopyDataFromQueue\000"
 8692      6F707944 
 8692      61746146 
 8692      726F6D51 
 8692      75657565 
 8693              	.LASF154:
 8694 0960 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 8694      6B507269 
 8694      6F726974 
 8694      79446973 
 8694      696E6865 
 8695              	.LASF100:
 8696 0984 78546963 		.ascii	"xTicksToWait\000"
 8696      6B73546F 
 8696      57616974 
 8696      00
 8697              	.LASF29:
 8698 0991 70764F77 		.ascii	"pvOwner\000"
 8698      6E657200 
 8699              	.LASF152:
 8700 0999 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 8700      6B476574 
 8700      43757272 
 8700      656E7454 
 8700      61736B48 
 8701              	.LASF47:
 8702 09b3 70634865 		.ascii	"pcHead\000"
 8702      616400
 8703              	.LASF109:
 8704 09ba 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 8704      75654769 
 8704      76654D75 
 8704      74657852 
 8704      65637572 
 8705              	.LASF86:
 8706 09d3 70727655 		.ascii	"prvUnlockQueue\000"
 8706      6E6C6F63 
 8706      6B517565 
 8706      756500
 8707              	.LASF93:
 8708 09e2 78517565 		.ascii	"xQueueGenericReset\000"
 8708      75654765 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccf5Qlt2.s 			page 220


 8708      6E657269 
 8708      63526573 
 8708      657400
 8709              	.LASF131:
 8710 09f5 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 8710      75654973 
 8710      51756575 
 8710      65456D70 
 8710      74794672 
 8711              	.LASF5:
 8712 0a0f 7369676E 		.ascii	"signed char\000"
 8712      65642063 
 8712      68617200 
 8713              	.LASF9:
 8714 0a1b 73686F72 		.ascii	"short unsigned int\000"
 8714      7420756E 
 8714      7369676E 
 8714      65642069 
 8714      6E7400
 8715              	.LASF164:
 8716 0a2e 6D656D63 		.ascii	"memcpy\000"
 8716      707900
 8717              	.LASF66:
 8718 0a35 78515545 		.ascii	"xQUEUE\000"
 8718      554500
 8719              	.LASF61:
 8720 0a3c 784D7574 		.ascii	"xMutexHolder\000"
 8720      6578486F 
 8720      6C646572 
 8720      00
 8721              	.LASF22:
 8722 0a49 646F7562 		.ascii	"double\000"
 8722      6C6500
 8723              	.LASF83:
 8724 0a50 78506F73 		.ascii	"xPosition\000"
 8724      6974696F 
 8724      6E00
 8725              	.LASF54:
 8726 0a5a 6352784C 		.ascii	"cRxLock\000"
 8726      6F636B00 
 8727              	.LASF143:
 8728 0a62 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 8728      6B52656D 
 8728      6F766546 
 8728      726F6D45 
 8728      76656E74 
 8729              	.LASF96:
 8730 0a7b 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 8730      75654372 
 8730      65617465 
 8730      436F756E 
 8730      74696E67 
 8731              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
