ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskExitError,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskExitError, %function
  24              	prvTaskExitError:
  25              	.LFB69:
  26              		.file 1 "..\\..\\FreeRTOS\\portable\\GCC\\ARM_CM3\\port.c"
   1:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
   2:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS Kernel V10.3.1
   3:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  *
   5:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  *
  12:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  *
  15:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  *
  22:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  *
  25:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
  27:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  28:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  29:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  30:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  *----------------------------------------------------------*/
  31:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 2


  32:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  33:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  34:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  35:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  36:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  37:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  38:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  39:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  40:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  41:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif
  42:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  43:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  44:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  45:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  46:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  47:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #else
  48:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  49:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	as the core. */
  50:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  51:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif
  52:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  53:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  54:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  55:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  56:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  57:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  58:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
  59:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  60:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  61:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  62:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  63:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  64:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  65:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  66:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  67:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  68:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  69:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  70:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  71:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  72:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  73:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  74:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  75:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  76:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  77:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  78:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  79:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  80:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  81:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  82:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
  83:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  84:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  85:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  86:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  87:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  88:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 3


  89:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** calculations. */
  90:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
  91:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  92:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  93:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  94:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
  95:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
  96:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  97:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
  98:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** debugger. */
  99:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 100:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 101:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #else
 102:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 103:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif
 104:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 105:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 106:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 107:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 108:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 109:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 110:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 111:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 112:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 113:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 114:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 115:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 117:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 119:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 120:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 122:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 123:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 124:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 125:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 126:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 127:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 128:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 129:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 131:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 132:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** variable. */
 133:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 134:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 135:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 136:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 137:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 138:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 139:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 140:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 141:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 142:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 143:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 144:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 145:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 4


 146:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 147:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 148:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 149:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 150:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 151:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 152:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 153:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 154:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 155:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 156:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 157:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 158:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 159:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 160:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 161:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 162:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 163:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #if( configASSERT_DEFINED == 1 )
 164:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 165:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 166:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 167:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 168:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 169:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 170:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 171:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 172:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 173:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 174:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 175:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 176:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 177:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	interrupt. */
 178:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 179:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 180:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 181:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 182:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 183:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 184:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 185:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 186:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 187:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 188:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	return pxTopOfStack;
 189:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 190:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 191:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 192:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 193:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
  27              		.loc 1 193 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 8
 194:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** volatile uint32_t ulDummy = 0UL;
  34              		.loc 1 194 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 5


  35 0002 0023     		movs	r3, #0
  36 0004 0193     		str	r3, [sp, #4]
  37              	.LBB12:
  38              	.LBB13:
  39              		.file 2 "..\\..\\FreeRTOS\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 6


  53:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 7


 110:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 8


 167:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 170:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 171:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 173:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 174:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 175:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 177:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 178:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 179:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 180:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 181:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 182:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 183:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	else
 184:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	{
 185:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 186:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	}
 187:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 188:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 189:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 190:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 192:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 193:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 194:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 195:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 196:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
  40              		.loc 2 197 0
  41              		.syntax unified
  42              	@ 197 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
  43 0006 4FF0A003 			mov r3, #160												
  44 000a 83F31188 		msr basepri, r3											
  45 000e BFF36F8F 		isb														
  46 0012 BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L2:
  53              	.LBE13:
  54              	.LBE12:
 195:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 196:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 198:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 199:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 200:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 201:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 202:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 203:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 204:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	while( ulDummy == 0 )
  55              		.loc 1 204 0 discriminator 1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 9


  56 0016 019B     		ldr	r3, [sp, #4]
  57 0018 002B     		cmp	r3, #0
  58 001a FCD0     		beq	.L2
 205:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 206:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 207:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		started to remove a compiler warning about the function being defined
 208:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 209:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		about code appearing after this function is called - making ulDummy
 210:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		volatile makes the compiler think the function could return and
 211:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 212:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		after it. */
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 214:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
  59              		.loc 1 214 0
  60 001c 02B0     		add	sp, sp, #8
  61              		.cfi_def_cfa_offset 0
  62              		@ sp needed
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE69:
  66              		.size	prvTaskExitError, .-prvTaskExitError
  67              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  71              		.type	prvPortStartFirstTask, %function
  72              	prvPortStartFirstTask:
  73              	.LFB71:
 215:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 216:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 217:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 218:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 219:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 220:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 221:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 222:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 223:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 224:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 225:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	isb								\n"
 226:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 227:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 228:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 229:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	bx r14							\n"
 230:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"									\n"
 231:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	.align 4						\n"
 232:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 233:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				);
 234:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 235:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 236:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 237:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 238:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
  74              		.loc 1 238 0
  75              		.cfi_startproc
  76              		@ Naked Function: prologue and epilogue provided by programmer.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 10


 239:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	__asm volatile(
  79              		.loc 1 239 0
  80              		.syntax unified
  81              	@ 239 "..\..\FreeRTOS\portable\GCC\ARM_CM3\port.c" 1
  82 0000 0648     		 ldr r0, =0xE000ED08 	
  83 0002 0068     	 ldr r0, [r0] 			
  84 0004 0068     	 ldr r0, [r0] 			
  85 0006 80F30888 	 msr msp, r0			
  86 000a 62B6     	 cpsie i				
  87 000c 61B6     	 cpsie f				
  88 000e BFF34F8F 	 dsb					
  89 0012 BFF36F8F 	 isb					
  90 0016 00DF     	 svc 0					
  91 0018 00BF     	 nop					
  92              	
  93              	@ 0 "" 2
 240:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 241:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 242:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 243:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 244:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 245:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" cpsie f				\n"
 246:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" dsb					\n"
 247:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" isb					\n"
 248:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 249:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					" nop					\n"
 250:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				);
 251:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
  94              		.loc 1 251 0
  95              		.thumb
  96              		.syntax unified
  97              		.cfi_endproc
  98              	.LFE71:
  99              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 100 001a 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 101              		.align	2
 102              		.global	pxPortInitialiseStack
 103              		.thumb
 104              		.thumb_func
 105              		.type	pxPortInitialiseStack, %function
 106              	pxPortInitialiseStack:
 107              	.LFB68:
 175:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 108              		.loc 1 175 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL1:
 179:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 114              		.loc 1 179 0
 115 0000 4FF08073 		mov	r3, #16777216
 116 0004 40F8043C 		str	r3, [r0, #-4]
 117              	.LVL2:
 181:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack--;
 118              		.loc 1 181 0
 119 0008 21F00101 		bic	r1, r1, #1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 11


 120              	.LVL3:
 121 000c 40F8081C 		str	r1, [r0, #-8]
 122              	.LVL4:
 183:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 123              		.loc 1 183 0
 124 0010 034B     		ldr	r3, .L6
 125 0012 40F80C3C 		str	r3, [r0, #-12]
 126              	.LVL5:
 185:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 127              		.loc 1 185 0
 128 0016 40F8202C 		str	r2, [r0, #-32]
 129              	.LVL6:
 189:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 130              		.loc 1 189 0
 131 001a 4038     		subs	r0, r0, #64
 132              	.LVL7:
 133 001c 7047     		bx	lr
 134              	.L7:
 135 001e 00BF     		.align	2
 136              	.L6:
 137 0020 00000000 		.word	prvTaskExitError
 138              		.cfi_endproc
 139              	.LFE68:
 140              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 141              		.section	.text.vPortSVCHandler,"ax",%progbits
 142              		.align	2
 143              		.global	vPortSVCHandler
 144              		.thumb
 145              		.thumb_func
 146              		.type	vPortSVCHandler, %function
 147              	vPortSVCHandler:
 148              	.LFB70:
 218:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	__asm volatile (
 149              		.loc 1 218 0
 150              		.cfi_startproc
 151              		@ Naked Function: prologue and epilogue provided by programmer.
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 219:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 154              		.loc 1 219 0
 155              		.syntax unified
 156              	@ 219 "..\..\FreeRTOS\portable\GCC\ARM_CM3\port.c" 1
 157 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 158 0002 1968     		ldr r1, [r3]					
 159 0004 0868     		ldr r0, [r1]					
 160 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 161 000a 80F30988 		msr psp, r0						
 162 000e BFF36F8F 		isb								
 163 0012 4FF00000 		mov r0, #0 						
 164 0016 80F31188 		msr	basepri, r0					
 165 001a 4EF00D0E 		orr r14, #0xd					
 166 001e 7047     		bx r14							
 167              										
 168              		.align 4						
 169 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 170              	
 171              	@ 0 "" 2
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 12


 234:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 172              		.loc 1 234 0
 173              		.thumb
 174              		.syntax unified
 175              		.cfi_endproc
 176              	.LFE70:
 177              		.size	vPortSVCHandler, .-vPortSVCHandler
 178              		.section	.text.vPortEndScheduler,"ax",%progbits
 179              		.align	2
 180              		.global	vPortEndScheduler
 181              		.thumb
 182              		.thumb_func
 183              		.type	vPortEndScheduler, %function
 184              	vPortEndScheduler:
 185              	.LFB73:
 252:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 253:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 254:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 255:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 256:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
 257:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 258:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 259:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 260:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 261:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 262:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 263:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 264:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 265:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 266:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 267:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 268:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 269:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 270:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 271:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 273:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 274:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 275:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 276:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 277:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 278:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		possible bits. */
 279:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 281:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 282:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 284:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 285:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 287:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 288:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		of bits read back. */
 289:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 290:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 291:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 292:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 293:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 13


 294:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 295:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 296:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		#ifdef __NVIC_PRIO_BITS
 297:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 298:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Check the CMSIS configuration that defines the number of
 299:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 300:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 301:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 302:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 303:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		#endif
 304:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 305:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		#ifdef configPRIO_BITS
 306:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 307:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 308:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			priority bits matches the number of priority bits actually queried
 309:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			from the hardware. */
 310:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 311:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 312:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		#endif
 313:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 314:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 315:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		register. */
 316:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 317:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 318:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 319:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 320:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		value. */
 321:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 322:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 323:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 324:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 325:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 326:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 327:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 328:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 329:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 330:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	here already. */
 331:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 332:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 333:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 334:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 335:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 336:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Start the first task. */
 337:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	prvPortStartFirstTask();
 338:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 339:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 340:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 341:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 342:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 343:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 344:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	symbol. */
 345:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	vTaskSwitchContext();
 346:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 347:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 348:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Should not get here! */
 349:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	return 0;
 350:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 14


 351:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 352:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 353:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 354:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 186              		.loc 1 354 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0000 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE73:
 194              		.size	vPortEndScheduler, .-vPortEndScheduler
 195 0002 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 196              		.align	2
 197              		.global	vPortEnterCritical
 198              		.thumb
 199              		.thumb_func
 200              		.type	vPortEnterCritical, %function
 201              	vPortEnterCritical:
 202              	.LFB74:
 355:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 356:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	Artificially force an assert. */
 357:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 358:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 359:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 360:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 361:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 362:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 203              		.loc 1 362 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208              	.LBB14:
 209              	.LBB15:
 210              		.loc 2 197 0
 211              		.syntax unified
 212              	@ 197 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 213 0000 4FF0A003 			mov r3, #160												
 214 0004 83F31188 		msr basepri, r3											
 215 0008 BFF36F8F 		isb														
 216 000c BFF34F8F 		dsb														
 217              	
 218              	@ 0 "" 2
 219              		.thumb
 220              		.syntax unified
 221              	.LBE15:
 222              	.LBE14:
 363:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 364:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting++;
 223              		.loc 1 364 0
 224 0010 024A     		ldr	r2, .L11
 225 0012 1368     		ldr	r3, [r2]
 226 0014 0133     		adds	r3, r3, #1
 227 0016 1360     		str	r3, [r2]
 228 0018 7047     		bx	lr
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 15


 229              	.L12:
 230 001a 00BF     		.align	2
 231              	.L11:
 232 001c 00000000 		.word	.LANCHOR0
 233              		.cfi_endproc
 234              	.LFE74:
 235              		.size	vPortEnterCritical, .-vPortEnterCritical
 236              		.section	.text.vPortExitCritical,"ax",%progbits
 237              		.align	2
 238              		.global	vPortExitCritical
 239              		.thumb
 240              		.thumb_func
 241              		.type	vPortExitCritical, %function
 242              	vPortExitCritical:
 243              	.LFB75:
 365:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 366:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 367:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 368:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 369:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 370:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	assert function also uses a critical section. */
 371:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 372:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 373:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 374:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 375:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 376:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 377:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 378:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 379:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 244              		.loc 1 379 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 380:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 381:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	uxCriticalNesting--;
 249              		.loc 1 381 0
 250 0000 034A     		ldr	r2, .L15
 251 0002 1368     		ldr	r3, [r2]
 252 0004 013B     		subs	r3, r3, #1
 253 0006 1360     		str	r3, [r2]
 382:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 254              		.loc 1 382 0
 255 0008 0BB9     		cbnz	r3, .L13
 256              	.LVL8:
 257              	.LBB16:
 258              	.LBB17:
 198:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 199:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 200:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 201:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 202:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 203:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 204:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 205:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 206:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 16


 207:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 208:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 209:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 210:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 211:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 212:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 213:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 214:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 215:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 216:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 217:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 218:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 219:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 220:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 221:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	);
 222:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 223:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 224:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 225:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 226:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** }
 227:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 228:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 
 229:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 230:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** {
 231:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 259              		.loc 2 231 0
 260              		.syntax unified
 261              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 262 000a 83F31188 			msr basepri, r3	
 263              	@ 0 "" 2
 264              	.LVL9:
 265              		.thumb
 266              		.syntax unified
 267              	.L13:
 268 000e 7047     		bx	lr
 269              	.L16:
 270              		.align	2
 271              	.L15:
 272 0010 00000000 		.word	.LANCHOR0
 273              	.LBE17:
 274              	.LBE16:
 275              		.cfi_endproc
 276              	.LFE75:
 277              		.size	vPortExitCritical, .-vPortExitCritical
 278              		.section	.text.xPortPendSVHandler,"ax",%progbits
 279              		.align	2
 280              		.global	xPortPendSVHandler
 281              		.thumb
 282              		.thumb_func
 283              		.type	xPortPendSVHandler, %function
 284              	xPortPendSVHandler:
 285              	.LFB76:
 383:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 384:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 385:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 386:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 387:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 17


 388:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 389:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
 390:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 286              		.loc 1 390 0
 287              		.cfi_startproc
 288              		@ Naked Function: prologue and epilogue provided by programmer.
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 391:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* This is a naked function. */
 392:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 393:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	__asm volatile
 291              		.loc 1 393 0
 292              		.syntax unified
 293              	@ 393 "..\..\FreeRTOS\portable\GCC\ARM_CM3\port.c" 1
 294 0000 EFF30980 			mrs r0, psp							
 295 0004 BFF36F8F 		isb									
 296              											
 297 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 298 000a 1A68     		ldr	r2, [r3]						
 299              											
 300 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 301 0010 1060     		str r0, [r2]						
 302              											
 303 0012 2DE90840 		stmdb sp!, {r3, r14}				
 304 0016 4FF0A000 		mov r0, #160							
 305 001a 80F31188 		msr basepri, r0						
 306 001e FFF7FEFF 		bl vTaskSwitchContext				
 307 0022 4FF00000 		mov r0, #0							
 308 0026 80F31188 		msr basepri, r0						
 309 002a BDE80840 		ldmia sp!, {r3, r14}				
 310              											
 311 002e 1968     		ldr r1, [r3]						
 312 0030 0868     		ldr r0, [r1]						
 313 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 314 0036 80F30988 		msr psp, r0							
 315 003a BFF36F8F 		isb									
 316 003e 7047     		bx r14								
 317              											
 318              		.align 4							
 319 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 320              	
 321              	@ 0 "" 2
 394:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	(
 395:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 396:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 397:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 398:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 399:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 400:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 401:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 402:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 403:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 404:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 405:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 406:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 407:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 408:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	mov r0, #0							\n"
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 18


 409:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 410:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 411:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"										\n" /* Restore the context, including the critical nesting count. */
 412:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 413:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 414:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 415:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 416:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	isb									\n"
 417:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	bx r14								\n"
 418:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"										\n"
 419:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"	.align 4							\n"
 420:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 421:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 422:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	);
 423:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 322              		.loc 1 423 0
 323              		.thumb
 324              		.syntax unified
 325              		.cfi_endproc
 326              	.LFE76:
 327              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 328              		.section	.text.xPortSysTickHandler,"ax",%progbits
 329              		.align	2
 330              		.global	xPortSysTickHandler
 331              		.thumb
 332              		.thumb_func
 333              		.type	xPortSysTickHandler, %function
 334              	xPortSysTickHandler:
 335              	.LFB77:
 424:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 425:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 426:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 427:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 336              		.loc 1 427 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 08B5     		push	{r3, lr}
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 3, -8
 343              		.cfi_offset 14, -4
 344              	.LBB18:
 345              	.LBB19:
 197:..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h **** 	(
 346              		.loc 2 197 0
 347              		.syntax unified
 348              	@ 197 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 349 0002 4FF0A003 			mov r3, #160												
 350 0006 83F31188 		msr basepri, r3											
 351 000a BFF36F8F 		isb														
 352 000e BFF34F8F 		dsb														
 353              	
 354              	@ 0 "" 2
 355              		.thumb
 356              		.syntax unified
 357              	.LBE19:
 358              	.LBE18:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 19


 428:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 429:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 430:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 431:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	known. */
 432:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 433:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 434:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 435:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 359              		.loc 1 435 0
 360 0012 FFF7FEFF 		bl	xTaskIncrementTick
 361              	.LVL10:
 362 0016 18B1     		cbz	r0, .L19
 436:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 437:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 438:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 439:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 363              		.loc 1 439 0
 364 0018 4FF08052 		mov	r2, #268435456
 365 001c 024B     		ldr	r3, .L21
 366 001e 1A60     		str	r2, [r3]
 367              	.L19:
 368              	.LVL11:
 369              	.LBB20:
 370              	.LBB21:
 371              		.loc 2 231 0
 372 0020 0023     		movs	r3, #0
 373              		.syntax unified
 374              	@ 231 "..\..\FreeRTOS\portable\GCC\ARM_CM3/portmacro.h" 1
 375 0022 83F31188 			msr basepri, r3	
 376              	@ 0 "" 2
 377              	.LVL12:
 378              		.thumb
 379              		.syntax unified
 380 0026 08BD     		pop	{r3, pc}
 381              	.L22:
 382              		.align	2
 383              	.L21:
 384 0028 04ED00E0 		.word	-536810236
 385              	.LBE21:
 386              	.LBE20:
 387              		.cfi_endproc
 388              	.LFE77:
 389              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 390              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 391              		.align	2
 392              		.weak	vPortSetupTimerInterrupt
 393              		.thumb
 394              		.thumb_func
 395              		.type	vPortSetupTimerInterrupt, %function
 396              	vPortSetupTimerInterrupt:
 397              	.LFB78:
 440:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 441:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 442:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 443:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** }
 444:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 445:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 20


 446:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 447:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 448:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 449:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 450:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 451:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 452:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 453:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 454:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 455:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 456:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 457:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 458:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 459:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 460:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 461:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 462:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 463:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 464:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 465:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 466:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 467:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		through one of the tick periods. */
 468:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 469:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 470:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 471:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 472:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 473:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 474:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 475:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 476:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 477:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 478:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		__asm volatile( "isb" );
 479:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 480:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 481:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 482:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 483:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 484:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 485:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			this tick period. */
 486:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 487:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 488:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 489:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 490:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 491:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 492:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			periods. */
 493:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 494:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 495:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 496:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			above. */
 497:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 498:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 499:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		else
 500:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		{
 501:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Set the new reload value. */
 502:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 21


 503:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 504:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 505:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			zero. */
 506:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 507:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 508:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick. */
 509:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 510:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 511:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 512:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 513:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 514:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 515:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 516:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 517:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 518:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 519:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			{
 520:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 521:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 522:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				__asm volatile( "isb" );
 523:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			}
 524:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 525:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 526:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 527:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			out of sleep mode to execute immediately.  see comments above
 528:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__disable_interrupt() call above. */
 529:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 530:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 531:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 532:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 533:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 534:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			and interrupts that execute while the clock is stopped will increase
 535:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 536:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			time. */
 537:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 538:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "dsb" );
 539:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "isb" );
 540:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 541:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Disable the SysTick clock without reading the
 542:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 543:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 544:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 545:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 546:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 547:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			time*/
 548:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 549:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 550:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 551:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			been set back to the current reload value (the reload back being
 552:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 553:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 554:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			must have brought the system out of sleep mode). */
 555:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 556:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			{
 557:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 558:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 559:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 22


 560:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				reloaded with ulReloadValue.  Reset the
 561:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 562:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				period. */
 563:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 564:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 565:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 566:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 567:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				that took too long. */
 568:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 569:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				{
 570:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 571:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				}
 572:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 573:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 574:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 575:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				/* As the pending tick will be processed as soon as this
 576:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				function exits, the tick value maintained by the tick is stepped
 577:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				forward by one less than the time spent waiting. */
 578:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 579:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			}
 580:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			else
 581:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			{
 582:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 583:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 584:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 585:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				ticks). */
 586:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 587:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 588:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 589:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				was waiting? */
 590:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 591:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 592:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 593:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				period remains. */
 594:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 595:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			}
 596:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 597:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 598:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 599:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			value. */
 600:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 601:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 602:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 603:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 604:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 605:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			/* Exit with interrupts enabled. */
 606:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 607:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		}
 608:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 609:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 610:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 611:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 612:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 613:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*
 614:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 615:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  * frequency.
 616:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c ****  */
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 23


 617:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 618:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** {
 398              		.loc 1 618 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 0
 401              		@ frame_needed = 0, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 619:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 620:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 621:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	{
 622:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 623:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 624:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 625:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	}
 626:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 627:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 628:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Stop and clear the SysTick. */
 629:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 403              		.loc 1 629 0
 404 0000 054B     		ldr	r3, .L24
 405 0002 0022     		movs	r2, #0
 406 0004 1A60     		str	r2, [r3]
 630:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 407              		.loc 1 630 0
 408 0006 0549     		ldr	r1, .L24+4
 409 0008 0A60     		str	r2, [r1]
 631:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 632:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 633:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 410              		.loc 1 633 0
 411 000a 0549     		ldr	r1, .L24+8
 412 000c 054A     		ldr	r2, .L24+12
 413 000e 1160     		str	r1, [r2]
 634:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 414              		.loc 1 634 0
 415 0010 0722     		movs	r2, #7
 416 0012 1A60     		str	r2, [r3]
 417 0014 7047     		bx	lr
 418              	.L25:
 419 0016 00BF     		.align	2
 420              	.L24:
 421 0018 10E000E0 		.word	-536813552
 422 001c 18E000E0 		.word	-536813544
 423 0020 F7240100 		.word	74999
 424 0024 14E000E0 		.word	-536813548
 425              		.cfi_endproc
 426              	.LFE78:
 427              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 428              		.section	.text.xPortStartScheduler,"ax",%progbits
 429              		.align	2
 430              		.global	xPortStartScheduler
 431              		.thumb
 432              		.thumb_func
 433              		.type	xPortStartScheduler, %function
 434              	xPortStartScheduler:
 435              	.LFB72:
 258:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 24


 436              		.loc 1 258 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 10B5     		push	{r4, lr}
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 4, -8
 443              		.cfi_offset 14, -4
 326:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 444              		.loc 1 326 0
 445 0002 0B4B     		ldr	r3, .L28
 446 0004 1A68     		ldr	r2, [r3]
 447 0006 42F46002 		orr	r2, r2, #14680064
 448 000a 1A60     		str	r2, [r3]
 327:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 449              		.loc 1 327 0
 450 000c 1A68     		ldr	r2, [r3]
 451 000e 42F06042 		orr	r2, r2, #-536870912
 452 0012 1A60     		str	r2, [r3]
 331:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 453              		.loc 1 331 0
 454 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 455              	.LVL13:
 334:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 456              		.loc 1 334 0
 457 0018 0024     		movs	r4, #0
 458 001a 064B     		ldr	r3, .L28+4
 459 001c 1C60     		str	r4, [r3]
 337:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 460              		.loc 1 337 0
 461 001e FFF7FEFF 		bl	prvPortStartFirstTask
 462              	.LVL14:
 345:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 	prvTaskExitError();
 463              		.loc 1 345 0
 464 0022 FFF7FEFF 		bl	vTaskSwitchContext
 465              	.LVL15:
 346:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** 
 466              		.loc 1 346 0
 467 0026 FFF7FEFF 		bl	prvTaskExitError
 468              	.LVL16:
 350:..\..\FreeRTOS\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 469              		.loc 1 350 0
 470 002a 2046     		mov	r0, r4
 471 002c 10BD     		pop	{r4, pc}
 472              	.L29:
 473 002e 00BF     		.align	2
 474              	.L28:
 475 0030 20ED00E0 		.word	-536810208
 476 0034 00000000 		.word	.LANCHOR0
 477              		.cfi_endproc
 478              	.LFE72:
 479              		.size	xPortStartScheduler, .-xPortStartScheduler
 480              		.data
 481              		.align	2
 482              		.set	.LANCHOR0,. + 0
 483              		.type	uxCriticalNesting, %object
 484              		.size	uxCriticalNesting, 4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 25


 485              	uxCriticalNesting:
 486 0000 AAAAAAAA 		.word	-1431655766
 487              		.text
 488              	.Letext0:
 489              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 490              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 491              		.file 5 "..\\..\\FreeRTOS\\include/projdefs.h"
 492              		.file 6 "..\\..\\FreeRTOS\\include/task.h"
 493              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 494              		.section	.debug_info,"",%progbits
 495              	.Ldebug_info0:
 496 0000 5F030000 		.4byte	0x35f
 497 0004 0400     		.2byte	0x4
 498 0006 00000000 		.4byte	.Ldebug_abbrev0
 499 000a 04       		.byte	0x4
 500 000b 01       		.uleb128 0x1
 501 000c D5010000 		.4byte	.LASF41
 502 0010 0C       		.byte	0xc
 503 0011 B3000000 		.4byte	.LASF42
 504 0015 35030000 		.4byte	.LASF43
 505 0019 00000000 		.4byte	.Ldebug_ranges0+0
 506 001d 00000000 		.4byte	0
 507 0021 00000000 		.4byte	.Ldebug_line0
 508 0025 02       		.uleb128 0x2
 509 0026 04       		.byte	0x4
 510 0027 05       		.byte	0x5
 511 0028 696E7400 		.ascii	"int\000"
 512 002c 03       		.uleb128 0x3
 513 002d 04       		.byte	0x4
 514 002e 07       		.byte	0x7
 515 002f 81010000 		.4byte	.LASF0
 516 0033 03       		.uleb128 0x3
 517 0034 08       		.byte	0x8
 518 0035 05       		.byte	0x5
 519 0036 85020000 		.4byte	.LASF1
 520 003a 03       		.uleb128 0x3
 521 003b 08       		.byte	0x8
 522 003c 04       		.byte	0x4
 523 003d 09030000 		.4byte	.LASF2
 524 0041 03       		.uleb128 0x3
 525 0042 01       		.byte	0x1
 526 0043 06       		.byte	0x6
 527 0044 15030000 		.4byte	.LASF3
 528 0048 03       		.uleb128 0x3
 529 0049 01       		.byte	0x1
 530 004a 08       		.byte	0x8
 531 004b 1B010000 		.4byte	.LASF4
 532 004f 03       		.uleb128 0x3
 533 0050 02       		.byte	0x2
 534 0051 05       		.byte	0x5
 535 0052 B4020000 		.4byte	.LASF5
 536 0056 03       		.uleb128 0x3
 537 0057 02       		.byte	0x2
 538 0058 07       		.byte	0x7
 539 0059 FB000000 		.4byte	.LASF6
 540 005d 04       		.uleb128 0x4
 541 005e 49000000 		.4byte	.LASF8
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 26


 542 0062 03       		.byte	0x3
 543 0063 3F       		.byte	0x3f
 544 0064 68000000 		.4byte	0x68
 545 0068 03       		.uleb128 0x3
 546 0069 04       		.byte	0x4
 547 006a 05       		.byte	0x5
 548 006b 53000000 		.4byte	.LASF7
 549 006f 04       		.uleb128 0x4
 550 0070 DE000000 		.4byte	.LASF9
 551 0074 03       		.byte	0x3
 552 0075 41       		.byte	0x41
 553 0076 7A000000 		.4byte	0x7a
 554 007a 03       		.uleb128 0x3
 555 007b 04       		.byte	0x4
 556 007c 07       		.byte	0x7
 557 007d E9000000 		.4byte	.LASF10
 558 0081 03       		.uleb128 0x3
 559 0082 08       		.byte	0x8
 560 0083 07       		.byte	0x7
 561 0084 9B010000 		.4byte	.LASF11
 562 0088 04       		.uleb128 0x4
 563 0089 7E000000 		.4byte	.LASF12
 564 008d 04       		.byte	0x4
 565 008e 2C       		.byte	0x2c
 566 008f 5D000000 		.4byte	0x5d
 567 0093 04       		.uleb128 0x4
 568 0094 D0020000 		.4byte	.LASF13
 569 0098 04       		.byte	0x4
 570 0099 30       		.byte	0x30
 571 009a 6F000000 		.4byte	0x6f
 572 009e 03       		.uleb128 0x3
 573 009f 04       		.byte	0x4
 574 00a0 04       		.byte	0x4
 575 00a1 86000000 		.4byte	.LASF14
 576 00a5 03       		.uleb128 0x3
 577 00a6 08       		.byte	0x8
 578 00a7 04       		.byte	0x4
 579 00a8 29010000 		.4byte	.LASF15
 580 00ac 03       		.uleb128 0x3
 581 00ad 01       		.byte	0x1
 582 00ae 08       		.byte	0x8
 583 00af 93020000 		.4byte	.LASF16
 584 00b3 03       		.uleb128 0x3
 585 00b4 04       		.byte	0x4
 586 00b5 07       		.byte	0x7
 587 00b6 7C020000 		.4byte	.LASF17
 588 00ba 05       		.uleb128 0x5
 589 00bb 04       		.byte	0x4
 590 00bc 06       		.uleb128 0x6
 591 00bd 93000000 		.4byte	0x93
 592 00c1 04       		.uleb128 0x4
 593 00c2 6F000000 		.4byte	.LASF18
 594 00c6 05       		.byte	0x5
 595 00c7 23       		.byte	0x23
 596 00c8 CC000000 		.4byte	0xcc
 597 00cc 07       		.uleb128 0x7
 598 00cd 04       		.byte	0x4
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 27


 599 00ce D2000000 		.4byte	0xd2
 600 00d2 08       		.uleb128 0x8
 601 00d3 DD000000 		.4byte	0xdd
 602 00d7 09       		.uleb128 0x9
 603 00d8 BA000000 		.4byte	0xba
 604 00dc 00       		.byte	0
 605 00dd 04       		.uleb128 0x4
 606 00de 98020000 		.4byte	.LASF19
 607 00e2 02       		.byte	0x2
 608 00e3 37       		.byte	0x37
 609 00e4 93000000 		.4byte	0x93
 610 00e8 04       		.uleb128 0x4
 611 00e9 E8020000 		.4byte	.LASF20
 612 00ed 02       		.byte	0x2
 613 00ee 38       		.byte	0x38
 614 00ef 68000000 		.4byte	0x68
 615 00f3 04       		.uleb128 0x4
 616 00f4 A7000000 		.4byte	.LASF21
 617 00f8 02       		.byte	0x2
 618 00f9 39       		.byte	0x39
 619 00fa 7A000000 		.4byte	0x7a
 620 00fe 04       		.uleb128 0x4
 621 00ff 3E000000 		.4byte	.LASF22
 622 0103 02       		.byte	0x2
 623 0104 3F       		.byte	0x3f
 624 0105 93000000 		.4byte	0x93
 625 0109 07       		.uleb128 0x7
 626 010a 04       		.byte	0x4
 627 010b DD000000 		.4byte	0xdd
 628 010f 0A       		.uleb128 0xa
 629 0110 B2010000 		.4byte	.LASF23
 630 0114 02       		.byte	0x2
 631 0115 C1       		.byte	0xc1
 632 0116 03       		.byte	0x3
 633 0117 27010000 		.4byte	0x127
 634 011b 0B       		.uleb128 0xb
 635 011c 30010000 		.4byte	.LASF44
 636 0120 02       		.byte	0x2
 637 0121 C3       		.byte	0xc3
 638 0122 93000000 		.4byte	0x93
 639 0126 00       		.byte	0
 640 0127 0A       		.uleb128 0xa
 641 0128 5D010000 		.4byte	.LASF24
 642 012c 02       		.byte	0x2
 643 012d E5       		.byte	0xe5
 644 012e 03       		.byte	0x3
 645 012f 3F010000 		.4byte	0x13f
 646 0133 0C       		.uleb128 0xc
 647 0134 D9020000 		.4byte	.LASF45
 648 0138 02       		.byte	0x2
 649 0139 E5       		.byte	0xe5
 650 013a 93000000 		.4byte	0x93
 651 013e 00       		.byte	0
 652 013f 0D       		.uleb128 0xd
 653 0140 C4010000 		.4byte	.LASF46
 654 0144 01       		.byte	0x1
 655 0145 C0       		.byte	0xc0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 28


 656 0146 00000000 		.4byte	.LFB69
 657 014a 20000000 		.4byte	.LFE69-.LFB69
 658 014e 01       		.uleb128 0x1
 659 014f 9C       		.byte	0x9c
 660 0150 82010000 		.4byte	0x182
 661 0154 0E       		.uleb128 0xe
 662 0155 9F000000 		.4byte	.LASF37
 663 0159 01       		.byte	0x1
 664 015a C2       		.byte	0xc2
 665 015b BC000000 		.4byte	0xbc
 666 015f 02       		.uleb128 0x2
 667 0160 91       		.byte	0x91
 668 0161 7C       		.sleb128 -4
 669 0162 0F       		.uleb128 0xf
 670 0163 0F010000 		.4byte	0x10f
 671 0167 06000000 		.4byte	.LBB12
 672 016b 10000000 		.4byte	.LBE12-.LBB12
 673 016f 01       		.byte	0x1
 674 0170 CB       		.byte	0xcb
 675 0171 10       		.uleb128 0x10
 676 0172 06000000 		.4byte	.LBB13
 677 0176 10000000 		.4byte	.LBE13-.LBB13
 678 017a 11       		.uleb128 0x11
 679 017b 1B010000 		.4byte	0x11b
 680 017f 00       		.byte	0
 681 0180 00       		.byte	0
 682 0181 00       		.byte	0
 683 0182 12       		.uleb128 0x12
 684 0183 F3020000 		.4byte	.LASF47
 685 0187 01       		.byte	0x1
 686 0188 ED       		.byte	0xed
 687 0189 00000000 		.4byte	.LFB71
 688 018d 1A000000 		.4byte	.LFE71-.LFB71
 689 0191 01       		.uleb128 0x1
 690 0192 9C       		.byte	0x9c
 691 0193 13       		.uleb128 0x13
 692 0194 7F030000 		.4byte	.LASF35
 693 0198 01       		.byte	0x1
 694 0199 AE       		.byte	0xae
 695 019a 09010000 		.4byte	0x109
 696 019e 00000000 		.4byte	.LFB68
 697 01a2 24000000 		.4byte	.LFE68-.LFB68
 698 01a6 01       		.uleb128 0x1
 699 01a7 9C       		.byte	0x9c
 700 01a8 D8010000 		.4byte	0x1d8
 701 01ac 14       		.uleb128 0x14
 702 01ad 8E010000 		.4byte	.LASF25
 703 01b1 01       		.byte	0x1
 704 01b2 AE       		.byte	0xae
 705 01b3 09010000 		.4byte	0x109
 706 01b7 00000000 		.4byte	.LLST0
 707 01bb 14       		.uleb128 0x14
 708 01bc 25000000 		.4byte	.LASF26
 709 01c0 01       		.byte	0x1
 710 01c1 AE       		.byte	0xae
 711 01c2 C1000000 		.4byte	0xc1
 712 01c6 5F000000 		.4byte	.LLST1
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 29


 713 01ca 15       		.uleb128 0x15
 714 01cb 3D010000 		.4byte	.LASF27
 715 01cf 01       		.byte	0x1
 716 01d0 AE       		.byte	0xae
 717 01d1 BA000000 		.4byte	0xba
 718 01d5 01       		.uleb128 0x1
 719 01d6 52       		.byte	0x52
 720 01d7 00       		.byte	0
 721 01d8 16       		.uleb128 0x16
 722 01d9 A4020000 		.4byte	.LASF28
 723 01dd 01       		.byte	0x1
 724 01de D9       		.byte	0xd9
 725 01df 00000000 		.4byte	.LFB70
 726 01e3 24000000 		.4byte	.LFE70-.LFB70
 727 01e7 01       		.uleb128 0x1
 728 01e8 9C       		.byte	0x9c
 729 01e9 17       		.uleb128 0x17
 730 01ea 2C000000 		.4byte	.LASF29
 731 01ee 01       		.byte	0x1
 732 01ef 6101     		.2byte	0x161
 733 01f1 00000000 		.4byte	.LFB73
 734 01f5 02000000 		.4byte	.LFE73-.LFB73
 735 01f9 01       		.uleb128 0x1
 736 01fa 9C       		.byte	0x9c
 737 01fb 18       		.uleb128 0x18
 738 01fc 12000000 		.4byte	.LASF30
 739 0200 01       		.byte	0x1
 740 0201 6901     		.2byte	0x169
 741 0203 00000000 		.4byte	.LFB74
 742 0207 20000000 		.4byte	.LFE74-.LFB74
 743 020b 01       		.uleb128 0x1
 744 020c 9C       		.byte	0x9c
 745 020d 32020000 		.4byte	0x232
 746 0211 19       		.uleb128 0x19
 747 0212 0F010000 		.4byte	0x10f
 748 0216 00000000 		.4byte	.LBB14
 749 021a 10000000 		.4byte	.LBE14-.LBB14
 750 021e 01       		.byte	0x1
 751 021f 6B01     		.2byte	0x16b
 752 0221 10       		.uleb128 0x10
 753 0222 00000000 		.4byte	.LBB15
 754 0226 10000000 		.4byte	.LBE15-.LBB15
 755 022a 11       		.uleb128 0x11
 756 022b 1B010000 		.4byte	0x11b
 757 022f 00       		.byte	0
 758 0230 00       		.byte	0
 759 0231 00       		.byte	0
 760 0232 18       		.uleb128 0x18
 761 0233 BE020000 		.4byte	.LASF31
 762 0237 01       		.byte	0x1
 763 0238 7A01     		.2byte	0x17a
 764 023a 00000000 		.4byte	.LFB75
 765 023e 14000000 		.4byte	.LFE75-.LFB75
 766 0242 01       		.uleb128 0x1
 767 0243 9C       		.byte	0x9c
 768 0244 63020000 		.4byte	0x263
 769 0248 19       		.uleb128 0x19
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 30


 770 0249 27010000 		.4byte	0x127
 771 024d 0A000000 		.4byte	.LBB16
 772 0251 0A000000 		.4byte	.LBE16-.LBB16
 773 0255 01       		.byte	0x1
 774 0256 8001     		.2byte	0x180
 775 0258 1A       		.uleb128 0x1a
 776 0259 33010000 		.4byte	0x133
 777 025d 80000000 		.4byte	.LLST2
 778 0261 00       		.byte	0
 779 0262 00       		.byte	0
 780 0263 17       		.uleb128 0x17
 781 0264 5C000000 		.4byte	.LASF32
 782 0268 01       		.byte	0x1
 783 0269 8501     		.2byte	0x185
 784 026b 00000000 		.4byte	.LFB76
 785 026f 44000000 		.4byte	.LFE76-.LFB76
 786 0273 01       		.uleb128 0x1
 787 0274 9C       		.byte	0x9c
 788 0275 18       		.uleb128 0x18
 789 0276 6D010000 		.4byte	.LASF33
 790 027a 01       		.byte	0x1
 791 027b AA01     		.2byte	0x1aa
 792 027d 00000000 		.4byte	.LFB77
 793 0281 2C000000 		.4byte	.LFE77-.LFB77
 794 0285 01       		.uleb128 0x1
 795 0286 9C       		.byte	0x9c
 796 0287 D7020000 		.4byte	0x2d7
 797 028b 1B       		.uleb128 0x1b
 798 028c 0F010000 		.4byte	0x10f
 799 0290 02000000 		.4byte	.LBB18
 800 0294 10000000 		.4byte	.LBE18-.LBB18
 801 0298 01       		.byte	0x1
 802 0299 B001     		.2byte	0x1b0
 803 029b AF020000 		.4byte	0x2af
 804 029f 10       		.uleb128 0x10
 805 02a0 02000000 		.4byte	.LBB19
 806 02a4 10000000 		.4byte	.LBE19-.LBB19
 807 02a8 11       		.uleb128 0x11
 808 02a9 1B010000 		.4byte	0x11b
 809 02ad 00       		.byte	0
 810 02ae 00       		.byte	0
 811 02af 1B       		.uleb128 0x1b
 812 02b0 27010000 		.4byte	0x127
 813 02b4 20000000 		.4byte	.LBB20
 814 02b8 0C000000 		.4byte	.LBE20-.LBB20
 815 02bc 01       		.byte	0x1
 816 02bd BA01     		.2byte	0x1ba
 817 02bf CD020000 		.4byte	0x2cd
 818 02c3 1A       		.uleb128 0x1a
 819 02c4 33010000 		.4byte	0x133
 820 02c8 94000000 		.4byte	.LLST3
 821 02cc 00       		.byte	0
 822 02cd 1C       		.uleb128 0x1c
 823 02ce 16000000 		.4byte	.LVL10
 824 02d2 4A030000 		.4byte	0x34a
 825 02d6 00       		.byte	0
 826 02d7 17       		.uleb128 0x17
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 31


 827 02d8 63020000 		.4byte	.LASF34
 828 02dc 01       		.byte	0x1
 829 02dd 6902     		.2byte	0x269
 830 02df 00000000 		.4byte	.LFB78
 831 02e3 28000000 		.4byte	.LFE78-.LFB78
 832 02e7 01       		.uleb128 0x1
 833 02e8 9C       		.byte	0x9c
 834 02e9 1D       		.uleb128 0x1d
 835 02ea 21030000 		.4byte	.LASF36
 836 02ee 01       		.byte	0x1
 837 02ef 0101     		.2byte	0x101
 838 02f1 E8000000 		.4byte	0xe8
 839 02f5 00000000 		.4byte	.LFB72
 840 02f9 38000000 		.4byte	.LFE72-.LFB72
 841 02fd 01       		.uleb128 0x1
 842 02fe 9C       		.byte	0x9c
 843 02ff 28030000 		.4byte	0x328
 844 0303 1C       		.uleb128 0x1c
 845 0304 18000000 		.4byte	.LVL13
 846 0308 D7020000 		.4byte	0x2d7
 847 030c 1C       		.uleb128 0x1c
 848 030d 22000000 		.4byte	.LVL14
 849 0311 82010000 		.4byte	0x182
 850 0315 1C       		.uleb128 0x1c
 851 0316 26000000 		.4byte	.LVL15
 852 031a 56030000 		.4byte	0x356
 853 031e 1C       		.uleb128 0x1c
 854 031f 2A000000 		.4byte	.LVL16
 855 0323 3F010000 		.4byte	0x13f
 856 0327 00       		.byte	0
 857 0328 0E       		.uleb128 0xe
 858 0329 00000000 		.4byte	.LASF38
 859 032d 01       		.byte	0x1
 860 032e 85       		.byte	0x85
 861 032f F3000000 		.4byte	0xf3
 862 0333 05       		.uleb128 0x5
 863 0334 03       		.byte	0x3
 864 0335 00000000 		.4byte	uxCriticalNesting
 865 0339 1E       		.uleb128 0x1e
 866 033a 0E010000 		.4byte	.LASF48
 867 033e 07       		.byte	0x7
 868 033f 1207     		.2byte	0x712
 869 0341 45030000 		.4byte	0x345
 870 0345 06       		.uleb128 0x6
 871 0346 88000000 		.4byte	0x88
 872 034a 1F       		.uleb128 0x1f
 873 034b 4A010000 		.4byte	.LASF39
 874 034f 4A010000 		.4byte	.LASF39
 875 0353 06       		.byte	0x6
 876 0354 2709     		.2byte	0x927
 877 0356 1F       		.uleb128 0x1f
 878 0357 8C000000 		.4byte	.LASF40
 879 035b 8C000000 		.4byte	.LASF40
 880 035f 06       		.byte	0x6
 881 0360 7B09     		.2byte	0x97b
 882 0362 00       		.byte	0
 883              		.section	.debug_abbrev,"",%progbits
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 32


 884              	.Ldebug_abbrev0:
 885 0000 01       		.uleb128 0x1
 886 0001 11       		.uleb128 0x11
 887 0002 01       		.byte	0x1
 888 0003 25       		.uleb128 0x25
 889 0004 0E       		.uleb128 0xe
 890 0005 13       		.uleb128 0x13
 891 0006 0B       		.uleb128 0xb
 892 0007 03       		.uleb128 0x3
 893 0008 0E       		.uleb128 0xe
 894 0009 1B       		.uleb128 0x1b
 895 000a 0E       		.uleb128 0xe
 896 000b 55       		.uleb128 0x55
 897 000c 17       		.uleb128 0x17
 898 000d 11       		.uleb128 0x11
 899 000e 01       		.uleb128 0x1
 900 000f 10       		.uleb128 0x10
 901 0010 17       		.uleb128 0x17
 902 0011 00       		.byte	0
 903 0012 00       		.byte	0
 904 0013 02       		.uleb128 0x2
 905 0014 24       		.uleb128 0x24
 906 0015 00       		.byte	0
 907 0016 0B       		.uleb128 0xb
 908 0017 0B       		.uleb128 0xb
 909 0018 3E       		.uleb128 0x3e
 910 0019 0B       		.uleb128 0xb
 911 001a 03       		.uleb128 0x3
 912 001b 08       		.uleb128 0x8
 913 001c 00       		.byte	0
 914 001d 00       		.byte	0
 915 001e 03       		.uleb128 0x3
 916 001f 24       		.uleb128 0x24
 917 0020 00       		.byte	0
 918 0021 0B       		.uleb128 0xb
 919 0022 0B       		.uleb128 0xb
 920 0023 3E       		.uleb128 0x3e
 921 0024 0B       		.uleb128 0xb
 922 0025 03       		.uleb128 0x3
 923 0026 0E       		.uleb128 0xe
 924 0027 00       		.byte	0
 925 0028 00       		.byte	0
 926 0029 04       		.uleb128 0x4
 927 002a 16       		.uleb128 0x16
 928 002b 00       		.byte	0
 929 002c 03       		.uleb128 0x3
 930 002d 0E       		.uleb128 0xe
 931 002e 3A       		.uleb128 0x3a
 932 002f 0B       		.uleb128 0xb
 933 0030 3B       		.uleb128 0x3b
 934 0031 0B       		.uleb128 0xb
 935 0032 49       		.uleb128 0x49
 936 0033 13       		.uleb128 0x13
 937 0034 00       		.byte	0
 938 0035 00       		.byte	0
 939 0036 05       		.uleb128 0x5
 940 0037 0F       		.uleb128 0xf
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 33


 941 0038 00       		.byte	0
 942 0039 0B       		.uleb128 0xb
 943 003a 0B       		.uleb128 0xb
 944 003b 00       		.byte	0
 945 003c 00       		.byte	0
 946 003d 06       		.uleb128 0x6
 947 003e 35       		.uleb128 0x35
 948 003f 00       		.byte	0
 949 0040 49       		.uleb128 0x49
 950 0041 13       		.uleb128 0x13
 951 0042 00       		.byte	0
 952 0043 00       		.byte	0
 953 0044 07       		.uleb128 0x7
 954 0045 0F       		.uleb128 0xf
 955 0046 00       		.byte	0
 956 0047 0B       		.uleb128 0xb
 957 0048 0B       		.uleb128 0xb
 958 0049 49       		.uleb128 0x49
 959 004a 13       		.uleb128 0x13
 960 004b 00       		.byte	0
 961 004c 00       		.byte	0
 962 004d 08       		.uleb128 0x8
 963 004e 15       		.uleb128 0x15
 964 004f 01       		.byte	0x1
 965 0050 27       		.uleb128 0x27
 966 0051 19       		.uleb128 0x19
 967 0052 01       		.uleb128 0x1
 968 0053 13       		.uleb128 0x13
 969 0054 00       		.byte	0
 970 0055 00       		.byte	0
 971 0056 09       		.uleb128 0x9
 972 0057 05       		.uleb128 0x5
 973 0058 00       		.byte	0
 974 0059 49       		.uleb128 0x49
 975 005a 13       		.uleb128 0x13
 976 005b 00       		.byte	0
 977 005c 00       		.byte	0
 978 005d 0A       		.uleb128 0xa
 979 005e 2E       		.uleb128 0x2e
 980 005f 01       		.byte	0x1
 981 0060 03       		.uleb128 0x3
 982 0061 0E       		.uleb128 0xe
 983 0062 3A       		.uleb128 0x3a
 984 0063 0B       		.uleb128 0xb
 985 0064 3B       		.uleb128 0x3b
 986 0065 0B       		.uleb128 0xb
 987 0066 27       		.uleb128 0x27
 988 0067 19       		.uleb128 0x19
 989 0068 20       		.uleb128 0x20
 990 0069 0B       		.uleb128 0xb
 991 006a 01       		.uleb128 0x1
 992 006b 13       		.uleb128 0x13
 993 006c 00       		.byte	0
 994 006d 00       		.byte	0
 995 006e 0B       		.uleb128 0xb
 996 006f 34       		.uleb128 0x34
 997 0070 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 34


 998 0071 03       		.uleb128 0x3
 999 0072 0E       		.uleb128 0xe
 1000 0073 3A       		.uleb128 0x3a
 1001 0074 0B       		.uleb128 0xb
 1002 0075 3B       		.uleb128 0x3b
 1003 0076 0B       		.uleb128 0xb
 1004 0077 49       		.uleb128 0x49
 1005 0078 13       		.uleb128 0x13
 1006 0079 00       		.byte	0
 1007 007a 00       		.byte	0
 1008 007b 0C       		.uleb128 0xc
 1009 007c 05       		.uleb128 0x5
 1010 007d 00       		.byte	0
 1011 007e 03       		.uleb128 0x3
 1012 007f 0E       		.uleb128 0xe
 1013 0080 3A       		.uleb128 0x3a
 1014 0081 0B       		.uleb128 0xb
 1015 0082 3B       		.uleb128 0x3b
 1016 0083 0B       		.uleb128 0xb
 1017 0084 49       		.uleb128 0x49
 1018 0085 13       		.uleb128 0x13
 1019 0086 00       		.byte	0
 1020 0087 00       		.byte	0
 1021 0088 0D       		.uleb128 0xd
 1022 0089 2E       		.uleb128 0x2e
 1023 008a 01       		.byte	0x1
 1024 008b 03       		.uleb128 0x3
 1025 008c 0E       		.uleb128 0xe
 1026 008d 3A       		.uleb128 0x3a
 1027 008e 0B       		.uleb128 0xb
 1028 008f 3B       		.uleb128 0x3b
 1029 0090 0B       		.uleb128 0xb
 1030 0091 27       		.uleb128 0x27
 1031 0092 19       		.uleb128 0x19
 1032 0093 11       		.uleb128 0x11
 1033 0094 01       		.uleb128 0x1
 1034 0095 12       		.uleb128 0x12
 1035 0096 06       		.uleb128 0x6
 1036 0097 40       		.uleb128 0x40
 1037 0098 18       		.uleb128 0x18
 1038 0099 9742     		.uleb128 0x2117
 1039 009b 19       		.uleb128 0x19
 1040 009c 01       		.uleb128 0x1
 1041 009d 13       		.uleb128 0x13
 1042 009e 00       		.byte	0
 1043 009f 00       		.byte	0
 1044 00a0 0E       		.uleb128 0xe
 1045 00a1 34       		.uleb128 0x34
 1046 00a2 00       		.byte	0
 1047 00a3 03       		.uleb128 0x3
 1048 00a4 0E       		.uleb128 0xe
 1049 00a5 3A       		.uleb128 0x3a
 1050 00a6 0B       		.uleb128 0xb
 1051 00a7 3B       		.uleb128 0x3b
 1052 00a8 0B       		.uleb128 0xb
 1053 00a9 49       		.uleb128 0x49
 1054 00aa 13       		.uleb128 0x13
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 35


 1055 00ab 02       		.uleb128 0x2
 1056 00ac 18       		.uleb128 0x18
 1057 00ad 00       		.byte	0
 1058 00ae 00       		.byte	0
 1059 00af 0F       		.uleb128 0xf
 1060 00b0 1D       		.uleb128 0x1d
 1061 00b1 01       		.byte	0x1
 1062 00b2 31       		.uleb128 0x31
 1063 00b3 13       		.uleb128 0x13
 1064 00b4 11       		.uleb128 0x11
 1065 00b5 01       		.uleb128 0x1
 1066 00b6 12       		.uleb128 0x12
 1067 00b7 06       		.uleb128 0x6
 1068 00b8 58       		.uleb128 0x58
 1069 00b9 0B       		.uleb128 0xb
 1070 00ba 59       		.uleb128 0x59
 1071 00bb 0B       		.uleb128 0xb
 1072 00bc 00       		.byte	0
 1073 00bd 00       		.byte	0
 1074 00be 10       		.uleb128 0x10
 1075 00bf 0B       		.uleb128 0xb
 1076 00c0 01       		.byte	0x1
 1077 00c1 11       		.uleb128 0x11
 1078 00c2 01       		.uleb128 0x1
 1079 00c3 12       		.uleb128 0x12
 1080 00c4 06       		.uleb128 0x6
 1081 00c5 00       		.byte	0
 1082 00c6 00       		.byte	0
 1083 00c7 11       		.uleb128 0x11
 1084 00c8 34       		.uleb128 0x34
 1085 00c9 00       		.byte	0
 1086 00ca 31       		.uleb128 0x31
 1087 00cb 13       		.uleb128 0x13
 1088 00cc 00       		.byte	0
 1089 00cd 00       		.byte	0
 1090 00ce 12       		.uleb128 0x12
 1091 00cf 2E       		.uleb128 0x2e
 1092 00d0 00       		.byte	0
 1093 00d1 03       		.uleb128 0x3
 1094 00d2 0E       		.uleb128 0xe
 1095 00d3 3A       		.uleb128 0x3a
 1096 00d4 0B       		.uleb128 0xb
 1097 00d5 3B       		.uleb128 0x3b
 1098 00d6 0B       		.uleb128 0xb
 1099 00d7 27       		.uleb128 0x27
 1100 00d8 19       		.uleb128 0x19
 1101 00d9 11       		.uleb128 0x11
 1102 00da 01       		.uleb128 0x1
 1103 00db 12       		.uleb128 0x12
 1104 00dc 06       		.uleb128 0x6
 1105 00dd 40       		.uleb128 0x40
 1106 00de 18       		.uleb128 0x18
 1107 00df 9742     		.uleb128 0x2117
 1108 00e1 19       		.uleb128 0x19
 1109 00e2 00       		.byte	0
 1110 00e3 00       		.byte	0
 1111 00e4 13       		.uleb128 0x13
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 36


 1112 00e5 2E       		.uleb128 0x2e
 1113 00e6 01       		.byte	0x1
 1114 00e7 3F       		.uleb128 0x3f
 1115 00e8 19       		.uleb128 0x19
 1116 00e9 03       		.uleb128 0x3
 1117 00ea 0E       		.uleb128 0xe
 1118 00eb 3A       		.uleb128 0x3a
 1119 00ec 0B       		.uleb128 0xb
 1120 00ed 3B       		.uleb128 0x3b
 1121 00ee 0B       		.uleb128 0xb
 1122 00ef 27       		.uleb128 0x27
 1123 00f0 19       		.uleb128 0x19
 1124 00f1 49       		.uleb128 0x49
 1125 00f2 13       		.uleb128 0x13
 1126 00f3 11       		.uleb128 0x11
 1127 00f4 01       		.uleb128 0x1
 1128 00f5 12       		.uleb128 0x12
 1129 00f6 06       		.uleb128 0x6
 1130 00f7 40       		.uleb128 0x40
 1131 00f8 18       		.uleb128 0x18
 1132 00f9 9742     		.uleb128 0x2117
 1133 00fb 19       		.uleb128 0x19
 1134 00fc 01       		.uleb128 0x1
 1135 00fd 13       		.uleb128 0x13
 1136 00fe 00       		.byte	0
 1137 00ff 00       		.byte	0
 1138 0100 14       		.uleb128 0x14
 1139 0101 05       		.uleb128 0x5
 1140 0102 00       		.byte	0
 1141 0103 03       		.uleb128 0x3
 1142 0104 0E       		.uleb128 0xe
 1143 0105 3A       		.uleb128 0x3a
 1144 0106 0B       		.uleb128 0xb
 1145 0107 3B       		.uleb128 0x3b
 1146 0108 0B       		.uleb128 0xb
 1147 0109 49       		.uleb128 0x49
 1148 010a 13       		.uleb128 0x13
 1149 010b 02       		.uleb128 0x2
 1150 010c 17       		.uleb128 0x17
 1151 010d 00       		.byte	0
 1152 010e 00       		.byte	0
 1153 010f 15       		.uleb128 0x15
 1154 0110 05       		.uleb128 0x5
 1155 0111 00       		.byte	0
 1156 0112 03       		.uleb128 0x3
 1157 0113 0E       		.uleb128 0xe
 1158 0114 3A       		.uleb128 0x3a
 1159 0115 0B       		.uleb128 0xb
 1160 0116 3B       		.uleb128 0x3b
 1161 0117 0B       		.uleb128 0xb
 1162 0118 49       		.uleb128 0x49
 1163 0119 13       		.uleb128 0x13
 1164 011a 02       		.uleb128 0x2
 1165 011b 18       		.uleb128 0x18
 1166 011c 00       		.byte	0
 1167 011d 00       		.byte	0
 1168 011e 16       		.uleb128 0x16
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 37


 1169 011f 2E       		.uleb128 0x2e
 1170 0120 00       		.byte	0
 1171 0121 3F       		.uleb128 0x3f
 1172 0122 19       		.uleb128 0x19
 1173 0123 03       		.uleb128 0x3
 1174 0124 0E       		.uleb128 0xe
 1175 0125 3A       		.uleb128 0x3a
 1176 0126 0B       		.uleb128 0xb
 1177 0127 3B       		.uleb128 0x3b
 1178 0128 0B       		.uleb128 0xb
 1179 0129 27       		.uleb128 0x27
 1180 012a 19       		.uleb128 0x19
 1181 012b 11       		.uleb128 0x11
 1182 012c 01       		.uleb128 0x1
 1183 012d 12       		.uleb128 0x12
 1184 012e 06       		.uleb128 0x6
 1185 012f 40       		.uleb128 0x40
 1186 0130 18       		.uleb128 0x18
 1187 0131 9742     		.uleb128 0x2117
 1188 0133 19       		.uleb128 0x19
 1189 0134 00       		.byte	0
 1190 0135 00       		.byte	0
 1191 0136 17       		.uleb128 0x17
 1192 0137 2E       		.uleb128 0x2e
 1193 0138 00       		.byte	0
 1194 0139 3F       		.uleb128 0x3f
 1195 013a 19       		.uleb128 0x19
 1196 013b 03       		.uleb128 0x3
 1197 013c 0E       		.uleb128 0xe
 1198 013d 3A       		.uleb128 0x3a
 1199 013e 0B       		.uleb128 0xb
 1200 013f 3B       		.uleb128 0x3b
 1201 0140 05       		.uleb128 0x5
 1202 0141 27       		.uleb128 0x27
 1203 0142 19       		.uleb128 0x19
 1204 0143 11       		.uleb128 0x11
 1205 0144 01       		.uleb128 0x1
 1206 0145 12       		.uleb128 0x12
 1207 0146 06       		.uleb128 0x6
 1208 0147 40       		.uleb128 0x40
 1209 0148 18       		.uleb128 0x18
 1210 0149 9742     		.uleb128 0x2117
 1211 014b 19       		.uleb128 0x19
 1212 014c 00       		.byte	0
 1213 014d 00       		.byte	0
 1214 014e 18       		.uleb128 0x18
 1215 014f 2E       		.uleb128 0x2e
 1216 0150 01       		.byte	0x1
 1217 0151 3F       		.uleb128 0x3f
 1218 0152 19       		.uleb128 0x19
 1219 0153 03       		.uleb128 0x3
 1220 0154 0E       		.uleb128 0xe
 1221 0155 3A       		.uleb128 0x3a
 1222 0156 0B       		.uleb128 0xb
 1223 0157 3B       		.uleb128 0x3b
 1224 0158 05       		.uleb128 0x5
 1225 0159 27       		.uleb128 0x27
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 38


 1226 015a 19       		.uleb128 0x19
 1227 015b 11       		.uleb128 0x11
 1228 015c 01       		.uleb128 0x1
 1229 015d 12       		.uleb128 0x12
 1230 015e 06       		.uleb128 0x6
 1231 015f 40       		.uleb128 0x40
 1232 0160 18       		.uleb128 0x18
 1233 0161 9742     		.uleb128 0x2117
 1234 0163 19       		.uleb128 0x19
 1235 0164 01       		.uleb128 0x1
 1236 0165 13       		.uleb128 0x13
 1237 0166 00       		.byte	0
 1238 0167 00       		.byte	0
 1239 0168 19       		.uleb128 0x19
 1240 0169 1D       		.uleb128 0x1d
 1241 016a 01       		.byte	0x1
 1242 016b 31       		.uleb128 0x31
 1243 016c 13       		.uleb128 0x13
 1244 016d 11       		.uleb128 0x11
 1245 016e 01       		.uleb128 0x1
 1246 016f 12       		.uleb128 0x12
 1247 0170 06       		.uleb128 0x6
 1248 0171 58       		.uleb128 0x58
 1249 0172 0B       		.uleb128 0xb
 1250 0173 59       		.uleb128 0x59
 1251 0174 05       		.uleb128 0x5
 1252 0175 00       		.byte	0
 1253 0176 00       		.byte	0
 1254 0177 1A       		.uleb128 0x1a
 1255 0178 05       		.uleb128 0x5
 1256 0179 00       		.byte	0
 1257 017a 31       		.uleb128 0x31
 1258 017b 13       		.uleb128 0x13
 1259 017c 02       		.uleb128 0x2
 1260 017d 17       		.uleb128 0x17
 1261 017e 00       		.byte	0
 1262 017f 00       		.byte	0
 1263 0180 1B       		.uleb128 0x1b
 1264 0181 1D       		.uleb128 0x1d
 1265 0182 01       		.byte	0x1
 1266 0183 31       		.uleb128 0x31
 1267 0184 13       		.uleb128 0x13
 1268 0185 11       		.uleb128 0x11
 1269 0186 01       		.uleb128 0x1
 1270 0187 12       		.uleb128 0x12
 1271 0188 06       		.uleb128 0x6
 1272 0189 58       		.uleb128 0x58
 1273 018a 0B       		.uleb128 0xb
 1274 018b 59       		.uleb128 0x59
 1275 018c 05       		.uleb128 0x5
 1276 018d 01       		.uleb128 0x1
 1277 018e 13       		.uleb128 0x13
 1278 018f 00       		.byte	0
 1279 0190 00       		.byte	0
 1280 0191 1C       		.uleb128 0x1c
 1281 0192 898201   		.uleb128 0x4109
 1282 0195 00       		.byte	0
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 39


 1283 0196 11       		.uleb128 0x11
 1284 0197 01       		.uleb128 0x1
 1285 0198 31       		.uleb128 0x31
 1286 0199 13       		.uleb128 0x13
 1287 019a 00       		.byte	0
 1288 019b 00       		.byte	0
 1289 019c 1D       		.uleb128 0x1d
 1290 019d 2E       		.uleb128 0x2e
 1291 019e 01       		.byte	0x1
 1292 019f 3F       		.uleb128 0x3f
 1293 01a0 19       		.uleb128 0x19
 1294 01a1 03       		.uleb128 0x3
 1295 01a2 0E       		.uleb128 0xe
 1296 01a3 3A       		.uleb128 0x3a
 1297 01a4 0B       		.uleb128 0xb
 1298 01a5 3B       		.uleb128 0x3b
 1299 01a6 05       		.uleb128 0x5
 1300 01a7 27       		.uleb128 0x27
 1301 01a8 19       		.uleb128 0x19
 1302 01a9 49       		.uleb128 0x49
 1303 01aa 13       		.uleb128 0x13
 1304 01ab 11       		.uleb128 0x11
 1305 01ac 01       		.uleb128 0x1
 1306 01ad 12       		.uleb128 0x12
 1307 01ae 06       		.uleb128 0x6
 1308 01af 40       		.uleb128 0x40
 1309 01b0 18       		.uleb128 0x18
 1310 01b1 9742     		.uleb128 0x2117
 1311 01b3 19       		.uleb128 0x19
 1312 01b4 01       		.uleb128 0x1
 1313 01b5 13       		.uleb128 0x13
 1314 01b6 00       		.byte	0
 1315 01b7 00       		.byte	0
 1316 01b8 1E       		.uleb128 0x1e
 1317 01b9 34       		.uleb128 0x34
 1318 01ba 00       		.byte	0
 1319 01bb 03       		.uleb128 0x3
 1320 01bc 0E       		.uleb128 0xe
 1321 01bd 3A       		.uleb128 0x3a
 1322 01be 0B       		.uleb128 0xb
 1323 01bf 3B       		.uleb128 0x3b
 1324 01c0 05       		.uleb128 0x5
 1325 01c1 49       		.uleb128 0x49
 1326 01c2 13       		.uleb128 0x13
 1327 01c3 3F       		.uleb128 0x3f
 1328 01c4 19       		.uleb128 0x19
 1329 01c5 3C       		.uleb128 0x3c
 1330 01c6 19       		.uleb128 0x19
 1331 01c7 00       		.byte	0
 1332 01c8 00       		.byte	0
 1333 01c9 1F       		.uleb128 0x1f
 1334 01ca 2E       		.uleb128 0x2e
 1335 01cb 00       		.byte	0
 1336 01cc 3F       		.uleb128 0x3f
 1337 01cd 19       		.uleb128 0x19
 1338 01ce 3C       		.uleb128 0x3c
 1339 01cf 19       		.uleb128 0x19
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 40


 1340 01d0 6E       		.uleb128 0x6e
 1341 01d1 0E       		.uleb128 0xe
 1342 01d2 03       		.uleb128 0x3
 1343 01d3 0E       		.uleb128 0xe
 1344 01d4 3A       		.uleb128 0x3a
 1345 01d5 0B       		.uleb128 0xb
 1346 01d6 3B       		.uleb128 0x3b
 1347 01d7 05       		.uleb128 0x5
 1348 01d8 00       		.byte	0
 1349 01d9 00       		.byte	0
 1350 01da 00       		.byte	0
 1351              		.section	.debug_loc,"",%progbits
 1352              	.Ldebug_loc0:
 1353              	.LLST0:
 1354 0000 00000000 		.4byte	.LVL1
 1355 0004 00000000 		.4byte	.LVL1
 1356 0008 0100     		.2byte	0x1
 1357 000a 50       		.byte	0x50
 1358 000b 00000000 		.4byte	.LVL1
 1359 000f 08000000 		.4byte	.LVL2
 1360 0013 0300     		.2byte	0x3
 1361 0015 70       		.byte	0x70
 1362 0016 7C       		.sleb128 -4
 1363 0017 9F       		.byte	0x9f
 1364 0018 08000000 		.4byte	.LVL2
 1365 001c 10000000 		.4byte	.LVL4
 1366 0020 0300     		.2byte	0x3
 1367 0022 70       		.byte	0x70
 1368 0023 78       		.sleb128 -8
 1369 0024 9F       		.byte	0x9f
 1370 0025 10000000 		.4byte	.LVL4
 1371 0029 16000000 		.4byte	.LVL5
 1372 002d 0300     		.2byte	0x3
 1373 002f 70       		.byte	0x70
 1374 0030 74       		.sleb128 -12
 1375 0031 9F       		.byte	0x9f
 1376 0032 16000000 		.4byte	.LVL5
 1377 0036 1A000000 		.4byte	.LVL6
 1378 003a 0300     		.2byte	0x3
 1379 003c 70       		.byte	0x70
 1380 003d 60       		.sleb128 -32
 1381 003e 9F       		.byte	0x9f
 1382 003f 1A000000 		.4byte	.LVL6
 1383 0043 1C000000 		.4byte	.LVL7
 1384 0047 0300     		.2byte	0x3
 1385 0049 70       		.byte	0x70
 1386 004a 40       		.sleb128 -64
 1387 004b 9F       		.byte	0x9f
 1388 004c 1C000000 		.4byte	.LVL7
 1389 0050 24000000 		.4byte	.LFE68
 1390 0054 0100     		.2byte	0x1
 1391 0056 50       		.byte	0x50
 1392 0057 00000000 		.4byte	0
 1393 005b 00000000 		.4byte	0
 1394              	.LLST1:
 1395 005f 00000000 		.4byte	.LVL1
 1396 0063 0C000000 		.4byte	.LVL3
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 41


 1397 0067 0100     		.2byte	0x1
 1398 0069 51       		.byte	0x51
 1399 006a 0C000000 		.4byte	.LVL3
 1400 006e 24000000 		.4byte	.LFE68
 1401 0072 0400     		.2byte	0x4
 1402 0074 F3       		.byte	0xf3
 1403 0075 01       		.uleb128 0x1
 1404 0076 51       		.byte	0x51
 1405 0077 9F       		.byte	0x9f
 1406 0078 00000000 		.4byte	0
 1407 007c 00000000 		.4byte	0
 1408              	.LLST2:
 1409 0080 0A000000 		.4byte	.LVL8
 1410 0084 0E000000 		.4byte	.LVL9
 1411 0088 0200     		.2byte	0x2
 1412 008a 30       		.byte	0x30
 1413 008b 9F       		.byte	0x9f
 1414 008c 00000000 		.4byte	0
 1415 0090 00000000 		.4byte	0
 1416              	.LLST3:
 1417 0094 20000000 		.4byte	.LVL11
 1418 0098 26000000 		.4byte	.LVL12
 1419 009c 0200     		.2byte	0x2
 1420 009e 30       		.byte	0x30
 1421 009f 9F       		.byte	0x9f
 1422 00a0 00000000 		.4byte	0
 1423 00a4 00000000 		.4byte	0
 1424              		.section	.debug_aranges,"",%progbits
 1425 0000 6C000000 		.4byte	0x6c
 1426 0004 0200     		.2byte	0x2
 1427 0006 00000000 		.4byte	.Ldebug_info0
 1428 000a 04       		.byte	0x4
 1429 000b 00       		.byte	0
 1430 000c 0000     		.2byte	0
 1431 000e 0000     		.2byte	0
 1432 0010 00000000 		.4byte	.LFB69
 1433 0014 20000000 		.4byte	.LFE69-.LFB69
 1434 0018 00000000 		.4byte	.LFB71
 1435 001c 1A000000 		.4byte	.LFE71-.LFB71
 1436 0020 00000000 		.4byte	.LFB68
 1437 0024 24000000 		.4byte	.LFE68-.LFB68
 1438 0028 00000000 		.4byte	.LFB70
 1439 002c 24000000 		.4byte	.LFE70-.LFB70
 1440 0030 00000000 		.4byte	.LFB73
 1441 0034 02000000 		.4byte	.LFE73-.LFB73
 1442 0038 00000000 		.4byte	.LFB74
 1443 003c 20000000 		.4byte	.LFE74-.LFB74
 1444 0040 00000000 		.4byte	.LFB75
 1445 0044 14000000 		.4byte	.LFE75-.LFB75
 1446 0048 00000000 		.4byte	.LFB76
 1447 004c 44000000 		.4byte	.LFE76-.LFB76
 1448 0050 00000000 		.4byte	.LFB77
 1449 0054 2C000000 		.4byte	.LFE77-.LFB77
 1450 0058 00000000 		.4byte	.LFB78
 1451 005c 28000000 		.4byte	.LFE78-.LFB78
 1452 0060 00000000 		.4byte	.LFB72
 1453 0064 38000000 		.4byte	.LFE72-.LFB72
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 42


 1454 0068 00000000 		.4byte	0
 1455 006c 00000000 		.4byte	0
 1456              		.section	.debug_ranges,"",%progbits
 1457              	.Ldebug_ranges0:
 1458 0000 00000000 		.4byte	.LFB69
 1459 0004 20000000 		.4byte	.LFE69
 1460 0008 00000000 		.4byte	.LFB71
 1461 000c 1A000000 		.4byte	.LFE71
 1462 0010 00000000 		.4byte	.LFB68
 1463 0014 24000000 		.4byte	.LFE68
 1464 0018 00000000 		.4byte	.LFB70
 1465 001c 24000000 		.4byte	.LFE70
 1466 0020 00000000 		.4byte	.LFB73
 1467 0024 02000000 		.4byte	.LFE73
 1468 0028 00000000 		.4byte	.LFB74
 1469 002c 20000000 		.4byte	.LFE74
 1470 0030 00000000 		.4byte	.LFB75
 1471 0034 14000000 		.4byte	.LFE75
 1472 0038 00000000 		.4byte	.LFB76
 1473 003c 44000000 		.4byte	.LFE76
 1474 0040 00000000 		.4byte	.LFB77
 1475 0044 2C000000 		.4byte	.LFE77
 1476 0048 00000000 		.4byte	.LFB78
 1477 004c 28000000 		.4byte	.LFE78
 1478 0050 00000000 		.4byte	.LFB72
 1479 0054 38000000 		.4byte	.LFE72
 1480 0058 00000000 		.4byte	0
 1481 005c 00000000 		.4byte	0
 1482              		.section	.debug_line,"",%progbits
 1483              	.Ldebug_line0:
 1484 0000 AE020000 		.section	.debug_str,"MS",%progbits,1
 1484      0200A101 
 1484      00000201 
 1484      FB0E0D00 
 1484      01010101 
 1485              	.LASF38:
 1486 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1486      69746963 
 1486      616C4E65 
 1486      7374696E 
 1486      6700
 1487              	.LASF30:
 1488 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1488      74456E74 
 1488      65724372 
 1488      69746963 
 1488      616C00
 1489              	.LASF26:
 1490 0025 7078436F 		.ascii	"pxCode\000"
 1490      646500
 1491              	.LASF29:
 1492 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1492      74456E64 
 1492      53636865 
 1492      64756C65 
 1492      7200
 1493              	.LASF22:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 43


 1494 003e 5469636B 		.ascii	"TickType_t\000"
 1494      54797065 
 1494      5F7400
 1495              	.LASF8:
 1496 0049 5F5F696E 		.ascii	"__int32_t\000"
 1496      7433325F 
 1496      7400
 1497              	.LASF7:
 1498 0053 6C6F6E67 		.ascii	"long int\000"
 1498      20696E74 
 1498      00
 1499              	.LASF32:
 1500 005c 78506F72 		.ascii	"xPortPendSVHandler\000"
 1500      7450656E 
 1500      64535648 
 1500      616E646C 
 1500      657200
 1501              	.LASF18:
 1502 006f 5461736B 		.ascii	"TaskFunction_t\000"
 1502      46756E63 
 1502      74696F6E 
 1502      5F7400
 1503              	.LASF12:
 1504 007e 696E7433 		.ascii	"int32_t\000"
 1504      325F7400 
 1505              	.LASF14:
 1506 0086 666C6F61 		.ascii	"float\000"
 1506      7400
 1507              	.LASF40:
 1508 008c 76546173 		.ascii	"vTaskSwitchContext\000"
 1508      6B537769 
 1508      74636843 
 1508      6F6E7465 
 1508      787400
 1509              	.LASF37:
 1510 009f 756C4475 		.ascii	"ulDummy\000"
 1510      6D6D7900 
 1511              	.LASF21:
 1512 00a7 55426173 		.ascii	"UBaseType_t\000"
 1512      65547970 
 1512      655F7400 
 1513              	.LASF42:
 1514 00b3 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS\\portable\\GCC\\ARM_CM3\\port.c\000"
 1514      2E5C4672 
 1514      65655254 
 1514      4F535C70 
 1514      6F727461 
 1515              	.LASF9:
 1516 00de 5F5F7569 		.ascii	"__uint32_t\000"
 1516      6E743332 
 1516      5F7400
 1517              	.LASF10:
 1518 00e9 6C6F6E67 		.ascii	"long unsigned int\000"
 1518      20756E73 
 1518      69676E65 
 1518      6420696E 
 1518      7400
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 44


 1519              	.LASF6:
 1520 00fb 73686F72 		.ascii	"short unsigned int\000"
 1520      7420756E 
 1520      7369676E 
 1520      65642069 
 1520      6E7400
 1521              	.LASF48:
 1522 010e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1522      52784275 
 1522      66666572 
 1522      00
 1523              	.LASF4:
 1524 011b 756E7369 		.ascii	"unsigned char\000"
 1524      676E6564 
 1524      20636861 
 1524      7200
 1525              	.LASF15:
 1526 0129 646F7562 		.ascii	"double\000"
 1526      6C6500
 1527              	.LASF44:
 1528 0130 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1528      77424153 
 1528      45505249 
 1528      00
 1529              	.LASF27:
 1530 013d 70765061 		.ascii	"pvParameters\000"
 1530      72616D65 
 1530      74657273 
 1530      00
 1531              	.LASF39:
 1532 014a 78546173 		.ascii	"xTaskIncrementTick\000"
 1532      6B496E63 
 1532      72656D65 
 1532      6E745469 
 1532      636B00
 1533              	.LASF24:
 1534 015d 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1534      74536574 
 1534      42415345 
 1534      50524900 
 1535              	.LASF33:
 1536 016d 78506F72 		.ascii	"xPortSysTickHandler\000"
 1536      74537973 
 1536      5469636B 
 1536      48616E64 
 1536      6C657200 
 1537              	.LASF0:
 1538 0181 756E7369 		.ascii	"unsigned int\000"
 1538      676E6564 
 1538      20696E74 
 1538      00
 1539              	.LASF25:
 1540 018e 7078546F 		.ascii	"pxTopOfStack\000"
 1540      704F6653 
 1540      7461636B 
 1540      00
 1541              	.LASF11:
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 45


 1542 019b 6C6F6E67 		.ascii	"long long unsigned int\000"
 1542      206C6F6E 
 1542      6720756E 
 1542      7369676E 
 1542      65642069 
 1543              	.LASF23:
 1544 01b2 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1544      74526169 
 1544      73654241 
 1544      53455052 
 1544      4900
 1545              	.LASF46:
 1546 01c4 70727654 		.ascii	"prvTaskExitError\000"
 1546      61736B45 
 1546      78697445 
 1546      72726F72 
 1546      00
 1547              	.LASF41:
 1548 01d5 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1548      43313120 
 1548      352E342E 
 1548      31203230 
 1548      31363036 
 1549 0208 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1549      20726576 
 1549      6973696F 
 1549      6E203233 
 1549      37373135 
 1550 023b 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1550      66756E63 
 1550      74696F6E 
 1550      2D736563 
 1550      74696F6E 
 1551              	.LASF34:
 1552 0263 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1552      74536574 
 1552      75705469 
 1552      6D657249 
 1552      6E746572 
 1553              	.LASF17:
 1554 027c 73697A65 		.ascii	"sizetype\000"
 1554      74797065 
 1554      00
 1555              	.LASF1:
 1556 0285 6C6F6E67 		.ascii	"long long int\000"
 1556      206C6F6E 
 1556      6720696E 
 1556      7400
 1557              	.LASF16:
 1558 0293 63686172 		.ascii	"char\000"
 1558      00
 1559              	.LASF19:
 1560 0298 53746163 		.ascii	"StackType_t\000"
 1560      6B547970 
 1560      655F7400 
 1561              	.LASF28:
 1562 02a4 76506F72 		.ascii	"vPortSVCHandler\000"
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 46


 1562      74535643 
 1562      48616E64 
 1562      6C657200 
 1563              	.LASF5:
 1564 02b4 73686F72 		.ascii	"short int\000"
 1564      7420696E 
 1564      7400
 1565              	.LASF31:
 1566 02be 76506F72 		.ascii	"vPortExitCritical\000"
 1566      74457869 
 1566      74437269 
 1566      74696361 
 1566      6C00
 1567              	.LASF13:
 1568 02d0 75696E74 		.ascii	"uint32_t\000"
 1568      33325F74 
 1568      00
 1569              	.LASF45:
 1570 02d9 756C4E65 		.ascii	"ulNewMaskValue\000"
 1570      774D6173 
 1570      6B56616C 
 1570      756500
 1571              	.LASF20:
 1572 02e8 42617365 		.ascii	"BaseType_t\000"
 1572      54797065 
 1572      5F7400
 1573              	.LASF47:
 1574 02f3 70727650 		.ascii	"prvPortStartFirstTask\000"
 1574      6F727453 
 1574      74617274 
 1574      46697273 
 1574      74546173 
 1575              	.LASF2:
 1576 0309 6C6F6E67 		.ascii	"long double\000"
 1576      20646F75 
 1576      626C6500 
 1577              	.LASF3:
 1578 0315 7369676E 		.ascii	"signed char\000"
 1578      65642063 
 1578      68617200 
 1579              	.LASF36:
 1580 0321 78506F72 		.ascii	"xPortStartScheduler\000"
 1580      74537461 
 1580      72745363 
 1580      68656475 
 1580      6C657200 
 1581              	.LASF43:
 1582 0335 433A5C55 		.ascii	"C:\\Users\\vincent\\Documents\\PSoC Creator\\Reform"
 1582      73657273 
 1582      5C76696E 
 1582      63656E74 
 1582      5C446F63 
 1583 0363 6174576F 		.ascii	"atWorkspace\\Project1A.cydsn\000"
 1583      726B7370 
 1583      6163655C 
 1583      50726F6A 
 1583      65637431 
ARM GAS  C:\Users\vincent\AppData\Local\Temp\ccW9xA0E.s 			page 47


 1584              	.LASF35:
 1585 037f 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1585      7274496E 
 1585      69746961 
 1585      6C697365 
 1585      53746163 
 1586              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
